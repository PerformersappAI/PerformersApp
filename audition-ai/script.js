// const fs = require("fs");
// const path = require("path");

// // 👇 paste your JSON array here
// const data = [
//   {
//     "name": ".env",
//     "contents": "VITE_SUPABASE_PROJECT_ID=\"cqlczzkyktktaajbfmli\"\nVITE_SUPABASE_PUBLISHABLE_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNxbGN6emt5a3RrdGFhamJmbWxpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3MTY2MDUsImV4cCI6MjA2NjI5MjYwNX0.Zw2biXCKS10SiKLo81NCRAFqJCX-lQbO-zjo3HZe5T8\"\nVITE_SUPABASE_URL=\"https://cqlczzkyktktaajbfmli.supabase.co\"\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": ".gitignore",
//     "contents": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\npnpm-debug.log*\nlerna-debug.log*\n\nnode_modules\ndist\ndist-ssr\n*.local\n\n# Editor directories and files\n.vscode/*\n!.vscode/extensions.json\n.idea\n.DS_Store\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "README.md",
//     "contents": "# Welcome to your Lovable project\n\n## Project info\n\n**URL**: https://lovable.dev/projects/34b4bdcb-52a5-4c58-8094-d1f496b20ba5\n\n## How can I edit this code?\n\nThere are several ways of editing your application.\n\n**Use Lovable**\n\nSimply visit the [Lovable Project](https://lovable.dev/projects/34b4bdcb-52a5-4c58-8094-d1f496b20ba5) and start prompting.\n\nChanges made via Lovable will be committed automatically to this repo.\n\n**Use your preferred IDE**\n\nIf you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.\n\nThe only requirement is having Node.js \u0026 npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)\n\nFollow these steps:\n\n```sh\n# Step 1: Clone the repository using the project's Git URL.\ngit clone \u003cYOUR_GIT_URL\u003e\n\n# Step 2: Navigate to the project directory.\ncd \u003cYOUR_PROJECT_NAME\u003e\n\n# Step 3: Install the necessary dependencies.\nnpm i\n\n# Step 4: Start the development server with auto-reloading and an instant preview.\nnpm run dev\n```\n\n**Edit a file directly in GitHub**\n\n- Navigate to the desired file(s).\n- Click the \"Edit\" button (pencil icon) at the top right of the file view.\n- Make your changes and commit the changes.\n\n**Use GitHub Codespaces**\n\n- Navigate to the main page of your repository.\n- Click on the \"Code\" button (green button) near the top right.\n- Select the \"Codespaces\" tab.\n- Click on \"New codespace\" to launch a new Codespace environment.\n- Edit files directly within the Codespace and commit and push your changes once you're done.\n\n## What technologies are used for this project?\n\nThis project is built with:\n\n- Vite\n- TypeScript\n- React\n- shadcn-ui\n- Tailwind CSS\n\n## How can I deploy this project?\n\nSimply open [Lovable](https://lovable.dev/projects/34b4bdcb-52a5-4c58-8094-d1f496b20ba5) and click on Share -\u003e Publish.\n\n## Can I connect a custom domain to my Lovable project?\n\nYes, you can!\n\nTo connect a domain, navigate to Project \u003e Settings \u003e Domains and click Connect Domain.\n\nRead more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "bun.lockb",
//     "binary": true,
//     "sizeExceeded": true
// },
// {
//     "name": "components.json",
//     "contents": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": false,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"src/index.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  }\n}",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "eslint.config.js",
//     "contents": "import js from \"@eslint/js\";\nimport globals from \"globals\";\nimport reactHooks from \"eslint-plugin-react-hooks\";\nimport reactRefresh from \"eslint-plugin-react-refresh\";\nimport tseslint from \"typescript-eslint\";\n\nexport default tseslint.config(\n  { ignores: [\"dist\"] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: [\"**/*.{ts,tsx}\"],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      \"react-hooks\": reactHooks,\n      \"react-refresh\": reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      \"react-refresh/only-export-components\": [\n        \"warn\",\n        { allowConstantExport: true },\n      ],\n      \"@typescript-eslint/no-unused-vars\": \"off\",\n    },\n  }\n);\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "index.html",
//     "contents": "\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n  \u003chead\u003e\n    \u003cmeta charset=\"UTF-8\" /\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e\n    \u003cbase href=\"/\" /\u003e\n    \u003ctitle\u003eMyAuditionAI.com - Transform Your Acting Craft\u003c/title\u003e\n    \u003cmeta name=\"description\" content=\"Professional acting coach AI that elevates your performance through script analysis, character building, and personalized technique development.\" /\u003e\n    \u003cmeta name=\"author\" content=\"MyAuditionAI.com\" /\u003e\n\n    \u003cmeta property=\"og:title\" content=\"MyAuditionAI.com - Transform Your Acting Craft\" /\u003e\n    \u003cmeta property=\"og:description\" content=\"Professional acting coach AI that elevates your performance through script analysis, character building, and personalized technique development.\" /\u003e\n    \u003cmeta property=\"og:type\" content=\"website\" /\u003e\n    \u003cmeta property=\"og:image\" content=\"https://lovable.dev/opengraph-image-p98pqg.png\" /\u003e\n\n    \u003cmeta name=\"twitter:card\" content=\"summary_large_image\" /\u003e\n    \u003cmeta name=\"twitter:site\" content=\"@lovable_dev\" /\u003e\n    \u003cmeta name=\"twitter:image\" content=\"https://lovable.dev/opengraph-image-p98pqg.png\" /\u003e\n  \u003c/head\u003e\n\n  \u003cbody\u003e\n    \u003cdiv id=\"root\"\u003e\u003c/div\u003e\n    \u003cscript type=\"module\" src=\"/src/main.tsx\"\u003e\u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "package.json",
//     "contents": "{\n  \"name\": \"vite_react_shadcn_ts\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"build:dev\": \"vite build --mode development\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@hookform/resolvers\": \"^3.9.0\",\n    \"@radix-ui/react-accordion\": \"^1.2.0\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.1\",\n    \"@radix-ui/react-aspect-ratio\": \"^1.1.0\",\n    \"@radix-ui/react-avatar\": \"^1.1.0\",\n    \"@radix-ui/react-checkbox\": \"^1.1.1\",\n    \"@radix-ui/react-collapsible\": \"^1.1.0\",\n    \"@radix-ui/react-context-menu\": \"^2.2.1\",\n    \"@radix-ui/react-dialog\": \"^1.1.2\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.1\",\n    \"@radix-ui/react-hover-card\": \"^1.1.1\",\n    \"@radix-ui/react-label\": \"^2.1.0\",\n    \"@radix-ui/react-menubar\": \"^1.1.1\",\n    \"@radix-ui/react-navigation-menu\": \"^1.2.0\",\n    \"@radix-ui/react-popover\": \"^1.1.1\",\n    \"@radix-ui/react-progress\": \"^1.1.0\",\n    \"@radix-ui/react-radio-group\": \"^1.2.0\",\n    \"@radix-ui/react-scroll-area\": \"^1.1.0\",\n    \"@radix-ui/react-select\": \"^2.1.1\",\n    \"@radix-ui/react-separator\": \"^1.1.0\",\n    \"@radix-ui/react-slider\": \"^1.2.0\",\n    \"@radix-ui/react-slot\": \"^1.1.0\",\n    \"@radix-ui/react-switch\": \"^1.1.0\",\n    \"@radix-ui/react-tabs\": \"^1.1.0\",\n    \"@radix-ui/react-toast\": \"^1.2.1\",\n    \"@radix-ui/react-toggle\": \"^1.1.0\",\n    \"@radix-ui/react-toggle-group\": \"^1.1.0\",\n    \"@radix-ui/react-tooltip\": \"^1.1.4\",\n    \"@supabase/supabase-js\": \"^2.50.0\",\n    \"@tanstack/react-query\": \"^5.56.2\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"cmdk\": \"^1.0.0\",\n    \"date-fns\": \"^3.6.0\",\n    \"embla-carousel-react\": \"^8.3.0\",\n    \"input-otp\": \"^1.2.4\",\n    \"jspdf\": \"^3.0.1\",\n    \"lucide-react\": \"^0.462.0\",\n    \"next-themes\": \"^0.3.0\",\n    \"pdf-parse\": \"^1.1.1\",\n    \"react\": \"^18.3.1\",\n    \"react-day-picker\": \"^8.10.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.53.0\",\n    \"react-resizable-panels\": \"^2.1.3\",\n    \"react-router-dom\": \"^6.26.2\",\n    \"recharts\": \"^2.12.7\",\n    \"sonner\": \"^1.5.0\",\n    \"tailwind-merge\": \"^2.5.2\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"vaul\": \"^0.9.3\",\n    \"zod\": \"^3.23.8\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.9.0\",\n    \"@tailwindcss/typography\": \"^0.5.16\",\n    \"@types/node\": \"^22.5.5\",\n    \"@types/react\": \"^18.3.3\",\n    \"@types/react-dom\": \"^18.3.0\",\n    \"@vitejs/plugin-react-swc\": \"^3.5.0\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"eslint\": \"^9.9.0\",\n    \"eslint-plugin-react-hooks\": \"^5.1.0-rc.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.9\",\n    \"globals\": \"^15.9.0\",\n    \"lovable-tagger\": \"^1.1.7\",\n    \"postcss\": \"^8.4.47\",\n    \"tailwindcss\": \"^3.4.11\",\n    \"typescript\": \"^5.5.3\",\n    \"typescript-eslint\": \"^8.0.1\",\n    \"vite\": \"^5.4.1\"\n  }\n}\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "postcss.config.js",
//     "contents": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "public/coaches/rick.png",
//     "contents": "\u003c!DOCTYPE html\u003e\u003chtml lang=\"en\"\u003e\u003chead\u003e\u003cmeta charSet=\"utf-8\"/\u003e\u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover, user-scalable=no\"/\u003e\u003clink rel=\"stylesheet\" href=\"/_next/static/css/acf7c57c1c28fc6e.css\" data-precedence=\"next\"/\u003e\u003clink rel=\"stylesheet\" href=\"/_next/static/css/d4db635cc205055a.css\" data-precedence=\"next\"/\u003e\u003clink rel=\"stylesheet\" href=\"/_next/static/css/50809e25ee5695d7.css\" data-precedence=\"next\"/\u003e\u003clink rel=\"stylesheet\" href=\"/_next/static/css/281811c1f3d8bb8a.css\" data-precedence=\"next\"/\u003e\u003clink rel=\"stylesheet\" href=\"/_next/static/css/9218524b4122c5d5.css\" data-precedence=\"next\"/\u003e\u003clink rel=\"preload\" as=\"script\" fetchPriority=\"low\" href=\"/_next/static/chunks/webpack-d9f4e9a879e66f46.js\"/\u003e\u003cscript src=\"/_next/static/chunks/19707774-03abb2cf2d51725a.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/33b52c1e-70497b6f703bed59.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8113-f14fa80fad7ad7ee.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/main-app-71a1122cde7bc15a.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/89cf4ec1-076033b195043650.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/29477964-6906cb520a6f0585.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/e47c052e-3198041c86f8ab5c.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/49a1e609-e2a3d8b1cc9624b6.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/330152ae-532b1d6bf88ceea5.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8628-82ba59b0bbd139fa.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8966-e78416c35743df5b.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9550-7ad2e16139cca945.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/5889-447186d5c584c9bb.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8213-6159666bc9bf909c.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9490-bb9fcf0c1b33ed83.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/3720-be6e2075c260d707.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8345-096bb04821169b6f.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/3139-fbf65dd8393eb8be.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9764-b09917dda37e257c.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/2537-3b3179741da5e25d.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/926-82d27bc972afa2d0.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/7738-88084d65357cbb28.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6919-0274e8cab1ff5120.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9135-1a5ef9b0bd6e2bbc.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/5937-1c5d1b67124aefe9.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/879-c6ac14bccdf102bd.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/1421-aebbf70b34f6b53f.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/4880-24b1f7b85acea37c.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6128-1cd1fd8cecf188be.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/2126-74d8d626d90870ea.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9531-a2b7427d4894250a.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/1174-f0212fd5a2380f51.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/3050-571411d8348264f7.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9034-fda47cd3c48a2434.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/7757-2f4da604d6ff6961.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6077-acd43dfbbc2204fa.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/5931-94d1cedbc9deb86e.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8061-ca25c5aee0b8b6cc.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/2906-f7330558a0c26921.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/5982-de5e0ada108969eb.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/7099-59a99d6d1592034a.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/7883-7146d8dc6d067a0d.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6805-6307e2a174de7c70.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/5302-0fc5a963c913817d.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/4155-9ea59bd438553e61.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/app/(HomeLayout)/layout-b7a9a2f8a03a735a.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6298-b1e023719cc91137.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6006-67e3eba5e79db531.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/1003-679c90e17e3abbe0.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/717-99afeb715c65bbcd.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/4678-0d96f1cb3b35c680.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/app/(HomeLayout)/page-a8aa82e6f41bbfe4.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/c0166af3-b1eb4cd85304c1c2.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/app/layout-32d3f5f012b78de9.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/app/error-1231913338cf101d.js\" async=\"\"\u003e\u003c/script\u003e\u003clink rel=\"preload\" href=\"https://plausible.io/js/script.js\" as=\"script\"/\u003e\u003clink rel=\"preload\" href=\"https://www.googletagmanager.com/gtag/js?id=AW-16786179175\" as=\"script\"/\u003e\u003clink rel=\"preload\" href=\"https://www.googletagmanager.com/gtag/js?id=G-VW0TD1TTTK\" as=\"script\"/\u003e\u003clink rel=\"preload\" href=\"https://r.wdfl.co/rw.js\" as=\"script\"/\u003e\u003clink rel=\"preload\" href=\"https://identity.netlify.com/v1/netlify-identity-widget.js\" as=\"script\"/\u003e\u003clink rel=\"preload\" href=\"https://cdn.delve.co/src/delve-cookie-consent-lovable.js\" as=\"script\"/\u003e\u003cmeta name=\"next-size-adjust\" content=\"\"/\u003e\u003cmeta name=\"theme-color\" content=\"#fcfbf8\"/\u003e\u003ctitle\u003eLovable\u003c/title\u003e\u003cmeta name=\"description\" content=\"Build software products, using only a chat interface\"/\u003e\u003clink rel=\"manifest\" href=\"/manifest.webmanifest\"/\u003e\u003cmeta name=\"keywords\" content=\"lovable,loveable,website builder,ai website builder,no code website builder,software engineer,full stack engineer,product engineer,frontend engineer,backend engineer,ai full stack engineer,ai developer,ai coder,ai engineer,ai software engineer,gpt engineer,gpt coder,gpt software engineer,learn to code,build website,build app,web agency,ai web agency\"/\u003e\u003clink rel=\"canonical\" href=\"https://lovable.dev\"/\u003e\u003cmeta property=\"og:title\" content=\"Lovable\"/\u003e\u003cmeta property=\"og:description\" content=\"Build software products, using only a chat interface\"/\u003e\u003cmeta property=\"og:url\" content=\"https://lovable.dev\"/\u003e\u003cmeta property=\"og:image:type\" content=\"image/png\"/\u003e\u003cmeta property=\"og:image:width\" content=\"1200\"/\u003e\u003cmeta property=\"og:image:height\" content=\"629\"/\u003e\u003cmeta property=\"og:image\" content=\"https://lovable.dev/opengraph-image.png?e7ae4aa2faea9aea\"/\u003e\u003cmeta property=\"og:type\" content=\"website\"/\u003e\u003cmeta name=\"twitter:card\" content=\"summary_large_image\"/\u003e\u003cmeta name=\"twitter:title\" content=\"Lovable\"/\u003e\u003cmeta name=\"twitter:description\" content=\"Build software products, using only a chat interface\"/\u003e\u003cmeta name=\"twitter:image:type\" content=\"image/png\"/\u003e\u003cmeta name=\"twitter:image:width\" content=\"1200\"/\u003e\u003cmeta name=\"twitter:image:height\" content=\"629\"/\u003e\u003cmeta name=\"twitter:image\" content=\"https://lovable.dev/opengraph-image.png?e7ae4aa2faea9aea\"/\u003e\u003clink rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\" sizes=\"73x74\"/\u003e\u003clink rel=\"icon\" href=\"/icon.svg?9e0c9b5bb1bae062\" type=\"image/svg+xml\" sizes=\"any\"/\u003e\u003clink rel=\"apple-touch-icon\" href=\"/apple-icon.png?59950bbf4c03032c\" type=\"image/png\" sizes=\"180x180\"/\u003e\u003cmeta name=\"facebook-domain-verification\" content=\"ttyg85abvlstz5a2zp9pcu87efiu9f\"/\u003e\u003cscript\u003e(self.__next_s=self.__next_s||[]).push([0,{\"children\":\"\\n              if (window.location.hostname === 'lovable.ink') {\\n                const targetDomain = ['lovable', 'dev'].join('.');\\n                window.location.href = window.location.href.replace('lovable.ink', targetDomain);\\n              }\\n            \",\"id\":\"domain-redirect\"}])\u003c/script\u003e\u003cscript\u003e(self.__next_s=self.__next_s||[]).push([0,{\"children\":\"(function(w,r){w._rwq=r;w[r]=w[r]||function(){(w[r].q=w[r].q||[]).push(arguments)}})(window,'rewardful');\",\"id\":\"rewardful-queue\"}])\u003c/script\u003e\u003cscript\u003e(self.__next_s=self.__next_s||[]).push([0,{\"children\":\"const setThemeColor = () =\u003e {\\n            const m = document.querySelector('meta[name=\\\"theme-color\\\"]');\\n            if (!m) return;\\n            const isDark = document.documentElement.classList.contains('dark');\\n            m.setAttribute('content', isDark ? '#1c1c1c' : '#fcfbf8');\\n          };\\n\\n          setThemeColor();\\n\\n          new MutationObserver(setThemeColor).observe(document.documentElement, {\\n            attributes: true,\\n            attributeFilter: ['class'],\\n  });\",\"id\":\"theme-color\"}])\u003c/script\u003e\u003cmeta name=\"sentry-trace\" content=\"b43190a731121afb0ea5f117187ec64f-56ee084dfe5aa3c8-1\"/\u003e\u003cmeta name=\"baggage\" content=\"sentry-environment=production,sentry-release=599669812f5b6dbc0dbf900f3c9cc12e5aa3602e,sentry-public_key=58ff8fddcbe1303f19bc19fbfed46f0f,sentry-trace_id=b43190a731121afb0ea5f117187ec64f,sentry-org_id=4506071217143808\"/\u003e\u003cscript src=\"/_next/static/chunks/polyfills-42372ed130431b0a.js\" noModule=\"\"\u003e\u003c/script\u003e\u003c/head\u003e\u003cbody class=\"__className_83c9a9 __variable_adeef6 flex min-h-dvh flex-col\"\u003e\u003cdiv hidden=\"\"\u003e\u003c!--$--\u003e\u003c!--/$--\u003e\u003c/div\u003e\u003cdiv class=\"flex min-h-0 flex-1 flex-col\"\u003e\u003cscript\u003e!function(){try{var d=document.documentElement,c=d.classList;c.remove('light','dark');var e=localStorage.getItem('lovable-theme');if('system'===e||(!e\u0026\u0026true)){var t='(prefers-color-scheme: dark)',m=window.matchMedia(t);if(m.media!==t||m.matches){d.style.colorScheme = 'dark';c.add('dark')}else{d.style.colorScheme = 'light';c.add('light')}}else if(e){c.add(e|| '')}if(e==='light'||e==='dark')d.style.colorScheme=e}catch(e){}}()\u003c/script\u003e\u003cdiv class=\"relative min-h-screen w-full bg-background transition-none\"\u003e\u003cdiv class=\"jsx-2511115705 absolute inset-0 w-full overflow-hidden\"\u003e\u003cdiv class=\"jsx-2511115705 animate-slideUp absolute inset-0 mt-0 opacity-0 blur-[10px]\"\u003e\u003cdiv class=\"absolute left-1/2 aspect-square w-[350%] -translate-x-1/2 overflow-hidden md:w-[190%] lg:w-[190%] xl:w-[190%] 2xl:mx-auto\" style=\"background-image:url(/img/background/gradient-optimized.png);background-size:cover;background-repeat:no-repeat;background-position:center top;-webkit-mask:linear-gradient(to bottom, transparent 0%, black 5%, black 100%);mask:linear-gradient(to bottom, transparent 0%, black 5%, black 100%);-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px;will-change:transform\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"absolute inset-0\" style=\"background-image:url(/_next/static/media/grain.1ccdda41.png);background-size:100px 100px;background-repeat:repeat;background-blend-mode:overlay;background-position:left top;mix-blend-mode:overlay\"\u003e\u003c/div\u003e\u003cnav class=\"sticky top-0 z-50 flex w-full flex-col items-center justify-between border-b border-transparent transition-all duration-200 ease-out\"\u003e\u003cdiv class=\"container-home flex h-16 w-full items-center justify-between\"\u003e\u003cdiv class=\"flex items-center gap-8 md:pl-8\"\u003e\u003cdiv class=\"relative\"\u003e\u003cspan data-state=\"closed\" data-slot=\"context-menu-trigger\" class=\"flex flex-col gap-1.5\" style=\"-webkit-touch-callout:none\"\u003e\u003ca class=\"transition-opacity hover:opacity-75\" href=\"/\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 116 21\" class=\"flex h-[22px] dark:hidden\"\u003e\u003cpath fill=\"#18181B\" d=\"M109.108 20.23q-2.189 0-3.802-.834-1.614-.849-2.517-2.544-.89-1.695-.889-4.199 0-2.38.93-4.103.93-1.737 2.571-2.64 1.641-.902 3.734-.902 2.01 0 3.57.875 1.559.876 2.42 2.544.876 1.668.876 3.994 0 .834-.014 1.326h-10.9v-2.872h8.26l-1.559.534q0-1.122-.328-1.874-.315-.766-.93-1.149t-1.491-.383q-.916 0-1.614.451-.683.438-1.066 1.313-.37.876-.37 2.107v1.408q0 1.258.383 2.134t1.094 1.326q.712.438 1.683.438 1.067 0 1.764-.547.698-.56.875-1.573h4.144q-.191 1.586-1.08 2.75-.876 1.161-2.339 1.79-1.464.63-3.405.63M96.517.221h4.144v19.612h-4.144zM89.465 20.23q-1.176 0-2.106-.41a4.1 4.1 0 0 1-1.56-1.232q-.642-.834-.957-2.051l.438.123v3.173h-4.103V5.404h4.144v3.228l-.465.082q.315-1.162.957-1.983.657-.834 1.6-1.272.944-.45 2.12-.451 1.765 0 3.064.916 1.3.915 1.997 2.64.697 1.71.697 4.062 0 2.339-.711 4.061-.71 1.71-2.038 2.626-1.312.917-3.077.917m-1.286-3.16q.93 0 1.56-.547.642-.547.957-1.545.328-.999.328-2.352 0-1.354-.328-2.353-.315-.997-.957-1.545-.63-.561-1.56-.561-.916 0-1.572.56-.644.547-.972 1.56-.328.998-.328 2.339 0 1.353.328 2.352.33.998.972 1.545.656.547 1.572.547M81.177.221h4.144v5.183h-4.144zM70.775 20.23q-1.354 0-2.435-.534a4.1 4.1 0 0 1-1.682-1.518q-.602-.997-.602-2.325 0-2.024 1.19-3.09 1.19-1.08 3.433-1.41l2.503-.355q.752-.11 1.19-.273.437-.165.642-.438.206-.287.206-.725 0-.45-.247-.82-.233-.383-.71-.602-.466-.233-1.136-.233-1.066 0-1.71.561-.642.547-.697 1.505h-4.28q.054-1.45.875-2.572.834-1.134 2.311-1.764t3.42-.629q2.037 0 3.445.67 1.41.657 2.12 1.887.725 1.231.725 2.94v6.018q0 .972.137 1.806.15.82.424 1.04v.464h-4.308a10 10 0 0 1-.233-1.326 17 17 0 0 1-.095-1.56l.67-.287a4.6 4.6 0 0 1-.958 1.792q-.683.807-1.764 1.3-1.067.477-2.434.478m1.531-3.036q.876 0 1.546-.383.67-.398 1.026-1.094.369-.697.369-1.587v-1.887l.342.191a2.2 2.2 0 0 1-.82.67q-.48.233-1.3.397l-1.053.205q-1.052.205-1.587.63-.52.423-.52 1.19t.562 1.216q.56.452 1.436.452M51.962 5.404h4.404l3.788 12.378h-1.327l3.638-12.378h4.281l-4.992 14.43h-4.609zM45.485 20.23q-2.148 0-3.775-.93-1.614-.93-2.503-2.653-.875-1.724-.875-4.035t.875-4.02q.89-1.725 2.503-2.654 1.627-.93 3.775-.93t3.76.93q1.615.93 2.49 2.653.889 1.71.889 4.021t-.89 4.035q-.875 1.723-2.488 2.653-1.614.93-3.761.93m0-3.173q.902 0 1.545-.492.642-.507.985-1.491.342-.999.342-2.462 0-2.174-.753-3.296-.752-1.135-2.12-1.135-.901 0-1.559.506-.642.492-.984 1.49-.342.986-.342 2.435t.342 2.448.984 1.505q.657.492 1.56.492M26.22.221h4.294v16.556l-.766-.889h5.786c3.659 0 3.158 3.945 3.158 3.945H26.22z\"\u003e\u003c/path\u003e\u003cmask id=\"lovable-logo-text-light_svg__b\" width=\"20\" height=\"21\" x=\"0\" y=\"0\" maskUnits=\"userSpaceOnUse\" style=\"mask-type:alpha\"\u003e\u003cpath fill=\"url(#lovable-logo-text-light_svg__a)\" fill-rule=\"evenodd\" d=\"M5.904 0c3.26 0 5.904 2.65 5.904 5.92v2.25h1.965c3.26 0 5.904 2.65 5.904 5.92 0 3.268-2.643 5.919-5.904 5.919H0V5.919C0 2.65 2.643 0 5.904 0\" clip-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/mask\u003e\u003cg mask=\"url(#lovable-logo-text-light_svg__b)\"\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__c)\"\u003e\u003ccircle cx=\"8.632\" cy=\"10.681\" r=\"13.32\" fill=\"#4B73FF\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__d)\"\u003e\u003cellipse cx=\"10.095\" cy=\"3.371\" fill=\"#FF66F4\" rx=\"17.059\" ry=\"13.32\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__e)\"\u003e\u003cellipse cx=\"12.877\" cy=\"0.864\" fill=\"#FF0105\" rx=\"13.32\" ry=\"11.698\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__f)\"\u003e\u003ccircle cx=\"10.332\" cy=\"3.367\" r=\"8.011\" fill=\"#FE7B02\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003c/g\u003e\u003cdefs\u003e\u003cfilter id=\"lovable-logo-text-light_svg__c\" width=\"38.578\" height=\"38.579\" x=\"-10.658\" y=\"-8.609\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__d\" width=\"46.057\" height=\"38.579\" x=\"-12.934\" y=\"-15.918\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__e\" width=\"38.578\" height=\"35.334\" x=\"-6.412\" y=\"-16.803\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__f\" width=\"27.96\" height=\"27.96\" x=\"-3.648\" y=\"-10.613\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003clinearGradient id=\"lovable-logo-text-light_svg__a\" x1=\"6.622\" x2=\"12.617\" y1=\"3.516\" y2=\"20.001\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop offset=\"0.025\" stop-color=\"#FF8E63\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.56\" stop-color=\"#FF7EB0\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.95\" stop-color=\"#4B73FF\"\u003e\u003c/stop\u003e\u003c/linearGradient\u003e\u003c/defs\u003e\u003c/svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 116 22\" class=\"hidden h-[22px] dark:flex\"\u003e\u003cpath fill=\"#FCFBF8\" d=\"M109.108 21.115q-2.189 0-3.802-.834-1.614-.848-2.517-2.544-.89-1.695-.889-4.199 0-2.38.93-4.103.93-1.737 2.571-2.64 1.641-.902 3.734-.902 2.01 0 3.57.875 1.559.876 2.42 2.544.876 1.67.876 3.994 0 .834-.014 1.326h-10.9V11.76h8.26l-1.559.534q0-1.122-.328-1.874-.315-.766-.93-1.149t-1.491-.383q-.916 0-1.614.452-.683.437-1.066 1.313-.37.875-.37 2.106v1.408q0 1.259.383 2.134t1.094 1.327q.712.437 1.683.437 1.067 0 1.764-.547.698-.56.875-1.573h4.144q-.191 1.587-1.08 2.75-.876 1.162-2.339 1.79-1.464.63-3.405.63M96.517 1.106h4.144v19.612h-4.144zM89.465 21.115q-1.176 0-2.106-.41a4.1 4.1 0 0 1-1.56-1.231q-.642-.835-.957-2.052l.438.123v3.173h-4.103V6.29h4.144v3.228l-.465.082q.315-1.163.957-1.983.657-.834 1.6-1.272.944-.45 2.12-.451 1.765 0 3.064.916t1.997 2.64q.697 1.71.697 4.062 0 2.339-.711 4.062-.71 1.71-2.038 2.625-1.312.917-3.077.917m-1.286-3.16q.93 0 1.56-.547.642-.547.957-1.545.328-.999.328-2.352 0-1.354-.328-2.353-.315-.997-.957-1.545-.63-.56-1.56-.56-.916 0-1.572.56-.644.547-.972 1.559-.328.999-.328 2.339 0 1.353.328 2.352.33.998.972 1.545.656.547 1.572.547M81.177 1.107h4.144V6.29h-4.144zM70.775 21.115q-1.354 0-2.434-.533a4.1 4.1 0 0 1-1.683-1.518q-.601-.999-.602-2.326 0-2.024 1.19-3.09 1.19-1.08 3.433-1.409l2.503-.356q.752-.11 1.19-.273t.643-.438q.204-.287.205-.725 0-.45-.246-.82-.232-.383-.712-.602-.465-.232-1.135-.232-1.065 0-1.71.56-.642.547-.697 1.505h-4.28q.054-1.45.875-2.572.834-1.134 2.311-1.764t3.42-.629q2.037 0 3.446.67 1.408.657 2.12 1.888.724 1.23.724 2.94v6.018q0 .97.137 1.805.15.82.424 1.04v.464H75.59a10 10 0 0 1-.233-1.326 17 17 0 0 1-.095-1.56l.67-.287a4.6 4.6 0 0 1-.957 1.792q-.684.807-1.765 1.3-1.065.477-2.434.478m1.532-3.036q.875 0 1.545-.383.67-.398 1.026-1.094.37-.697.37-1.587v-1.887l.341.191a2.2 2.2 0 0 1-.82.67q-.48.234-1.3.397l-1.053.205q-1.053.206-1.586.63-.52.423-.52 1.19 0 .765.56 1.217.561.45 1.437.45M51.962 6.29h4.404l3.788 12.377h-1.326L62.466 6.29h4.28l-4.992 14.428h-4.609zM45.485 21.115q-2.148 0-3.775-.93-1.614-.93-2.503-2.653-.875-1.724-.875-4.035t.875-4.02q.89-1.724 2.503-2.654 1.627-.93 3.775-.93t3.76.93q1.615.93 2.49 2.653.889 1.71.889 4.021t-.89 4.035q-.875 1.723-2.488 2.653-1.614.93-3.761.93m0-3.173q.902 0 1.545-.492.642-.507.985-1.491.342-.998.342-2.462 0-2.174-.753-3.296-.752-1.135-2.12-1.135-.901 0-1.559.506-.642.492-.984 1.49-.342.986-.342 2.435t.342 2.448.984 1.505q.657.492 1.56.492M26.22 1.106h4.294v16.556l-.766-.889h5.786c3.659 0 3.159 3.945 3.159 3.945H26.22z\"\u003e\u003c/path\u003e\u003cmask id=\"lovable-logo-text-dark_svg__b\" width=\"20\" height=\"21\" x=\"0\" y=\"0\" maskUnits=\"userSpaceOnUse\" style=\"mask-type:alpha\"\u003e\u003cpath fill=\"url(#lovable-logo-text-dark_svg__a)\" fill-rule=\"evenodd\" d=\"M5.904.885c3.26 0 5.904 2.65 5.904 5.92v2.25h1.965c3.26 0 5.904 2.65 5.904 5.92s-2.643 5.919-5.904 5.919H0V6.804C0 3.536 2.643.886 5.904.886\" clip-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/mask\u003e\u003cg mask=\"url(#lovable-logo-text-dark_svg__b)\"\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__c)\"\u003e\u003ccircle cx=\"8.632\" cy=\"11.566\" r=\"13.32\" fill=\"#4B73FF\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__d)\"\u003e\u003cellipse cx=\"10.095\" cy=\"4.256\" fill=\"#FF66F4\" rx=\"17.059\" ry=\"13.32\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__e)\"\u003e\u003cellipse cx=\"12.877\" cy=\"1.75\" fill=\"#FF0105\" rx=\"13.32\" ry=\"11.698\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__f)\"\u003e\u003ccircle cx=\"10.332\" cy=\"4.253\" r=\"8.011\" fill=\"#FE7B02\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003c/g\u003e\u003cdefs\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__c\" width=\"38.579\" height=\"38.579\" x=\"-10.658\" y=\"-7.724\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__d\" width=\"46.057\" height=\"38.579\" x=\"-12.934\" y=\"-15.033\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__e\" width=\"38.579\" height=\"35.334\" x=\"-6.412\" y=\"-15.918\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__f\" width=\"27.96\" height=\"27.96\" x=\"-3.648\" y=\"-9.727\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003clinearGradient id=\"lovable-logo-text-dark_svg__a\" x1=\"6.622\" x2=\"12.617\" y1=\"4.401\" y2=\"20.886\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop offset=\"0.025\" stop-color=\"#FF8E63\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.56\" stop-color=\"#FF7EB0\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.95\" stop-color=\"#4B73FF\"\u003e\u003c/stop\u003e\u003c/linearGradient\u003e\u003c/defs\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\u003cnav class=\"hidden items-center gap-6 md:flex\"\u003e\u003ca class=\"text-sm font-normal text-foreground transition-colors hover:text-foreground/80\" href=\"https://discord.com/invite/lovable-dev\"\u003eCommunity\u003c/a\u003e\u003ca class=\"text-sm font-normal text-foreground transition-colors hover:text-foreground/80\" href=\"/pricing\"\u003ePricing\u003c/a\u003e\u003ca class=\"text-sm font-normal text-foreground transition-colors hover:text-foreground/80\" href=\"https://enterprise.lovable.dev\"\u003eEnterprise\u003c/a\u003e\u003ca class=\"text-sm font-normal text-foreground transition-colors hover:text-foreground/80\" href=\"https://docs.lovable.dev\"\u003eLearn\u003c/a\u003e\u003ca class=\"text-sm font-normal text-foreground transition-colors hover:text-foreground/80\" href=\"https://launched.lovable.dev\"\u003eLaunched\u003c/a\u003e\u003c/nav\u003e\u003c/div\u003e\u003cdiv class=\"flex items-center gap-4 md:pr-8\"\u003e\u003cdiv class=\"flex gap-2\"\u003e\u003ca class=\"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors duration-100 ease-in-out focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [\u0026amp;_svg]:pointer-events-none border border-input bg-muted shadow-sm hover:bg-accent hover:border-accent h-8 rounded-md px-4 py-2\" id=\"login-link\" href=\"/login\"\u003eLog in\u003c/a\u003e\u003ca class=\"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors duration-100 ease-in-out focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [\u0026amp;_svg]:pointer-events-none bg-primary text-primary-foreground hover:bg-primary/90 h-8 rounded-md px-4 py-2\" id=\"signup-link\" href=\"/signup\"\u003eGet started\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/nav\u003e\u003cmain class=\"overflow-x-hidden overflow-y-hidden container-home\"\u003e\u003cdiv class=\"relative w-full\"\u003e\u003csection class=\"mb-[20px] flex w-full flex-col items-center justify-center py-[20vh] md:mb-0 2xl:py-64\"\u003e\u003cdiv class=\"mb-4 flex flex-col items-center px-4 text-center md:mb-6\"\u003e\u003cdiv class=\"flex w-full flex-col items-center justify-center gap-2\"\u003e\u003c/div\u003e\u003ch1 class=\"mb-2 flex items-center gap-1 text-2xl font-medium leading-none text-foreground sm:text-3xl md:mb-2.5 md:gap-0 md:text-5xl\"\u003e\u003cspan class=\"pt-0.5 tracking-tight md:pt-0\"\u003eBuild something\u003c!-- --\u003e \u003cspan class=\"md:sr-only\"\u003eLovable\u003c/span\u003e\u003c/span\u003e\u003cdiv class=\"flex flex-col gap-1.5 ml-2 hidden sm:ml-3 md:ml-4 md:flex\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 116 21\" class=\"flex h-[22px] sm:h-[28px] md:h-[36px] dark:hidden\"\u003e\u003cpath fill=\"#18181B\" d=\"M109.108 20.23q-2.189 0-3.802-.834-1.614-.849-2.517-2.544-.89-1.695-.889-4.199 0-2.38.93-4.103.93-1.737 2.571-2.64 1.641-.902 3.734-.902 2.01 0 3.57.875 1.559.876 2.42 2.544.876 1.668.876 3.994 0 .834-.014 1.326h-10.9v-2.872h8.26l-1.559.534q0-1.122-.328-1.874-.315-.766-.93-1.149t-1.491-.383q-.916 0-1.614.451-.683.438-1.066 1.313-.37.876-.37 2.107v1.408q0 1.258.383 2.134t1.094 1.326q.712.438 1.683.438 1.067 0 1.764-.547.698-.56.875-1.573h4.144q-.191 1.586-1.08 2.75-.876 1.161-2.339 1.79-1.464.63-3.405.63M96.517.221h4.144v19.612h-4.144zM89.465 20.23q-1.176 0-2.106-.41a4.1 4.1 0 0 1-1.56-1.232q-.642-.834-.957-2.051l.438.123v3.173h-4.103V5.404h4.144v3.228l-.465.082q.315-1.162.957-1.983.657-.834 1.6-1.272.944-.45 2.12-.451 1.765 0 3.064.916 1.3.915 1.997 2.64.697 1.71.697 4.062 0 2.339-.711 4.061-.71 1.71-2.038 2.626-1.312.917-3.077.917m-1.286-3.16q.93 0 1.56-.547.642-.547.957-1.545.328-.999.328-2.352 0-1.354-.328-2.353-.315-.997-.957-1.545-.63-.561-1.56-.561-.916 0-1.572.56-.644.547-.972 1.56-.328.998-.328 2.339 0 1.353.328 2.352.33.998.972 1.545.656.547 1.572.547M81.177.221h4.144v5.183h-4.144zM70.775 20.23q-1.354 0-2.435-.534a4.1 4.1 0 0 1-1.682-1.518q-.602-.997-.602-2.325 0-2.024 1.19-3.09 1.19-1.08 3.433-1.41l2.503-.355q.752-.11 1.19-.273.437-.165.642-.438.206-.287.206-.725 0-.45-.247-.82-.233-.383-.71-.602-.466-.233-1.136-.233-1.066 0-1.71.561-.642.547-.697 1.505h-4.28q.054-1.45.875-2.572.834-1.134 2.311-1.764t3.42-.629q2.037 0 3.445.67 1.41.657 2.12 1.887.725 1.231.725 2.94v6.018q0 .972.137 1.806.15.82.424 1.04v.464h-4.308a10 10 0 0 1-.233-1.326 17 17 0 0 1-.095-1.56l.67-.287a4.6 4.6 0 0 1-.958 1.792q-.683.807-1.764 1.3-1.067.477-2.434.478m1.531-3.036q.876 0 1.546-.383.67-.398 1.026-1.094.369-.697.369-1.587v-1.887l.342.191a2.2 2.2 0 0 1-.82.67q-.48.233-1.3.397l-1.053.205q-1.052.205-1.587.63-.52.423-.52 1.19t.562 1.216q.56.452 1.436.452M51.962 5.404h4.404l3.788 12.378h-1.327l3.638-12.378h4.281l-4.992 14.43h-4.609zM45.485 20.23q-2.148 0-3.775-.93-1.614-.93-2.503-2.653-.875-1.724-.875-4.035t.875-4.02q.89-1.725 2.503-2.654 1.627-.93 3.775-.93t3.76.93q1.615.93 2.49 2.653.889 1.71.889 4.021t-.89 4.035q-.875 1.723-2.488 2.653-1.614.93-3.761.93m0-3.173q.902 0 1.545-.492.642-.507.985-1.491.342-.999.342-2.462 0-2.174-.753-3.296-.752-1.135-2.12-1.135-.901 0-1.559.506-.642.492-.984 1.49-.342.986-.342 2.435t.342 2.448.984 1.505q.657.492 1.56.492M26.22.221h4.294v16.556l-.766-.889h5.786c3.659 0 3.158 3.945 3.158 3.945H26.22z\"\u003e\u003c/path\u003e\u003cmask id=\"lovable-logo-text-light_svg__b\" width=\"20\" height=\"21\" x=\"0\" y=\"0\" maskUnits=\"userSpaceOnUse\" style=\"mask-type:alpha\"\u003e\u003cpath fill=\"url(#lovable-logo-text-light_svg__a)\" fill-rule=\"evenodd\" d=\"M5.904 0c3.26 0 5.904 2.65 5.904 5.92v2.25h1.965c3.26 0 5.904 2.65 5.904 5.92 0 3.268-2.643 5.919-5.904 5.919H0V5.919C0 2.65 2.643 0 5.904 0\" clip-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/mask\u003e\u003cg mask=\"url(#lovable-logo-text-light_svg__b)\"\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__c)\"\u003e\u003ccircle cx=\"8.632\" cy=\"10.681\" r=\"13.32\" fill=\"#4B73FF\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__d)\"\u003e\u003cellipse cx=\"10.095\" cy=\"3.371\" fill=\"#FF66F4\" rx=\"17.059\" ry=\"13.32\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__e)\"\u003e\u003cellipse cx=\"12.877\" cy=\"0.864\" fill=\"#FF0105\" rx=\"13.32\" ry=\"11.698\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__f)\"\u003e\u003ccircle cx=\"10.332\" cy=\"3.367\" r=\"8.011\" fill=\"#FE7B02\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003c/g\u003e\u003cdefs\u003e\u003cfilter id=\"lovable-logo-text-light_svg__c\" width=\"38.578\" height=\"38.579\" x=\"-10.658\" y=\"-8.609\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__d\" width=\"46.057\" height=\"38.579\" x=\"-12.934\" y=\"-15.918\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__e\" width=\"38.578\" height=\"35.334\" x=\"-6.412\" y=\"-16.803\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__f\" width=\"27.96\" height=\"27.96\" x=\"-3.648\" y=\"-10.613\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003clinearGradient id=\"lovable-logo-text-light_svg__a\" x1=\"6.622\" x2=\"12.617\" y1=\"3.516\" y2=\"20.001\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop offset=\"0.025\" stop-color=\"#FF8E63\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.56\" stop-color=\"#FF7EB0\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.95\" stop-color=\"#4B73FF\"\u003e\u003c/stop\u003e\u003c/linearGradient\u003e\u003c/defs\u003e\u003c/svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 116 22\" class=\"hidden h-[22px] sm:h-[28px] md:h-[36px] dark:flex\"\u003e\u003cpath fill=\"#FCFBF8\" d=\"M109.108 21.115q-2.189 0-3.802-.834-1.614-.848-2.517-2.544-.89-1.695-.889-4.199 0-2.38.93-4.103.93-1.737 2.571-2.64 1.641-.902 3.734-.902 2.01 0 3.57.875 1.559.876 2.42 2.544.876 1.67.876 3.994 0 .834-.014 1.326h-10.9V11.76h8.26l-1.559.534q0-1.122-.328-1.874-.315-.766-.93-1.149t-1.491-.383q-.916 0-1.614.452-.683.437-1.066 1.313-.37.875-.37 2.106v1.408q0 1.259.383 2.134t1.094 1.327q.712.437 1.683.437 1.067 0 1.764-.547.698-.56.875-1.573h4.144q-.191 1.587-1.08 2.75-.876 1.162-2.339 1.79-1.464.63-3.405.63M96.517 1.106h4.144v19.612h-4.144zM89.465 21.115q-1.176 0-2.106-.41a4.1 4.1 0 0 1-1.56-1.231q-.642-.835-.957-2.052l.438.123v3.173h-4.103V6.29h4.144v3.228l-.465.082q.315-1.163.957-1.983.657-.834 1.6-1.272.944-.45 2.12-.451 1.765 0 3.064.916t1.997 2.64q.697 1.71.697 4.062 0 2.339-.711 4.062-.71 1.71-2.038 2.625-1.312.917-3.077.917m-1.286-3.16q.93 0 1.56-.547.642-.547.957-1.545.328-.999.328-2.352 0-1.354-.328-2.353-.315-.997-.957-1.545-.63-.56-1.56-.56-.916 0-1.572.56-.644.547-.972 1.559-.328.999-.328 2.339 0 1.353.328 2.352.33.998.972 1.545.656.547 1.572.547M81.177 1.107h4.144V6.29h-4.144zM70.775 21.115q-1.354 0-2.434-.533a4.1 4.1 0 0 1-1.683-1.518q-.601-.999-.602-2.326 0-2.024 1.19-3.09 1.19-1.08 3.433-1.409l2.503-.356q.752-.11 1.19-.273t.643-.438q.204-.287.205-.725 0-.45-.246-.82-.232-.383-.712-.602-.465-.232-1.135-.232-1.065 0-1.71.56-.642.547-.697 1.505h-4.28q.054-1.45.875-2.572.834-1.134 2.311-1.764t3.42-.629q2.037 0 3.446.67 1.408.657 2.12 1.888.724 1.23.724 2.94v6.018q0 .97.137 1.805.15.82.424 1.04v.464H75.59a10 10 0 0 1-.233-1.326 17 17 0 0 1-.095-1.56l.67-.287a4.6 4.6 0 0 1-.957 1.792q-.684.807-1.765 1.3-1.065.477-2.434.478m1.532-3.036q.875 0 1.545-.383.67-.398 1.026-1.094.37-.697.37-1.587v-1.887l.341.191a2.2 2.2 0 0 1-.82.67q-.48.234-1.3.397l-1.053.205q-1.053.206-1.586.63-.52.423-.52 1.19 0 .765.56 1.217.561.45 1.437.45M51.962 6.29h4.404l3.788 12.377h-1.326L62.466 6.29h4.28l-4.992 14.428h-4.609zM45.485 21.115q-2.148 0-3.775-.93-1.614-.93-2.503-2.653-.875-1.724-.875-4.035t.875-4.02q.89-1.724 2.503-2.654 1.627-.93 3.775-.93t3.76.93q1.615.93 2.49 2.653.889 1.71.889 4.021t-.89 4.035q-.875 1.723-2.488 2.653-1.614.93-3.761.93m0-3.173q.902 0 1.545-.492.642-.507.985-1.491.342-.998.342-2.462 0-2.174-.753-3.296-.752-1.135-2.12-1.135-.901 0-1.559.506-.642.492-.984 1.49-.342.986-.342 2.435t.342 2.448.984 1.505q.657.492 1.56.492M26.22 1.106h4.294v16.556l-.766-.889h5.786c3.659 0 3.159 3.945 3.159 3.945H26.22z\"\u003e\u003c/path\u003e\u003cmask id=\"lovable-logo-text-dark_svg__b\" width=\"20\" height=\"21\" x=\"0\" y=\"0\" maskUnits=\"userSpaceOnUse\" style=\"mask-type:alpha\"\u003e\u003cpath fill=\"url(#lovable-logo-text-dark_svg__a)\" fill-rule=\"evenodd\" d=\"M5.904.885c3.26 0 5.904 2.65 5.904 5.92v2.25h1.965c3.26 0 5.904 2.65 5.904 5.92s-2.643 5.919-5.904 5.919H0V6.804C0 3.536 2.643.886 5.904.886\" clip-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/mask\u003e\u003cg mask=\"url(#lovable-logo-text-dark_svg__b)\"\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__c)\"\u003e\u003ccircle cx=\"8.632\" cy=\"11.566\" r=\"13.32\" fill=\"#4B73FF\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__d)\"\u003e\u003cellipse cx=\"10.095\" cy=\"4.256\" fill=\"#FF66F4\" rx=\"17.059\" ry=\"13.32\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__e)\"\u003e\u003cellipse cx=\"12.877\" cy=\"1.75\" fill=\"#FF0105\" rx=\"13.32\" ry=\"11.698\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__f)\"\u003e\u003ccircle cx=\"10.332\" cy=\"4.253\" r=\"8.011\" fill=\"#FE7B02\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003c/g\u003e\u003cdefs\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__c\" width=\"38.579\" height=\"38.579\" x=\"-10.658\" y=\"-7.724\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__d\" width=\"46.057\" height=\"38.579\" x=\"-12.934\" y=\"-15.033\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__e\" width=\"38.579\" height=\"35.334\" x=\"-6.412\" y=\"-15.918\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__f\" width=\"27.96\" height=\"27.96\" x=\"-3.648\" y=\"-9.727\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003clinearGradient id=\"lovable-logo-text-dark_svg__a\" x1=\"6.622\" x2=\"12.617\" y1=\"4.401\" y2=\"20.886\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop offset=\"0.025\" stop-color=\"#FF8E63\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.56\" stop-color=\"#FF7EB0\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.95\" stop-color=\"#4B73FF\"\u003e\u003c/stop\u003e\u003c/linearGradient\u003e\u003c/defs\u003e\u003c/svg\u003e\u003c/div\u003e\u003c/h1\u003e\u003cp class=\"mb-6 max-w-[25ch] text-center text-lg leading-tight text-foreground/65 md:max-w-full md:text-xl\"\u003eCreate apps and websites by chatting with AI\u003c/p\u003e\u003c/div\u003e\u003c!--$?--\u003e\u003ctemplate id=\"B:0\"\u003e\u003c/template\u003e\u003c!--/$--\u003e\u003c/section\u003e\u003c!--$?--\u003e\u003ctemplate id=\"B:1\"\u003e\u003c/template\u003e\u003c!--/$--\u003e\u003c/div\u003e\u003c!--$--\u003e\u003c!--/$--\u003e\u003c/main\u003e\u003cdiv class=\"container-home relative z-10 mb-4 mt-6\"\u003e\u003cfooter class=\"rounded-2xl border border-muted-border bg-muted p-6 sm:p-8 md:p-10 lg:p-14\"\u003e\u003cnav class=\"grid grid-cols-2 gap-x-8 gap-y-12 sm:grid-cols-3 lg:grid-cols-6\"\u003e\u003cdiv class=\"col-span-2 flex h-full justify-between sm:col-span-3 lg:col-span-1 lg:flex-col\"\u003e\u003ca class=\"w-fit transition-transform hover:animate-[heartbeat_1s_ease-in-out]\" href=\"/\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 23 24\" class=\"size-8\"\u003e\u003cmask id=\"lovable-logo_svg__b\" width=\"23\" height=\"24\" x=\"0\" y=\"0\" maskUnits=\"userSpaceOnUse\" style=\"mask-type:alpha\"\u003e\u003cpath fill=\"url(#lovable-logo_svg__a)\" fill-rule=\"evenodd\" d=\"M6.898 0c3.81 0 6.898 3.179 6.898 7.1v2.7h2.295c3.81 0 6.898 3.178 6.898 7.1S19.901 24 16.091 24H0V7.1C0 3.18 3.088 0 6.898 0\" clip-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/mask\u003e\u003cg mask=\"url(#lovable-logo_svg__b)\"\u003e\u003cg filter=\"url(#lovable-logo_svg__c)\"\u003e\u003cellipse cx=\"10.084\" cy=\"12.811\" fill=\"#4B73FF\" rx=\"15.562\" ry=\"15.977\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo_svg__d)\"\u003e\u003cellipse cx=\"11.794\" cy=\"4.043\" fill=\"#FF66F4\" rx=\"19.931\" ry=\"15.977\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo_svg__e)\"\u003e\u003cellipse cx=\"15.045\" cy=\"1.037\" fill=\"#FF0105\" rx=\"15.562\" ry=\"14.031\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo_svg__f)\"\u003e\u003cellipse cx=\"12.071\" cy=\"4.039\" fill=\"#FE7B02\" rx=\"9.359\" ry=\"9.608\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003c/g\u003e\u003cdefs\u003e\u003cfilter id=\"lovable-logo_svg__c\" width=\"45.444\" height=\"46.274\" x=\"-12.638\" y=\"-10.326\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_3420\" stdDeviation=\"3.58\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo_svg__d\" width=\"54.181\" height=\"46.274\" x=\"-15.297\" y=\"-19.094\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_3420\" stdDeviation=\"3.58\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo_svg__e\" width=\"45.444\" height=\"42.383\" x=\"-7.677\" y=\"-20.154\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_3420\" stdDeviation=\"3.58\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo_svg__f\" width=\"33.038\" height=\"33.538\" x=\"-4.448\" y=\"-12.73\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_3420\" stdDeviation=\"3.58\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003clinearGradient id=\"lovable-logo_svg__a\" x1=\"7.736\" x2=\"15.072\" y1=\"4.218\" y2=\"23.867\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop offset=\"0.025\" stop-color=\"#FF8E63\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.56\" stop-color=\"#FF7EB0\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.95\" stop-color=\"#4B73FF\"\u003e\u003c/stop\u003e\u003c/linearGradient\u003e\u003c/defs\u003e\u003c/svg\u003e\u003c/a\u003e\u003cdiv class=\"hidden w-fit lg:block\"\u003e\u003cbutton class=\"flex items-center gap-1 text-muted-foreground hover:underline disabled:opacity-50\" type=\"button\" id=\"radix-_R_17l5tmplb_\" aria-haspopup=\"menu\" aria-expanded=\"false\" data-state=\"closed\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-4 w-4\" fill=\"currentColor\"\u003e\u003cpath d=\"M480-80q-84 0-157-31.5T196-197t-85-127.5T80-482t31-156.5T196-765t127-84.5T480-880t157 30.5T764-765t85 126.5T880-482t-31 157.5T764-197t-127 85.5T480-80m0-58q35-36 58.5-82.5T577-331H384q14 60 37.5 108t58.5 85m-85-12q-25-38-43-82t-30-99H172q38 71 88 111.5T395-150m171-1q72-23 129.5-69T788-331H639q-13 54-30.5 98T566-151M152-391h159q-3-27-3.5-48.5T307-482q0-25 1-44.5t4-43.5H152q-7 24-9.5 43t-2.5 45 2.5 46.5T152-391m221 0h215q4-31 5-50.5t1-40.5q0-20-1-38.5t-5-49.5H373q-4 31-5 49.5t-1 38.5q0 21 1 40.5t5 50.5m275 0h160q7-24 9.5-44.5T820-482t-2.5-45-9.5-43H649q3 35 4 53.5t1 34.5q0 22-1.5 41.5T648-391m-10-239h150q-33-69-90.5-115T565-810q25 37 42.5 80T638-630m-254 0h194q-11-53-37-102.5T480-820q-32 27-54 71t-42 119m-212 0h151q11-54 28-96.5t43-82.5q-75 19-131 64t-91 115\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003cspan class=\"text-sm\"\u003eEN\u003c/span\u003e\u003c/button\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"space-y-4\"\u003e\u003ch3 class=\"text-sm font-normal text-muted-foreground\"\u003eCompany\u003c/h3\u003e\u003cul class=\"space-y-3\"\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/careers\"\u003eCareers\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/brand\"\u003ePress \u0026amp; media\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://enterprise.lovable.dev/\"\u003eEnterprise\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/security\"\u003eSecurity\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://trust.delve.co/lovable\"\u003eTrust center\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv class=\"space-y-4\"\u003e\u003ch3 class=\"text-sm font-normal text-muted-foreground\"\u003eProduct\u003c/h3\u003e\u003cul class=\"space-y-3\"\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/pricing\"\u003ePricing\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/students\"\u003eStudent discount\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/solutions\"\u003eSolutions\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.lovable.dev/integrations/introduction\"\u003eIntegrations\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003cbutton type=\"button\" aria-haspopup=\"dialog\" aria-expanded=\"false\" aria-controls=\"radix-_R_2pbl5tmplb_\" data-state=\"closed\" class=\"text-start text-sm text-primary transition-colors hover:text-muted-foreground\"\u003eImport from Figma\u003c/button\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.lovable.dev/changelog\"\u003eChangelog\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://status.lovable.dev/\"\u003eStatus\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv class=\"space-y-4\"\u003e\u003ch3 class=\"text-sm font-normal text-muted-foreground\"\u003eResources\u003c/h3\u003e\u003cul class=\"space-y-3\"\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.lovable.dev\"\u003eLearn\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/how-to\"\u003eHow-to guides\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/videos\"\u003eVideos\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/blog\"\u003eBlog\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://launched.lovable.dev/\"\u003eLaunched\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/support\"\u003eSupport\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv class=\"space-y-4\"\u003e\u003ch3 class=\"text-sm font-normal text-muted-foreground\"\u003eLegal\u003c/h3\u003e\u003cul class=\"space-y-3\"\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/privacy\"\u003ePrivacy policy\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/do-not-sell-or-share-my-personal-information\"\u003eCookie settings\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/terms\"\u003eTerms \u0026amp; conditions\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/abuse\"\u003eReport abuse\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/security\"\u003eReport security concerns\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv class=\"space-y-4\"\u003e\u003ch3 class=\"text-sm font-normal text-muted-foreground\"\u003eCommunity\u003c/h3\u003e\u003cul class=\"space-y-3\"\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/partners/apply\"\u003eBecome a partner\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/partners\"\u003eHire a partner\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/affiliates\"\u003eAffiliates\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://discord.com/invite/lovable-dev\"\u003eDiscord\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://reddit.com/r/lovable\"\u003eReddit\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/lovable_dev\"\u003eX / Twitter\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/company/lovable-dev/\"\u003eLinkedIn\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv class=\"col-span-2 w-fit sm:col-span-3 lg:hidden\"\u003e\u003cbutton class=\"flex items-center gap-1 text-muted-foreground hover:underline disabled:opacity-50\" type=\"button\" id=\"radix-_R_fl5tmplb_\" aria-haspopup=\"menu\" aria-expanded=\"false\" data-state=\"closed\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-4 w-4\" fill=\"currentColor\"\u003e\u003cpath d=\"M480-80q-84 0-157-31.5T196-197t-85-127.5T80-482t31-156.5T196-765t127-84.5T480-880t157 30.5T764-765t85 126.5T880-482t-31 157.5T764-197t-127 85.5T480-80m0-58q35-36 58.5-82.5T577-331H384q14 60 37.5 108t58.5 85m-85-12q-25-38-43-82t-30-99H172q38 71 88 111.5T395-150m171-1q72-23 129.5-69T788-331H639q-13 54-30.5 98T566-151M152-391h159q-3-27-3.5-48.5T307-482q0-25 1-44.5t4-43.5H152q-7 24-9.5 43t-2.5 45 2.5 46.5T152-391m221 0h215q4-31 5-50.5t1-40.5q0-20-1-38.5t-5-49.5H373q-4 31-5 49.5t-1 38.5q0 21 1 40.5t5 50.5m275 0h160q7-24 9.5-44.5T820-482t-2.5-45-9.5-43H649q3 35 4 53.5t1 34.5q0 22-1.5 41.5T648-391m-10-239h150q-33-69-90.5-115T565-810q25 37 42.5 80T638-630m-254 0h194q-11-53-37-102.5T480-820q-32 27-54 71t-42 119m-212 0h151q11-54 28-96.5t43-82.5q-75 19-131 64t-91 115\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003cspan class=\"text-sm\"\u003eEN\u003c/span\u003e\u003c/button\u003e\u003c/div\u003e\u003c/nav\u003e\u003c/footer\u003e\u003c/div\u003e\u003c/div\u003e\u003csection aria-label=\"Notifications alt+T\" tabindex=\"-1\" aria-live=\"polite\" aria-relevant=\"additions text\" aria-atomic=\"false\"\u003e\u003c/section\u003e\u003c/div\u003e\u003cscript\u003erequestAnimationFrame(function(){$RT=performance.now()});\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/webpack-d9f4e9a879e66f46.js\" id=\"_R_\" async=\"\"\u003e\u003c/script\u003e\u003cdiv hidden id=\"S:0\"\u003e\u003cdiv class=\"w-full max-w-3xl\"\u003e\u003cdiv class=\"relative w-full\"\u003e\u003cdiv class=\"flex w-full flex-col items-center\"\u003e\u003cdiv class=\"relative size-full\"\u003e\u003cform class=\"group flex flex-col gap-2 p-3 w-full rounded-3.5xl border border-muted-border bg-muted text-base shadow-xl transition-all duration-150 ease-in-out focus-within:border-foreground/20 hover:border-foreground/10 focus-within:hover:border-foreground/20\"\u003e\u003cdiv class=\"relative flex flex-1 items-center\"\u003e\u003ctextarea class=\"flex w-full rounded-md px-2 py-2 ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 resize-none text-[16px] leading-snug placeholder-shown:text-ellipsis placeholder-shown:whitespace-nowrap md:text-base focus-visible:ring-0 focus-visible:ring-offset-0 max-h-[200px] bg-transparent focus:bg-transparent flex-1\" id=\"chatinput\" autofocus=\"\" style=\"min-height:80px\" placeholder=\"Ask Lovable to create \" maxLength=\"50000\"\u003e\u003c/textarea\u003e\u003c/div\u003e\u003cdiv class=\"flex gap-1 flex-wrap items-center\"\u003e\u003cbutton class=\"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium transition-colors duration-100 ease-in-out focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [\u0026amp;_svg]:pointer-events-none border border-input bg-muted shadow-sm hover:bg-accent hover:border-accent gap-1.5 h-8 w-8 rounded-full p-0 text-muted-foreground hover:text-foreground\" type=\"button\" id=\"radix-_R_2j37ilul5tmplb_\" aria-haspopup=\"menu\" aria-expanded=\"false\" data-state=\"closed\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 text-muted-foreground\" fill=\"currentColor\"\u003e\u003cpath d=\"M450-450H230q-12.75 0-21.37-8.68-8.63-8.67-8.63-21.5 0-12.82 8.63-21.32 8.62-8.5 21.37-8.5h220v-220q0-12.75 8.68-21.38 8.67-8.62 21.5-8.62 12.82 0 21.32 8.62 8.5 8.63 8.5 21.38v220h220q12.75 0 21.38 8.68 8.62 8.67 8.62 21.5 0 12.82-8.62 21.32-8.63 8.5-21.38 8.5H510v220q0 12.75-8.68 21.37-8.67 8.63-21.5 8.63-12.82 0-21.32-8.63-8.5-8.62-8.5-21.37z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/button\u003e\u003cinput id=\"file-upload\" class=\"hidden\" accept=\"image/jpeg,.jpg,.jpeg,image/png,.png,image/webp,.webp\" multiple=\"\" type=\"file\" style=\"border:0;clip:rect(0, 0, 0, 0);clip-path:inset(50%);height:1px;margin:0 -1px -1px 0;overflow:hidden;padding:0;position:absolute;width:1px;white-space:nowrap\" tabindex=\"-1\"/\u003e\u003cbutton class=\"whitespace-nowrap text-sm font-medium transition-colors duration-100 ease-in-out focus-visible:outline-none focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [\u0026amp;_svg]:pointer-events-none border border-input bg-muted shadow-sm hover:bg-accent hover:border-accent px-3 py-2 flex h-8 items-center justify-center gap-1 rounded-full text-muted-foreground focus-visible:ring-0\" type=\"button\" aria-haspopup=\"dialog\" aria-expanded=\"false\" aria-controls=\"radix-_R_537ilul5tmplb_\" data-state=\"closed\"\u003e\u003cdiv class=\"flex items-center gap-1 duration-200 animate-in fade-in\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-4 w-4\" fill=\"currentColor\"\u003e\u003cpath d=\"M480.27-80q-82.74 0-155.5-31.5Q252-143 197.5-197.5t-86-127.34T80-480.5t31.5-155.66 86-126.84 127.34-85.5T480.5-880t155.66 31.5T763-763t85.5 127T880-480.27q0 82.74-31.5 155.5Q817-252 763-197.68q-54 54.31-127 86Q563-80 480.27-80m-.27-60q142.38 0 241.19-99.5T820-480v-13q-6 26-27.41 43.5Q771.19-432 742-432h-80q-33 0-56.5-23.5T582-512v-40H422v-80q0-33 23.5-56.5T502-712h40v-22q0-16 13.5-40t30.5-29q-25-8-51.36-12.5Q508.29-820 480-820q-141 0-240.5 98.81T140-480h150q66 0 113 47t47 113v40H330v105q34 17 71.7 26t78.3 9\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003cspan class=\"hidden md:flex\"\u003ePublic\u003c/span\u003e\u003c/div\u003e\u003c/button\u003e\u003cdiv class=\"ml-auto flex items-center gap-1\"\u003e\u003cdiv class=\"relative flex items-center gap-1 md:gap-2\"\u003e\u003cdiv class=\"\"\u003e\u003c/div\u003e\u003cbutton id=\"chatinput-send-message-button\" type=\"submit\" class=\"flex h-8 w-8 items-center justify-center rounded-full bg-foreground transition-opacity duration-150 ease-out disabled:cursor-not-allowed disabled:opacity-50\" disabled=\"\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-6 w-6 text-background\" fill=\"currentColor\"\u003e\u003cpath d=\"M442.39-616.87 309.78-487.26q-11.82 11.83-27.78 11.33t-27.78-12.33q-11.83-11.83-11.83-27.78 0-15.96 11.83-27.79l198.43-199q11.83-11.82 28.35-11.82t28.35 11.82l198.43 199q11.83 11.83 11.83 27.79 0 15.95-11.83 27.78-11.82 11.83-27.78 11.83t-27.78-11.83L521.61-618.87v348.83q0 16.95-11.33 28.28-11.32 11.33-28.28 11.33t-28.28-11.33q-11.33-11.33-11.33-28.28z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/button\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/form\u003e\u003c/div\u003e\u003cdiv class=\"h-[40px]\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cscript\u003e$RB=[];$RV=function(b){$RT=performance.now();for(var a=0;a\u003cb.length;a+=2){var c=b[a],e=b[a+1];null!==e.parentNode\u0026\u0026e.parentNode.removeChild(e);var f=c.parentNode;if(f){var g=c.previousSibling,h=0;do{if(c\u0026\u00268===c.nodeType){var d=c.data;if(\"/$\"===d||\"/\u0026\"===d)if(0===h)break;else h--;else\"$\"!==d\u0026\u0026\"$?\"!==d\u0026\u0026\"$~\"!==d\u0026\u0026\"$!\"!==d\u0026\u0026\"\u0026\"!==d||h++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;e.firstChild;)f.insertBefore(e.firstChild,c);g.data=\"$\";g._reactRetry\u0026\u0026g._reactRetry()}}b.length=0};\n$RC=function(b,a){if(a=document.getElementById(a))(b=document.getElementById(b))?(b.previousSibling.data=\"$~\",$RB.push(b,a),2===$RB.length\u0026\u0026(b=\"number\"!==typeof $RT?0:$RT,a=performance.now(),setTimeout($RV.bind(null,$RB),2300\u003ea\u0026\u00262E3\u003ca?2300-a:b+300-a))):a.parentNode.removeChild(a)};$RC(\"B:0\",\"S:0\")\u003c/script\u003e\u003cdiv hidden id=\"S:1\"\u003e\u003cdiv class=\"flex w-full flex-col gap-12 rounded-[20px] bg-background px-8 py-8\"\u003e\u003cdiv class=\"flex flex-col gap-5\"\u003e\u003cdiv class=\"flex flex-col gap-2 sm:gap-4\"\u003e\u003cdiv class=\"flex w-full flex-col gap-2 sm:flex-row sm:items-center sm:gap-4\"\u003e\u003cdiv class=\"flex w-full items-center\"\u003e\u003cp class=\"text-2xl font-medium\"\u003eFrom the Community\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"flex w-full flex-col justify-between gap-2 sm:flex-row sm:gap-4\"\u003e\u003cbutton type=\"button\" role=\"combobox\" aria-controls=\"radix-_R_5j4lul5tmplb_\" aria-expanded=\"false\" aria-autocomplete=\"none\" dir=\"ltr\" data-state=\"closed\" class=\"flex h-9 items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [\u0026amp;\u0026gt;span]:line-clamp-1 w-36\"\u003e\u003cspan style=\"pointer-events:none\"\u003e\u003c/span\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-4 w-4 opacity-50\" fill=\"currentColor\" aria-hidden=\"true\"\u003e\u003cpath d=\"M480-356q-6 0-11-2t-10-7L261-563q-9-9-8.5-21.5T262-606t21.5-9 21.5 9l175 176 176-176q9-9 21-8.5t21 9.5 9 21.5-9 21.5L501-365q-5 5-10 7t-11 2\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/button\u003e\u003cselect aria-hidden=\"true\" tabindex=\"-1\" style=\"position:absolute;border:0;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;word-wrap:normal\"\u003e\u003c/select\u003e\u003cdiv class=\"flex flex-wrap gap-2\"\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80 h-9 cursor-pointer px-3 py-2 text-sm\"\u003eDiscover\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003eInternal Tools\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003eWebsite\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003ePersonal\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003eConsumer App\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003eB2B App\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003ePrototype\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"ml-auto flex w-36 justify-end md:ml-0\"\u003e\u003cbutton class=\"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors duration-100 ease-in-out focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [\u0026amp;_svg]:pointer-events-none hover:bg-accent rounded-md px-4 py-2 h-9\"\u003e\u003ca class=\"focus:outline-none\" href=\"/projects/featured\"\u003eView All\u003c/a\u003e\u003c/button\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"grid w-full grid-cols-1 gap-6 md:grid-cols-3 lg:grid-cols-4\"\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cscript\u003e$RC(\"B:1\",\"S:1\")\u003c/script\u003e\u003cscript\u003e(self.__next_f=self.__next_f||[]).push([0])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1:\\\"$Sreact.fragment\\\"\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"3:I[34389,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"4480\\\",\\\"static/chunks/app/(HomeLayout)/layout-b7a9a2f8a03a735a.js\\\"],\\\"default\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"4:I[41094,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"4480\\\",\\\"static/chunks/app/(HomeLayout)/layout-b7a9a2f8a03a735a.js\\\"],\\\"Background\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"5:I[70999,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"RootDialog\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"6:I[15153,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"ViewSwitcherAutoEnable\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"7:I[13465,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"CreateWorkspaceDialog\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"8:I[37430,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"default\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"9:I[7140,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"WorkspacePaymentFailedDialog\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"a:I[52333,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"PostCheckoutDialog\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"b:I[36303,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"default\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"c:I[44695,[],\\\"\\\"]\\nd:I[77099,[],\\\"\\\"]\\ne:I[61314,[],\\\"ClientPageRoot\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"f:I[79559,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"6298\\\",\\\"static/chunks/6298-b1e023719cc91137.js\\\",\\\"6006\\\",\\\"static/chunks/6006-67e3eba5e79db531.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"1003\\\",\\\"static/chunks/1003-679c90e17e3abbe0.js\\\",\\\"717\\\",\\\"static/chunks/717-99afeb715c65bbcd.js\\\",\\\"4678\\\",\\\"static/chunks/4678-0d96f1cb3b35c680.js\\\",\\\"5271\\\",\\\"static/chunks/app/(HomeLayout)/page-a8aa82e6f41bbfe4.js\\\"],\\\"default\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"10:I[32517,[],\\\"OutletBoundary\\\"]\\n12:I[83827,[],\\\"AsyncMetadataOutlet\\\"]\\n14:I[32517,[],\\\"ViewportBoundary\\\"]\\n16:I[32517,[],\\\"MetadataBoundary\\\"]\\n17:\\\"$Sreact.suspense\\\"\\n19:I[40157,[],\\\"\\\"]\\n1a:I[18827,[],\\\"IconMark\\\"]\\n:HL[\\\"/_next/static/media/04c95c14768672d3-s.p.woff2\\\",\\\"font\\\",{\\\"crossOrigin\\\":\\\"\\\",\\\"type\\\":\\\"font/woff2\\\"}]\\n:HL[\\\"/_next/static/media/739c2d8941231bb4-s.p.woff2\\\",\\\"font\\\",{\\\"crossOrigin\\\":\\\"\\\",\\\"type\\\":\\\"font/woff2\\\"}]\\n:HL[\\\"/_next/static/css/acf7c57c1c28fc6e.css\\\",\\\"style\\\"]\\n:HL[\\\"/_next/static/css/d4db635cc205055a.css\\\",\\\"style\\\"]\\n:HL[\\\"/_next/static/css/50809e25ee5695d7.css\\\",\\\"style\\\"]\\n:HL[\\\"/_next/static/css/281811c1f3d8bb8a.css\\\",\\\"style\\\"]\\n:HL[\\\"/_next/static/css/9218524b4122c5d5.css\\\",\\\"style\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"0:{\\\"P\\\":null,\\\"b\\\":\\\"vXOJR48sI04x5ASFKz3sr\\\",\\\"p\\\":\\\"\\\",\\\"c\\\":[\\\"\\\",\\\"\\\"],\\\"i\\\":false,\\\"f\\\":[[[\\\"\\\",{\\\"children\\\":[\\\"(HomeLayout)\\\",{\\\"children\\\":[\\\"__PAGE__\\\",{}]}]},\\\"$undefined\\\",\\\"$undefined\\\",true],[\\\"\\\",[\\\"$\\\",\\\"$1\\\",\\\"c\\\",{\\\"children\\\":[[[\\\"$\\\",\\\"link\\\",\\\"0\\\",{\\\"rel\\\":\\\"stylesheet\\\",\\\"href\\\":\\\"/_next/static/css/acf7c57c1c28fc6e.css\\\",\\\"precedence\\\":\\\"next\\\",\\\"crossOrigin\\\":\\\"$undefined\\\",\\\"nonce\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"link\\\",\\\"1\\\",{\\\"rel\\\":\\\"stylesheet\\\",\\\"href\\\":\\\"/_next/static/css/d4db635cc205055a.css\\\",\\\"precedence\\\":\\\"next\\\",\\\"crossOrigin\\\":\\\"$undefined\\\",\\\"nonce\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"link\\\",\\\"2\\\",{\\\"rel\\\":\\\"stylesheet\\\",\\\"href\\\":\\\"/_next/static/css/50809e25ee5695d7.css\\\",\\\"precedence\\\":\\\"next\\\",\\\"crossOrigin\\\":\\\"$undefined\\\",\\\"nonce\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"link\\\",\\\"3\\\",{\\\"rel\\\":\\\"stylesheet\\\",\\\"href\\\":\\\"/_next/static/css/281811c1f3d8bb8a.css\\\",\\\"precedence\\\":\\\"next\\\",\\\"crossOrigin\\\":\\\"$undefined\\\",\\\"nonce\\\":\\\"$undefined\\\"}]],\\\"$L2\\\"]}],{\\\"children\\\":[\\\"(HomeLayout)\\\",[\\\"$\\\",\\\"$1\\\",\\\"c\\\",{\\\"children\\\":[[[\\\"$\\\",\\\"link\\\",\\\"0\\\",{\\\"rel\\\":\\\"stylesheet\\\",\\\"href\\\":\\\"/_next/static/css/9218524b4122c5d5.css\\\",\\\"precedence\\\":\\\"next\\\",\\\"crossOrigin\\\":\\\"$undefined\\\",\\\"nonce\\\":\\\"$undefined\\\"}]],[\\\"$\\\",\\\"div\\\",null,{\\\"className\\\":\\\"relative min-h-screen w-full bg-background transition-none\\\",\\\"children\\\":[[\\\"$\\\",\\\"$L3\\\",null,{}],[\\\"$\\\",\\\"$L4\\\",null,{}],[\\\"$\\\",\\\"div\\\",null,{\\\"className\\\":\\\"absolute inset-0\\\",\\\"style\\\":{\\\"backgroundImage\\\":\\\"url(/_next/static/media/grain.1ccdda41.png)\\\",\\\"backgroundSize\\\":\\\"100px 100px\\\",\\\"backgroundRepeat\\\":\\\"repeat\\\",\\\"backgroundBlendMode\\\":\\\"overlay\\\",\\\"backgroundPosition\\\":\\\"left top\\\",\\\"mixBlendMode\\\":\\\"overlay\\\"}}],[\\\"$\\\",\\\"$L5\\\",null,{}],[\\\"$\\\",\\\"$L6\\\",null,{}],[\\\"$\\\",\\\"$L7\\\",null,{}],[\\\"$\\\",\\\"$L8\\\",null,{}],[\\\"$\\\",\\\"$L9\\\",null,{}],[\\\"$\\\",\\\"$La\\\",null,{}],[\\\"$\\\",\\\"$Lb\\\",null,{\\\"footerClassName\\\":\\\"mt-6\\\",\\\"children\\\":[\\\"$\\\",\\\"$Lc\\\",null,{\\\"parallelRouterKey\\\":\\\"children\\\",\\\"error\\\":\\\"$undefined\\\",\\\"errorStyles\\\":\\\"$undefined\\\",\\\"errorScripts\\\":\\\"$undefined\\\",\\\"template\\\":[\\\"$\\\",\\\"$Ld\\\",null,{}],\\\"templateStyles\\\":\\\"$undefined\\\",\\\"templateScripts\\\":\\\"$undefined\\\",\\\"notFound\\\":[[[\\\"$\\\",\\\"title\\\",null,{\\\"children\\\":\\\"404: This page could not be found.\\\"}],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":{\\\"fontFamily\\\":\\\"system-ui,\\\\\\\"Segoe UI\\\\\\\",Roboto,Helvetica,Arial,sans-serif,\\\\\\\"Apple Color Emoji\\\\\\\",\\\\\\\"Segoe UI Emoji\\\\\\\"\\\",\\\"height\\\":\\\"100vh\\\",\\\"textAlign\\\":\\\"center\\\",\\\"display\\\":\\\"flex\\\",\\\"flexDirection\\\":\\\"column\\\",\\\"alignItems\\\":\\\"center\\\",\\\"justifyContent\\\":\\\"center\\\"},\\\"children\\\":[\\\"$\\\",\\\"div\\\",null,{\\\"children\\\":[[\\\"$\\\",\\\"style\\\",null,{\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\\\"}}],[\\\"$\\\",\\\"h1\\\",null,{\\\"className\\\":\\\"next-error-h1\\\",\\\"style\\\":{\\\"display\\\":\\\"inline-block\\\",\\\"margin\\\":\\\"0 20px 0 0\\\",\\\"padding\\\":\\\"0 23px 0 0\\\",\\\"fontSize\\\":24,\\\"fontWeight\\\":500,\\\"verticalAlign\\\":\\\"top\\\",\\\"lineHeight\\\":\\\"49px\\\"},\\\"children\\\":404}],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":{\\\"display\\\":\\\"inline-block\\\"},\\\"children\\\":[\\\"$\\\",\\\"h2\\\",null,{\\\"style\\\":{\\\"fontSize\\\":14,\\\"fontWeight\\\":400,\\\"lineHeight\\\":\\\"49px\\\",\\\"margin\\\":0},\\\"children\\\":\\\"This page could not be found.\\\"}]}]]}]}]],[]],\\\"forbidden\\\":\\\"$undefined\\\",\\\"unauthorized\\\":\\\"$undefined\\\"}]}]]}]]}],{\\\"children\\\":[\\\"__PAGE__\\\",[\\\"$\\\",\\\"$1\\\",\\\"c\\\",{\\\"children\\\":[[\\\"$\\\",\\\"$Le\\\",null,{\\\"Component\\\":\\\"$f\\\",\\\"searchParams\\\":{},\\\"params\\\":{}}],null,[\\\"$\\\",\\\"$L10\\\",null,{\\\"children\\\":[\\\"$L11\\\",[\\\"$\\\",\\\"$L12\\\",null,{\\\"promise\\\":\\\"$@13\\\"}]]}]]}],{},null,false]},null,false]},null,false],[\\\"$\\\",\\\"$1\\\",\\\"h\\\",{\\\"children\\\":[null,[[\\\"$\\\",\\\"$L14\\\",null,{\\\"children\\\":\\\"$L15\\\"}],[\\\"$\\\",\\\"meta\\\",null,{\\\"name\\\":\\\"next-size-adjust\\\",\\\"content\\\":\\\"\\\"}]],[\\\"$\\\",\\\"$L16\\\",null,{\\\"children\\\":[\\\"$\\\",\\\"div\\\",null,{\\\"hidden\\\":true,\\\"children\\\":[\\\"$\\\",\\\"$17\\\",null,{\\\"fallback\\\":null,\\\"children\\\":\\\"$L18\\\"}]}]}]]}],false]],\\\"m\\\":\\\"$undefined\\\",\\\"G\\\":[\\\"$19\\\",[]],\\\"s\\\":false,\\\"S\\\":false}\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"15:[[\\\"$\\\",\\\"meta\\\",\\\"0\\\",{\\\"charSet\\\":\\\"utf-8\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"1\\\",{\\\"name\\\":\\\"viewport\\\",\\\"content\\\":\\\"width=device-width, initial-scale=1, viewport-fit=cover, user-scalable=no\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"2\\\",{\\\"name\\\":\\\"theme-color\\\",\\\"content\\\":\\\"#fcfbf8\\\"}]]\\n11:null\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"13:{\\\"metadata\\\":[[\\\"$\\\",\\\"title\\\",\\\"0\\\",{\\\"children\\\":\\\"Lovable\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"1\\\",{\\\"name\\\":\\\"description\\\",\\\"content\\\":\\\"Build software products, using only a chat interface\\\"}],[\\\"$\\\",\\\"link\\\",\\\"2\\\",{\\\"rel\\\":\\\"manifest\\\",\\\"href\\\":\\\"/manifest.webmanifest\\\",\\\"crossOrigin\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"3\\\",{\\\"name\\\":\\\"keywords\\\",\\\"content\\\":\\\"lovable,loveable,website builder,ai website builder,no code website builder,software engineer,full stack engineer,product engineer,frontend engineer,backend engineer,ai full stack engineer,ai developer,ai coder,ai engineer,ai software engineer,gpt engineer,gpt coder,gpt software engineer,learn to code,build website,build app,web agency,ai web agency\\\"}],[\\\"$\\\",\\\"link\\\",\\\"4\\\",{\\\"rel\\\":\\\"canonical\\\",\\\"href\\\":\\\"https://lovable.dev\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"5\\\",{\\\"property\\\":\\\"og:title\\\",\\\"content\\\":\\\"Lovable\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"6\\\",{\\\"property\\\":\\\"og:description\\\",\\\"content\\\":\\\"Build software products, using only a chat interface\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"7\\\",{\\\"property\\\":\\\"og:url\\\",\\\"content\\\":\\\"https://lovable.dev\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"8\\\",{\\\"property\\\":\\\"og:image:type\\\",\\\"content\\\":\\\"image/png\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"9\\\",{\\\"property\\\":\\\"og:image:width\\\",\\\"content\\\":\\\"1200\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"10\\\",{\\\"property\\\":\\\"og:image:height\\\",\\\"content\\\":\\\"629\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"11\\\",{\\\"property\\\":\\\"og:image\\\",\\\"content\\\":\\\"https://lovable.dev/opengraph-image.png?e7ae4aa2faea9aea\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"12\\\",{\\\"property\\\":\\\"og:type\\\",\\\"content\\\":\\\"website\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"13\\\",{\\\"name\\\":\\\"twitter:card\\\",\\\"content\\\":\\\"summary_large_image\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"14\\\",{\\\"name\\\":\\\"twitter:title\\\",\\\"content\\\":\\\"Lovable\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"15\\\",{\\\"name\\\":\\\"twitter:description\\\",\\\"content\\\":\\\"Build software products, using only a chat interface\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"16\\\",{\\\"name\\\":\\\"twitter:image:type\\\",\\\"content\\\":\\\"image/png\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"17\\\",{\\\"name\\\":\\\"twitter:image:width\\\",\\\"content\\\":\\\"1200\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"18\\\",{\\\"name\\\":\\\"twitter:image:height\\\",\\\"content\\\":\\\"629\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"19\\\",{\\\"name\\\":\\\"twitter:image\\\",\\\"content\\\":\\\"https://lovable.dev/opengraph-image.png?e7ae4aa2faea9aea\\\"}],[\\\"$\\\",\\\"link\\\",\\\"20\\\",{\\\"rel\\\":\\\"icon\\\",\\\"href\\\":\\\"/favicon.ico\\\",\\\"type\\\":\\\"image/x-icon\\\",\\\"sizes\\\":\\\"73x74\\\"}],[\\\"$\\\",\\\"link\\\",\\\"21\\\",{\\\"rel\\\":\\\"icon\\\",\\\"href\\\":\\\"/icon.svg?9e0c9b5bb1bae062\\\",\\\"type\\\":\\\"image/svg+xml\\\",\\\"sizes\\\":\\\"any\\\"}],[\\\"$\\\",\\\"link\\\",\\\"22\\\",{\\\"rel\\\":\\\"apple-touch-icon\\\",\\\"href\\\":\\\"/apple-icon.png?59950bbf4c03032c\\\",\\\"type\\\":\\\"image/png\\\",\\\"sizes\\\":\\\"180x180\\\"}],[\\\"$\\\",\\\"$L1a\\\",\\\"23\\\",{}]],\\\"error\\\":null,\\\"digest\\\":\\\"$undefined\\\"}\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"18:\\\"$13:metadata\\\"\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1b:I[91999,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1c:I[86782,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"WebVitals\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1d:I[27740,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"Providers\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"2:[\\\"$\\\",\\\"html\\\",null,{\\\"lang\\\":\\\"en\\\",\\\"suppressHydrationWarning\\\":true,\\\"children\\\":[[\\\"$\\\",\\\"head\\\",null,{\\\"children\\\":[[[\\\"$\\\",\\\"$L1b\\\",null,{\\\"async\\\":true,\\\"defer\\\":true,\\\"data-api\\\":\\\"$undefined\\\",\\\"data-domain\\\":\\\"lovable.dev\\\",\\\"data-exclude\\\":\\\"$undefined\\\",\\\"src\\\":\\\"https://plausible.io/js/script.js\\\",\\\"integrity\\\":\\\"$undefined\\\",\\\"crossOrigin\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"next-plausible-init\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"window.plausible = window.plausible || function() { (window.plausible.q = window.plausible.q || []).push(arguments) }\\\"},\\\"nonce\\\":\\\"$undefined\\\"}],\\\"$undefined\\\"],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"domain-redirect\\\",\\\"strategy\\\":\\\"beforeInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"\\\\n              if (window.location.hostname === 'lovable.ink') {\\\\n                const targetDomain = ['lovable', 'dev'].join('.');\\\\n                window.location.href = window.location.href.replace('lovable.ink', targetDomain);\\\\n              }\\\\n            \\\"}}],[\\\"$\\\",\\\"meta\\\",null,{\\\"name\\\":\\\"facebook-domain-verification\\\",\\\"content\\\":\\\"ttyg85abvlstz5a2zp9pcu87efiu9f\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"console-message\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"\\\\n              console.log(`%c\\\\n⠀⣠⠴⠚⡙⠙⠲⣤⣠⠖⢋⡛⠙⠲⣄⠀⠀\\\\n⣴⠃⣰⠟⠉⠙⢦⡈⢁⣾⡟⠉⠳⣆⠸⣇⠀\\\\n⣿⠀⣿⠀⠀⠀⠀⠛⠛⠁⠀⠀⠀⡿⠄⣿⠄\\\\n⠸⡄⠸⣇⠀⠀⠀⠀⠀⠀⠀⠀⣰⠃⣰⡏⠀\\\\n⠀⠙⣆⠙⢧⡀⠀⠀⠀⠀⢀⡴⠃⣰⠏⠀⠀\\\\n⠀⠀⠈⠳⣄⠙⠶⣄⣀⠴⠋⣠⠞⠁⠀⠀⠀\\\\n⠀⠀⠀⠀⠈⠓⢦⡈⢡⣰⠞⠁⠀⠀⠀⠀⠀\\\\n⠀⠀⠀⠀⠀⠀⠀⠉⠋⠁⠀⠀⠀⠀⠀⠀⠀\\\\n\\\\n%cWe're hiring!\\\\n\\\\n%chttps://lovable.dev/careers`, 'color: black', 'color: #FFFFFF; font-weight: 900; font-size: 18px; text-shadow: 1px 1px 2px black;', 'color: blue; font-size: 16px;');\\\\n            \\\"}}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"google-ads\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"src\\\":\\\"https://www.googletagmanager.com/gtag/js?id=AW-16786179175\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"google-ads-config\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"\\\\n              window.dataLayer = window.dataLayer || [];\\\\n              function gtag(){dataLayer.push(arguments);}\\\\n              gtag('js', new Date());\\\\n              gtag('config', 'AW-16786179175');\\\\n            \\\"}}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"google-analytics\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"src\\\":\\\"https://www.googletagmanager.com/gtag/js?id=G-VW0TD1TTTK\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"google-analytics-config\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"\\\\n              window.dataLayer = window.dataLayer || [];\\\\n              function gtag(){dataLayer.push(arguments);}\\\\n              gtag('js', new Date());\\\\n              gtag('config', 'G-VW0TD1TTTK');\\\\n            \\\"}}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"rewardful-queue\\\",\\\"strategy\\\":\\\"beforeInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"(function(w,r){w._rwq=r;w[r]=w[r]||function(){(w[r].q=w[r].q||[]).push(arguments)}})(window,'rewardful');\\\"}}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"async\\\":true,\\\"src\\\":\\\"https://r.wdfl.co/rw.js\\\",\\\"data-rewardful\\\":\\\"e052f0\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"netlify-identity\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"src\\\":\\\"https://identity.netlify.com/v1/netlify-identity-widget.js\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"theme-color\\\",\\\"strategy\\\":\\\"beforeInteractive\\\",\\\"children\\\":\\\"const setThemeColor = () =\\u003e {\\\\n            const m = document.querySelector('meta[name=\\\\\\\"theme-color\\\\\\\"]');\\\\n            if (!m) return;\\\\n            const isDark = document.documentElement.classList.contains('dark');\\\\n            m.setAttribute('content', isDark ? '#1c1c1c' : '#fcfbf8');\\\\n          };\\\\n\\\\n          setThemeColor();\\\\n\\\\n          new MutationObserver(setThemeColor).observe(document.documentElement, {\\\\n            attributes: true,\\\\n            attributeFilter: ['class'],\\\\n  });\\\"}]]}],[\\\"$\\\",\\\"body\\\",null,{\\\"className\\\":\\\"__className_83c9a9 __variable_adeef6 flex min-h-dvh flex-col\\\",\\\"children\\\":[[\\\"$\\\",\\\"$L1c\\\",null,{}],[\\\"$\\\",\\\"div\\\",null,{\\\"className\\\":\\\"flex min-h-0 flex-1 flex-col\\\",\\\"children\\\":[[\\\"$\\\",\\\"$L1d\\\",null,{\\\"user\\\":null,\\\"bootstrapData\\\":{\\\"distinctID\\\":\\\"53ae0229-da0f-46b0-80fe-2188ef6da862\\\",\\\"featureFlags\\\":{\\\"downgrade-dialog\\\":true,\\\"contribution\\\":false,\\\"credit-rollovers-monthly\\\":false,\\\"knowledge-upwork\\\":true,\\\"new-feature-dialog\\\":false,\\\"in-app-teaching\\\":false,\\\"user-calls-agent-power-users\\\":false,\\\"enable-backups-in-revert\\\":false,\\\"july-2025-tech-stack-bump\\\":true,\\\"growth-ktlo\\\":true,\\\"screenshots-hover\\\":false,\\\"safety-validation-enabled\\\":true,\\\"active-user-interview-cohort\\\":false,\\\"retrieval-boost\\\":\\\"medium\\\",\\\"dancing-octopus\\\":false,\\\"preprocess-large-knowledge-files\\\":false,\\\"lovable-db-testers\\\":false,\\\"island-prompt-bar\\\":false,\\\"different-experience\\\":false,\\\"no-op-2\\\":\\\"control\\\",\\\"project_overview_in_context\\\":\\\"test\\\",\\\"wet-cat\\\":\\\"control\\\",\\\"view-switcher\\\":false,\\\"simplified-outofcredits-dialog\\\":false,\\\"security-review\\\":true,\\\"plan-mode-toggle\\\":true,\\\"new-pricing-plans\\\":true,\\\"agent-refactor\\\":true,\\\"stripe_connect\\\":false,\\\"prefill_prompt\\\":\\\"control\\\",\\\"longer-history\\\":false,\\\"initial-generation-discount\\\":\\\"control\\\",\\\"use-scheduler-schim\\\":false,\\\"dancing-octopus2\\\":\\\"control\\\",\\\"bronzeage\\\":true,\\\"chat-mode-thinking\\\":\\\"control\\\",\\\"social-proof\\\":\\\"test\\\",\\\"claude-4-sonnet-primary-provider\\\":\\\"bedrock\\\",\\\"ccpa\\\":true,\\\"supabase-docs-integration\\\":\\\"control\\\",\\\"no-design\\\":false,\\\"agent-mode-toggle\\\":true,\\\"quartz-toggle\\\":false,\\\"upload-any-file\\\":false,\\\"hide-public-projects\\\":false,\\\"launchpad-example-prompts\\\":false,\\\"request_routing\\\":false,\\\"data-collection-opt-out\\\":false,\\\"chat-mode-agent-refactor\\\":true,\\\"backend-any-file-support\\\":false,\\\"run-linter-after-migration\\\":\\\"test\\\",\\\"bronzeage-client-selector\\\":true,\\\"visual-edits-redesign\\\":false,\\\"prompt-enhancer\\\":false,\\\"Agent-Average-User\\\":false,\\\"start-sandbox-background\\\":true,\\\"enable-knowledge-as-virtual-files\\\":false,\\\"minor-tech-stack-bump-july-2025\\\":false,\\\"memory-integration\\\":false,\\\"nav-test\\\":true,\\\"fast_deploys\\\":true,\\\"community-freshness\\\":false,\\\"agent-integrations\\\":false,\\\"is-internal-user\\\":false,\\\"tool-use-card-v2\\\":false,\\\"custom_domains\\\":true,\\\"stuck-user-thinking\\\":false,\\\"firestore_custom_domains\\\":true,\\\"subtitle_test\\\":\\\"text-7\\\",\\\"temporal-revert-flow\\\":true,\\\"agent-2-0\\\":\\\"test\\\",\\\"internal\\\":false,\\\"referral-copy-confetti\\\":true,\\\"onboarding_beginning\\\":true,\\\"conversation_summary\\\":\\\"control\\\",\\\"no-op\\\":\\\"test\\\",\\\"chat-suggestions\\\":false,\\\"integration-connect\\\":false,\\\"subtitles\\\":false,\\\"visual-edits-v2\\\":false,\\\"code_editor_write\\\":false,\\\"fiverr-integration\\\":false,\\\"write-console-logs\\\":false,\\\"download-zip\\\":false,\\\"cached-initial-prompts\\\":false,\\\"send-message-on-creation\\\":true,\\\"stripe_mcp\\\":false,\\\"use-generation-pling\\\":true,\\\"reference_files_in_every_rag_batch\\\":\\\"test\\\",\\\"show-new-preview\\\":false,\\\"import-figma-button\\\":false,\\\"page-speed\\\":true,\\\"show-translation\\\":false,\\\"daily_credits_allocation\\\":false,\\\"different-lovable-experience\\\":\\\"control\\\",\\\"agent-use-session-replay\\\":false,\\\"workspace-template-editor\\\":false,\\\"free_msg_remaining_warning\\\":false,\\\"mobile-redesign\\\":false,\\\"beta_testers\\\":false,\\\"students-discount\\\":true,\\\"teams\\\":false,\\\"log_graph_to_firestore\\\":true,\\\"biz-plan\\\":true,\\\"mcp-plugins\\\":false,\\\"launchpad-upload-image-modal\\\":\\\"control\\\",\\\"custom_domains_buy\\\":true,\\\"claude-thinking-provider-order\\\":\\\"control\\\",\\\"happy-cat\\\":\\\"control\\\",\\\"sso-invites\\\":true,\\\"voice-mode\\\":false,\\\"agent-default\\\":false,\\\"emils-first-message-prompt\\\":\\\"test\\\",\\\"templates\\\":false,\\\"direct-cancellation\\\":true,\\\"beautiful-cat\\\":false,\\\"draft-projects\\\":false,\\\"sso-identity\\\":false,\\\"github-contribution\\\":true,\\\"sidebar\\\":false,\\\"ai-gateway\\\":false,\\\"embed\\\":false,\\\"supabase-experimental\\\":false,\\\"lovable-cloud-beta-rollout\\\":false,\\\"set-credit-limit\\\":false,\\\"lovable_2_dialog\\\":false,\\\"shopify-integration\\\":false,\\\"flash-mode-toggle\\\":false,\\\"sigma\\\":false,\\\"nudge-chat-mode\\\":true,\\\"show-nav-links\\\":true,\\\"User-Calls-Active-Users\\\":false}},\\\"messages\\\":{\\\"HomePage\\\":{\\\"title\\\":\\\"Build something\\\",\\\"subtitle\\\":\\\"Create apps and websites by chatting with AI\\\",\\\"createForm\\\":{\\\"placeholder\\\":\\\"Describe your app idea...\\\"}},\\\"TypeWriter\\\":{\\\"prefix\\\":\\\"Ask Lovable to create \\\",\\\"words\\\":[\\\"a landing page for my...\\\",\\\"a blog about...\\\",\\\"a web app that...\\\",\\\"a prototype...\\\",\\\"an internal tool that...\\\",\\\"a dashboard to...\\\"]},\\\"VisibilitySelection\\\":{\\\"public\\\":{\\\"title\\\":\\\"Public\\\",\\\"description\\\":\\\"Anyone can view and remix\\\",\\\"publishingDisabled\\\":\\\"Publishing disabled\\\",\\\"publishingDisabledDescription\\\":\\\"Only admins can publish projects in this workspace\\\",\\\"disabled\\\":\\\"Disabled\\\"},\\\"workspace\\\":{\\\"title\\\":\\\"Workspace\\\",\\\"description\\\":\\\"Only visible to your workspace\\\"},\\\"draft\\\":{\\\"title\\\":\\\"Personal\\\",\\\"description\\\":\\\"Only visible to yourself, unless shared\\\",\\\"tooltip\\\":\\\"Only you and workspace admins can see this project.\\\"},\\\"upgradeMessages\\\":{\\\"workspaceRequired\\\":\\\"You need to be on a team plan to make your project shared with workspace.\\\",\\\"proRequired\\\":\\\"You need to be on a pro plan to make your project private to your workspace.\\\",\\\"businessRequired\\\":\\\"You need to be on a business plan to make your project personal.\\\"}},\\\"WorkspaceProjects\\\":{\\\"myDrafts\\\":\\\"My Drafts\\\",\\\"workspaceTitle\\\":\\\"{workspaceName}'s Workspace\\\",\\\"showMore\\\":\\\"Show more\\\",\\\"gettingProjects\\\":\\\"Getting all your projects...\\\",\\\"noProjectsFound\\\":\\\"No projects found\\\"},\\\"CommunityProjects\\\":{\\\"title\\\":\\\"From the Community\\\",\\\"showMore\\\":\\\"Show More\\\",\\\"loading\\\":\\\"Loading...\\\"},\\\"ProjectsHeader\\\":{\\\"viewAll\\\":\\\"View All\\\"},\\\"Navigation\\\":{\\\"community\\\":\\\"Community\\\",\\\"pricing\\\":\\\"Pricing\\\",\\\"enterprise\\\":\\\"Enterprise\\\",\\\"learn\\\":\\\"Learn\\\",\\\"shipped\\\":\\\"Shipped\\\",\\\"launched\\\":\\\"Launched\\\",\\\"login\\\":\\\"Log in\\\",\\\"getStarted\\\":\\\"Get started\\\"},\\\"CommunityFilters\\\":{\\\"sortBy\\\":\\\"Sort by\\\",\\\"popular\\\":\\\"Popular\\\",\\\"trending\\\":\\\"Trending\\\",\\\"recent\\\":\\\"Recent\\\",\\\"discover\\\":\\\"Discover\\\"},\\\"ProjectCategories\\\":{\\\"internalTools\\\":\\\"Internal Tools\\\",\\\"website\\\":\\\"Website\\\",\\\"personal\\\":\\\"Personal\\\",\\\"consumerApp\\\":\\\"Consumer App\\\",\\\"b2bApp\\\":\\\"B2B App\\\",\\\"prototype\\\":\\\"Prototype\\\"},\\\"Footer\\\":{\\\"product\\\":{\\\"title\\\":\\\"Product\\\",\\\"pricing\\\":\\\"Pricing\\\",\\\"studentDiscount\\\":\\\"Student discount\\\",\\\"solutions\\\":\\\"Solutions\\\",\\\"integrations\\\":\\\"Integrations\\\",\\\"importFromFigma\\\":\\\"Import from Figma\\\",\\\"changelog\\\":\\\"Changelog\\\",\\\"status\\\":\\\"Status\\\"},\\\"community\\\":{\\\"title\\\":\\\"Community\\\",\\\"becomeAPartner\\\":\\\"Become a partner\\\",\\\"hireAPartner\\\":\\\"Hire a partner\\\",\\\"affiliates\\\":\\\"Affiliates\\\",\\\"discord\\\":\\\"Discord\\\",\\\"reddit\\\":\\\"Reddit\\\",\\\"twitter\\\":\\\"X / Twitter\\\",\\\"linkedin\\\":\\\"LinkedIn\\\"},\\\"resources\\\":{\\\"title\\\":\\\"Resources\\\",\\\"learn\\\":\\\"Learn\\\",\\\"howToGuides\\\":\\\"How-to guides\\\",\\\"videos\\\":\\\"Videos\\\",\\\"blog\\\":\\\"Blog\\\",\\\"launched\\\":\\\"Launched\\\",\\\"support\\\":\\\"Support\\\"},\\\"company\\\":{\\\"title\\\":\\\"Company\\\",\\\"careers\\\":\\\"Careers\\\",\\\"brandGuidelines\\\":\\\"Press \\u0026 media\\\",\\\"enterprise\\\":\\\"Enterprise\\\",\\\"security\\\":\\\"Security\\\",\\\"trustCenter\\\":\\\"Trust center\\\"},\\\"legal\\\":{\\\"title\\\":\\\"Legal\\\",\\\"privacyPolicy\\\":\\\"Privacy policy\\\",\\\"cookieSettings\\\":\\\"Cookie settings\\\",\\\"termsConditions\\\":\\\"Terms \\u0026 conditions\\\",\\\"reportAbuse\\\":\\\"Report abuse\\\",\\\"reportSecurity\\\":\\\"Report security concerns\\\"}},\\\"AccountDropdown\\\":{\\\"settings\\\":\\\"Settings\\\",\\\"invite\\\":\\\"Invite\\\",\\\"invitations\\\":\\\"Invitations ({count})\\\",\\\"workspaces\\\":\\\"Workspaces ({count})\\\",\\\"showMore\\\":\\\"Show more\\\",\\\"showLess\\\":\\\"Show less\\\",\\\"createNewWorkspace\\\":\\\"Create new workspace\\\",\\\"helpCenter\\\":\\\"Help Center\\\",\\\"signOut\\\":\\\"Sign out\\\",\\\"accept\\\":\\\"Accept\\\"},\\\"CreateWorkspaceDialog\\\":{\\\"steps\\\":{\\\"name\\\":{\\\"title\\\":\\\"Create a Workspace\\\",\\\"description\\\":\\\"Create a new place to make projects or collaborate with others.\\\"},\\\"plan\\\":{\\\"title\\\":\\\"Select a Plan\\\",\\\"description\\\":\\\"Select a plan for your new workspace.\\\"}},\\\"form\\\":{\\\"workspaceName\\\":\\\"Workspace Name\\\",\\\"workspaceNamePlaceholder\\\":\\\"Enter workspace name\\\"},\\\"buttons\\\":{\\\"goBack\\\":\\\"Go Back\\\",\\\"continueToPlan\\\":\\\"Continue to Plan\\\",\\\"select\\\":\\\"Select\\\",\\\"selected\\\":\\\"Selected\\\",\\\"contactUs\\\":\\\"Contact us\\\",\\\"createWorkspace\\\":\\\"Create Workspace\\\",\\\"creating\\\":\\\"Creating...\\\"},\\\"plans\\\":{\\\"pro\\\":{\\\"name\\\":\\\"Pro\\\",\\\"description\\\":\\\"For more projects and usage\\\",\\\"featuresLabel\\\":\\\"Everything in Free, plus:\\\",\\\"features\\\":{\\\"credits\\\":\\\"100+ credits per month\\\",\\\"privateProjects\\\":\\\"Private projects\\\",\\\"removeBadge\\\":\\\"Remove the Lovable badge\\\",\\\"customDomains\\\":\\\"Custom domains\\\",\\\"roleAccess\\\":\\\"Role based access\\\"}},\\\"enterprise\\\":{\\\"name\\\":\\\"Enterprise\\\",\\\"description\\\":\\\"For custom needs\\\",\\\"customPriceLabel\\\":\\\"Custom\\\",\\\"featuresLabel\\\":\\\"Everything in Pro, plus:\\\",\\\"features\\\":{\\\"support\\\":\\\"Dedicated support\\\",\\\"integrations\\\":\\\"Custom integrations\\\",\\\"sso\\\":\\\"SSO\\\",\\\"optOut\\\":\\\"Opt out of data training\\\"}}},\\\"errors\\\":{\\\"workspaceNameRequired\\\":\\\"Workspace name is required\\\"}},\\\"Auth\\\":{\\\"logIn\\\":\\\"Log in\\\",\\\"createAccount\\\":\\\"Create your account\\\",\\\"email\\\":\\\"Email\\\",\\\"password\\\":\\\"Password\\\",\\\"forgotPassword\\\":\\\"Forgot password?\\\",\\\"continueWithGoogle\\\":\\\"Continue with Google\\\",\\\"or\\\":\\\"Or\\\",\\\"agreeToOur\\\":\\\"I agree to our\\\",\\\"termsOfService\\\":\\\"Terms of Service\\\",\\\"and\\\":\\\"and\\\",\\\"privacyPolicy\\\":\\\"Privacy Policy\\\",\\\"lastUsed\\\":\\\"Last used\\\",\\\"recommended\\\":\\\"Recommended\\\",\\\"continue\\\":\\\"Continue\\\",\\\"loading\\\":\\\"Loading...\\\",\\\"edit\\\":\\\"Edit\\\",\\\"loginWithSSO\\\":\\\"Login with {provider} SSO\\\",\\\"signUpWithSSO\\\":\\\"Sign up with {provider} SSO\\\",\\\"error\\\":\\\"Error\\\",\\\"errors\\\":{\\\"emailAlreadyInUse\\\":\\\"An account with this email already exists\\\",\\\"tooManyRequests\\\":\\\"Too many requests. Please try again later\\\",\\\"invalidLoginCredentials\\\":\\\"Invalid email or password\\\",\\\"popupBlocked\\\":\\\"Popup was blocked by your browser. Please allow popups for this site\\\",\\\"operationNotAllowed\\\":\\\"This authentication method is not enabled\\\",\\\"accountExistsWithDifferentCredential\\\":\\\"An account with this email already exists using a different sign-in method\\\",\\\"invalidCredential\\\":\\\"The provided credentials are invalid. Please try again\\\",\\\"termsNotAccepted\\\":\\\"Please accept the terms\\\",\\\"termsNotAcceptedDescription\\\":\\\"You must agree to our Terms of Service and Privacy Policy to continue\\\",\\\"invalidEmail\\\":\\\"Please enter a valid email address\\\",\\\"ssoAuthFailed\\\":\\\"SSO authentication failed\\\",\\\"googleAuthFailed\\\":\\\"Google authentication failed\\\",\\\"githubAuthFailed\\\":\\\"GitHub authentication failed\\\",\\\"tryAgainOrUsePassword\\\":\\\"Please try again or use email/password login.\\\",\\\"ssoNoLongerAvailable\\\":\\\"SSO no longer available\\\",\\\"ssoNoLongerAvailableDescription\\\":\\\"Your organization's SSO is no longer available. Please log in with another method or contact support.\\\",\\\"missingPassword\\\":\\\"Password is required\\\"},\\\"eqt\\\":{\\\"notAffiliated\\\":\\\"Not affiliated with EQT?\\\",\\\"clickHere\\\":\\\"Click here\\\"}},\\\"LoginSignupTypewriter\\\":{\\\"prefix\\\":\\\"Ask Lovable to build \\\",\\\"words\\\":[\\\"your saas startup.\\\",\\\"your landing page.\\\",\\\"your blog.\\\",\\\"your portfolio.\\\",\\\"web apps.\\\",\\\"interactive prototypes.\\\",\\\"internal tools.\\\",\\\"dashboards.\\\"]},\\\"GettingStarted\\\":{\\\"title\\\":\\\"Let's personalize your Lovable\\\",\\\"steps\\\":{\\\"name\\\":\\\"What is your name?\\\",\\\"heardFrom\\\":\\\"Where did you hear about us?\\\",\\\"primaryUseCase\\\":\\\"What will you use Lovable for?\\\",\\\"role\\\":\\\"What describes you best?\\\",\\\"buildGoal\\\":\\\"What are you building with Lovable?\\\",\\\"invite\\\":\\\"Invite your team\\\"},\\\"options\\\":{\\\"buildGoal\\\":{\\\"website\\\":\\\"Website / Landing Page\\\",\\\"saas\\\":\\\"SaaS App\\\",\\\"design\\\":\\\"Design\\\",\\\"ecommerce\\\":\\\"E-commerce\\\",\\\"games\\\":\\\"Games\\\",\\\"internal_tools\\\":\\\"Internal Tools\\\",\\\"prototyping\\\":\\\"Prototyping/MVP\\\",\\\"side_projects\\\":\\\"Side Projects\\\",\\\"other\\\":\\\"Other\\\"},\\\"heardFrom\\\":{\\\"x\\\":\\\"X\\\",\\\"youtube\\\":\\\"YouTube\\\",\\\"linkedin\\\":\\\"LinkedIn\\\",\\\"github\\\":\\\"GitHub\\\",\\\"newsletter\\\":\\\"Newsletter\\\",\\\"press_media\\\":\\\"Press/Media\\\",\\\"reddit\\\":\\\"Reddit\\\",\\\"google\\\":\\\"Google\\\",\\\"friend\\\":\\\"Friend\\\",\\\"colleague\\\":\\\"Colleague\\\",\\\"tiktok\\\":\\\"Tiktok\\\",\\\"instagram\\\":\\\"Instagram\\\",\\\"facebook\\\":\\\"Facebook\\\",\\\"other\\\":\\\"Other\\\"},\\\"role\\\":{\\\"software_developer\\\":\\\"Developer\\\",\\\"product_manager\\\":\\\"Product Manager\\\",\\\"entrepreneur\\\":\\\"Founder\\\",\\\"creator\\\":\\\"Content Creator\\\",\\\"designer\\\":\\\"Designer\\\",\\\"marketer\\\":\\\"Marketer\\\",\\\"student\\\":\\\"Student\\\",\\\"educator\\\":\\\"Educator\\\",\\\"hobbyist\\\":\\\"Hobbyist/Personal Use\\\",\\\"other\\\":\\\"Other\\\"},\\\"primaryUseCase\\\":{\\\"personal_projects\\\":\\\"Personal Projects\\\",\\\"work_professional\\\":\\\"Client Work\\\",\\\"academic_research\\\":\\\"For My Company\\\",\\\"other\\\":\\\"Other\\\"},\\\"workspaceRole\\\":{\\\"admin\\\":\\\"Admin\\\",\\\"member\\\":\\\"Editor\\\"}},\\\"navigation\\\":{\\\"back\\\":\\\"Back\\\",\\\"skip\\\":\\\"Skip\\\",\\\"continue\\\":\\\"Continue\\\",\\\"finish\\\":\\\"Finish\\\"},\\\"inviteStep\\\":{\\\"description\\\":\\\"You can invite collaborators for free.\\\"},\\\"nameStep\\\":{\\\"question\\\":\\\"What's your name?\\\",\\\"placeholder\\\":\\\"Enter your full name\\\",\\\"themeQuestion\\\":\\\"What look do you want?\\\",\\\"themes\\\":{\\\"system\\\":\\\"System Theme\\\",\\\"dark\\\":\\\"Dark Mode\\\",\\\"light\\\":\\\"Light Mode\\\"}},\\\"referralNotice\\\":{\\\"title\\\":\\\"Congratulations!\\\",\\\"earned\\\":\\\"You have earned\\\",\\\"credits\\\":\\\"+10 credits\\\",\\\"description\\\":\\\"Thanks to the user that referred you. You can use these credits to create projects, generate content, and more.\\\",\\\"continue\\\":\\\"Continue\\\"},\\\"referralBanner\\\":{\\\"title\\\":\\\"Sign up and redeem your free credits!\\\",\\\"description\\\":\\\"You are signing up through a referral link\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\",\\\"description\\\":\\\"An error occurred\\\"}},\\\"AuthDialog\\\":{\\\"title\\\":\\\"Join and start building\\\",\\\"description\\\":\\\"Log in or create a free account to start building your dream application\\\",\\\"logIn\\\":\\\"Log in\\\",\\\"signUp\\\":\\\"Sign up\\\",\\\"getStartedForFree\\\":\\\"Get started for free\\\",\\\"continueWithGitHub\\\":\\\"Continue with GitHub\\\",\\\"alreadyHaveAccount\\\":\\\"Already have an account?\\\",\\\"dontHaveAccount\\\":\\\"Don't have an account?\\\",\\\"createAccount\\\":\\\"Create your account\\\"},\\\"VerifyEmail\\\":{\\\"title\\\":\\\"Check your inbox\\\",\\\"description\\\":\\\"Click the link we sent to {email} to finish your account setup.\\\",\\\"didntReceiveEmail\\\":\\\"Didn't receive an email?\\\",\\\"tryAgainCountdown\\\":\\\"Try again in {count}s\\\",\\\"resendEmail\\\":\\\"Resend email\\\",\\\"emailVerified\\\":\\\"Email verified\\\",\\\"redirecting\\\":\\\"Redirecting...\\\",\\\"openEmailProvider\\\":\\\"Open {provider}\\\"},\\\"AuthAction\\\":{\\\"loading\\\":\\\"Loading...\\\",\\\"invalidParameters\\\":\\\"Invalid parameters\\\",\\\"tryAgain\\\":\\\"Try to follow the link in your email again or retry the action\\\",\\\"invalidMode\\\":\\\"Invalid mode\\\",\\\"verifyEmail\\\":{\\\"verifying\\\":\\\"Verifying email\\\",\\\"success\\\":{\\\"title\\\":\\\"Email verified\\\",\\\"description\\\":\\\"Your email has been verified\\\"},\\\"result\\\":{\\\"title\\\":\\\"Email verified\\\",\\\"description\\\":\\\"Redirecting...\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\",\\\"invalidCode\\\":\\\"Invalid verification code\\\",\\\"somethingWrong\\\":\\\"Something went wrong\\\",\\\"generic\\\":\\\"Error verifying email\\\"}},\\\"resetPassword\\\":{\\\"title\\\":\\\"Reset Your Password\\\",\\\"form\\\":{\\\"newPassword\\\":\\\"New Password\\\",\\\"confirmPassword\\\":\\\"Confirm Password\\\",\\\"submit\\\":\\\"Reset Password\\\"},\\\"validation\\\":{\\\"passwordsMismatch\\\":\\\"Passwords do not match\\\"},\\\"success\\\":{\\\"title\\\":\\\"Password reset\\\",\\\"description\\\":\\\"Your password has been updated\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\",\\\"invalidCode\\\":\\\"Invalid action code\\\",\\\"somethingWrong\\\":\\\"Something went wrong\\\"}}},\\\"DeleteProjectDialog\\\":{\\\"title\\\":\\\"Delete {projectName}?\\\",\\\"warning\\\":{\\\"cannotUndo\\\":\\\"This action cannot be undone.\\\",\\\"permanentDelete\\\":\\\"This will permanently delete your project.\\\",\\\"including\\\":\\\"Including\\\",\\\"deployments\\\":\\\"Any deployments made with Lovable\\\",\\\"previewLinks\\\":\\\"All preview links\\\",\\\"generatedCode\\\":\\\"All generated code\\\"},\\\"githubNote\\\":{\\\"prefix\\\":\\\"Note: The Github repository\\\",\\\"suffix\\\":\\\"will not be deleted.\\\"},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"deleteProject\\\":\\\"Delete Project\\\",\\\"deleting\\\":\\\"Deleting...\\\"},\\\"success\\\":{\\\"title\\\":\\\"Project deleted\\\",\\\"description\\\":\\\"Your project has been deleted.\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\",\\\"somethingWrong\\\":\\\"Something went wrong\\\"}},\\\"Settings\\\":{\\\"yourAccount\\\":\\\"Your Account\\\",\\\"project\\\":{\\\"title\\\":\\\"Project\\\",\\\"projectSettings\\\":\\\"Project Settings\\\",\\\"projectSettingsDescription\\\":\\\"Manage your project details, visibility, and preferences.\\\",\\\"domains\\\":\\\"Domains\\\",\\\"domainsDescription\\\":\\\"Publish your project to custom domains.\\\",\\\"analytics\\\":\\\"Analytics\\\",\\\"knowledge\\\":\\\"Knowledge\\\",\\\"knowledgeDescription\\\":\\\"Add custom knowledge to your project.\\\"},\\\"workspace\\\":{\\\"title\\\":\\\"Workspace\\\",\\\"people\\\":\\\"People\\\",\\\"libraries\\\":\\\"Libraries\\\",\\\"plansBilling\\\":\\\"Plans \\u0026 Billing\\\"},\\\"account\\\":{\\\"title\\\":\\\"Account\\\",\\\"labs\\\":\\\"Labs\\\"},\\\"labs\\\":{\\\"title\\\":\\\"Labs\\\",\\\"description\\\":\\\"These are experimental features, that might be modified or removed.\\\",\\\"features\\\":{\\\"gitBranchSwitching\\\":{\\\"title\\\":\\\"GitHub Branch Switching\\\",\\\"description\\\":\\\"Select the branch to make edits to in your GitHub repository.\\\"},\\\"codeEditing\\\":{\\\"title\\\":\\\"Code Editing in Code Mode\\\",\\\"description\\\":\\\"Enable code edits in Code Mode.\\\"}}},\\\"integrations\\\":{\\\"title\\\":\\\"Integrations\\\",\\\"supabase\\\":\\\"Supabase\\\",\\\"github\\\":\\\"GitHub\\\",\\\"mcp\\\":\\\"MCP\\\",\\\"githubTab\\\":{\\\"accounts\\\":{\\\"label\\\":\\\"Connected Account\\\",\\\"description\\\":\\\"Add your GitHub account to manage connected organizations.\\\",\\\"connected\\\":\\\"Connected\\\",\\\"connectGitHub\\\":\\\"Connect GitHub\\\"},\\\"connect\\\":{\\\"connectProject\\\":\\\"Connect Project\\\",\\\"project\\\":\\\"Project\\\",\\\"description\\\":\\\"Connect your project to your GitHub organization in a 2-way sync.\\\",\\\"viewOnGitHub\\\":\\\"View on GitHub\\\"},\\\"clone\\\":{\\\"label\\\":\\\"Clone\\\",\\\"description\\\":\\\"Copy this repository to your local environment.\\\",\\\"copyToClipboard\\\":\\\"Copy to clipboard\\\"},\\\"branch\\\":{\\\"label\\\":\\\"Branch\\\",\\\"description\\\":\\\"Choose the GitHub branch you want to work on inside Lovable.\\\"}},\\\"supabaseTab\\\":{\\\"organizations\\\":{\\\"label\\\":\\\"Organizations\\\",\\\"description\\\":\\\"Connected Supabase organizations will be accessible to all members in this workspace.\\\",\\\"manageConnectedOrganizations\\\":\\\"Manage Connected Organizations\\\",\\\"connectSupabase\\\":\\\"Connect Supabase\\\"},\\\"explainer\\\":{\\\"title\\\":\\\"What is Supabase?\\\",\\\"description\\\":\\\"Supabase is a complete platform for building apps with user authentication, data storage, and other backend capabilities. Connecting it to your Lovable project will enable you to build more advanced apps and support things such as AI features and payments.\\\",\\\"seeDocs\\\":\\\"See docs\\\",\\\"watchTutorial\\\":\\\"Watch tutorial\\\"}}},\\\"libraries\\\":{\\\"title\\\":\\\"Libraries\\\",\\\"description\\\":\\\"Browse and manage team libraries, used to start new projects. Publish new libraries from settings.\\\",\\\"noLibrariesFound\\\":\\\"No libraries found. Add projects to your library to get started.\\\"},\\\"billing\\\":{\\\"title\\\":\\\"Plans \\u0026 Billing\\\",\\\"description\\\":\\\"Choose plans for starting solo, growing your projects, and collaborating with your team.\\\",\\\"inactiveSubscription\\\":\\\"Your subscription is currently \\u003cinactive\\u003einactive\\u003c/inactive\\u003e. You can select a new plan below to restore full functionality to your workspace.\\\",\\\"creditsUsage\\\":{\\\"credits\\\":\\\"Credits\\\",\\\"managePayments\\\":\\\"Manage your payment preferences\\\",\\\"legacyPlan\\\":{\\\"prefix\\\":\\\"You're currently on a legacy plan:\\\",\\\"chargedAt\\\":\\\"charged at ${price}/mo.\\\",\\\"stayOption\\\":\\\"You're welcome to stay on this plan — but if you're curious to explore our new plans, you'll get 20% off for the first 3 months.\\\",\\\"orChangeBelow\\\":\\\", or change to one of our new plans below.\\\"},\\\"currentPlan\\\":{\\\"prefix\\\":\\\"You're currently subscribed to plan:\\\",\\\"chargedAt\\\":\\\"charged at ${price}/mo.\\\",\\\"orChangeBelow\\\":\\\", or change your plan below.\\\"},\\\"monthlyRenewal\\\":{\\\"specific\\\":\\\"Your monthly credits will renew on {date} at {time}.\\\",\\\"generic\\\":\\\"Your credits will renew each month (at midnight UTC).\\\"},\\\"freePlan\\\":{\\\"prefix\\\":\\\"You're currently on plan:\\\",\\\"manageInvoices\\\":\\\"Manage your payment preferences and view past invoices\\\",\\\"orChangeBelow\\\":\\\", or change your plan below.\\\"}}}},\\\"PlanCard\\\":{\\\"popular\\\":\\\"POPULAR\\\",\\\"perMonth\\\":\\\"/month\\\"},\\\"RemoveConfirmDialog\\\":{\\\"defaultTitle\\\":\\\"Remove\\\",\\\"defaultDescription\\\":\\\"Are you sure you want to remove {name}? They will no longer have access.\\\",\\\"defaultConfirmButton\\\":\\\"Remove\\\",\\\"defaultCancelButton\\\":\\\"Cancel\\\",\\\"removing\\\":\\\"Removing...\\\"},\\\"RenameProjectDialog\\\":{\\\"title\\\":\\\"Rename project\\\",\\\"description\\\":\\\"Give your project a new name.\\\",\\\"form\\\":{\\\"projectName\\\":\\\"Project Name\\\",\\\"placeholder\\\":\\\"Enter new project name\\\",\\\"description\\\":\\\"Use lowercase letters, numbers, and hyphens only. Name must start with a lowercase letter and contain at least one hyphen. Example: my-awesome-project\\\"},\\\"validation\\\":{\\\"nameRequired\\\":\\\"Project name is required\\\",\\\"nameTooLong\\\":\\\"Project name must be less than 45 characters\\\",\\\"invalidCharacters\\\":\\\"Project name can only contain lowercase letters, numbers, and hyphens.\\\",\\\"consecutiveHyphens\\\":\\\"Project name cannot contain consecutive hyphens.\\\",\\\"mustStartWithLetter\\\":\\\"Project name must start with a lowercase letter.\\\",\\\"cannotEndWithHyphen\\\":\\\"Project name cannot end with a hyphen.\\\"},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"renameProject\\\":\\\"Rename Project\\\",\\\"renaming\\\":\\\"Renaming...\\\"},\\\"success\\\":{\\\"renamed\\\":\\\"Project renamed successfully\\\"}},\\\"UsernameDialog\\\":{\\\"title\\\":\\\"Set Username\\\",\\\"description\\\":\\\"Please enter your desired username. You can not change your username once you have set it.\\\",\\\"form\\\":{\\\"username\\\":\\\"Username\\\"},\\\"validation\\\":{\\\"minLength\\\":\\\"Username must be at least 3 characters\\\",\\\"maxLength\\\":\\\"Username must be at most 16 characters\\\",\\\"mustStartWithLetter\\\":\\\"Username must start with a letter\\\",\\\"invalidCharacters\\\":\\\"Username can only contain lowercase letters, numbers, and underscores\\\"},\\\"buttons\\\":{\\\"save\\\":\\\"Save\\\"},\\\"success\\\":{\\\"title\\\":\\\"Success\\\",\\\"description\\\":\\\"Username updated successfully\\\"}},\\\"RemoveWorkspaceMemberConfirmDialog\\\":{\\\"title\\\":\\\"Remove workspace member\\\",\\\"description\\\":\\\"Are you sure you want to remove {memberName} from this workspace? They will no longer have access to any workspace projects or resources.\\\"},\\\"RemoveCollaboratorConfirmDialog\\\":{\\\"title\\\":\\\"Remove collaborator\\\",\\\"description\\\":\\\"Are you sure you want to remove {collaboratorName} from this project? They will no longer have access to this project.\\\"},\\\"MoveProjectToWorkspaceModal\\\":{\\\"transferProject\\\":\\\"Transfer project\\\",\\\"title\\\":\\\"Transfer {projectName}\\\",\\\"defaultProjectName\\\":\\\"Project\\\",\\\"description\\\":{\\\"movingToSpecific\\\":\\\"Moving this project to {workspaceName} will:\\\",\\\"movingToNew\\\":\\\"Moving this project to a new workspace will:\\\",\\\"removeAccess\\\":\\\"Remove access for members of {workspaceName}\\\",\\\"grantAccessSpecific\\\":\\\"Grant access to members of {workspaceName}\\\",\\\"grantAccessNew\\\":\\\"Grant access to members of the new workspace\\\",\\\"preserveAccess\\\":\\\"Preserve access for anyone directly invited to the project\\\",\\\"mayRequireRelink\\\":\\\"May require you to re-link GitHub and Supabase organizations/projects\\\"},\\\"warning\\\":{\\\"title\\\":\\\"Warning\\\",\\\"visibilityChange\\\":\\\"This action will turn the project {visibility}\\\",\\\"private\\\":\\\"private\\\",\\\"public\\\":\\\"public\\\"},\\\"form\\\":{\\\"from\\\":\\\"From\\\",\\\"to\\\":\\\"To\\\",\\\"selectWorkspace\\\":\\\"Select a workspace\\\",\\\"notAdmin\\\":\\\"(Not admin)\\\",\\\"createNew\\\":\\\"Create new\\\"},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"confirmTransfer\\\":\\\"Confirm transfer\\\",\\\"transferring\\\":\\\"Transferring...\\\"}},\\\"SupabaseDisconnectConfirmationDialog\\\":{\\\"title\\\":\\\"Disconnect Supabase\\\",\\\"description\\\":\\\"Are you sure you want to disconnect Supabase?\\\",\\\"details\\\":\\\"We will stop deploying edge functions and reading your database schema, but no changes will be made to your code. You can reconnect to Supabase later.\\\",\\\"button\\\":{\\\"disconnect\\\":\\\"Disconnect\\\"},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"disconnect\\\":\\\"Disconnect\\\"},\\\"success\\\":{\\\"title\\\":\\\"Supabase disconnected\\\",\\\"description\\\":\\\"You can connect to a new Supabase project later.\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\"}},\\\"AddMCPServerDialog\\\":{\\\"title\\\":\\\"Add MCP Server\\\",\\\"description\\\":\\\"Connect to a remote MCP server to extend the AI's capabilities.\\\",\\\"form\\\":{\\\"serverName\\\":\\\"Server Name\\\",\\\"serverNamePlaceholder\\\":\\\"My MCP Server\\\",\\\"serverUrl\\\":\\\"Server URL\\\",\\\"serverUrlPlaceholder\\\":\\\"https://mcp.example.com\\\"},\\\"advanced\\\":{\\\"title\\\":\\\"Advanced Settings\\\",\\\"bearerToken\\\":\\\"Bearer Token (Optional)\\\",\\\"bearerTokenPlaceholder\\\":\\\"Enter Bearer token or API key\\\",\\\"bearerTokenDescription\\\":\\\"Some MCP servers use API keys as Bearer tokens instead of OAuth. If your server requires a token, enter it here.\\\"},\\\"status\\\":{\\\"testing\\\":\\\"Testing connection...\\\",\\\"connectionSuccess\\\":\\\"Connection successful! Found {count} tools\\\",\\\"oauthSuccess\\\":\\\"OAuth authenticated successfully! Found {count} tools\\\",\\\"requiresOAuth\\\":\\\"This server requires OAuth authentication\\\",\\\"connectionFailed\\\":\\\"Connection failed\\\"},\\\"tools\\\":{\\\"available\\\":\\\"Available Tools ({count})\\\"},\\\"buttons\\\":{\\\"test\\\":\\\"Test\\\",\\\"testing\\\":\\\"Testing...\\\",\\\"authorize\\\":\\\"Authorize\\\",\\\"starting\\\":\\\"Starting...\\\",\\\"cancel\\\":\\\"Cancel\\\",\\\"addServer\\\":\\\"Add Server\\\",\\\"adding\\\":\\\"Adding...\\\"},\\\"validation\\\":{\\\"fillNameAndUrl\\\":\\\"Please fill in server name and URL first\\\",\\\"enterUrl\\\":\\\"Please enter a URL\\\",\\\"fillAllFields\\\":\\\"Please fill in all fields\\\",\\\"testFirst\\\":\\\"Please test the connection first\\\"},\\\"toast\\\":{\\\"connected\\\":\\\"Connected! Found {count} tools\\\",\\\"requiresOAuth\\\":\\\"This server requires OAuth authentication\\\",\\\"connectionFailed\\\":\\\"Connection failed\\\",\\\"testFailed\\\":\\\"Failed to test connection\\\",\\\"serverAdded\\\":\\\"MCP server added successfully\\\",\\\"addFailed\\\":\\\"Failed to add MCP server\\\",\\\"oauthFailed\\\":\\\"Failed to start OAuth flow\\\"}},\\\"SupabaseReauthDialog\\\":{\\\"title\\\":\\\"We got an update for you!\\\",\\\"description\\\":\\\"To make Supabase integration more robust, Lovable can now read your project logs. Please re-authenticate with Supabase to continue.\\\",\\\"button\\\":{\\\"reauthenticate\\\":\\\"Re-authenticate with Supabase\\\"}},\\\"YourAccountTab\\\":{\\\"title\\\":\\\"Account Settings\\\",\\\"description\\\":\\\"Personalize how others see and interact with you on Lovable.\\\",\\\"avatar\\\":{\\\"label\\\":\\\"Your Avatar\\\",\\\"description\\\":\\\"Your avatar is automatically generated based on your account.\\\"},\\\"userForm\\\":{\\\"name\\\":{\\\"label\\\":\\\"Name\\\",\\\"description\\\":\\\"Your full name, as visible to others.\\\"},\\\"description\\\":{\\\"label\\\":\\\"Description\\\",\\\"description\\\":\\\"A short description of yourself or your work.\\\"},\\\"location\\\":{\\\"label\\\":\\\"Location\\\",\\\"description\\\":\\\"Where you're based.\\\"},\\\"link\\\":{\\\"label\\\":\\\"Link\\\",\\\"description\\\":\\\"Add a link to your personal website or portfolio.\\\"},\\\"hideProfilePicture\\\":{\\\"label\\\":\\\"Hide Profile Picture\\\"},\\\"success\\\":{\\\"title\\\":\\\"Success\\\",\\\"description\\\":\\\"Account settings updated successfully\\\"},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"update\\\":\\\"Update\\\"}},\\\"username\\\":{\\\"label\\\":\\\"Username\\\",\\\"description\\\":\\\"Your public identifier and profile URL.\\\",\\\"placeholder\\\":\\\"Username\\\"},\\\"email\\\":{\\\"label\\\":\\\"Email\\\",\\\"description\\\":\\\"Your email address associated with your account.\\\",\\\"noEmail\\\":\\\"No email available\\\"},\\\"soundEffect\\\":{\\\"label\\\":\\\"Generation complete sound\\\",\\\"description\\\":\\\"Plays a satisfying sound notification when a generation is finished.\\\"},\\\"defaultVisibility\\\":{\\\"label\\\":\\\"Default Project Visibility\\\",\\\"description\\\":\\\"Set whether new projects are publicly accessible by default. You can always change visibility settings later per project.\\\",\\\"success\\\":{\\\"title\\\":\\\"Default project visibility updated\\\",\\\"description\\\":\\\"Default project visibility is now {visibility}\\\"}}},\\\"WorkspaceTab\\\":{\\\"title\\\":\\\"Workspace Settings\\\",\\\"description\\\":\\\"Workspaces allow you to collaborate on projects in real time.\\\",\\\"sections\\\":{\\\"avatar\\\":{\\\"label\\\":\\\"Workspace Avatar\\\",\\\"description\\\":\\\"Set an avatar for your workspace.\\\"},\\\"name\\\":{\\\"label\\\":\\\"Workspace Name\\\",\\\"description\\\":\\\"The name of your workspace.\\\",\\\"placeholder\\\":\\\"Enter workspace name\\\"},\\\"description\\\":{\\\"label\\\":\\\"Description\\\",\\\"description\\\":\\\"A brief description of your workspace.\\\",\\\"placeholder\\\":\\\"Enter workspace description\\\"},\\\"leave\\\":{\\\"label\\\":\\\"Leave Workspace\\\",\\\"description\\\":\\\"Remove yourself from this workspace.\\\",\\\"button\\\":\\\"Leave Workspace\\\"}},\\\"validation\\\":{\\\"nameRequired\\\":\\\"Workspace name is required\\\"},\\\"tooltips\\\":{\\\"adminRequired\\\":\\\"Admin permissions required to modify this setting\\\"},\\\"dialogs\\\":{\\\"leave\\\":{\\\"title\\\":\\\"Leave Workspace\\\",\\\"description\\\":\\\"Are you sure you want to leave this workspace? You will lose access to all projects and resources.\\\"}},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"update\\\":\\\"Update\\\",\\\"leaveWorkspace\\\":\\\"Leave Workspace\\\"},\\\"success\\\":{\\\"title\\\":\\\"Workspace updated\\\",\\\"description\\\":\\\"Your workspace settings have been saved successfully.\\\"}},\\\"PeopleTab\\\":{\\\"title\\\":\\\"People\\\",\\\"defaultWorkspaceName\\\":\\\"Workspace\\\",\\\"descriptions\\\":{\\\"noTeamsPlan\\\":\\\"Collaborate with your team by inviting people to your workspace. Inviting people to your workspace gives access to workspace shared projects and credits.\\\",\\\"teamsPlan\\\":\\\"Inviting people to \\u003cstrong\\u003e{workspaceName}\\u003c/strong\\u003e gives access to workspace shared projects and credits. You're using {membershipCount}/{maxSeats} seats. Need more? \\u003clink\\u003eContact us\\u003c/link\\u003e.\\\",\\\"teamsPlanProject\\\":\\\"Inviting people to \\u003cstrong\\u003e{workspaceName}'s workspace\\u003c/strong\\u003e gives access to workspace shared projects and credits. You're using {membershipCount}/{maxSeats} seats. Need more? \\u003clink\\u003eContact us\\u003c/link\\u003e.\\\"},\\\"content\\\":{\\\"roles\\\":{\\\"admin\\\":\\\"Admin\\\",\\\"editor\\\":\\\"Editor\\\"},\\\"addEmails\\\":\\\"Add emails\\\",\\\"members\\\":\\\"Members\\\",\\\"noUsersFound\\\":\\\"No users found for '{search}'\\\",\\\"noMembersFound\\\":\\\"No members found\\\",\\\"usage\\\":\\\"Usage\\\"}},\\\"ProjectTab\\\":{\\\"overview\\\":{\\\"title\\\":\\\"Overview\\\",\\\"projectName\\\":\\\"Project name\\\",\\\"owner\\\":\\\"Owner\\\",\\\"createdAt\\\":\\\"Created at\\\",\\\"techStack\\\":\\\"Tech stack\\\",\\\"messagesCount\\\":\\\"Messages count\\\",\\\"aiEditsCount\\\":\\\"AI Edits count\\\"},\\\"upgrade\\\":{\\\"text\\\":\\\"Upgrade your plan\\\",\\\"dialogDescription\\\":\\\"Upgrade to Pro to unlock this feature.\\\"},\\\"sections\\\":{\\\"privateProject\\\":{\\\"label\\\":\\\"Private Project\\\",\\\"description\\\":\\\"Keep your project hidden and prevent others from remixing it.\\\",\\\"upgradeDescription\\\":\\\"to keep your project hidden and prevent others from remixing it.\\\"},\\\"hideBadge\\\":{\\\"label\\\":\\\"Hide \\\\\\\"Lovable\\\\\\\" Badge\\\",\\\"description\\\":\\\"Remove the \\\\\\\"Edit with Lovable\\\\\\\" badge from your published work.\\\",\\\"upgradeDescription\\\":\\\"to remove the \\\\\\\"Edit with Lovable\\\\\\\" badge from your published work.\\\"},\\\"featureProject\\\":{\\\"label\\\":\\\"Feature Project\\\",\\\"description\\\":\\\"Highlight this project on the homepage.\\\"},\\\"renameProject\\\":{\\\"label\\\":\\\"Rename Project\\\",\\\"description\\\":\\\"Update your project's title.\\\",\\\"button\\\":\\\"Rename project\\\"},\\\"remixProject\\\":{\\\"label\\\":\\\"Remix Project\\\",\\\"description\\\":\\\"Remix this project.\\\",\\\"button\\\":\\\"Remix this project\\\",\\\"unavailable\\\":\\\"(Unavailable for Supabase projects)\\\"},\\\"deleteProject\\\":{\\\"label\\\":\\\"Delete Project\\\",\\\"description\\\":\\\"Delete this project.\\\",\\\"button\\\":\\\"Delete this project\\\"},\\\"transferProject\\\":{\\\"label\\\":\\\"Transfer Project\\\",\\\"description\\\":\\\"Move the project to a different workspace.\\\"},\\\"publishLibrary\\\":{\\\"label\\\":\\\"Publish as a Library\\\",\\\"description\\\":\\\"Publish to \\u003cworkspace\\u003e{workspaceName}\\u003c/workspace\\u003e to use this project to start new projects.\\\",\\\"defaultWorkspace\\\":\\\"your workspace\\\"},\\\"category\\\":{\\\"label\\\":\\\"Project Category\\\",\\\"description\\\":\\\"Categorize your project to help others find it.\\\",\\\"placeholder\\\":\\\"Select category\\\",\\\"options\\\":{\\\"internal_tools\\\":\\\"Internal Tools\\\",\\\"website\\\":\\\"Website\\\",\\\"personal\\\":\\\"Personal\\\",\\\"consumer_app\\\":\\\"Consumer App\\\",\\\"b2b_app\\\":\\\"B2B App\\\",\\\"prototype\\\":\\\"Prototype\\\"}}}},\\\"GitHubTab\\\":{\\\"title\\\":\\\"GitHub\\\",\\\"description\\\":\\\"Sync your project 2-way with GitHub to collaborate at source.\\\"},\\\"SupabaseTab\\\":{\\\"title\\\":\\\"Supabase\\\",\\\"description\\\":\\\"Integrate user authentication, data storage, and backend capabilities.\\\",\\\"projectSections\\\":{\\\"disabled\\\":\\\"Unfortunately, your project is not able to use Supabase.\\\",\\\"loading\\\":\\\"Loading Supabase...\\\",\\\"connectionProblem\\\":{\\\"title\\\":\\\"Problem with your Supabase connection\\\",\\\"description\\\":\\\"This project is connected to Supabase organization \\u003ccode\\u003e{organizationId}\\u003c/code\\u003e, but this workspace is not connected to that organization. Disconnect the project or add the organization again.\\\",\\\"disconnect\\\":\\\"Disconnect\\\"},\\\"disconnect\\\":{\\\"success\\\":{\\\"title\\\":\\\"Supabase disconnected\\\",\\\"description\\\":\\\"You can connect to a new Supabase project later.\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\"}}}},\\\"MCPTab\\\":{\\\"title\\\":\\\"MCP\\\",\\\"description\\\":\\\"Connect to Model Context Protocol servers for enhanced AI capabilities.\\\",\\\"servers\\\":{\\\"title\\\":\\\"MCP Servers\\\",\\\"description\\\":\\\"Connect to remote MCP servers to extend the AI's capabilities with custom tools and integrations.\\\",\\\"addButton\\\":\\\"Add MCP Server\\\"}},\\\"ChatMessageLengthWarning\\\":{\\\"messageOverLimit\\\":\\\"Message is too long. Exceeded by {count, plural, one {# character} other {# characters}}.\\\",\\\"charactersLeft\\\":\\\"{count, plural, one {# character} other {# characters}} remaining\\\",\\\"limitReached\\\":\\\"Message limit reached ({count, number} characters)\\\"},\\\"ChatUpgradeRow\\\":{\\\"creditsRemaining\\\":\\\"{formattedCredits} free {count, plural, one {credit} other {credits}} remaining today\\\",\\\"upgradeButton\\\":\\\"Upgrade Now\\\"},\\\"ChatInputChatModeSelector\\\":{\\\"mode\\\":\\\"Mode\\\",\\\"chatMode\\\":\\\"Chat mode\\\",\\\"cost\\\":\\\"Cost: 1 message\\\",\\\"modes\\\":{\\\"default\\\":{\\\"title\\\":\\\"Default\\\",\\\"description\\\":\\\"Chat and make edits to your project.\\\"},\\\"chatOnly\\\":{\\\"title\\\":\\\"Chat only\\\",\\\"description\\\":\\\"Chat without making edits to your project.\\\"},\\\"agent\\\":{\\\"title\\\":\\\"Agent\\\",\\\"description\\\":\\\"Experimental reliability fixes in Lovable's AI.\\\"}}},\\\"MessageFeedbackButtons\\\":{\\\"helpful\\\":\\\"Helpful\\\",\\\"notHelpful\\\":\\\"Not helpful\\\",\\\"copied\\\":\\\"Copied!\\\",\\\"copyMessage\\\":\\\"Copy message\\\",\\\"feedback\\\":{\\\"success\\\":\\\"Thanks for your feedback!\\\",\\\"error\\\":{\\\"title\\\":\\\"Failed to save feedback\\\",\\\"description\\\":\\\"Please try again\\\"}}},\\\"ChatInputTextArea\\\":{\\\"chatMode\\\":\\\"Chat\\\",\\\"chatSuggestion\\\":\\\"Chat\\\",\\\"limitReached\\\":\\\"The text you pasted was too long.\\\",\\\"limitReachedDescription\\\":\\\"We've shortened it to {count, number} characters. Check if important parts were removed.\\\"},\\\"WorkspaceProjectFilters\\\":{\\\"search\\\":{\\\"placeholder\\\":\\\"Search projects...\\\"},\\\"sortBy\\\":{\\\"lastEdited\\\":\\\"Last edited\\\",\\\"dateCreated\\\":\\\"Date created\\\",\\\"alphabetical\\\":\\\"Alphabetical\\\"},\\\"order\\\":{\\\"newestFirst\\\":\\\"Newest first\\\",\\\"oldestFirst\\\":\\\"Oldest first\\\",\\\"aToZ\\\":\\\"A–Z\\\",\\\"zToA\\\":\\\"Z–A\\\"},\\\"labels\\\":{\\\"sortBy\\\":\\\"Sort by\\\",\\\"order\\\":\\\"Order\\\"},\\\"userFilter\\\":{\\\"allCreators\\\":\\\"All creators\\\",\\\"you\\\":\\\"(You)\\\",\\\"searchPlaceholder\\\":\\\"Search creators...\\\"}},\\\"ChatVoiceButton\\\":{\\\"notSupported\\\":\\\"Voice is not supported on this browser\\\"},\\\"ChatInputCreateProjectVisibility\\\":{\\\"draft\\\":\\\"Personal\\\",\\\"workspace\\\":\\\"Workspace\\\",\\\"public\\\":\\\"Public\\\",\\\"changeVisibility\\\":\\\"Change project visibility\\\"},\\\"ChatInputActionMenu\\\":{\\\"history\\\":\\\"History\\\",\\\"knowledge\\\":\\\"Knowledge\\\",\\\"projectSettings\\\":\\\"Project Settings\\\",\\\"attach\\\":\\\"Attach\\\"},\\\"ImportFigmaPopover\\\":{\\\"title\\\":\\\"Import from Figma\\\",\\\"step1\\\":{\\\"prefix\\\":\\\"Use the\\\",\\\"linkText\\\":\\\"Builder.io Figma plugin\\\"},\\\"step2\\\":\\\"Select a frame using auto layout\\\",\\\"step3\\\":\\\"Use 'Export to Code', then Lovable\\\",\\\"getPlugin\\\":\\\"Get the plugin\\\",\\\"disabled\\\":\\\"Figma import has been disabled for this workspace\\\"},\\\"AttachImageActionDropdown\\\":{\\\"attachImage\\\":\\\"Attach Image\\\",\\\"importFromFigma\\\":\\\"Import from Figma\\\",\\\"advancedSettings\\\":\\\"Advanced Settings\\\"},\\\"ImageAttachInput\\\":{\\\"attachImage\\\":\\\"Attach image\\\"},\\\"MobileImageUpload\\\":{\\\"camera\\\":\\\"Camera\\\",\\\"images\\\":\\\"Images\\\"},\\\"AttachImageActionModal\\\":{\\\"attach\\\":\\\"Attach\\\",\\\"importFromFigma\\\":\\\"Import from Figma\\\",\\\"advancedSettings\\\":\\\"Advanced Settings\\\",\\\"tooltip\\\":\\\"Upload images and more\\\",\\\"templates\\\":\\\"Use a template\\\"},\\\"EarnFreeCredits\\\":{\\\"getFreeCredits\\\":\\\"Get free credits\\\"},\\\"ReferralDialog\\\":{\\\"title\\\":\\\"Refer \\u0026 Earn\\\",\\\"howItWorks\\\":\\\"How it works:\\\",\\\"features\\\":{\\\"shareLink\\\":\\\"Share your invite link\\\",\\\"theyGetCredits\\\":{\\\"prefix\\\":\\\"They sign up and get\\\",\\\"credits\\\":\\\"extra 10 credits\\\"},\\\"youGetCredits\\\":{\\\"prefix\\\":\\\"You get\\\",\\\"credits\\\":\\\"10 credits\\\",\\\"suffix\\\":\\\"once they publish their first website\\\"}},\\\"inviteLink\\\":\\\"Your invite link:\\\",\\\"buttons\\\":{\\\"copied\\\":\\\"Copied!\\\",\\\"copyLink\\\":\\\"Copy link\\\",\\\"viewTerms\\\":\\\"View Terms and Conditions\\\"},\\\"errors\\\":{\\\"failedToCopy\\\":\\\"Failed to copy link\\\",\\\"fetchingLink\\\":\\\"Error fetching the link, sorry\\\"}},\\\"ReferralTerms\\\":{\\\"back\\\":\\\"Back\\\",\\\"title\\\":\\\"Terms and conditions\\\",\\\"terms\\\":{\\\"newUsersOnly\\\":\\\"This offer is for new Lovable users only (gotta share the magic with fresh eyes).\\\",\\\"rewardsUnlocked\\\":\\\"Rewards are unlocked once your invite actually publishes an app. No ghost referrals, please.\\\",\\\"rightToChange\\\":\\\"We reserve the right to change, pause, or end this program anytime. We're experimental like that.\\\",\\\"noSpam\\\":\\\"Don't spam or post your link where it doesn't belong. Let's keep it classy.\\\",\\\"sketchyBehavior\\\":\\\"If we suspect sketchy behavior, we may withhold rewards or deactivate your link.\\\",\\\"oneReward\\\":\\\"One reward per new user invited. No stacking loopholes - we're nerds, we'll catch it.\\\"}},\\\"CreditsIndicator\\\":{\\\"creditsUsed\\\":\\\"Credits Used\\\",\\\"upgrade\\\":\\\"Upgrade\\\",\\\"manage\\\":\\\"Manage\\\",\\\"bonusCredits\\\":\\\"Bonus Credits\\\",\\\"free\\\":{\\\"usedAllMonthlyCredits\\\":\\\"You've used all your free monthly credits\\\",\\\"dailyCreditsUsed\\\":\\\"{used} of your daily credits used\\\",\\\"dailyCreditsRenew\\\":\\\"Your daily credits renew at midnight UTC\\\",\\\"newCreditsTooltip\\\":\\\"You'll receive new credits {date} (at midnight UTC).\\\",\\\"dailyCreditsTooltip\\\":\\\"You get 5 free credits daily (up to 30 per month).\\\"},\\\"paid\\\":{\\\"dailyCreditsLeft\\\":\\\"You have {credits} daily {creditText} to use first\\\",\\\"credit\\\":\\\"credit\\\",\\\"credits\\\":\\\"credits\\\",\\\"monthlyCreditsUsed\\\":\\\"{used} of your monthly credits used\\\",\\\"dailyCreditsFirst\\\":\\\"Daily credits are used before monthly credits.\\\",\\\"dailyCreditsRenew\\\":\\\"Your daily credits renew at midnight UTC.\\\",\\\"monthlyCreditsRenew\\\":\\\"Your monthly credits will renew {date}. You will still receive 5 daily credits.\\\"},\\\"unlimited\\\":{\\\"dailyCreditsUsed\\\":\\\"{used} of your daily credits used\\\",\\\"dailyCreditsRenew\\\":\\\"Your daily credits renew at midnight UTC\\\",\\\"dailyCreditsTooltip\\\":\\\"You get {limit} credits daily\\\"}},\\\"ThemeSwitcher\\\":{\\\"appearance\\\":\\\"Appearance\\\",\\\"light\\\":\\\"Light\\\",\\\"dark\\\":\\\"Dark\\\",\\\"systemTheme\\\":\\\"System theme\\\"},\\\"Common\\\":{\\\"loading\\\":\\\"Loading...\\\",\\\"showMore\\\":\\\"Show more\\\"},\\\"AnnounceTeamsIsNowPro\\\":{\\\"title\\\":\\\"Teams is now Pro\\\",\\\"subtitle\\\":\\\"Collaboration is now free and included in your Pro subscription.\\\",\\\"readMore\\\":\\\"Read more\\\",\\\"gotIt\\\":\\\"Got it\\\",\\\"features\\\":{\\\"collaboration\\\":{\\\"title\\\":\\\"Free collaboration\\\",\\\"description\\\":\\\"Collaborate with your team on any project\\\"},\\\"business\\\":{\\\"title\\\":\\\"Business ready\\\",\\\"description\\\":\\\"Get support \\u0026 more features for your business\\\"},\\\"teams\\\":{\\\"title\\\":\\\"Teams experience\\\",\\\"description\\\":\\\"Shared projects, workspaces, and team management\\\"}}},\\\"AttachImageModal\\\":{\\\"title\\\":\\\"Try adding an image\\\",\\\"description\\\":\\\"Upload mockups, wireframes, or visual references for better results.\\\",\\\"addImages\\\":\\\"Add Images\\\",\\\"dismiss\\\":\\\"Dismiss\\\"},\\\"ModelSelector\\\":{\\\"selectModel\\\":\\\"Select model\\\"},\\\"WorkspaceMemberRow\\\":{\\\"roles\\\":{\\\"owner\\\":{\\\"label\\\":\\\"Owner\\\",\\\"description\\\":\\\"Owners can manage all collaborators, projects, and integrations.\\\"},\\\"admin\\\":{\\\"label\\\":\\\"Admin\\\",\\\"description\\\":\\\"Admins can manage editors, projects, and integrations.\\\"},\\\"editor\\\":{\\\"label\\\":\\\"Editor\\\",\\\"description\\\":\\\"Editors can only create and edit projects.\\\"}},\\\"status\\\":{\\\"pending\\\":\\\"Pending\\\"},\\\"actions\\\":{\\\"remove\\\":\\\"Remove\\\",\\\"leave\\\":\\\"Leave\\\"},\\\"tooltip\\\":{\\\"pendingInvite\\\":\\\"This user has been invited to join as {role}\\\"}},\\\"UsageList\\\":{\\\"showingUsageFor\\\":\\\"Showing usage for {period}.\\\",\\\"noUsageData\\\":\\\"No usage data for this period. Usage will appear here once members begin using the workspace.\\\",\\\"creditsUsed\\\":\\\"{count} credit{plural} used\\\",\\\"totalUsage\\\":\\\"Total usage across all months.\\\",\\\"creditsTotal\\\":\\\"{count} credit{plural} total\\\"},\\\"EmailInviteInput\\\":{\\\"invite\\\":\\\"Invite\\\"},\\\"MemberRowDisplay\\\":{\\\"inviteSent\\\":\\\"Invite sent\\\"},\\\"DomainsTab\\\":{\\\"connectedDomains\\\":{\\\"label\\\":\\\"Connected Domains\\\",\\\"description\\\":\\\"View or remove domains linked to your project.\\\"},\\\"addExistingDomain\\\":{\\\"label\\\":\\\"Add Existing Domain\\\",\\\"description\\\":\\\"Connect a domain you already own.\\\",\\\"connectDomain\\\":\\\"Connect Domain\\\",\\\"connectAnotherDomain\\\":\\\"Connect Another Domain\\\"},\\\"purchaseNewDomain\\\":{\\\"label\\\":\\\"Purchase New Domain\\\",\\\"description\\\":\\\"Buy a new domain through Ionos.\\\",\\\"buyDomain\\\":\\\"Buy Domain\\\"},\\\"howDomainsWork\\\":\\\"How Domains Work\\\",\\\"upgradePlan\\\":\\\"You need to be on a pro plan to connect a domain.\\\",\\\"publishTooltip\\\":\\\"You have to publish your project for this domain to work\\\",\\\"toasts\\\":{\\\"connectingDomain\\\":\\\"Connecting domain...\\\",\\\"connectingDescription\\\":\\\"Hold on while we were mapping {domain} to your project.\\\",\\\"domainConnected\\\":\\\"Domain connected!\\\",\\\"domainConnectedDescription\\\":\\\"The domain {domain} is now mapped to your project. It might take a few minutes to propagate.\\\",\\\"domainNotConnected\\\":\\\"Domain not connected\\\",\\\"domainNotConnectedDescription\\\":\\\"There was an error while connecting your domain. Please try again.\\\",\\\"errorPublishing\\\":\\\"Error when publishing your project\\\",\\\"errorUpdatingCache\\\":\\\"Error when updating deployment cache. Please report this.\\\"}},\\\"AnalyticsTab\\\":{\\\"title\\\":\\\"Analytics\\\",\\\"description\\\":\\\"Measure how your published project is performing.\\\",\\\"viewAppLive\\\":\\\"your app live\\\",\\\"unpublished\\\":{\\\"message\\\":\\\"To view analytics, you first need to publish your project.\\\"},\\\"metrics\\\":{\\\"visitors\\\":\\\"Visitors\\\",\\\"pageviews\\\":\\\"Pageviews\\\",\\\"pageviewsPerVisit\\\":\\\"Pageviews Per Visit\\\"},\\\"lists\\\":{\\\"source\\\":\\\"Source\\\",\\\"page\\\":\\\"Page\\\",\\\"country\\\":\\\"Country\\\",\\\"device\\\":\\\"Device\\\"}},\\\"KnowledgeTab\\\":{\\\"title\\\":\\\"Instructions \\u0026 Guidelines\\\",\\\"description\\\":\\\"Provide guidelines and context to improve your project's edits. Use this space to:\\\",\\\"bullets\\\":{\\\"rules\\\":\\\"Set project-specific rules or best practices.\\\",\\\"style\\\":\\\"Set coding style preferences (e.g. indentation, naming conventions).\\\",\\\"documentation\\\":\\\"Include external documentation or style guides.\\\"},\\\"placeholder\\\":\\\"Enter your instructions here...\\\",\\\"getInspiration\\\":\\\"Get Inspiration\\\",\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"save\\\":\\\"Save\\\"},\\\"toasts\\\":{\\\"success\\\":\\\"Custom instructions updated\\\",\\\"successDescription\\\":\\\"Your custom instructions have been saved successfully.\\\",\\\"error\\\":\\\"Error\\\",\\\"errorDescription\\\":\\\"Failed to update custom instructions. Please try again.\\\"},\\\"characterLimit\\\":\\\"Message is too long. Exceeded by {count} characters.\\\"},\\\"EditorNav\\\":{\\\"mainMenu\\\":{\\\"goToDashboard\\\":\\\"Go to Dashboard\\\",\\\"settings\\\":\\\"Settings\\\",\\\"renameProject\\\":\\\"Rename project\\\",\\\"language\\\":\\\"Language\\\",\\\"help\\\":\\\"Help\\\"},\\\"visiting\\\":{\\\"by\\\":\\\"by\\\",\\\"remix\\\":\\\"Remix\\\",\\\"remixTooltip\\\":\\\"Remix this project\\\",\\\"remixDisabledTooltip\\\":\\\"This project is connected to Supabase. To remix, you must be a collaborator or member of this workspace.\\\"},\\\"tooltips\\\":{\\\"inviteCollaborators\\\":\\\"Invite collaborators\\\",\\\"publishProject\\\":\\\"Publish your project\\\",\\\"hideSidebar\\\":\\\"Hide sidebar\\\",\\\"viewSidebar\\\":\\\"View sidebar\\\",\\\"hideHistory\\\":\\\"Hide history\\\",\\\"viewHistory\\\":\\\"View history\\\",\\\"visualEditor\\\":{\\\"exitCodeMode\\\":\\\"Exit code mode to use visual editor\\\",\\\"selectToEdit\\\":\\\"Select to edit ({shortcut})\\\",\\\"saveOrDiscard\\\":\\\"Save or discard to exit\\\"},\\\"presence\\\":{\\\"you\\\":\\\"(You)\\\",\\\"now\\\":\\\"Now\\\"},\\\"seoMode\\\":\\\"SEO Mode\\\",\\\"codeMode\\\":\\\"Code mode\\\",\\\"codeViewer\\\":\\\"Code viewer\\\",\\\"exitVisualEditorForSeo\\\":\\\"Exit visual editor to use SEO mode\\\",\\\"exitVisualEditorForCode\\\":\\\"Exit visual editor to use code mode\\\",\\\"saveOrDiscardChanges\\\":\\\"Please save or discard your changes\\\",\\\"loadingLivePreview\\\":\\\"Loading Live Preview...\\\",\\\"previewingLastSaved\\\":\\\"Previewing last saved version\\\"},\\\"publishMenu\\\":{\\\"publish\\\":\\\"Publish\\\",\\\"update\\\":\\\"Update\\\",\\\"publishDescription\\\":\\\"Publish your project to make it visible for others on the internet.\\\",\\\"reviewSecurity\\\":\\\"Review Security\\\",\\\"inviteByEmail\\\":\\\"Invite by email\\\",\\\"invite\\\":\\\"Invite\\\",\\\"inviteTitle\\\":\\\"Invite\\\",\\\"freeWorkspaceDescription\\\":\\\"Collaborators will use credits from the project owner's workspace ({workspaceName})\\\",\\\"proWorkspaceDescription\\\":\\\"Collaborators will use credits from the project owner's workspace ({workspaceName}). You can add unlimited collaborators to your projects.\\\",\\\"roleOptions\\\":{\\\"editor\\\":\\\"Editor\\\",\\\"admin\\\":\\\"Admin\\\",\\\"owner\\\":\\\"Owner\\\"},\\\"customDomains\\\":\\\"Custom domains\\\",\\\"pageSpeedAnalysis\\\":\\\"Page Speed Analysis\\\",\\\"publishFirstToRunAnalysis\\\":\\\"Publish first to run analysis\\\",\\\"workspace\\\":{\\\"member\\\":\\\"1 member\\\",\\\"members\\\":\\\"{count} members\\\",\\\"manageAccess\\\":\\\"Manage Workspace Access\\\",\\\"workspaceAccess\\\":\\\"Workspace Access\\\"},\\\"upgrade\\\":{\\\"toPro\\\":\\\"Upgrade to Pro\\\",\\\"toEnterprise\\\":\\\"Upgrade to Enterprise\\\",\\\"permissionControl\\\":\\\"Permission control \\u0026 more\\\",\\\"upgrade\\\":\\\"Upgrade\\\",\\\"contactUs\\\":\\\"Contact Us\\\"},\\\"inviteLink\\\":{\\\"createInviteLink\\\":\\\"Create invite link\\\",\\\"shareInviteLink\\\":\\\"Share invite link\\\",\\\"anyoneCanEdit\\\":\\\"Anyone with this link can edit\\\",\\\"create\\\":\\\"Create\\\",\\\"copy\\\":\\\"Copy\\\",\\\"copied\\\":\\\"Copied!\\\",\\\"remove\\\":\\\"Remove\\\"}}},\\\"ChatInput\\\":{\\\"askLovable\\\":\\\"Ask Lovable...\\\",\\\"askLovableModify\\\":\\\"Ask Lovable to modify {elementType}...\\\",\\\"askLovableWithQuery\\\":\\\"Ask Lovable \\\\\\\"{searchQuery}\\\\\\\"...\\\",\\\"selectToEditOrAsk\\\":\\\"Select to edit or ask Lovable to modify\\\",\\\"searchOrAsk\\\":\\\"Search or ask for changes...\\\"},\\\"ChatModeToggle\\\":{\\\"chat\\\":\\\"Chat\\\",\\\"chatTooltip\\\":\\\"Chat without making edits to your project.\\\",\\\"feelingStuck\\\":\\\"Feeling stuck?\\\",\\\"useChatMode\\\":\\\"Use chat mode to create a plan.\\\"},\\\"TipsAndTricks\\\":{\\\"settingUp\\\":\\\"Setting up...\\\",\\\"spinningUpPreview\\\":\\\"Spinning up preview...\\\",\\\"startingLivePreview\\\":\\\"Starting live preview...\\\",\\\"tryAgain\\\":\\\"Try again\\\",\\\"tips\\\":{\\\"chatWithAI\\\":\\\"Chat with AI in the sidebar\\\",\\\"selectElements\\\":\\\"Select specific elements to modify\\\",\\\"uploadImages\\\":\\\"Upload images as a reference\\\",\\\"instantPreview\\\":\\\"Instantly preview your changes\\\",\\\"customKnowledge\\\":\\\"Set custom knowledge for every edit\\\",\\\"connectSupabase\\\":\\\"Connect Supabase for backend\\\",\\\"collaborateGithub\\\":\\\"Collaborate at source, via GitHub\\\",\\\"deployReady\\\":\\\"Deploy when you're ready\\\"}},\\\"CustomInstructionsModal\\\":{\\\"manageKnowledge\\\":\\\"Manage knowledge\\\",\\\"title\\\":\\\"Manage Knowledge\\\",\\\"description\\\":\\\"Add custom context and instructions for your project. Lovable will use it in every edit. Use it to:\\\",\\\"guidelines\\\":{\\\"rules\\\":\\\"Define project-specific rules or guidelines\\\",\\\"style\\\":\\\"Set coding style preferences (e.g., indentation, naming conventions)\\\",\\\"documentation\\\":\\\"Include external documentation or style guides\\\"},\\\"placeholder\\\":\\\"Enter your custom instructions and context here...\\\",\\\"save\\\":\\\"Save\\\",\\\"toasts\\\":{\\\"success\\\":{\\\"title\\\":\\\"Custom instructions updated\\\",\\\"description\\\":\\\"Your custom instructions have been saved successfully.\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\",\\\"description\\\":\\\"Failed to update custom instructions. Please try again.\\\"}}}},\\\"locale\\\":\\\"en\\\",\\\"detectedLocale\\\":\\\"en\\\",\\\"children\\\":\\\"$L1e\\\"}],\\\"$L1f\\\"]}]]}]]}]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"20:I[58327,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"PanelStoreProvider\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"21:I[6911,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"DEFAULT_SIDEBAR_SIZE\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"22:I[71998,[\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"8039\\\",\\\"static/chunks/app/error-1231913338cf101d.js\\\"],\\\"default\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"23:I[92067,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"Toaster\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"24:I[96606,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"ObservabilityInitializer\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1e:[\\\"$\\\",\\\"$L20\\\",null,{\\\"initialPanelSizes\\\":[\\\"$21\\\",\\\"$NaN\\\"],\\\"children\\\":[[\\\"$\\\",\\\"$Lc\\\",null,{\\\"parallelRouterKey\\\":\\\"children\\\",\\\"error\\\":\\\"$22\\\",\\\"errorStyles\\\":[],\\\"errorScripts\\\":[],\\\"template\\\":[\\\"$\\\",\\\"$Ld\\\",null,{}],\\\"templateStyles\\\":\\\"$undefined\\\",\\\"templateScripts\\\":\\\"$undefined\\\",\\\"notFound\\\":[[[\\\"$\\\",\\\"title\\\",null,{\\\"children\\\":\\\"404: This page could not be found.\\\"}],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":\\\"$0:f:0:1:2:children:1:props:children:1:props:children:9:props:children:props:notFound:0:1:props:style\\\",\\\"children\\\":[\\\"$\\\",\\\"div\\\",null,{\\\"children\\\":[[\\\"$\\\",\\\"style\\\",null,{\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\\\"}}],[\\\"$\\\",\\\"h1\\\",null,{\\\"className\\\":\\\"next-error-h1\\\",\\\"style\\\":\\\"$0:f:0:1:2:children:1:props:children:1:props:children:9:props:children:props:notFound:0:1:props:children:props:children:1:props:style\\\",\\\"children\\\":404}],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":\\\"$0:f:0:1:2:children:1:props:children:1:props:children:9:props:children:props:notFound:0:1:props:children:props:children:2:props:style\\\",\\\"children\\\":[\\\"$\\\",\\\"h2\\\",null,{\\\"style\\\":\\\"$0:f:0:1:2:children:1:props:children:1:props:children:9:props:children:props:notFound:0:1:props:children:props:children:2:props:children:props:style\\\",\\\"children\\\":\\\"This page could not be found.\\\"}]}]]}]}]],[]],\\\"forbidden\\\":\\\"$undefined\\\",\\\"unauthorized\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"$L23\\\",null,{\\\"closeButton\\\":true}],[\\\"$\\\",\\\"$L24\\\",null,{}]]}]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1f:[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"netlify-identity-redirect\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"\\\\n              if (window.netlifyIdentity) {\\\\n                window.netlifyIdentity.on(\\\\\\\"init\\\\\\\", (user) =\\u003e {\\\\n                  if (!user) {\\\\n                    window.netlifyIdentity.on(\\\\\\\"login\\\\\\\", () =\\u003e {\\\\n                      document.location.href = \\\\\\\"/admin/\\\\\\\";\\\\n                    });\\\\n                  }\\\\n                });\\\\n              }\\\\n            \\\"}}]\\n\"])\u003c/script\u003e\u003c/body\u003e\u003c/html\u003e\u003c!-- This script is automatically inserted by Netlify for Real User Monitoring (RUM). --\u003e\n\u003cscript async id=\"netlify-rum-container\" src=\"/.netlify/scripts/rum\" data-netlify-cwv-token=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaXRlX2lkIjoiMTU2MjYzNWYtNDhmYi00MTYxLWIyMzQtZDg3MzY2NjAyMGFhIiwiYWNjb3VudF9pZCI6IjVkZTI1MWE3OWI4MGUzY2U3ZDY2MjQyYiIsImRlcGxveV9pZCI6IjY4YjVlNDU2OTI5OWEyMDAwODU5ZWI2NiIsImlzcyI6Im5ldGxpZnkifQ.9IZmWkDf6vYnsbgwhT6RxaxAAperlvZVAU25D4Aas7o\"\u003e\u003c/script\u003e\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "public/coaches/sasha-knopf.png",
//     "contents": "\u003c!DOCTYPE html\u003e\u003chtml lang=\"en\"\u003e\u003chead\u003e\u003cmeta charSet=\"utf-8\"/\u003e\u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover, user-scalable=no\"/\u003e\u003clink rel=\"stylesheet\" href=\"/_next/static/css/acf7c57c1c28fc6e.css\" data-precedence=\"next\"/\u003e\u003clink rel=\"stylesheet\" href=\"/_next/static/css/d4db635cc205055a.css\" data-precedence=\"next\"/\u003e\u003clink rel=\"stylesheet\" href=\"/_next/static/css/50809e25ee5695d7.css\" data-precedence=\"next\"/\u003e\u003clink rel=\"stylesheet\" href=\"/_next/static/css/281811c1f3d8bb8a.css\" data-precedence=\"next\"/\u003e\u003clink rel=\"stylesheet\" href=\"/_next/static/css/9218524b4122c5d5.css\" data-precedence=\"next\"/\u003e\u003clink rel=\"preload\" as=\"script\" fetchPriority=\"low\" href=\"/_next/static/chunks/webpack-d9f4e9a879e66f46.js\"/\u003e\u003cscript src=\"/_next/static/chunks/19707774-03abb2cf2d51725a.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/33b52c1e-70497b6f703bed59.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8113-f14fa80fad7ad7ee.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/main-app-71a1122cde7bc15a.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/89cf4ec1-076033b195043650.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/29477964-6906cb520a6f0585.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/e47c052e-3198041c86f8ab5c.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/49a1e609-e2a3d8b1cc9624b6.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/330152ae-532b1d6bf88ceea5.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8628-82ba59b0bbd139fa.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8966-e78416c35743df5b.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9550-7ad2e16139cca945.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/5889-447186d5c584c9bb.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8213-6159666bc9bf909c.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9490-bb9fcf0c1b33ed83.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/3720-be6e2075c260d707.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8345-096bb04821169b6f.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/3139-fbf65dd8393eb8be.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9764-b09917dda37e257c.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/2537-3b3179741da5e25d.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/926-82d27bc972afa2d0.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/7738-88084d65357cbb28.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6919-0274e8cab1ff5120.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9135-1a5ef9b0bd6e2bbc.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/5937-1c5d1b67124aefe9.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/879-c6ac14bccdf102bd.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/1421-aebbf70b34f6b53f.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/4880-24b1f7b85acea37c.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6128-1cd1fd8cecf188be.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/2126-74d8d626d90870ea.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9531-a2b7427d4894250a.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/1174-f0212fd5a2380f51.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/3050-571411d8348264f7.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/9034-fda47cd3c48a2434.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/7757-2f4da604d6ff6961.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6077-acd43dfbbc2204fa.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/5931-94d1cedbc9deb86e.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/8061-ca25c5aee0b8b6cc.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/2906-f7330558a0c26921.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/5982-de5e0ada108969eb.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/7099-59a99d6d1592034a.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/7883-7146d8dc6d067a0d.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6805-6307e2a174de7c70.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/5302-0fc5a963c913817d.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/4155-9ea59bd438553e61.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/app/(HomeLayout)/layout-b7a9a2f8a03a735a.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6298-b1e023719cc91137.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/6006-67e3eba5e79db531.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/1003-679c90e17e3abbe0.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/717-99afeb715c65bbcd.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/4678-0d96f1cb3b35c680.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/app/(HomeLayout)/page-a8aa82e6f41bbfe4.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/c0166af3-b1eb4cd85304c1c2.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/app/layout-32d3f5f012b78de9.js\" async=\"\"\u003e\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/app/error-1231913338cf101d.js\" async=\"\"\u003e\u003c/script\u003e\u003clink rel=\"preload\" href=\"https://plausible.io/js/script.js\" as=\"script\"/\u003e\u003clink rel=\"preload\" href=\"https://www.googletagmanager.com/gtag/js?id=AW-16786179175\" as=\"script\"/\u003e\u003clink rel=\"preload\" href=\"https://www.googletagmanager.com/gtag/js?id=G-VW0TD1TTTK\" as=\"script\"/\u003e\u003clink rel=\"preload\" href=\"https://r.wdfl.co/rw.js\" as=\"script\"/\u003e\u003clink rel=\"preload\" href=\"https://identity.netlify.com/v1/netlify-identity-widget.js\" as=\"script\"/\u003e\u003clink rel=\"preload\" href=\"https://cdn.delve.co/src/delve-cookie-consent-lovable.js\" as=\"script\"/\u003e\u003cmeta name=\"next-size-adjust\" content=\"\"/\u003e\u003cmeta name=\"theme-color\" content=\"#fcfbf8\"/\u003e\u003ctitle\u003eLovable\u003c/title\u003e\u003cmeta name=\"description\" content=\"Build software products, using only a chat interface\"/\u003e\u003clink rel=\"manifest\" href=\"/manifest.webmanifest\"/\u003e\u003cmeta name=\"keywords\" content=\"lovable,loveable,website builder,ai website builder,no code website builder,software engineer,full stack engineer,product engineer,frontend engineer,backend engineer,ai full stack engineer,ai developer,ai coder,ai engineer,ai software engineer,gpt engineer,gpt coder,gpt software engineer,learn to code,build website,build app,web agency,ai web agency\"/\u003e\u003clink rel=\"canonical\" href=\"https://lovable.dev\"/\u003e\u003cmeta property=\"og:title\" content=\"Lovable\"/\u003e\u003cmeta property=\"og:description\" content=\"Build software products, using only a chat interface\"/\u003e\u003cmeta property=\"og:url\" content=\"https://lovable.dev\"/\u003e\u003cmeta property=\"og:image:type\" content=\"image/png\"/\u003e\u003cmeta property=\"og:image:width\" content=\"1200\"/\u003e\u003cmeta property=\"og:image:height\" content=\"629\"/\u003e\u003cmeta property=\"og:image\" content=\"https://lovable.dev/opengraph-image.png?e7ae4aa2faea9aea\"/\u003e\u003cmeta property=\"og:type\" content=\"website\"/\u003e\u003cmeta name=\"twitter:card\" content=\"summary_large_image\"/\u003e\u003cmeta name=\"twitter:title\" content=\"Lovable\"/\u003e\u003cmeta name=\"twitter:description\" content=\"Build software products, using only a chat interface\"/\u003e\u003cmeta name=\"twitter:image:type\" content=\"image/png\"/\u003e\u003cmeta name=\"twitter:image:width\" content=\"1200\"/\u003e\u003cmeta name=\"twitter:image:height\" content=\"629\"/\u003e\u003cmeta name=\"twitter:image\" content=\"https://lovable.dev/opengraph-image.png?e7ae4aa2faea9aea\"/\u003e\u003clink rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\" sizes=\"73x74\"/\u003e\u003clink rel=\"icon\" href=\"/icon.svg?9e0c9b5bb1bae062\" type=\"image/svg+xml\" sizes=\"any\"/\u003e\u003clink rel=\"apple-touch-icon\" href=\"/apple-icon.png?59950bbf4c03032c\" type=\"image/png\" sizes=\"180x180\"/\u003e\u003cmeta name=\"facebook-domain-verification\" content=\"ttyg85abvlstz5a2zp9pcu87efiu9f\"/\u003e\u003cscript\u003e(self.__next_s=self.__next_s||[]).push([0,{\"children\":\"\\n              if (window.location.hostname === 'lovable.ink') {\\n                const targetDomain = ['lovable', 'dev'].join('.');\\n                window.location.href = window.location.href.replace('lovable.ink', targetDomain);\\n              }\\n            \",\"id\":\"domain-redirect\"}])\u003c/script\u003e\u003cscript\u003e(self.__next_s=self.__next_s||[]).push([0,{\"children\":\"(function(w,r){w._rwq=r;w[r]=w[r]||function(){(w[r].q=w[r].q||[]).push(arguments)}})(window,'rewardful');\",\"id\":\"rewardful-queue\"}])\u003c/script\u003e\u003cscript\u003e(self.__next_s=self.__next_s||[]).push([0,{\"children\":\"const setThemeColor = () =\u003e {\\n            const m = document.querySelector('meta[name=\\\"theme-color\\\"]');\\n            if (!m) return;\\n            const isDark = document.documentElement.classList.contains('dark');\\n            m.setAttribute('content', isDark ? '#1c1c1c' : '#fcfbf8');\\n          };\\n\\n          setThemeColor();\\n\\n          new MutationObserver(setThemeColor).observe(document.documentElement, {\\n            attributes: true,\\n            attributeFilter: ['class'],\\n  });\",\"id\":\"theme-color\"}])\u003c/script\u003e\u003cmeta name=\"sentry-trace\" content=\"c558ad1e61de30810b2d975fef7c5b0b-a1101386d0c3b405-1\"/\u003e\u003cmeta name=\"baggage\" content=\"sentry-environment=production,sentry-release=599669812f5b6dbc0dbf900f3c9cc12e5aa3602e,sentry-public_key=58ff8fddcbe1303f19bc19fbfed46f0f,sentry-trace_id=c558ad1e61de30810b2d975fef7c5b0b,sentry-org_id=4506071217143808\"/\u003e\u003cscript src=\"/_next/static/chunks/polyfills-42372ed130431b0a.js\" noModule=\"\"\u003e\u003c/script\u003e\u003c/head\u003e\u003cbody class=\"__className_83c9a9 __variable_adeef6 flex min-h-dvh flex-col\"\u003e\u003cdiv hidden=\"\"\u003e\u003c!--$--\u003e\u003c!--/$--\u003e\u003c/div\u003e\u003cdiv class=\"flex min-h-0 flex-1 flex-col\"\u003e\u003cscript\u003e!function(){try{var d=document.documentElement,c=d.classList;c.remove('light','dark');var e=localStorage.getItem('lovable-theme');if('system'===e||(!e\u0026\u0026true)){var t='(prefers-color-scheme: dark)',m=window.matchMedia(t);if(m.media!==t||m.matches){d.style.colorScheme = 'dark';c.add('dark')}else{d.style.colorScheme = 'light';c.add('light')}}else if(e){c.add(e|| '')}if(e==='light'||e==='dark')d.style.colorScheme=e}catch(e){}}()\u003c/script\u003e\u003cdiv class=\"relative min-h-screen w-full bg-background transition-none\"\u003e\u003cdiv class=\"jsx-2511115705 absolute inset-0 w-full overflow-hidden\"\u003e\u003cdiv class=\"jsx-2511115705 animate-slideUp absolute inset-0 mt-0 opacity-0 blur-[10px]\"\u003e\u003cdiv class=\"absolute left-1/2 aspect-square w-[350%] -translate-x-1/2 overflow-hidden md:w-[190%] lg:w-[190%] xl:w-[190%] 2xl:mx-auto\" style=\"background-image:url(/img/background/gradient-optimized.png);background-size:cover;background-repeat:no-repeat;background-position:center top;-webkit-mask:linear-gradient(to bottom, transparent 0%, black 5%, black 100%);mask:linear-gradient(to bottom, transparent 0%, black 5%, black 100%);-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px;will-change:transform\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"absolute inset-0\" style=\"background-image:url(/_next/static/media/grain.1ccdda41.png);background-size:100px 100px;background-repeat:repeat;background-blend-mode:overlay;background-position:left top;mix-blend-mode:overlay\"\u003e\u003c/div\u003e\u003cnav class=\"sticky top-0 z-50 flex w-full flex-col items-center justify-between border-b border-transparent transition-all duration-200 ease-out\"\u003e\u003cdiv class=\"container-home flex h-16 w-full items-center justify-between\"\u003e\u003cdiv class=\"flex items-center gap-8 md:pl-8\"\u003e\u003cdiv class=\"relative\"\u003e\u003cspan data-state=\"closed\" data-slot=\"context-menu-trigger\" class=\"flex flex-col gap-1.5\" style=\"-webkit-touch-callout:none\"\u003e\u003ca class=\"transition-opacity hover:opacity-75\" href=\"/\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 116 21\" class=\"flex h-[22px] dark:hidden\"\u003e\u003cpath fill=\"#18181B\" d=\"M109.108 20.23q-2.189 0-3.802-.834-1.614-.849-2.517-2.544-.89-1.695-.889-4.199 0-2.38.93-4.103.93-1.737 2.571-2.64 1.641-.902 3.734-.902 2.01 0 3.57.875 1.559.876 2.42 2.544.876 1.668.876 3.994 0 .834-.014 1.326h-10.9v-2.872h8.26l-1.559.534q0-1.122-.328-1.874-.315-.766-.93-1.149t-1.491-.383q-.916 0-1.614.451-.683.438-1.066 1.313-.37.876-.37 2.107v1.408q0 1.258.383 2.134t1.094 1.326q.712.438 1.683.438 1.067 0 1.764-.547.698-.56.875-1.573h4.144q-.191 1.586-1.08 2.75-.876 1.161-2.339 1.79-1.464.63-3.405.63M96.517.221h4.144v19.612h-4.144zM89.465 20.23q-1.176 0-2.106-.41a4.1 4.1 0 0 1-1.56-1.232q-.642-.834-.957-2.051l.438.123v3.173h-4.103V5.404h4.144v3.228l-.465.082q.315-1.162.957-1.983.657-.834 1.6-1.272.944-.45 2.12-.451 1.765 0 3.064.916 1.3.915 1.997 2.64.697 1.71.697 4.062 0 2.339-.711 4.061-.71 1.71-2.038 2.626-1.312.917-3.077.917m-1.286-3.16q.93 0 1.56-.547.642-.547.957-1.545.328-.999.328-2.352 0-1.354-.328-2.353-.315-.997-.957-1.545-.63-.561-1.56-.561-.916 0-1.572.56-.644.547-.972 1.56-.328.998-.328 2.339 0 1.353.328 2.352.33.998.972 1.545.656.547 1.572.547M81.177.221h4.144v5.183h-4.144zM70.775 20.23q-1.354 0-2.435-.534a4.1 4.1 0 0 1-1.682-1.518q-.602-.997-.602-2.325 0-2.024 1.19-3.09 1.19-1.08 3.433-1.41l2.503-.355q.752-.11 1.19-.273.437-.165.642-.438.206-.287.206-.725 0-.45-.247-.82-.233-.383-.71-.602-.466-.233-1.136-.233-1.066 0-1.71.561-.642.547-.697 1.505h-4.28q.054-1.45.875-2.572.834-1.134 2.311-1.764t3.42-.629q2.037 0 3.445.67 1.41.657 2.12 1.887.725 1.231.725 2.94v6.018q0 .972.137 1.806.15.82.424 1.04v.464h-4.308a10 10 0 0 1-.233-1.326 17 17 0 0 1-.095-1.56l.67-.287a4.6 4.6 0 0 1-.958 1.792q-.683.807-1.764 1.3-1.067.477-2.434.478m1.531-3.036q.876 0 1.546-.383.67-.398 1.026-1.094.369-.697.369-1.587v-1.887l.342.191a2.2 2.2 0 0 1-.82.67q-.48.233-1.3.397l-1.053.205q-1.052.205-1.587.63-.52.423-.52 1.19t.562 1.216q.56.452 1.436.452M51.962 5.404h4.404l3.788 12.378h-1.327l3.638-12.378h4.281l-4.992 14.43h-4.609zM45.485 20.23q-2.148 0-3.775-.93-1.614-.93-2.503-2.653-.875-1.724-.875-4.035t.875-4.02q.89-1.725 2.503-2.654 1.627-.93 3.775-.93t3.76.93q1.615.93 2.49 2.653.889 1.71.889 4.021t-.89 4.035q-.875 1.723-2.488 2.653-1.614.93-3.761.93m0-3.173q.902 0 1.545-.492.642-.507.985-1.491.342-.999.342-2.462 0-2.174-.753-3.296-.752-1.135-2.12-1.135-.901 0-1.559.506-.642.492-.984 1.49-.342.986-.342 2.435t.342 2.448.984 1.505q.657.492 1.56.492M26.22.221h4.294v16.556l-.766-.889h5.786c3.659 0 3.158 3.945 3.158 3.945H26.22z\"\u003e\u003c/path\u003e\u003cmask id=\"lovable-logo-text-light_svg__b\" width=\"20\" height=\"21\" x=\"0\" y=\"0\" maskUnits=\"userSpaceOnUse\" style=\"mask-type:alpha\"\u003e\u003cpath fill=\"url(#lovable-logo-text-light_svg__a)\" fill-rule=\"evenodd\" d=\"M5.904 0c3.26 0 5.904 2.65 5.904 5.92v2.25h1.965c3.26 0 5.904 2.65 5.904 5.92 0 3.268-2.643 5.919-5.904 5.919H0V5.919C0 2.65 2.643 0 5.904 0\" clip-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/mask\u003e\u003cg mask=\"url(#lovable-logo-text-light_svg__b)\"\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__c)\"\u003e\u003ccircle cx=\"8.632\" cy=\"10.681\" r=\"13.32\" fill=\"#4B73FF\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__d)\"\u003e\u003cellipse cx=\"10.095\" cy=\"3.371\" fill=\"#FF66F4\" rx=\"17.059\" ry=\"13.32\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__e)\"\u003e\u003cellipse cx=\"12.877\" cy=\"0.864\" fill=\"#FF0105\" rx=\"13.32\" ry=\"11.698\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__f)\"\u003e\u003ccircle cx=\"10.332\" cy=\"3.367\" r=\"8.011\" fill=\"#FE7B02\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003c/g\u003e\u003cdefs\u003e\u003cfilter id=\"lovable-logo-text-light_svg__c\" width=\"38.578\" height=\"38.579\" x=\"-10.658\" y=\"-8.609\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__d\" width=\"46.057\" height=\"38.579\" x=\"-12.934\" y=\"-15.918\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__e\" width=\"38.578\" height=\"35.334\" x=\"-6.412\" y=\"-16.803\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__f\" width=\"27.96\" height=\"27.96\" x=\"-3.648\" y=\"-10.613\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003clinearGradient id=\"lovable-logo-text-light_svg__a\" x1=\"6.622\" x2=\"12.617\" y1=\"3.516\" y2=\"20.001\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop offset=\"0.025\" stop-color=\"#FF8E63\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.56\" stop-color=\"#FF7EB0\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.95\" stop-color=\"#4B73FF\"\u003e\u003c/stop\u003e\u003c/linearGradient\u003e\u003c/defs\u003e\u003c/svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 116 22\" class=\"hidden h-[22px] dark:flex\"\u003e\u003cpath fill=\"#FCFBF8\" d=\"M109.108 21.115q-2.189 0-3.802-.834-1.614-.848-2.517-2.544-.89-1.695-.889-4.199 0-2.38.93-4.103.93-1.737 2.571-2.64 1.641-.902 3.734-.902 2.01 0 3.57.875 1.559.876 2.42 2.544.876 1.67.876 3.994 0 .834-.014 1.326h-10.9V11.76h8.26l-1.559.534q0-1.122-.328-1.874-.315-.766-.93-1.149t-1.491-.383q-.916 0-1.614.452-.683.437-1.066 1.313-.37.875-.37 2.106v1.408q0 1.259.383 2.134t1.094 1.327q.712.437 1.683.437 1.067 0 1.764-.547.698-.56.875-1.573h4.144q-.191 1.587-1.08 2.75-.876 1.162-2.339 1.79-1.464.63-3.405.63M96.517 1.106h4.144v19.612h-4.144zM89.465 21.115q-1.176 0-2.106-.41a4.1 4.1 0 0 1-1.56-1.231q-.642-.835-.957-2.052l.438.123v3.173h-4.103V6.29h4.144v3.228l-.465.082q.315-1.163.957-1.983.657-.834 1.6-1.272.944-.45 2.12-.451 1.765 0 3.064.916t1.997 2.64q.697 1.71.697 4.062 0 2.339-.711 4.062-.71 1.71-2.038 2.625-1.312.917-3.077.917m-1.286-3.16q.93 0 1.56-.547.642-.547.957-1.545.328-.999.328-2.352 0-1.354-.328-2.353-.315-.997-.957-1.545-.63-.56-1.56-.56-.916 0-1.572.56-.644.547-.972 1.559-.328.999-.328 2.339 0 1.353.328 2.352.33.998.972 1.545.656.547 1.572.547M81.177 1.107h4.144V6.29h-4.144zM70.775 21.115q-1.354 0-2.434-.533a4.1 4.1 0 0 1-1.683-1.518q-.601-.999-.602-2.326 0-2.024 1.19-3.09 1.19-1.08 3.433-1.409l2.503-.356q.752-.11 1.19-.273t.643-.438q.204-.287.205-.725 0-.45-.246-.82-.232-.383-.712-.602-.465-.232-1.135-.232-1.065 0-1.71.56-.642.547-.697 1.505h-4.28q.054-1.45.875-2.572.834-1.134 2.311-1.764t3.42-.629q2.037 0 3.446.67 1.408.657 2.12 1.888.724 1.23.724 2.94v6.018q0 .97.137 1.805.15.82.424 1.04v.464H75.59a10 10 0 0 1-.233-1.326 17 17 0 0 1-.095-1.56l.67-.287a4.6 4.6 0 0 1-.957 1.792q-.684.807-1.765 1.3-1.065.477-2.434.478m1.532-3.036q.875 0 1.545-.383.67-.398 1.026-1.094.37-.697.37-1.587v-1.887l.341.191a2.2 2.2 0 0 1-.82.67q-.48.234-1.3.397l-1.053.205q-1.053.206-1.586.63-.52.423-.52 1.19 0 .765.56 1.217.561.45 1.437.45M51.962 6.29h4.404l3.788 12.377h-1.326L62.466 6.29h4.28l-4.992 14.428h-4.609zM45.485 21.115q-2.148 0-3.775-.93-1.614-.93-2.503-2.653-.875-1.724-.875-4.035t.875-4.02q.89-1.724 2.503-2.654 1.627-.93 3.775-.93t3.76.93q1.615.93 2.49 2.653.889 1.71.889 4.021t-.89 4.035q-.875 1.723-2.488 2.653-1.614.93-3.761.93m0-3.173q.902 0 1.545-.492.642-.507.985-1.491.342-.998.342-2.462 0-2.174-.753-3.296-.752-1.135-2.12-1.135-.901 0-1.559.506-.642.492-.984 1.49-.342.986-.342 2.435t.342 2.448.984 1.505q.657.492 1.56.492M26.22 1.106h4.294v16.556l-.766-.889h5.786c3.659 0 3.159 3.945 3.159 3.945H26.22z\"\u003e\u003c/path\u003e\u003cmask id=\"lovable-logo-text-dark_svg__b\" width=\"20\" height=\"21\" x=\"0\" y=\"0\" maskUnits=\"userSpaceOnUse\" style=\"mask-type:alpha\"\u003e\u003cpath fill=\"url(#lovable-logo-text-dark_svg__a)\" fill-rule=\"evenodd\" d=\"M5.904.885c3.26 0 5.904 2.65 5.904 5.92v2.25h1.965c3.26 0 5.904 2.65 5.904 5.92s-2.643 5.919-5.904 5.919H0V6.804C0 3.536 2.643.886 5.904.886\" clip-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/mask\u003e\u003cg mask=\"url(#lovable-logo-text-dark_svg__b)\"\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__c)\"\u003e\u003ccircle cx=\"8.632\" cy=\"11.566\" r=\"13.32\" fill=\"#4B73FF\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__d)\"\u003e\u003cellipse cx=\"10.095\" cy=\"4.256\" fill=\"#FF66F4\" rx=\"17.059\" ry=\"13.32\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__e)\"\u003e\u003cellipse cx=\"12.877\" cy=\"1.75\" fill=\"#FF0105\" rx=\"13.32\" ry=\"11.698\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__f)\"\u003e\u003ccircle cx=\"10.332\" cy=\"4.253\" r=\"8.011\" fill=\"#FE7B02\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003c/g\u003e\u003cdefs\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__c\" width=\"38.579\" height=\"38.579\" x=\"-10.658\" y=\"-7.724\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__d\" width=\"46.057\" height=\"38.579\" x=\"-12.934\" y=\"-15.033\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__e\" width=\"38.579\" height=\"35.334\" x=\"-6.412\" y=\"-15.918\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__f\" width=\"27.96\" height=\"27.96\" x=\"-3.648\" y=\"-9.727\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003clinearGradient id=\"lovable-logo-text-dark_svg__a\" x1=\"6.622\" x2=\"12.617\" y1=\"4.401\" y2=\"20.886\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop offset=\"0.025\" stop-color=\"#FF8E63\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.56\" stop-color=\"#FF7EB0\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.95\" stop-color=\"#4B73FF\"\u003e\u003c/stop\u003e\u003c/linearGradient\u003e\u003c/defs\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\u003cnav class=\"hidden items-center gap-6 md:flex\"\u003e\u003ca class=\"text-sm font-normal text-foreground transition-colors hover:text-foreground/80\" href=\"https://discord.com/invite/lovable-dev\"\u003eCommunity\u003c/a\u003e\u003ca class=\"text-sm font-normal text-foreground transition-colors hover:text-foreground/80\" href=\"/pricing\"\u003ePricing\u003c/a\u003e\u003ca class=\"text-sm font-normal text-foreground transition-colors hover:text-foreground/80\" href=\"https://enterprise.lovable.dev\"\u003eEnterprise\u003c/a\u003e\u003ca class=\"text-sm font-normal text-foreground transition-colors hover:text-foreground/80\" href=\"https://docs.lovable.dev\"\u003eLearn\u003c/a\u003e\u003ca class=\"text-sm font-normal text-foreground transition-colors hover:text-foreground/80\" href=\"https://launched.lovable.dev\"\u003eLaunched\u003c/a\u003e\u003c/nav\u003e\u003c/div\u003e\u003cdiv class=\"flex items-center gap-4 md:pr-8\"\u003e\u003cdiv class=\"flex gap-2\"\u003e\u003ca class=\"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors duration-100 ease-in-out focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [\u0026amp;_svg]:pointer-events-none border border-input bg-muted shadow-sm hover:bg-accent hover:border-accent h-8 rounded-md px-4 py-2\" id=\"login-link\" href=\"/login\"\u003eLog in\u003c/a\u003e\u003ca class=\"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors duration-100 ease-in-out focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [\u0026amp;_svg]:pointer-events-none bg-primary text-primary-foreground hover:bg-primary/90 h-8 rounded-md px-4 py-2\" id=\"signup-link\" href=\"/signup\"\u003eGet started\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/nav\u003e\u003cmain class=\"overflow-x-hidden overflow-y-hidden container-home\"\u003e\u003cdiv class=\"relative w-full\"\u003e\u003csection class=\"mb-[20px] flex w-full flex-col items-center justify-center py-[20vh] md:mb-0 2xl:py-64\"\u003e\u003cdiv class=\"mb-4 flex flex-col items-center px-4 text-center md:mb-6\"\u003e\u003cdiv class=\"flex w-full flex-col items-center justify-center gap-2\"\u003e\u003c/div\u003e\u003ch1 class=\"mb-2 flex items-center gap-1 text-2xl font-medium leading-none text-foreground sm:text-3xl md:mb-2.5 md:gap-0 md:text-5xl\"\u003e\u003cspan class=\"pt-0.5 tracking-tight md:pt-0\"\u003eBuild something\u003c!-- --\u003e \u003cspan class=\"md:sr-only\"\u003eLovable\u003c/span\u003e\u003c/span\u003e\u003cdiv class=\"flex flex-col gap-1.5 ml-2 hidden sm:ml-3 md:ml-4 md:flex\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 116 21\" class=\"flex h-[22px] sm:h-[28px] md:h-[36px] dark:hidden\"\u003e\u003cpath fill=\"#18181B\" d=\"M109.108 20.23q-2.189 0-3.802-.834-1.614-.849-2.517-2.544-.89-1.695-.889-4.199 0-2.38.93-4.103.93-1.737 2.571-2.64 1.641-.902 3.734-.902 2.01 0 3.57.875 1.559.876 2.42 2.544.876 1.668.876 3.994 0 .834-.014 1.326h-10.9v-2.872h8.26l-1.559.534q0-1.122-.328-1.874-.315-.766-.93-1.149t-1.491-.383q-.916 0-1.614.451-.683.438-1.066 1.313-.37.876-.37 2.107v1.408q0 1.258.383 2.134t1.094 1.326q.712.438 1.683.438 1.067 0 1.764-.547.698-.56.875-1.573h4.144q-.191 1.586-1.08 2.75-.876 1.161-2.339 1.79-1.464.63-3.405.63M96.517.221h4.144v19.612h-4.144zM89.465 20.23q-1.176 0-2.106-.41a4.1 4.1 0 0 1-1.56-1.232q-.642-.834-.957-2.051l.438.123v3.173h-4.103V5.404h4.144v3.228l-.465.082q.315-1.162.957-1.983.657-.834 1.6-1.272.944-.45 2.12-.451 1.765 0 3.064.916 1.3.915 1.997 2.64.697 1.71.697 4.062 0 2.339-.711 4.061-.71 1.71-2.038 2.626-1.312.917-3.077.917m-1.286-3.16q.93 0 1.56-.547.642-.547.957-1.545.328-.999.328-2.352 0-1.354-.328-2.353-.315-.997-.957-1.545-.63-.561-1.56-.561-.916 0-1.572.56-.644.547-.972 1.56-.328.998-.328 2.339 0 1.353.328 2.352.33.998.972 1.545.656.547 1.572.547M81.177.221h4.144v5.183h-4.144zM70.775 20.23q-1.354 0-2.435-.534a4.1 4.1 0 0 1-1.682-1.518q-.602-.997-.602-2.325 0-2.024 1.19-3.09 1.19-1.08 3.433-1.41l2.503-.355q.752-.11 1.19-.273.437-.165.642-.438.206-.287.206-.725 0-.45-.247-.82-.233-.383-.71-.602-.466-.233-1.136-.233-1.066 0-1.71.561-.642.547-.697 1.505h-4.28q.054-1.45.875-2.572.834-1.134 2.311-1.764t3.42-.629q2.037 0 3.445.67 1.41.657 2.12 1.887.725 1.231.725 2.94v6.018q0 .972.137 1.806.15.82.424 1.04v.464h-4.308a10 10 0 0 1-.233-1.326 17 17 0 0 1-.095-1.56l.67-.287a4.6 4.6 0 0 1-.958 1.792q-.683.807-1.764 1.3-1.067.477-2.434.478m1.531-3.036q.876 0 1.546-.383.67-.398 1.026-1.094.369-.697.369-1.587v-1.887l.342.191a2.2 2.2 0 0 1-.82.67q-.48.233-1.3.397l-1.053.205q-1.052.205-1.587.63-.52.423-.52 1.19t.562 1.216q.56.452 1.436.452M51.962 5.404h4.404l3.788 12.378h-1.327l3.638-12.378h4.281l-4.992 14.43h-4.609zM45.485 20.23q-2.148 0-3.775-.93-1.614-.93-2.503-2.653-.875-1.724-.875-4.035t.875-4.02q.89-1.725 2.503-2.654 1.627-.93 3.775-.93t3.76.93q1.615.93 2.49 2.653.889 1.71.889 4.021t-.89 4.035q-.875 1.723-2.488 2.653-1.614.93-3.761.93m0-3.173q.902 0 1.545-.492.642-.507.985-1.491.342-.999.342-2.462 0-2.174-.753-3.296-.752-1.135-2.12-1.135-.901 0-1.559.506-.642.492-.984 1.49-.342.986-.342 2.435t.342 2.448.984 1.505q.657.492 1.56.492M26.22.221h4.294v16.556l-.766-.889h5.786c3.659 0 3.158 3.945 3.158 3.945H26.22z\"\u003e\u003c/path\u003e\u003cmask id=\"lovable-logo-text-light_svg__b\" width=\"20\" height=\"21\" x=\"0\" y=\"0\" maskUnits=\"userSpaceOnUse\" style=\"mask-type:alpha\"\u003e\u003cpath fill=\"url(#lovable-logo-text-light_svg__a)\" fill-rule=\"evenodd\" d=\"M5.904 0c3.26 0 5.904 2.65 5.904 5.92v2.25h1.965c3.26 0 5.904 2.65 5.904 5.92 0 3.268-2.643 5.919-5.904 5.919H0V5.919C0 2.65 2.643 0 5.904 0\" clip-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/mask\u003e\u003cg mask=\"url(#lovable-logo-text-light_svg__b)\"\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__c)\"\u003e\u003ccircle cx=\"8.632\" cy=\"10.681\" r=\"13.32\" fill=\"#4B73FF\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__d)\"\u003e\u003cellipse cx=\"10.095\" cy=\"3.371\" fill=\"#FF66F4\" rx=\"17.059\" ry=\"13.32\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__e)\"\u003e\u003cellipse cx=\"12.877\" cy=\"0.864\" fill=\"#FF0105\" rx=\"13.32\" ry=\"11.698\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-light_svg__f)\"\u003e\u003ccircle cx=\"10.332\" cy=\"3.367\" r=\"8.011\" fill=\"#FE7B02\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003c/g\u003e\u003cdefs\u003e\u003cfilter id=\"lovable-logo-text-light_svg__c\" width=\"38.578\" height=\"38.579\" x=\"-10.658\" y=\"-8.609\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__d\" width=\"46.057\" height=\"38.579\" x=\"-12.934\" y=\"-15.918\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__e\" width=\"38.578\" height=\"35.334\" x=\"-6.412\" y=\"-16.803\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-light_svg__f\" width=\"27.96\" height=\"27.96\" x=\"-3.648\" y=\"-10.613\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19187_11610\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003clinearGradient id=\"lovable-logo-text-light_svg__a\" x1=\"6.622\" x2=\"12.617\" y1=\"3.516\" y2=\"20.001\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop offset=\"0.025\" stop-color=\"#FF8E63\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.56\" stop-color=\"#FF7EB0\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.95\" stop-color=\"#4B73FF\"\u003e\u003c/stop\u003e\u003c/linearGradient\u003e\u003c/defs\u003e\u003c/svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 116 22\" class=\"hidden h-[22px] sm:h-[28px] md:h-[36px] dark:flex\"\u003e\u003cpath fill=\"#FCFBF8\" d=\"M109.108 21.115q-2.189 0-3.802-.834-1.614-.848-2.517-2.544-.89-1.695-.889-4.199 0-2.38.93-4.103.93-1.737 2.571-2.64 1.641-.902 3.734-.902 2.01 0 3.57.875 1.559.876 2.42 2.544.876 1.67.876 3.994 0 .834-.014 1.326h-10.9V11.76h8.26l-1.559.534q0-1.122-.328-1.874-.315-.766-.93-1.149t-1.491-.383q-.916 0-1.614.452-.683.437-1.066 1.313-.37.875-.37 2.106v1.408q0 1.259.383 2.134t1.094 1.327q.712.437 1.683.437 1.067 0 1.764-.547.698-.56.875-1.573h4.144q-.191 1.587-1.08 2.75-.876 1.162-2.339 1.79-1.464.63-3.405.63M96.517 1.106h4.144v19.612h-4.144zM89.465 21.115q-1.176 0-2.106-.41a4.1 4.1 0 0 1-1.56-1.231q-.642-.835-.957-2.052l.438.123v3.173h-4.103V6.29h4.144v3.228l-.465.082q.315-1.163.957-1.983.657-.834 1.6-1.272.944-.45 2.12-.451 1.765 0 3.064.916t1.997 2.64q.697 1.71.697 4.062 0 2.339-.711 4.062-.71 1.71-2.038 2.625-1.312.917-3.077.917m-1.286-3.16q.93 0 1.56-.547.642-.547.957-1.545.328-.999.328-2.352 0-1.354-.328-2.353-.315-.997-.957-1.545-.63-.56-1.56-.56-.916 0-1.572.56-.644.547-.972 1.559-.328.999-.328 2.339 0 1.353.328 2.352.33.998.972 1.545.656.547 1.572.547M81.177 1.107h4.144V6.29h-4.144zM70.775 21.115q-1.354 0-2.434-.533a4.1 4.1 0 0 1-1.683-1.518q-.601-.999-.602-2.326 0-2.024 1.19-3.09 1.19-1.08 3.433-1.409l2.503-.356q.752-.11 1.19-.273t.643-.438q.204-.287.205-.725 0-.45-.246-.82-.232-.383-.712-.602-.465-.232-1.135-.232-1.065 0-1.71.56-.642.547-.697 1.505h-4.28q.054-1.45.875-2.572.834-1.134 2.311-1.764t3.42-.629q2.037 0 3.446.67 1.408.657 2.12 1.888.724 1.23.724 2.94v6.018q0 .97.137 1.805.15.82.424 1.04v.464H75.59a10 10 0 0 1-.233-1.326 17 17 0 0 1-.095-1.56l.67-.287a4.6 4.6 0 0 1-.957 1.792q-.684.807-1.765 1.3-1.065.477-2.434.478m1.532-3.036q.875 0 1.545-.383.67-.398 1.026-1.094.37-.697.37-1.587v-1.887l.341.191a2.2 2.2 0 0 1-.82.67q-.48.234-1.3.397l-1.053.205q-1.053.206-1.586.63-.52.423-.52 1.19 0 .765.56 1.217.561.45 1.437.45M51.962 6.29h4.404l3.788 12.377h-1.326L62.466 6.29h4.28l-4.992 14.428h-4.609zM45.485 21.115q-2.148 0-3.775-.93-1.614-.93-2.503-2.653-.875-1.724-.875-4.035t.875-4.02q.89-1.724 2.503-2.654 1.627-.93 3.775-.93t3.76.93q1.615.93 2.49 2.653.889 1.71.889 4.021t-.89 4.035q-.875 1.723-2.488 2.653-1.614.93-3.761.93m0-3.173q.902 0 1.545-.492.642-.507.985-1.491.342-.998.342-2.462 0-2.174-.753-3.296-.752-1.135-2.12-1.135-.901 0-1.559.506-.642.492-.984 1.49-.342.986-.342 2.435t.342 2.448.984 1.505q.657.492 1.56.492M26.22 1.106h4.294v16.556l-.766-.889h5.786c3.659 0 3.159 3.945 3.159 3.945H26.22z\"\u003e\u003c/path\u003e\u003cmask id=\"lovable-logo-text-dark_svg__b\" width=\"20\" height=\"21\" x=\"0\" y=\"0\" maskUnits=\"userSpaceOnUse\" style=\"mask-type:alpha\"\u003e\u003cpath fill=\"url(#lovable-logo-text-dark_svg__a)\" fill-rule=\"evenodd\" d=\"M5.904.885c3.26 0 5.904 2.65 5.904 5.92v2.25h1.965c3.26 0 5.904 2.65 5.904 5.92s-2.643 5.919-5.904 5.919H0V6.804C0 3.536 2.643.886 5.904.886\" clip-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/mask\u003e\u003cg mask=\"url(#lovable-logo-text-dark_svg__b)\"\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__c)\"\u003e\u003ccircle cx=\"8.632\" cy=\"11.566\" r=\"13.32\" fill=\"#4B73FF\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__d)\"\u003e\u003cellipse cx=\"10.095\" cy=\"4.256\" fill=\"#FF66F4\" rx=\"17.059\" ry=\"13.32\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__e)\"\u003e\u003cellipse cx=\"12.877\" cy=\"1.75\" fill=\"#FF0105\" rx=\"13.32\" ry=\"11.698\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo-text-dark_svg__f)\"\u003e\u003ccircle cx=\"10.332\" cy=\"4.253\" r=\"8.011\" fill=\"#FE7B02\"\u003e\u003c/circle\u003e\u003c/g\u003e\u003c/g\u003e\u003cdefs\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__c\" width=\"38.579\" height=\"38.579\" x=\"-10.658\" y=\"-7.724\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__d\" width=\"46.057\" height=\"38.579\" x=\"-12.934\" y=\"-15.033\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__e\" width=\"38.579\" height=\"35.334\" x=\"-6.412\" y=\"-15.918\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo-text-dark_svg__f\" width=\"27.96\" height=\"27.96\" x=\"-3.648\" y=\"-9.727\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_15608\" stdDeviation=\"2.985\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003clinearGradient id=\"lovable-logo-text-dark_svg__a\" x1=\"6.622\" x2=\"12.617\" y1=\"4.401\" y2=\"20.886\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop offset=\"0.025\" stop-color=\"#FF8E63\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.56\" stop-color=\"#FF7EB0\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.95\" stop-color=\"#4B73FF\"\u003e\u003c/stop\u003e\u003c/linearGradient\u003e\u003c/defs\u003e\u003c/svg\u003e\u003c/div\u003e\u003c/h1\u003e\u003cp class=\"mb-6 max-w-[25ch] text-center text-lg leading-tight text-foreground/65 md:max-w-full md:text-xl\"\u003eCreate apps and websites by chatting with AI\u003c/p\u003e\u003c/div\u003e\u003c!--$?--\u003e\u003ctemplate id=\"B:0\"\u003e\u003c/template\u003e\u003c!--/$--\u003e\u003c/section\u003e\u003c!--$?--\u003e\u003ctemplate id=\"B:1\"\u003e\u003c/template\u003e\u003c!--/$--\u003e\u003c/div\u003e\u003c!--$--\u003e\u003c!--/$--\u003e\u003c/main\u003e\u003cdiv class=\"container-home relative z-10 mb-4 mt-6\"\u003e\u003cfooter class=\"rounded-2xl border border-muted-border bg-muted p-6 sm:p-8 md:p-10 lg:p-14\"\u003e\u003cnav class=\"grid grid-cols-2 gap-x-8 gap-y-12 sm:grid-cols-3 lg:grid-cols-6\"\u003e\u003cdiv class=\"col-span-2 flex h-full justify-between sm:col-span-3 lg:col-span-1 lg:flex-col\"\u003e\u003ca class=\"w-fit transition-transform hover:animate-[heartbeat_1s_ease-in-out]\" href=\"/\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 23 24\" class=\"size-8\"\u003e\u003cmask id=\"lovable-logo_svg__b\" width=\"23\" height=\"24\" x=\"0\" y=\"0\" maskUnits=\"userSpaceOnUse\" style=\"mask-type:alpha\"\u003e\u003cpath fill=\"url(#lovable-logo_svg__a)\" fill-rule=\"evenodd\" d=\"M6.898 0c3.81 0 6.898 3.179 6.898 7.1v2.7h2.295c3.81 0 6.898 3.178 6.898 7.1S19.901 24 16.091 24H0V7.1C0 3.18 3.088 0 6.898 0\" clip-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/mask\u003e\u003cg mask=\"url(#lovable-logo_svg__b)\"\u003e\u003cg filter=\"url(#lovable-logo_svg__c)\"\u003e\u003cellipse cx=\"10.084\" cy=\"12.811\" fill=\"#4B73FF\" rx=\"15.562\" ry=\"15.977\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo_svg__d)\"\u003e\u003cellipse cx=\"11.794\" cy=\"4.043\" fill=\"#FF66F4\" rx=\"19.931\" ry=\"15.977\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo_svg__e)\"\u003e\u003cellipse cx=\"15.045\" cy=\"1.037\" fill=\"#FF0105\" rx=\"15.562\" ry=\"14.031\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003cg filter=\"url(#lovable-logo_svg__f)\"\u003e\u003cellipse cx=\"12.071\" cy=\"4.039\" fill=\"#FE7B02\" rx=\"9.359\" ry=\"9.608\"\u003e\u003c/ellipse\u003e\u003c/g\u003e\u003c/g\u003e\u003cdefs\u003e\u003cfilter id=\"lovable-logo_svg__c\" width=\"45.444\" height=\"46.274\" x=\"-12.638\" y=\"-10.326\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_3420\" stdDeviation=\"3.58\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo_svg__d\" width=\"54.181\" height=\"46.274\" x=\"-15.297\" y=\"-19.094\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_3420\" stdDeviation=\"3.58\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo_svg__e\" width=\"45.444\" height=\"42.383\" x=\"-7.677\" y=\"-20.154\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_3420\" stdDeviation=\"3.58\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003cfilter id=\"lovable-logo_svg__f\" width=\"33.038\" height=\"33.538\" x=\"-4.448\" y=\"-12.73\" color-interpolation-filters=\"sRGB\" filterUnits=\"userSpaceOnUse\"\u003e\u003cfeFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"\u003e\u003c/feFlood\u003e\u003cfeBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"\u003e\u003c/feBlend\u003e\u003cfeGaussianBlur result=\"effect1_foregroundBlur_19703_3420\" stdDeviation=\"3.58\"\u003e\u003c/feGaussianBlur\u003e\u003c/filter\u003e\u003clinearGradient id=\"lovable-logo_svg__a\" x1=\"7.736\" x2=\"15.072\" y1=\"4.218\" y2=\"23.867\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop offset=\"0.025\" stop-color=\"#FF8E63\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.56\" stop-color=\"#FF7EB0\"\u003e\u003c/stop\u003e\u003cstop offset=\"0.95\" stop-color=\"#4B73FF\"\u003e\u003c/stop\u003e\u003c/linearGradient\u003e\u003c/defs\u003e\u003c/svg\u003e\u003c/a\u003e\u003cdiv class=\"hidden w-fit lg:block\"\u003e\u003cbutton class=\"flex items-center gap-1 text-muted-foreground hover:underline disabled:opacity-50\" type=\"button\" id=\"radix-_R_17l5tmplb_\" aria-haspopup=\"menu\" aria-expanded=\"false\" data-state=\"closed\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-4 w-4\" fill=\"currentColor\"\u003e\u003cpath d=\"M480-80q-84 0-157-31.5T196-197t-85-127.5T80-482t31-156.5T196-765t127-84.5T480-880t157 30.5T764-765t85 126.5T880-482t-31 157.5T764-197t-127 85.5T480-80m0-58q35-36 58.5-82.5T577-331H384q14 60 37.5 108t58.5 85m-85-12q-25-38-43-82t-30-99H172q38 71 88 111.5T395-150m171-1q72-23 129.5-69T788-331H639q-13 54-30.5 98T566-151M152-391h159q-3-27-3.5-48.5T307-482q0-25 1-44.5t4-43.5H152q-7 24-9.5 43t-2.5 45 2.5 46.5T152-391m221 0h215q4-31 5-50.5t1-40.5q0-20-1-38.5t-5-49.5H373q-4 31-5 49.5t-1 38.5q0 21 1 40.5t5 50.5m275 0h160q7-24 9.5-44.5T820-482t-2.5-45-9.5-43H649q3 35 4 53.5t1 34.5q0 22-1.5 41.5T648-391m-10-239h150q-33-69-90.5-115T565-810q25 37 42.5 80T638-630m-254 0h194q-11-53-37-102.5T480-820q-32 27-54 71t-42 119m-212 0h151q11-54 28-96.5t43-82.5q-75 19-131 64t-91 115\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003cspan class=\"text-sm\"\u003eEN\u003c/span\u003e\u003c/button\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"space-y-4\"\u003e\u003ch3 class=\"text-sm font-normal text-muted-foreground\"\u003eCompany\u003c/h3\u003e\u003cul class=\"space-y-3\"\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/careers\"\u003eCareers\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/brand\"\u003ePress \u0026amp; media\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://enterprise.lovable.dev/\"\u003eEnterprise\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/security\"\u003eSecurity\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://trust.delve.co/lovable\"\u003eTrust center\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv class=\"space-y-4\"\u003e\u003ch3 class=\"text-sm font-normal text-muted-foreground\"\u003eProduct\u003c/h3\u003e\u003cul class=\"space-y-3\"\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/pricing\"\u003ePricing\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/students\"\u003eStudent discount\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/solutions\"\u003eSolutions\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.lovable.dev/integrations/introduction\"\u003eIntegrations\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003cbutton type=\"button\" aria-haspopup=\"dialog\" aria-expanded=\"false\" aria-controls=\"radix-_R_2pbl5tmplb_\" data-state=\"closed\" class=\"text-start text-sm text-primary transition-colors hover:text-muted-foreground\"\u003eImport from Figma\u003c/button\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.lovable.dev/changelog\"\u003eChangelog\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://status.lovable.dev/\"\u003eStatus\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv class=\"space-y-4\"\u003e\u003ch3 class=\"text-sm font-normal text-muted-foreground\"\u003eResources\u003c/h3\u003e\u003cul class=\"space-y-3\"\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.lovable.dev\"\u003eLearn\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/how-to\"\u003eHow-to guides\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/videos\"\u003eVideos\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/blog\"\u003eBlog\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://launched.lovable.dev/\"\u003eLaunched\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/support\"\u003eSupport\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv class=\"space-y-4\"\u003e\u003ch3 class=\"text-sm font-normal text-muted-foreground\"\u003eLegal\u003c/h3\u003e\u003cul class=\"space-y-3\"\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/privacy\"\u003ePrivacy policy\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/do-not-sell-or-share-my-personal-information\"\u003eCookie settings\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/terms\"\u003eTerms \u0026amp; conditions\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/abuse\"\u003eReport abuse\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/security\"\u003eReport security concerns\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv class=\"space-y-4\"\u003e\u003ch3 class=\"text-sm font-normal text-muted-foreground\"\u003eCommunity\u003c/h3\u003e\u003cul class=\"space-y-3\"\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/partners/apply\"\u003eBecome a partner\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/partners\"\u003eHire a partner\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" href=\"/affiliates\"\u003eAffiliates\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://discord.com/invite/lovable-dev\"\u003eDiscord\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://reddit.com/r/lovable\"\u003eReddit\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/lovable_dev\"\u003eX / Twitter\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca class=\"group flex items-start text-sm text-primary transition-colors hover:text-muted-foreground\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/company/lovable-dev/\"\u003eLinkedIn\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 ms-1 mt-0.5 rotate-45 opacity-0 transition-opacity group-hover:opacity-100 rtl:-rotate-45\" fill=\"currentColor\"\u003e\u003cpath d=\"M452-644 303-498q-9 9-21 8.5t-21-9.5-9-21 9-21l199-199q9-9 21-9t21 9l199 199q9 9 9 21t-9 21-21 9-21-9L512-646v372q0 13-8.5 21.5T482-244t-21.5-8.5T452-274z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv class=\"col-span-2 w-fit sm:col-span-3 lg:hidden\"\u003e\u003cbutton class=\"flex items-center gap-1 text-muted-foreground hover:underline disabled:opacity-50\" type=\"button\" id=\"radix-_R_fl5tmplb_\" aria-haspopup=\"menu\" aria-expanded=\"false\" data-state=\"closed\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-4 w-4\" fill=\"currentColor\"\u003e\u003cpath d=\"M480-80q-84 0-157-31.5T196-197t-85-127.5T80-482t31-156.5T196-765t127-84.5T480-880t157 30.5T764-765t85 126.5T880-482t-31 157.5T764-197t-127 85.5T480-80m0-58q35-36 58.5-82.5T577-331H384q14 60 37.5 108t58.5 85m-85-12q-25-38-43-82t-30-99H172q38 71 88 111.5T395-150m171-1q72-23 129.5-69T788-331H639q-13 54-30.5 98T566-151M152-391h159q-3-27-3.5-48.5T307-482q0-25 1-44.5t4-43.5H152q-7 24-9.5 43t-2.5 45 2.5 46.5T152-391m221 0h215q4-31 5-50.5t1-40.5q0-20-1-38.5t-5-49.5H373q-4 31-5 49.5t-1 38.5q0 21 1 40.5t5 50.5m275 0h160q7-24 9.5-44.5T820-482t-2.5-45-9.5-43H649q3 35 4 53.5t1 34.5q0 22-1.5 41.5T648-391m-10-239h150q-33-69-90.5-115T565-810q25 37 42.5 80T638-630m-254 0h194q-11-53-37-102.5T480-820q-32 27-54 71t-42 119m-212 0h151q11-54 28-96.5t43-82.5q-75 19-131 64t-91 115\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003cspan class=\"text-sm\"\u003eEN\u003c/span\u003e\u003c/button\u003e\u003c/div\u003e\u003c/nav\u003e\u003c/footer\u003e\u003c/div\u003e\u003c/div\u003e\u003csection aria-label=\"Notifications alt+T\" tabindex=\"-1\" aria-live=\"polite\" aria-relevant=\"additions text\" aria-atomic=\"false\"\u003e\u003c/section\u003e\u003c/div\u003e\u003cscript\u003erequestAnimationFrame(function(){$RT=performance.now()});\u003c/script\u003e\u003cscript src=\"/_next/static/chunks/webpack-d9f4e9a879e66f46.js\" id=\"_R_\" async=\"\"\u003e\u003c/script\u003e\u003cdiv hidden id=\"S:0\"\u003e\u003cdiv class=\"w-full max-w-3xl\"\u003e\u003cdiv class=\"relative w-full\"\u003e\u003cdiv class=\"flex w-full flex-col items-center\"\u003e\u003cdiv class=\"relative size-full\"\u003e\u003cform class=\"group flex flex-col gap-2 p-3 w-full rounded-3.5xl border border-muted-border bg-muted text-base shadow-xl transition-all duration-150 ease-in-out focus-within:border-foreground/20 hover:border-foreground/10 focus-within:hover:border-foreground/20\"\u003e\u003cdiv class=\"relative flex flex-1 items-center\"\u003e\u003ctextarea class=\"flex w-full rounded-md px-2 py-2 ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 resize-none text-[16px] leading-snug placeholder-shown:text-ellipsis placeholder-shown:whitespace-nowrap md:text-base focus-visible:ring-0 focus-visible:ring-offset-0 max-h-[200px] bg-transparent focus:bg-transparent flex-1\" id=\"chatinput\" autofocus=\"\" style=\"min-height:80px\" placeholder=\"Ask Lovable to create \" maxLength=\"50000\"\u003e\u003c/textarea\u003e\u003c/div\u003e\u003cdiv class=\"flex gap-1 flex-wrap items-center\"\u003e\u003cbutton class=\"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium transition-colors duration-100 ease-in-out focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [\u0026amp;_svg]:pointer-events-none border border-input bg-muted shadow-sm hover:bg-accent hover:border-accent gap-1.5 h-8 w-8 rounded-full p-0 text-muted-foreground hover:text-foreground\" type=\"button\" id=\"radix-_R_2j37ilul5tmplb_\" aria-haspopup=\"menu\" aria-expanded=\"false\" data-state=\"closed\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-5 w-5 text-muted-foreground\" fill=\"currentColor\"\u003e\u003cpath d=\"M450-450H230q-12.75 0-21.37-8.68-8.63-8.67-8.63-21.5 0-12.82 8.63-21.32 8.62-8.5 21.37-8.5h220v-220q0-12.75 8.68-21.38 8.67-8.62 21.5-8.62 12.82 0 21.32 8.62 8.5 8.63 8.5 21.38v220h220q12.75 0 21.38 8.68 8.62 8.67 8.62 21.5 0 12.82-8.62 21.32-8.63 8.5-21.38 8.5H510v220q0 12.75-8.68 21.37-8.67 8.63-21.5 8.63-12.82 0-21.32-8.63-8.5-8.62-8.5-21.37z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/button\u003e\u003cdiv\u003e\u003cbutton class=\"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium transition-colors duration-100 ease-in-out focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [\u0026amp;_svg]:pointer-events-none border border-input bg-muted shadow-sm hover:bg-accent hover:border-accent py-2 h-8 gap-1.5 rounded-full px-3 text-muted-foreground hover:text-foreground\" type=\"button\" aria-haspopup=\"dialog\" aria-expanded=\"false\" aria-controls=\"radix-_R_1kj37ilul5tmplb_\" data-state=\"closed\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-4 w-4\" fill=\"currentColor\"\u003e\u003cpath d=\"M180-120q-24 0-42-18t-18-42v-600q0-24 18-42t42-18h335q12.75 0 21.38 8.68 8.62 8.67 8.62 21.5 0 12.82-8.62 21.32-8.63 8.5-21.38 8.5H180v600h600v-335q0-12.75 8.68-21.38 8.67-8.62 21.5-8.62 12.82 0 21.32 8.62 8.5 8.63 8.5 21.38v335q0 24-18 42t-42 18zm60-162h480L576-474 449-307l-94-124zm453-410h-58q-12.75 0-21.37-8.68-8.63-8.67-8.63-21.5 0-12.82 8.63-21.32 8.62-8.5 21.37-8.5h58v-58q0-12.75 8.68-21.38 8.67-8.62 21.5-8.62 12.82 0 21.32 8.62 8.5 8.63 8.5 21.38v58h57q12.75 0 21.38 8.68 8.62 8.67 8.62 21.5 0 12.82-8.62 21.32-8.63 8.5-21.38 8.5h-57v57q0 12.75-8.68 21.37-8.67 8.63-21.5 8.63-12.82 0-21.32-8.63-8.5-8.62-8.5-21.37z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003cspan class=\"hidden md:flex\"\u003eAttach\u003c/span\u003e\u003c/button\u003e\u003c/div\u003e\u003cinput id=\"file-upload\" class=\"hidden\" accept=\"image/jpeg,.jpg,.jpeg,image/png,.png,image/webp,.webp\" multiple=\"\" type=\"file\" style=\"border:0;clip:rect(0, 0, 0, 0);clip-path:inset(50%);height:1px;margin:0 -1px -1px 0;overflow:hidden;padding:0;position:absolute;width:1px;white-space:nowrap\" tabindex=\"-1\"/\u003e\u003cbutton class=\"whitespace-nowrap text-sm font-medium transition-colors duration-100 ease-in-out focus-visible:outline-none focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [\u0026amp;_svg]:pointer-events-none border border-input bg-muted shadow-sm hover:bg-accent hover:border-accent px-3 py-2 flex h-8 items-center justify-center gap-1 rounded-full text-muted-foreground focus-visible:ring-0\" type=\"button\" aria-haspopup=\"dialog\" aria-expanded=\"false\" aria-controls=\"radix-_R_537ilul5tmplb_\" data-state=\"closed\"\u003e\u003cdiv class=\"flex items-center gap-1 duration-200 animate-in fade-in\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-4 w-4\" fill=\"currentColor\"\u003e\u003cpath d=\"M480.27-80q-82.74 0-155.5-31.5Q252-143 197.5-197.5t-86-127.34T80-480.5t31.5-155.66 86-126.84 127.34-85.5T480.5-880t155.66 31.5T763-763t85.5 127T880-480.27q0 82.74-31.5 155.5Q817-252 763-197.68q-54 54.31-127 86Q563-80 480.27-80m-.27-60q142.38 0 241.19-99.5T820-480v-13q-6 26-27.41 43.5Q771.19-432 742-432h-80q-33 0-56.5-23.5T582-512v-40H422v-80q0-33 23.5-56.5T502-712h40v-22q0-16 13.5-40t30.5-29q-25-8-51.36-12.5Q508.29-820 480-820q-141 0-240.5 98.81T140-480h150q66 0 113 47t47 113v40H330v105q34 17 71.7 26t78.3 9\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003cspan class=\"hidden md:flex\"\u003ePublic\u003c/span\u003e\u003c/div\u003e\u003c/button\u003e\u003cdiv class=\"ml-auto flex items-center gap-1\"\u003e\u003cdiv class=\"relative flex items-center gap-1 md:gap-2\"\u003e\u003cdiv class=\"\"\u003e\u003c/div\u003e\u003cbutton id=\"chatinput-send-message-button\" type=\"submit\" class=\"flex h-8 w-8 items-center justify-center rounded-full bg-foreground transition-opacity duration-150 ease-out disabled:cursor-not-allowed disabled:opacity-50\" disabled=\"\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-6 w-6 text-background\" fill=\"currentColor\"\u003e\u003cpath d=\"M442.39-616.87 309.78-487.26q-11.82 11.83-27.78 11.33t-27.78-12.33q-11.83-11.83-11.83-27.78 0-15.96 11.83-27.79l198.43-199q11.83-11.82 28.35-11.82t28.35 11.82l198.43 199q11.83 11.83 11.83 27.79 0 15.95-11.83 27.78-11.82 11.83-27.78 11.83t-27.78-11.83L521.61-618.87v348.83q0 16.95-11.33 28.28-11.32 11.33-28.28 11.33t-28.28-11.33q-11.33-11.33-11.33-28.28z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/button\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/form\u003e\u003c/div\u003e\u003cdiv class=\"h-[40px]\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cscript\u003e$RB=[];$RV=function(b){$RT=performance.now();for(var a=0;a\u003cb.length;a+=2){var c=b[a],e=b[a+1];null!==e.parentNode\u0026\u0026e.parentNode.removeChild(e);var f=c.parentNode;if(f){var g=c.previousSibling,h=0;do{if(c\u0026\u00268===c.nodeType){var d=c.data;if(\"/$\"===d||\"/\u0026\"===d)if(0===h)break;else h--;else\"$\"!==d\u0026\u0026\"$?\"!==d\u0026\u0026\"$~\"!==d\u0026\u0026\"$!\"!==d\u0026\u0026\"\u0026\"!==d||h++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;e.firstChild;)f.insertBefore(e.firstChild,c);g.data=\"$\";g._reactRetry\u0026\u0026g._reactRetry()}}b.length=0};\n$RC=function(b,a){if(a=document.getElementById(a))(b=document.getElementById(b))?(b.previousSibling.data=\"$~\",$RB.push(b,a),2===$RB.length\u0026\u0026(b=\"number\"!==typeof $RT?0:$RT,a=performance.now(),setTimeout($RV.bind(null,$RB),2300\u003ea\u0026\u00262E3\u003ca?2300-a:b+300-a))):a.parentNode.removeChild(a)};$RC(\"B:0\",\"S:0\")\u003c/script\u003e\u003cdiv hidden id=\"S:1\"\u003e\u003cdiv class=\"flex w-full flex-col gap-12 rounded-[20px] bg-background px-8 py-8\"\u003e\u003cdiv class=\"flex flex-col gap-5\"\u003e\u003cdiv class=\"flex flex-col gap-2 sm:gap-4\"\u003e\u003cdiv class=\"flex w-full flex-col gap-2 sm:flex-row sm:items-center sm:gap-4\"\u003e\u003cdiv class=\"flex w-full items-center\"\u003e\u003cp class=\"text-2xl font-medium\"\u003eFrom the Community\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"flex w-full flex-col justify-between gap-2 sm:flex-row sm:gap-4\"\u003e\u003cbutton type=\"button\" role=\"combobox\" aria-controls=\"radix-_R_5j4lul5tmplb_\" aria-expanded=\"false\" aria-autocomplete=\"none\" dir=\"ltr\" data-state=\"closed\" class=\"flex h-9 items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [\u0026amp;\u0026gt;span]:line-clamp-1 w-36\"\u003e\u003cspan style=\"pointer-events:none\"\u003e\u003c/span\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -960 960 960\" class=\"shrink-0 h-4 w-4 opacity-50\" fill=\"currentColor\" aria-hidden=\"true\"\u003e\u003cpath d=\"M480-356q-6 0-11-2t-10-7L261-563q-9-9-8.5-21.5T262-606t21.5-9 21.5 9l175 176 176-176q9-9 21-8.5t21 9.5 9 21.5-9 21.5L501-365q-5 5-10 7t-11 2\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/button\u003e\u003cselect aria-hidden=\"true\" tabindex=\"-1\" style=\"position:absolute;border:0;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;word-wrap:normal\"\u003e\u003c/select\u003e\u003cdiv class=\"flex flex-wrap gap-2\"\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80 h-9 cursor-pointer px-3 py-2 text-sm\"\u003eDiscover\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003eInternal Tools\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003eWebsite\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003ePersonal\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003eConsumer App\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003eB2B App\u003c/div\u003e\u003cdiv class=\"inline-flex items-center rounded-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground border border-border h-9 cursor-pointer px-3 py-2 text-sm\"\u003ePrototype\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"ml-auto flex w-36 justify-end md:ml-0\"\u003e\u003cbutton class=\"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors duration-100 ease-in-out focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [\u0026amp;_svg]:pointer-events-none hover:bg-accent rounded-md px-4 py-2 h-9\"\u003e\u003ca class=\"focus:outline-none\" href=\"/projects/featured\"\u003eView All\u003c/a\u003e\u003c/button\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"grid w-full grid-cols-1 gap-6 md:grid-cols-3 lg:grid-cols-4\"\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"group flex flex-col\"\u003e\u003cdiv class=\"animate-pulse mb-3 aspect-video h-full w-full rounded-lg bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"flex flex-col gap-2 py-1\"\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[150px] bg-muted\"\u003e\u003c/div\u003e\u003cdiv class=\"animate-pulse rounded-md h-3.5 w-[120px] bg-muted\"\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cscript\u003e$RC(\"B:1\",\"S:1\")\u003c/script\u003e\u003cscript\u003e(self.__next_f=self.__next_f||[]).push([0])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1:\\\"$Sreact.fragment\\\"\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"3:I[34389,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"4480\\\",\\\"static/chunks/app/(HomeLayout)/layout-b7a9a2f8a03a735a.js\\\"],\\\"default\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"4:I[41094,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"4480\\\",\\\"static/chunks/app/(HomeLayout)/layout-b7a9a2f8a03a735a.js\\\"],\\\"Background\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"5:I[70999,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"RootDialog\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"6:I[15153,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"ViewSwitcherAutoEnable\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"7:I[13465,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"CreateWorkspaceDialog\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"8:I[37430,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"default\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"9:I[7140,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"WorkspacePaymentFailedDialog\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"a:I[52333,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"PostCheckoutDialog\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"b:I[36303,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"3050\\\",\\\"static/chunks/3050-571411d8348264f7.js\\\",\\\"9034\\\",\\\"static/chunks/9034-fda47cd3c48a2434.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"6805\\\",\\\"static/chunks/6805-6307e2a174de7c70.js\\\",\\\"5302\\\",\\\"static/chunks/5302-0fc5a963c913817d.js\\\",\\\"4155\\\",\\\"static/chunks/4155-9ea59bd438553e61.js\\\",\\\"1282\\\",\\\"static/chunks/app/(MainLayout)/layout-9b790ead18e7b5e3.js\\\"],\\\"default\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"c:I[44695,[],\\\"\\\"]\\nd:I[77099,[],\\\"\\\"]\\ne:I[61314,[],\\\"ClientPageRoot\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"f:I[79559,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"4880\\\",\\\"static/chunks/4880-24b1f7b85acea37c.js\\\",\\\"6128\\\",\\\"static/chunks/6128-1cd1fd8cecf188be.js\\\",\\\"2126\\\",\\\"static/chunks/2126-74d8d626d90870ea.js\\\",\\\"9531\\\",\\\"static/chunks/9531-a2b7427d4894250a.js\\\",\\\"1174\\\",\\\"static/chunks/1174-f0212fd5a2380f51.js\\\",\\\"6298\\\",\\\"static/chunks/6298-b1e023719cc91137.js\\\",\\\"6006\\\",\\\"static/chunks/6006-67e3eba5e79db531.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"5982\\\",\\\"static/chunks/5982-de5e0ada108969eb.js\\\",\\\"7099\\\",\\\"static/chunks/7099-59a99d6d1592034a.js\\\",\\\"7883\\\",\\\"static/chunks/7883-7146d8dc6d067a0d.js\\\",\\\"1003\\\",\\\"static/chunks/1003-679c90e17e3abbe0.js\\\",\\\"717\\\",\\\"static/chunks/717-99afeb715c65bbcd.js\\\",\\\"4678\\\",\\\"static/chunks/4678-0d96f1cb3b35c680.js\\\",\\\"5271\\\",\\\"static/chunks/app/(HomeLayout)/page-a8aa82e6f41bbfe4.js\\\"],\\\"default\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"10:I[32517,[],\\\"OutletBoundary\\\"]\\n12:I[83827,[],\\\"AsyncMetadataOutlet\\\"]\\n14:I[32517,[],\\\"ViewportBoundary\\\"]\\n16:I[32517,[],\\\"MetadataBoundary\\\"]\\n17:\\\"$Sreact.suspense\\\"\\n19:I[40157,[],\\\"\\\"]\\n1a:I[18827,[],\\\"IconMark\\\"]\\n:HL[\\\"/_next/static/media/04c95c14768672d3-s.p.woff2\\\",\\\"font\\\",{\\\"crossOrigin\\\":\\\"\\\",\\\"type\\\":\\\"font/woff2\\\"}]\\n:HL[\\\"/_next/static/media/739c2d8941231bb4-s.p.woff2\\\",\\\"font\\\",{\\\"crossOrigin\\\":\\\"\\\",\\\"type\\\":\\\"font/woff2\\\"}]\\n:HL[\\\"/_next/static/css/acf7c57c1c28fc6e.css\\\",\\\"style\\\"]\\n:HL[\\\"/_next/static/css/d4db635cc205055a.css\\\",\\\"style\\\"]\\n:HL[\\\"/_next/static/css/50809e25ee5695d7.css\\\",\\\"style\\\"]\\n:HL[\\\"/_next/static/css/281811c1f3d8bb8a.css\\\",\\\"style\\\"]\\n:HL[\\\"/_next/static/css/9218524b4122c5d5.css\\\",\\\"style\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"0:{\\\"P\\\":null,\\\"b\\\":\\\"vXOJR48sI04x5ASFKz3sr\\\",\\\"p\\\":\\\"\\\",\\\"c\\\":[\\\"\\\",\\\"\\\"],\\\"i\\\":false,\\\"f\\\":[[[\\\"\\\",{\\\"children\\\":[\\\"(HomeLayout)\\\",{\\\"children\\\":[\\\"__PAGE__\\\",{}]}]},\\\"$undefined\\\",\\\"$undefined\\\",true],[\\\"\\\",[\\\"$\\\",\\\"$1\\\",\\\"c\\\",{\\\"children\\\":[[[\\\"$\\\",\\\"link\\\",\\\"0\\\",{\\\"rel\\\":\\\"stylesheet\\\",\\\"href\\\":\\\"/_next/static/css/acf7c57c1c28fc6e.css\\\",\\\"precedence\\\":\\\"next\\\",\\\"crossOrigin\\\":\\\"$undefined\\\",\\\"nonce\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"link\\\",\\\"1\\\",{\\\"rel\\\":\\\"stylesheet\\\",\\\"href\\\":\\\"/_next/static/css/d4db635cc205055a.css\\\",\\\"precedence\\\":\\\"next\\\",\\\"crossOrigin\\\":\\\"$undefined\\\",\\\"nonce\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"link\\\",\\\"2\\\",{\\\"rel\\\":\\\"stylesheet\\\",\\\"href\\\":\\\"/_next/static/css/50809e25ee5695d7.css\\\",\\\"precedence\\\":\\\"next\\\",\\\"crossOrigin\\\":\\\"$undefined\\\",\\\"nonce\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"link\\\",\\\"3\\\",{\\\"rel\\\":\\\"stylesheet\\\",\\\"href\\\":\\\"/_next/static/css/281811c1f3d8bb8a.css\\\",\\\"precedence\\\":\\\"next\\\",\\\"crossOrigin\\\":\\\"$undefined\\\",\\\"nonce\\\":\\\"$undefined\\\"}]],\\\"$L2\\\"]}],{\\\"children\\\":[\\\"(HomeLayout)\\\",[\\\"$\\\",\\\"$1\\\",\\\"c\\\",{\\\"children\\\":[[[\\\"$\\\",\\\"link\\\",\\\"0\\\",{\\\"rel\\\":\\\"stylesheet\\\",\\\"href\\\":\\\"/_next/static/css/9218524b4122c5d5.css\\\",\\\"precedence\\\":\\\"next\\\",\\\"crossOrigin\\\":\\\"$undefined\\\",\\\"nonce\\\":\\\"$undefined\\\"}]],[\\\"$\\\",\\\"div\\\",null,{\\\"className\\\":\\\"relative min-h-screen w-full bg-background transition-none\\\",\\\"children\\\":[[\\\"$\\\",\\\"$L3\\\",null,{}],[\\\"$\\\",\\\"$L4\\\",null,{}],[\\\"$\\\",\\\"div\\\",null,{\\\"className\\\":\\\"absolute inset-0\\\",\\\"style\\\":{\\\"backgroundImage\\\":\\\"url(/_next/static/media/grain.1ccdda41.png)\\\",\\\"backgroundSize\\\":\\\"100px 100px\\\",\\\"backgroundRepeat\\\":\\\"repeat\\\",\\\"backgroundBlendMode\\\":\\\"overlay\\\",\\\"backgroundPosition\\\":\\\"left top\\\",\\\"mixBlendMode\\\":\\\"overlay\\\"}}],[\\\"$\\\",\\\"$L5\\\",null,{}],[\\\"$\\\",\\\"$L6\\\",null,{}],[\\\"$\\\",\\\"$L7\\\",null,{}],[\\\"$\\\",\\\"$L8\\\",null,{}],[\\\"$\\\",\\\"$L9\\\",null,{}],[\\\"$\\\",\\\"$La\\\",null,{}],[\\\"$\\\",\\\"$Lb\\\",null,{\\\"footerClassName\\\":\\\"mt-6\\\",\\\"children\\\":[\\\"$\\\",\\\"$Lc\\\",null,{\\\"parallelRouterKey\\\":\\\"children\\\",\\\"error\\\":\\\"$undefined\\\",\\\"errorStyles\\\":\\\"$undefined\\\",\\\"errorScripts\\\":\\\"$undefined\\\",\\\"template\\\":[\\\"$\\\",\\\"$Ld\\\",null,{}],\\\"templateStyles\\\":\\\"$undefined\\\",\\\"templateScripts\\\":\\\"$undefined\\\",\\\"notFound\\\":[[[\\\"$\\\",\\\"title\\\",null,{\\\"children\\\":\\\"404: This page could not be found.\\\"}],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":{\\\"fontFamily\\\":\\\"system-ui,\\\\\\\"Segoe UI\\\\\\\",Roboto,Helvetica,Arial,sans-serif,\\\\\\\"Apple Color Emoji\\\\\\\",\\\\\\\"Segoe UI Emoji\\\\\\\"\\\",\\\"height\\\":\\\"100vh\\\",\\\"textAlign\\\":\\\"center\\\",\\\"display\\\":\\\"flex\\\",\\\"flexDirection\\\":\\\"column\\\",\\\"alignItems\\\":\\\"center\\\",\\\"justifyContent\\\":\\\"center\\\"},\\\"children\\\":[\\\"$\\\",\\\"div\\\",null,{\\\"children\\\":[[\\\"$\\\",\\\"style\\\",null,{\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\\\"}}],[\\\"$\\\",\\\"h1\\\",null,{\\\"className\\\":\\\"next-error-h1\\\",\\\"style\\\":{\\\"display\\\":\\\"inline-block\\\",\\\"margin\\\":\\\"0 20px 0 0\\\",\\\"padding\\\":\\\"0 23px 0 0\\\",\\\"fontSize\\\":24,\\\"fontWeight\\\":500,\\\"verticalAlign\\\":\\\"top\\\",\\\"lineHeight\\\":\\\"49px\\\"},\\\"children\\\":404}],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":{\\\"display\\\":\\\"inline-block\\\"},\\\"children\\\":[\\\"$\\\",\\\"h2\\\",null,{\\\"style\\\":{\\\"fontSize\\\":14,\\\"fontWeight\\\":400,\\\"lineHeight\\\":\\\"49px\\\",\\\"margin\\\":0},\\\"children\\\":\\\"This page could not be found.\\\"}]}]]}]}]],[]],\\\"forbidden\\\":\\\"$undefined\\\",\\\"unauthorized\\\":\\\"$undefined\\\"}]}]]}]]}],{\\\"children\\\":[\\\"__PAGE__\\\",[\\\"$\\\",\\\"$1\\\",\\\"c\\\",{\\\"children\\\":[[\\\"$\\\",\\\"$Le\\\",null,{\\\"Component\\\":\\\"$f\\\",\\\"searchParams\\\":{},\\\"params\\\":{}}],null,[\\\"$\\\",\\\"$L10\\\",null,{\\\"children\\\":[\\\"$L11\\\",[\\\"$\\\",\\\"$L12\\\",null,{\\\"promise\\\":\\\"$@13\\\"}]]}]]}],{},null,false]},null,false]},null,false],[\\\"$\\\",\\\"$1\\\",\\\"h\\\",{\\\"children\\\":[null,[[\\\"$\\\",\\\"$L14\\\",null,{\\\"children\\\":\\\"$L15\\\"}],[\\\"$\\\",\\\"meta\\\",null,{\\\"name\\\":\\\"next-size-adjust\\\",\\\"content\\\":\\\"\\\"}]],[\\\"$\\\",\\\"$L16\\\",null,{\\\"children\\\":[\\\"$\\\",\\\"div\\\",null,{\\\"hidden\\\":true,\\\"children\\\":[\\\"$\\\",\\\"$17\\\",null,{\\\"fallback\\\":null,\\\"children\\\":\\\"$L18\\\"}]}]}]]}],false]],\\\"m\\\":\\\"$undefined\\\",\\\"G\\\":[\\\"$19\\\",[]],\\\"s\\\":false,\\\"S\\\":false}\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"15:[[\\\"$\\\",\\\"meta\\\",\\\"0\\\",{\\\"charSet\\\":\\\"utf-8\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"1\\\",{\\\"name\\\":\\\"viewport\\\",\\\"content\\\":\\\"width=device-width, initial-scale=1, viewport-fit=cover, user-scalable=no\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"2\\\",{\\\"name\\\":\\\"theme-color\\\",\\\"content\\\":\\\"#fcfbf8\\\"}]]\\n11:null\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"13:{\\\"metadata\\\":[[\\\"$\\\",\\\"title\\\",\\\"0\\\",{\\\"children\\\":\\\"Lovable\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"1\\\",{\\\"name\\\":\\\"description\\\",\\\"content\\\":\\\"Build software products, using only a chat interface\\\"}],[\\\"$\\\",\\\"link\\\",\\\"2\\\",{\\\"rel\\\":\\\"manifest\\\",\\\"href\\\":\\\"/manifest.webmanifest\\\",\\\"crossOrigin\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"3\\\",{\\\"name\\\":\\\"keywords\\\",\\\"content\\\":\\\"lovable,loveable,website builder,ai website builder,no code website builder,software engineer,full stack engineer,product engineer,frontend engineer,backend engineer,ai full stack engineer,ai developer,ai coder,ai engineer,ai software engineer,gpt engineer,gpt coder,gpt software engineer,learn to code,build website,build app,web agency,ai web agency\\\"}],[\\\"$\\\",\\\"link\\\",\\\"4\\\",{\\\"rel\\\":\\\"canonical\\\",\\\"href\\\":\\\"https://lovable.dev\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"5\\\",{\\\"property\\\":\\\"og:title\\\",\\\"content\\\":\\\"Lovable\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"6\\\",{\\\"property\\\":\\\"og:description\\\",\\\"content\\\":\\\"Build software products, using only a chat interface\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"7\\\",{\\\"property\\\":\\\"og:url\\\",\\\"content\\\":\\\"https://lovable.dev\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"8\\\",{\\\"property\\\":\\\"og:image:type\\\",\\\"content\\\":\\\"image/png\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"9\\\",{\\\"property\\\":\\\"og:image:width\\\",\\\"content\\\":\\\"1200\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"10\\\",{\\\"property\\\":\\\"og:image:height\\\",\\\"content\\\":\\\"629\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"11\\\",{\\\"property\\\":\\\"og:image\\\",\\\"content\\\":\\\"https://lovable.dev/opengraph-image.png?e7ae4aa2faea9aea\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"12\\\",{\\\"property\\\":\\\"og:type\\\",\\\"content\\\":\\\"website\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"13\\\",{\\\"name\\\":\\\"twitter:card\\\",\\\"content\\\":\\\"summary_large_image\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"14\\\",{\\\"name\\\":\\\"twitter:title\\\",\\\"content\\\":\\\"Lovable\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"15\\\",{\\\"name\\\":\\\"twitter:description\\\",\\\"content\\\":\\\"Build software products, using only a chat interface\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"16\\\",{\\\"name\\\":\\\"twitter:image:type\\\",\\\"content\\\":\\\"image/png\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"17\\\",{\\\"name\\\":\\\"twitter:image:width\\\",\\\"content\\\":\\\"1200\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"18\\\",{\\\"name\\\":\\\"twitter:image:height\\\",\\\"content\\\":\\\"629\\\"}],[\\\"$\\\",\\\"meta\\\",\\\"19\\\",{\\\"name\\\":\\\"twitter:image\\\",\\\"content\\\":\\\"https://lovable.dev/opengraph-image.png?e7ae4aa2faea9aea\\\"}],[\\\"$\\\",\\\"link\\\",\\\"20\\\",{\\\"rel\\\":\\\"icon\\\",\\\"href\\\":\\\"/favicon.ico\\\",\\\"type\\\":\\\"image/x-icon\\\",\\\"sizes\\\":\\\"73x74\\\"}],[\\\"$\\\",\\\"link\\\",\\\"21\\\",{\\\"rel\\\":\\\"icon\\\",\\\"href\\\":\\\"/icon.svg?9e0c9b5bb1bae062\\\",\\\"type\\\":\\\"image/svg+xml\\\",\\\"sizes\\\":\\\"any\\\"}],[\\\"$\\\",\\\"link\\\",\\\"22\\\",{\\\"rel\\\":\\\"apple-touch-icon\\\",\\\"href\\\":\\\"/apple-icon.png?59950bbf4c03032c\\\",\\\"type\\\":\\\"image/png\\\",\\\"sizes\\\":\\\"180x180\\\"}],[\\\"$\\\",\\\"$L1a\\\",\\\"23\\\",{}]],\\\"error\\\":null,\\\"digest\\\":\\\"$undefined\\\"}\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"18:\\\"$13:metadata\\\"\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1b:I[91999,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1c:I[86782,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"WebVitals\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1d:I[27740,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"Providers\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"2:[\\\"$\\\",\\\"html\\\",null,{\\\"lang\\\":\\\"en\\\",\\\"suppressHydrationWarning\\\":true,\\\"children\\\":[[\\\"$\\\",\\\"head\\\",null,{\\\"children\\\":[[[\\\"$\\\",\\\"$L1b\\\",null,{\\\"async\\\":true,\\\"defer\\\":true,\\\"data-api\\\":\\\"$undefined\\\",\\\"data-domain\\\":\\\"lovable.dev\\\",\\\"data-exclude\\\":\\\"$undefined\\\",\\\"src\\\":\\\"https://plausible.io/js/script.js\\\",\\\"integrity\\\":\\\"$undefined\\\",\\\"crossOrigin\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"next-plausible-init\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"window.plausible = window.plausible || function() { (window.plausible.q = window.plausible.q || []).push(arguments) }\\\"},\\\"nonce\\\":\\\"$undefined\\\"}],\\\"$undefined\\\"],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"domain-redirect\\\",\\\"strategy\\\":\\\"beforeInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"\\\\n              if (window.location.hostname === 'lovable.ink') {\\\\n                const targetDomain = ['lovable', 'dev'].join('.');\\\\n                window.location.href = window.location.href.replace('lovable.ink', targetDomain);\\\\n              }\\\\n            \\\"}}],[\\\"$\\\",\\\"meta\\\",null,{\\\"name\\\":\\\"facebook-domain-verification\\\",\\\"content\\\":\\\"ttyg85abvlstz5a2zp9pcu87efiu9f\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"console-message\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"\\\\n              console.log(`%c\\\\n⠀⣠⠴⠚⡙⠙⠲⣤⣠⠖⢋⡛⠙⠲⣄⠀⠀\\\\n⣴⠃⣰⠟⠉⠙⢦⡈⢁⣾⡟⠉⠳⣆⠸⣇⠀\\\\n⣿⠀⣿⠀⠀⠀⠀⠛⠛⠁⠀⠀⠀⡿⠄⣿⠄\\\\n⠸⡄⠸⣇⠀⠀⠀⠀⠀⠀⠀⠀⣰⠃⣰⡏⠀\\\\n⠀⠙⣆⠙⢧⡀⠀⠀⠀⠀⢀⡴⠃⣰⠏⠀⠀\\\\n⠀⠀⠈⠳⣄⠙⠶⣄⣀⠴⠋⣠⠞⠁⠀⠀⠀\\\\n⠀⠀⠀⠀⠈⠓⢦⡈⢡⣰⠞⠁⠀⠀⠀⠀⠀\\\\n⠀⠀⠀⠀⠀⠀⠀⠉⠋⠁⠀⠀⠀⠀⠀⠀⠀\\\\n\\\\n%cWe're hiring!\\\\n\\\\n%chttps://lovable.dev/careers`, 'color: black', 'color: #FFFFFF; font-weight: 900; font-size: 18px; text-shadow: 1px 1px 2px black;', 'color: blue; font-size: 16px;');\\\\n            \\\"}}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"google-ads\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"src\\\":\\\"https://www.googletagmanager.com/gtag/js?id=AW-16786179175\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"google-ads-config\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"\\\\n              window.dataLayer = window.dataLayer || [];\\\\n              function gtag(){dataLayer.push(arguments);}\\\\n              gtag('js', new Date());\\\\n              gtag('config', 'AW-16786179175');\\\\n            \\\"}}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"google-analytics\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"src\\\":\\\"https://www.googletagmanager.com/gtag/js?id=G-VW0TD1TTTK\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"google-analytics-config\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"\\\\n              window.dataLayer = window.dataLayer || [];\\\\n              function gtag(){dataLayer.push(arguments);}\\\\n              gtag('js', new Date());\\\\n              gtag('config', 'G-VW0TD1TTTK');\\\\n            \\\"}}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"rewardful-queue\\\",\\\"strategy\\\":\\\"beforeInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"(function(w,r){w._rwq=r;w[r]=w[r]||function(){(w[r].q=w[r].q||[]).push(arguments)}})(window,'rewardful');\\\"}}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"async\\\":true,\\\"src\\\":\\\"https://r.wdfl.co/rw.js\\\",\\\"data-rewardful\\\":\\\"e052f0\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"netlify-identity\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"src\\\":\\\"https://identity.netlify.com/v1/netlify-identity-widget.js\\\"}],[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"theme-color\\\",\\\"strategy\\\":\\\"beforeInteractive\\\",\\\"children\\\":\\\"const setThemeColor = () =\\u003e {\\\\n            const m = document.querySelector('meta[name=\\\\\\\"theme-color\\\\\\\"]');\\\\n            if (!m) return;\\\\n            const isDark = document.documentElement.classList.contains('dark');\\\\n            m.setAttribute('content', isDark ? '#1c1c1c' : '#fcfbf8');\\\\n          };\\\\n\\\\n          setThemeColor();\\\\n\\\\n          new MutationObserver(setThemeColor).observe(document.documentElement, {\\\\n            attributes: true,\\\\n            attributeFilter: ['class'],\\\\n  });\\\"}]]}],[\\\"$\\\",\\\"body\\\",null,{\\\"className\\\":\\\"__className_83c9a9 __variable_adeef6 flex min-h-dvh flex-col\\\",\\\"children\\\":[[\\\"$\\\",\\\"$L1c\\\",null,{}],[\\\"$\\\",\\\"div\\\",null,{\\\"className\\\":\\\"flex min-h-0 flex-1 flex-col\\\",\\\"children\\\":[[\\\"$\\\",\\\"$L1d\\\",null,{\\\"user\\\":null,\\\"bootstrapData\\\":{\\\"distinctID\\\":\\\"ceda9624-f453-425f-b812-03e59221987e\\\",\\\"featureFlags\\\":{\\\"templates\\\":false,\\\"sidebar\\\":false,\\\"run-linter-after-migration\\\":\\\"test\\\",\\\"free_msg_remaining_warning\\\":false,\\\"active-user-interview-cohort\\\":false,\\\"set-credit-limit\\\":false,\\\"fiverr-integration\\\":false,\\\"biz-plan\\\":true,\\\"hide-public-projects\\\":false,\\\"conversation_summary\\\":\\\"control\\\",\\\"prompt-enhancer\\\":false,\\\"User-Calls-Active-Users\\\":false,\\\"custom_domains_buy\\\":true,\\\"chat-mode-agent-refactor\\\":true,\\\"no-op-2\\\":\\\"control\\\",\\\"memory-integration\\\":false,\\\"onboarding_beginning\\\":false,\\\"safety-validation-enabled\\\":true,\\\"no-op\\\":\\\"control\\\",\\\"show-translation\\\":false,\\\"lovable_2_dialog\\\":false,\\\"write-console-logs\\\":false,\\\"bronzeage-client-selector\\\":true,\\\"integration-connect\\\":false,\\\"download-zip\\\":false,\\\"stripe_mcp\\\":false,\\\"supabase-experimental\\\":false,\\\"mobile-redesign\\\":false,\\\"island-prompt-bar\\\":false,\\\"different-lovable-experience\\\":\\\"control\\\",\\\"security-review\\\":true,\\\"agent-mode-toggle\\\":true,\\\"cached-initial-prompts\\\":false,\\\"stuck-user-thinking\\\":false,\\\"internal\\\":false,\\\"credit-rollovers-monthly\\\":false,\\\"data-collection-opt-out\\\":false,\\\"growth-ktlo\\\":true,\\\"log_graph_to_firestore\\\":true,\\\"longer-history\\\":false,\\\"launchpad-upload-image-modal\\\":\\\"variant1\\\",\\\"new-feature-dialog\\\":false,\\\"knowledge-upwork\\\":true,\\\"beta_testers\\\":false,\\\"fast_deploys\\\":true,\\\"import-figma-button\\\":false,\\\"supabase-docs-integration\\\":\\\"enabled\\\",\\\"agent-integrations\\\":false,\\\"daily_credits_allocation\\\":false,\\\"shopify-integration\\\":false,\\\"use-scheduler-schim\\\":false,\\\"visual-edits-v2\\\":false,\\\"show-new-preview\\\":false,\\\"prefill_prompt\\\":\\\"control\\\",\\\"launchpad-example-prompts\\\":true,\\\"chat-suggestions\\\":false,\\\"claude-thinking-provider-order\\\":\\\"control\\\",\\\"beautiful-cat\\\":false,\\\"page-speed\\\":true,\\\"nav-test\\\":true,\\\"contribution\\\":false,\\\"enable-backups-in-revert\\\":false,\\\"sso-identity\\\":false,\\\"claude-4-sonnet-primary-provider\\\":\\\"control\\\",\\\"backend-any-file-support\\\":false,\\\"mcp-plugins\\\":false,\\\"happy-cat\\\":\\\"control\\\",\\\"upload-any-file\\\":false,\\\"voice-mode\\\":false,\\\"ccpa\\\":true,\\\"wet-cat\\\":\\\"control\\\",\\\"start-sandbox-background\\\":true,\\\"retrieval-boost\\\":\\\"medium\\\",\\\"visual-edits-redesign\\\":false,\\\"lovable-db-testers\\\":false,\\\"students-discount\\\":true,\\\"flash-mode-toggle\\\":false,\\\"send-message-on-creation\\\":true,\\\"teams\\\":false,\\\"nudge-chat-mode\\\":true,\\\"github-contribution\\\":true,\\\"community-freshness\\\":false,\\\"use-generation-pling\\\":true,\\\"initial-generation-discount\\\":\\\"control\\\",\\\"july-2025-tech-stack-bump\\\":true,\\\"chat-mode-thinking\\\":\\\"control\\\",\\\"tool-use-card-v2\\\":false,\\\"code_editor_write\\\":false,\\\"direct-cancellation\\\":true,\\\"custom_domains\\\":true,\\\"social-proof\\\":\\\"test\\\",\\\"view-switcher\\\":false,\\\"minor-tech-stack-bump-july-2025\\\":false,\\\"plan-mode-toggle\\\":true,\\\"sso-invites\\\":true,\\\"stripe_connect\\\":false,\\\"workspace-template-editor\\\":false,\\\"enable-knowledge-as-virtual-files\\\":false,\\\"agent-2-0\\\":\\\"test\\\",\\\"project_overview_in_context\\\":\\\"control\\\",\\\"downgrade-dialog\\\":true,\\\"in-app-teaching\\\":false,\\\"quartz-toggle\\\":false,\\\"draft-projects\\\":false,\\\"screenshots-hover\\\":false,\\\"emils-first-message-prompt\\\":\\\"test\\\",\\\"subtitles\\\":false,\\\"embed\\\":false,\\\"sigma\\\":false,\\\"no-design\\\":false,\\\"dancing-octopus2\\\":\\\"control\\\",\\\"user-calls-agent-power-users\\\":false,\\\"referral-copy-confetti\\\":true,\\\"agent-use-session-replay\\\":false,\\\"temporal-revert-flow\\\":true,\\\"preprocess-large-knowledge-files\\\":false,\\\"bronzeage\\\":true,\\\"agent-default\\\":false,\\\"new-pricing-plans\\\":true,\\\"request_routing\\\":false,\\\"ai-gateway\\\":false,\\\"agent-refactor\\\":true,\\\"reference_files_in_every_rag_batch\\\":\\\"test\\\",\\\"simplified-outofcredits-dialog\\\":false,\\\"is-internal-user\\\":false,\\\"show-nav-links\\\":false,\\\"different-experience\\\":false,\\\"firestore_custom_domains\\\":true,\\\"dancing-octopus\\\":false,\\\"subtitle_test\\\":\\\"text-5\\\",\\\"lovable-cloud-beta-rollout\\\":false,\\\"Agent-Average-User\\\":false}},\\\"messages\\\":{\\\"HomePage\\\":{\\\"title\\\":\\\"Build something\\\",\\\"subtitle\\\":\\\"Create apps and websites by chatting with AI\\\",\\\"createForm\\\":{\\\"placeholder\\\":\\\"Describe your app idea...\\\"}},\\\"TypeWriter\\\":{\\\"prefix\\\":\\\"Ask Lovable to create \\\",\\\"words\\\":[\\\"a landing page for my...\\\",\\\"a blog about...\\\",\\\"a web app that...\\\",\\\"a prototype...\\\",\\\"an internal tool that...\\\",\\\"a dashboard to...\\\"]},\\\"VisibilitySelection\\\":{\\\"public\\\":{\\\"title\\\":\\\"Public\\\",\\\"description\\\":\\\"Anyone can view and remix\\\",\\\"publishingDisabled\\\":\\\"Publishing disabled\\\",\\\"publishingDisabledDescription\\\":\\\"Only admins can publish projects in this workspace\\\",\\\"disabled\\\":\\\"Disabled\\\"},\\\"workspace\\\":{\\\"title\\\":\\\"Workspace\\\",\\\"description\\\":\\\"Only visible to your workspace\\\"},\\\"draft\\\":{\\\"title\\\":\\\"Personal\\\",\\\"description\\\":\\\"Only visible to yourself, unless shared\\\",\\\"tooltip\\\":\\\"Only you and workspace admins can see this project.\\\"},\\\"upgradeMessages\\\":{\\\"workspaceRequired\\\":\\\"You need to be on a team plan to make your project shared with workspace.\\\",\\\"proRequired\\\":\\\"You need to be on a pro plan to make your project private to your workspace.\\\",\\\"businessRequired\\\":\\\"You need to be on a business plan to make your project personal.\\\"}},\\\"WorkspaceProjects\\\":{\\\"myDrafts\\\":\\\"My Drafts\\\",\\\"workspaceTitle\\\":\\\"{workspaceName}'s Workspace\\\",\\\"showMore\\\":\\\"Show more\\\",\\\"gettingProjects\\\":\\\"Getting all your projects...\\\",\\\"noProjectsFound\\\":\\\"No projects found\\\"},\\\"CommunityProjects\\\":{\\\"title\\\":\\\"From the Community\\\",\\\"showMore\\\":\\\"Show More\\\",\\\"loading\\\":\\\"Loading...\\\"},\\\"ProjectsHeader\\\":{\\\"viewAll\\\":\\\"View All\\\"},\\\"Navigation\\\":{\\\"community\\\":\\\"Community\\\",\\\"pricing\\\":\\\"Pricing\\\",\\\"enterprise\\\":\\\"Enterprise\\\",\\\"learn\\\":\\\"Learn\\\",\\\"shipped\\\":\\\"Shipped\\\",\\\"launched\\\":\\\"Launched\\\",\\\"login\\\":\\\"Log in\\\",\\\"getStarted\\\":\\\"Get started\\\"},\\\"CommunityFilters\\\":{\\\"sortBy\\\":\\\"Sort by\\\",\\\"popular\\\":\\\"Popular\\\",\\\"trending\\\":\\\"Trending\\\",\\\"recent\\\":\\\"Recent\\\",\\\"discover\\\":\\\"Discover\\\"},\\\"ProjectCategories\\\":{\\\"internalTools\\\":\\\"Internal Tools\\\",\\\"website\\\":\\\"Website\\\",\\\"personal\\\":\\\"Personal\\\",\\\"consumerApp\\\":\\\"Consumer App\\\",\\\"b2bApp\\\":\\\"B2B App\\\",\\\"prototype\\\":\\\"Prototype\\\"},\\\"Footer\\\":{\\\"product\\\":{\\\"title\\\":\\\"Product\\\",\\\"pricing\\\":\\\"Pricing\\\",\\\"studentDiscount\\\":\\\"Student discount\\\",\\\"solutions\\\":\\\"Solutions\\\",\\\"integrations\\\":\\\"Integrations\\\",\\\"importFromFigma\\\":\\\"Import from Figma\\\",\\\"changelog\\\":\\\"Changelog\\\",\\\"status\\\":\\\"Status\\\"},\\\"community\\\":{\\\"title\\\":\\\"Community\\\",\\\"becomeAPartner\\\":\\\"Become a partner\\\",\\\"hireAPartner\\\":\\\"Hire a partner\\\",\\\"affiliates\\\":\\\"Affiliates\\\",\\\"discord\\\":\\\"Discord\\\",\\\"reddit\\\":\\\"Reddit\\\",\\\"twitter\\\":\\\"X / Twitter\\\",\\\"linkedin\\\":\\\"LinkedIn\\\"},\\\"resources\\\":{\\\"title\\\":\\\"Resources\\\",\\\"learn\\\":\\\"Learn\\\",\\\"howToGuides\\\":\\\"How-to guides\\\",\\\"videos\\\":\\\"Videos\\\",\\\"blog\\\":\\\"Blog\\\",\\\"launched\\\":\\\"Launched\\\",\\\"support\\\":\\\"Support\\\"},\\\"company\\\":{\\\"title\\\":\\\"Company\\\",\\\"careers\\\":\\\"Careers\\\",\\\"brandGuidelines\\\":\\\"Press \\u0026 media\\\",\\\"enterprise\\\":\\\"Enterprise\\\",\\\"security\\\":\\\"Security\\\",\\\"trustCenter\\\":\\\"Trust center\\\"},\\\"legal\\\":{\\\"title\\\":\\\"Legal\\\",\\\"privacyPolicy\\\":\\\"Privacy policy\\\",\\\"cookieSettings\\\":\\\"Cookie settings\\\",\\\"termsConditions\\\":\\\"Terms \\u0026 conditions\\\",\\\"reportAbuse\\\":\\\"Report abuse\\\",\\\"reportSecurity\\\":\\\"Report security concerns\\\"}},\\\"AccountDropdown\\\":{\\\"settings\\\":\\\"Settings\\\",\\\"invite\\\":\\\"Invite\\\",\\\"invitations\\\":\\\"Invitations ({count})\\\",\\\"workspaces\\\":\\\"Workspaces ({count})\\\",\\\"showMore\\\":\\\"Show more\\\",\\\"showLess\\\":\\\"Show less\\\",\\\"createNewWorkspace\\\":\\\"Create new workspace\\\",\\\"helpCenter\\\":\\\"Help Center\\\",\\\"signOut\\\":\\\"Sign out\\\",\\\"accept\\\":\\\"Accept\\\"},\\\"CreateWorkspaceDialog\\\":{\\\"steps\\\":{\\\"name\\\":{\\\"title\\\":\\\"Create a Workspace\\\",\\\"description\\\":\\\"Create a new place to make projects or collaborate with others.\\\"},\\\"plan\\\":{\\\"title\\\":\\\"Select a Plan\\\",\\\"description\\\":\\\"Select a plan for your new workspace.\\\"}},\\\"form\\\":{\\\"workspaceName\\\":\\\"Workspace Name\\\",\\\"workspaceNamePlaceholder\\\":\\\"Enter workspace name\\\"},\\\"buttons\\\":{\\\"goBack\\\":\\\"Go Back\\\",\\\"continueToPlan\\\":\\\"Continue to Plan\\\",\\\"select\\\":\\\"Select\\\",\\\"selected\\\":\\\"Selected\\\",\\\"contactUs\\\":\\\"Contact us\\\",\\\"createWorkspace\\\":\\\"Create Workspace\\\",\\\"creating\\\":\\\"Creating...\\\"},\\\"plans\\\":{\\\"pro\\\":{\\\"name\\\":\\\"Pro\\\",\\\"description\\\":\\\"For more projects and usage\\\",\\\"featuresLabel\\\":\\\"Everything in Free, plus:\\\",\\\"features\\\":{\\\"credits\\\":\\\"100+ credits per month\\\",\\\"privateProjects\\\":\\\"Private projects\\\",\\\"removeBadge\\\":\\\"Remove the Lovable badge\\\",\\\"customDomains\\\":\\\"Custom domains\\\",\\\"roleAccess\\\":\\\"Role based access\\\"}},\\\"enterprise\\\":{\\\"name\\\":\\\"Enterprise\\\",\\\"description\\\":\\\"For custom needs\\\",\\\"customPriceLabel\\\":\\\"Custom\\\",\\\"featuresLabel\\\":\\\"Everything in Pro, plus:\\\",\\\"features\\\":{\\\"support\\\":\\\"Dedicated support\\\",\\\"integrations\\\":\\\"Custom integrations\\\",\\\"sso\\\":\\\"SSO\\\",\\\"optOut\\\":\\\"Opt out of data training\\\"}}},\\\"errors\\\":{\\\"workspaceNameRequired\\\":\\\"Workspace name is required\\\"}},\\\"Auth\\\":{\\\"logIn\\\":\\\"Log in\\\",\\\"createAccount\\\":\\\"Create your account\\\",\\\"email\\\":\\\"Email\\\",\\\"password\\\":\\\"Password\\\",\\\"forgotPassword\\\":\\\"Forgot password?\\\",\\\"continueWithGoogle\\\":\\\"Continue with Google\\\",\\\"or\\\":\\\"Or\\\",\\\"agreeToOur\\\":\\\"I agree to our\\\",\\\"termsOfService\\\":\\\"Terms of Service\\\",\\\"and\\\":\\\"and\\\",\\\"privacyPolicy\\\":\\\"Privacy Policy\\\",\\\"lastUsed\\\":\\\"Last used\\\",\\\"recommended\\\":\\\"Recommended\\\",\\\"continue\\\":\\\"Continue\\\",\\\"loading\\\":\\\"Loading...\\\",\\\"edit\\\":\\\"Edit\\\",\\\"loginWithSSO\\\":\\\"Login with {provider} SSO\\\",\\\"signUpWithSSO\\\":\\\"Sign up with {provider} SSO\\\",\\\"error\\\":\\\"Error\\\",\\\"errors\\\":{\\\"emailAlreadyInUse\\\":\\\"An account with this email already exists\\\",\\\"tooManyRequests\\\":\\\"Too many requests. Please try again later\\\",\\\"invalidLoginCredentials\\\":\\\"Invalid email or password\\\",\\\"popupBlocked\\\":\\\"Popup was blocked by your browser. Please allow popups for this site\\\",\\\"operationNotAllowed\\\":\\\"This authentication method is not enabled\\\",\\\"accountExistsWithDifferentCredential\\\":\\\"An account with this email already exists using a different sign-in method\\\",\\\"invalidCredential\\\":\\\"The provided credentials are invalid. Please try again\\\",\\\"termsNotAccepted\\\":\\\"Please accept the terms\\\",\\\"termsNotAcceptedDescription\\\":\\\"You must agree to our Terms of Service and Privacy Policy to continue\\\",\\\"invalidEmail\\\":\\\"Please enter a valid email address\\\",\\\"ssoAuthFailed\\\":\\\"SSO authentication failed\\\",\\\"googleAuthFailed\\\":\\\"Google authentication failed\\\",\\\"githubAuthFailed\\\":\\\"GitHub authentication failed\\\",\\\"tryAgainOrUsePassword\\\":\\\"Please try again or use email/password login.\\\",\\\"ssoNoLongerAvailable\\\":\\\"SSO no longer available\\\",\\\"ssoNoLongerAvailableDescription\\\":\\\"Your organization's SSO is no longer available. Please log in with another method or contact support.\\\",\\\"missingPassword\\\":\\\"Password is required\\\"},\\\"eqt\\\":{\\\"notAffiliated\\\":\\\"Not affiliated with EQT?\\\",\\\"clickHere\\\":\\\"Click here\\\"}},\\\"LoginSignupTypewriter\\\":{\\\"prefix\\\":\\\"Ask Lovable to build \\\",\\\"words\\\":[\\\"your saas startup.\\\",\\\"your landing page.\\\",\\\"your blog.\\\",\\\"your portfolio.\\\",\\\"web apps.\\\",\\\"interactive prototypes.\\\",\\\"internal tools.\\\",\\\"dashboards.\\\"]},\\\"GettingStarted\\\":{\\\"title\\\":\\\"Let's personalize your Lovable\\\",\\\"steps\\\":{\\\"name\\\":\\\"What is your name?\\\",\\\"heardFrom\\\":\\\"Where did you hear about us?\\\",\\\"primaryUseCase\\\":\\\"What will you use Lovable for?\\\",\\\"role\\\":\\\"What describes you best?\\\",\\\"buildGoal\\\":\\\"What are you building with Lovable?\\\",\\\"invite\\\":\\\"Invite your team\\\"},\\\"options\\\":{\\\"buildGoal\\\":{\\\"website\\\":\\\"Website / Landing Page\\\",\\\"saas\\\":\\\"SaaS App\\\",\\\"design\\\":\\\"Design\\\",\\\"ecommerce\\\":\\\"E-commerce\\\",\\\"games\\\":\\\"Games\\\",\\\"internal_tools\\\":\\\"Internal Tools\\\",\\\"prototyping\\\":\\\"Prototyping/MVP\\\",\\\"side_projects\\\":\\\"Side Projects\\\",\\\"other\\\":\\\"Other\\\"},\\\"heardFrom\\\":{\\\"x\\\":\\\"X\\\",\\\"youtube\\\":\\\"YouTube\\\",\\\"linkedin\\\":\\\"LinkedIn\\\",\\\"github\\\":\\\"GitHub\\\",\\\"newsletter\\\":\\\"Newsletter\\\",\\\"press_media\\\":\\\"Press/Media\\\",\\\"reddit\\\":\\\"Reddit\\\",\\\"google\\\":\\\"Google\\\",\\\"friend\\\":\\\"Friend\\\",\\\"colleague\\\":\\\"Colleague\\\",\\\"tiktok\\\":\\\"Tiktok\\\",\\\"instagram\\\":\\\"Instagram\\\",\\\"facebook\\\":\\\"Facebook\\\",\\\"other\\\":\\\"Other\\\"},\\\"role\\\":{\\\"software_developer\\\":\\\"Developer\\\",\\\"product_manager\\\":\\\"Product Manager\\\",\\\"entrepreneur\\\":\\\"Founder\\\",\\\"creator\\\":\\\"Content Creator\\\",\\\"designer\\\":\\\"Designer\\\",\\\"marketer\\\":\\\"Marketer\\\",\\\"student\\\":\\\"Student\\\",\\\"educator\\\":\\\"Educator\\\",\\\"hobbyist\\\":\\\"Hobbyist/Personal Use\\\",\\\"other\\\":\\\"Other\\\"},\\\"primaryUseCase\\\":{\\\"personal_projects\\\":\\\"Personal Projects\\\",\\\"work_professional\\\":\\\"Client Work\\\",\\\"academic_research\\\":\\\"For My Company\\\",\\\"other\\\":\\\"Other\\\"},\\\"workspaceRole\\\":{\\\"admin\\\":\\\"Admin\\\",\\\"member\\\":\\\"Editor\\\"}},\\\"navigation\\\":{\\\"back\\\":\\\"Back\\\",\\\"skip\\\":\\\"Skip\\\",\\\"continue\\\":\\\"Continue\\\",\\\"finish\\\":\\\"Finish\\\"},\\\"inviteStep\\\":{\\\"description\\\":\\\"You can invite collaborators for free.\\\"},\\\"nameStep\\\":{\\\"question\\\":\\\"What's your name?\\\",\\\"placeholder\\\":\\\"Enter your full name\\\",\\\"themeQuestion\\\":\\\"What look do you want?\\\",\\\"themes\\\":{\\\"system\\\":\\\"System Theme\\\",\\\"dark\\\":\\\"Dark Mode\\\",\\\"light\\\":\\\"Light Mode\\\"}},\\\"referralNotice\\\":{\\\"title\\\":\\\"Congratulations!\\\",\\\"earned\\\":\\\"You have earned\\\",\\\"credits\\\":\\\"+10 credits\\\",\\\"description\\\":\\\"Thanks to the user that referred you. You can use these credits to create projects, generate content, and more.\\\",\\\"continue\\\":\\\"Continue\\\"},\\\"referralBanner\\\":{\\\"title\\\":\\\"Sign up and redeem your free credits!\\\",\\\"description\\\":\\\"You are signing up through a referral link\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\",\\\"description\\\":\\\"An error occurred\\\"}},\\\"AuthDialog\\\":{\\\"title\\\":\\\"Join and start building\\\",\\\"description\\\":\\\"Log in or create a free account to start building your dream application\\\",\\\"logIn\\\":\\\"Log in\\\",\\\"signUp\\\":\\\"Sign up\\\",\\\"getStartedForFree\\\":\\\"Get started for free\\\",\\\"continueWithGitHub\\\":\\\"Continue with GitHub\\\",\\\"alreadyHaveAccount\\\":\\\"Already have an account?\\\",\\\"dontHaveAccount\\\":\\\"Don't have an account?\\\",\\\"createAccount\\\":\\\"Create your account\\\"},\\\"VerifyEmail\\\":{\\\"title\\\":\\\"Check your inbox\\\",\\\"description\\\":\\\"Click the link we sent to {email} to finish your account setup.\\\",\\\"didntReceiveEmail\\\":\\\"Didn't receive an email?\\\",\\\"tryAgainCountdown\\\":\\\"Try again in {count}s\\\",\\\"resendEmail\\\":\\\"Resend email\\\",\\\"emailVerified\\\":\\\"Email verified\\\",\\\"redirecting\\\":\\\"Redirecting...\\\",\\\"openEmailProvider\\\":\\\"Open {provider}\\\"},\\\"AuthAction\\\":{\\\"loading\\\":\\\"Loading...\\\",\\\"invalidParameters\\\":\\\"Invalid parameters\\\",\\\"tryAgain\\\":\\\"Try to follow the link in your email again or retry the action\\\",\\\"invalidMode\\\":\\\"Invalid mode\\\",\\\"verifyEmail\\\":{\\\"verifying\\\":\\\"Verifying email\\\",\\\"success\\\":{\\\"title\\\":\\\"Email verified\\\",\\\"description\\\":\\\"Your email has been verified\\\"},\\\"result\\\":{\\\"title\\\":\\\"Email verified\\\",\\\"description\\\":\\\"Redirecting...\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\",\\\"invalidCode\\\":\\\"Invalid verification code\\\",\\\"somethingWrong\\\":\\\"Something went wrong\\\",\\\"generic\\\":\\\"Error verifying email\\\"}},\\\"resetPassword\\\":{\\\"title\\\":\\\"Reset Your Password\\\",\\\"form\\\":{\\\"newPassword\\\":\\\"New Password\\\",\\\"confirmPassword\\\":\\\"Confirm Password\\\",\\\"submit\\\":\\\"Reset Password\\\"},\\\"validation\\\":{\\\"passwordsMismatch\\\":\\\"Passwords do not match\\\"},\\\"success\\\":{\\\"title\\\":\\\"Password reset\\\",\\\"description\\\":\\\"Your password has been updated\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\",\\\"invalidCode\\\":\\\"Invalid action code\\\",\\\"somethingWrong\\\":\\\"Something went wrong\\\"}}},\\\"DeleteProjectDialog\\\":{\\\"title\\\":\\\"Delete {projectName}?\\\",\\\"warning\\\":{\\\"cannotUndo\\\":\\\"This action cannot be undone.\\\",\\\"permanentDelete\\\":\\\"This will permanently delete your project.\\\",\\\"including\\\":\\\"Including\\\",\\\"deployments\\\":\\\"Any deployments made with Lovable\\\",\\\"previewLinks\\\":\\\"All preview links\\\",\\\"generatedCode\\\":\\\"All generated code\\\"},\\\"githubNote\\\":{\\\"prefix\\\":\\\"Note: The Github repository\\\",\\\"suffix\\\":\\\"will not be deleted.\\\"},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"deleteProject\\\":\\\"Delete Project\\\",\\\"deleting\\\":\\\"Deleting...\\\"},\\\"success\\\":{\\\"title\\\":\\\"Project deleted\\\",\\\"description\\\":\\\"Your project has been deleted.\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\",\\\"somethingWrong\\\":\\\"Something went wrong\\\"}},\\\"Settings\\\":{\\\"yourAccount\\\":\\\"Your Account\\\",\\\"project\\\":{\\\"title\\\":\\\"Project\\\",\\\"projectSettings\\\":\\\"Project Settings\\\",\\\"projectSettingsDescription\\\":\\\"Manage your project details, visibility, and preferences.\\\",\\\"domains\\\":\\\"Domains\\\",\\\"domainsDescription\\\":\\\"Publish your project to custom domains.\\\",\\\"analytics\\\":\\\"Analytics\\\",\\\"knowledge\\\":\\\"Knowledge\\\",\\\"knowledgeDescription\\\":\\\"Add custom knowledge to your project.\\\"},\\\"workspace\\\":{\\\"title\\\":\\\"Workspace\\\",\\\"people\\\":\\\"People\\\",\\\"libraries\\\":\\\"Libraries\\\",\\\"plansBilling\\\":\\\"Plans \\u0026 Billing\\\"},\\\"account\\\":{\\\"title\\\":\\\"Account\\\",\\\"labs\\\":\\\"Labs\\\"},\\\"labs\\\":{\\\"title\\\":\\\"Labs\\\",\\\"description\\\":\\\"These are experimental features, that might be modified or removed.\\\",\\\"features\\\":{\\\"gitBranchSwitching\\\":{\\\"title\\\":\\\"GitHub Branch Switching\\\",\\\"description\\\":\\\"Select the branch to make edits to in your GitHub repository.\\\"},\\\"codeEditing\\\":{\\\"title\\\":\\\"Code Editing in Code Mode\\\",\\\"description\\\":\\\"Enable code edits in Code Mode.\\\"}}},\\\"integrations\\\":{\\\"title\\\":\\\"Integrations\\\",\\\"supabase\\\":\\\"Supabase\\\",\\\"github\\\":\\\"GitHub\\\",\\\"mcp\\\":\\\"MCP\\\",\\\"githubTab\\\":{\\\"accounts\\\":{\\\"label\\\":\\\"Connected Account\\\",\\\"description\\\":\\\"Add your GitHub account to manage connected organizations.\\\",\\\"connected\\\":\\\"Connected\\\",\\\"connectGitHub\\\":\\\"Connect GitHub\\\"},\\\"connect\\\":{\\\"connectProject\\\":\\\"Connect Project\\\",\\\"project\\\":\\\"Project\\\",\\\"description\\\":\\\"Connect your project to your GitHub organization in a 2-way sync.\\\",\\\"viewOnGitHub\\\":\\\"View on GitHub\\\"},\\\"clone\\\":{\\\"label\\\":\\\"Clone\\\",\\\"description\\\":\\\"Copy this repository to your local environment.\\\",\\\"copyToClipboard\\\":\\\"Copy to clipboard\\\"},\\\"branch\\\":{\\\"label\\\":\\\"Branch\\\",\\\"description\\\":\\\"Choose the GitHub branch you want to work on inside Lovable.\\\"}},\\\"supabaseTab\\\":{\\\"organizations\\\":{\\\"label\\\":\\\"Organizations\\\",\\\"description\\\":\\\"Connected Supabase organizations will be accessible to all members in this workspace.\\\",\\\"manageConnectedOrganizations\\\":\\\"Manage Connected Organizations\\\",\\\"connectSupabase\\\":\\\"Connect Supabase\\\"},\\\"explainer\\\":{\\\"title\\\":\\\"What is Supabase?\\\",\\\"description\\\":\\\"Supabase is a complete platform for building apps with user authentication, data storage, and other backend capabilities. Connecting it to your Lovable project will enable you to build more advanced apps and support things such as AI features and payments.\\\",\\\"seeDocs\\\":\\\"See docs\\\",\\\"watchTutorial\\\":\\\"Watch tutorial\\\"}}},\\\"libraries\\\":{\\\"title\\\":\\\"Libraries\\\",\\\"description\\\":\\\"Browse and manage team libraries, used to start new projects. Publish new libraries from settings.\\\",\\\"noLibrariesFound\\\":\\\"No libraries found. Add projects to your library to get started.\\\"},\\\"billing\\\":{\\\"title\\\":\\\"Plans \\u0026 Billing\\\",\\\"description\\\":\\\"Choose plans for starting solo, growing your projects, and collaborating with your team.\\\",\\\"inactiveSubscription\\\":\\\"Your subscription is currently \\u003cinactive\\u003einactive\\u003c/inactive\\u003e. You can select a new plan below to restore full functionality to your workspace.\\\",\\\"creditsUsage\\\":{\\\"credits\\\":\\\"Credits\\\",\\\"managePayments\\\":\\\"Manage your payment preferences\\\",\\\"legacyPlan\\\":{\\\"prefix\\\":\\\"You're currently on a legacy plan:\\\",\\\"chargedAt\\\":\\\"charged at ${price}/mo.\\\",\\\"stayOption\\\":\\\"You're welcome to stay on this plan — but if you're curious to explore our new plans, you'll get 20% off for the first 3 months.\\\",\\\"orChangeBelow\\\":\\\", or change to one of our new plans below.\\\"},\\\"currentPlan\\\":{\\\"prefix\\\":\\\"You're currently subscribed to plan:\\\",\\\"chargedAt\\\":\\\"charged at ${price}/mo.\\\",\\\"orChangeBelow\\\":\\\", or change your plan below.\\\"},\\\"monthlyRenewal\\\":{\\\"specific\\\":\\\"Your monthly credits will renew on {date} at {time}.\\\",\\\"generic\\\":\\\"Your credits will renew each month (at midnight UTC).\\\"},\\\"freePlan\\\":{\\\"prefix\\\":\\\"You're currently on plan:\\\",\\\"manageInvoices\\\":\\\"Manage your payment preferences and view past invoices\\\",\\\"orChangeBelow\\\":\\\", or change your plan below.\\\"}}}},\\\"PlanCard\\\":{\\\"popular\\\":\\\"POPULAR\\\",\\\"perMonth\\\":\\\"/month\\\"},\\\"RemoveConfirmDialog\\\":{\\\"defaultTitle\\\":\\\"Remove\\\",\\\"defaultDescription\\\":\\\"Are you sure you want to remove {name}? They will no longer have access.\\\",\\\"defaultConfirmButton\\\":\\\"Remove\\\",\\\"defaultCancelButton\\\":\\\"Cancel\\\",\\\"removing\\\":\\\"Removing...\\\"},\\\"RenameProjectDialog\\\":{\\\"title\\\":\\\"Rename project\\\",\\\"description\\\":\\\"Give your project a new name.\\\",\\\"form\\\":{\\\"projectName\\\":\\\"Project Name\\\",\\\"placeholder\\\":\\\"Enter new project name\\\",\\\"description\\\":\\\"Use lowercase letters, numbers, and hyphens only. Name must start with a lowercase letter and contain at least one hyphen. Example: my-awesome-project\\\"},\\\"validation\\\":{\\\"nameRequired\\\":\\\"Project name is required\\\",\\\"nameTooLong\\\":\\\"Project name must be less than 45 characters\\\",\\\"invalidCharacters\\\":\\\"Project name can only contain lowercase letters, numbers, and hyphens.\\\",\\\"consecutiveHyphens\\\":\\\"Project name cannot contain consecutive hyphens.\\\",\\\"mustStartWithLetter\\\":\\\"Project name must start with a lowercase letter.\\\",\\\"cannotEndWithHyphen\\\":\\\"Project name cannot end with a hyphen.\\\"},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"renameProject\\\":\\\"Rename Project\\\",\\\"renaming\\\":\\\"Renaming...\\\"},\\\"success\\\":{\\\"renamed\\\":\\\"Project renamed successfully\\\"}},\\\"UsernameDialog\\\":{\\\"title\\\":\\\"Set Username\\\",\\\"description\\\":\\\"Please enter your desired username. You can not change your username once you have set it.\\\",\\\"form\\\":{\\\"username\\\":\\\"Username\\\"},\\\"validation\\\":{\\\"minLength\\\":\\\"Username must be at least 3 characters\\\",\\\"maxLength\\\":\\\"Username must be at most 16 characters\\\",\\\"mustStartWithLetter\\\":\\\"Username must start with a letter\\\",\\\"invalidCharacters\\\":\\\"Username can only contain lowercase letters, numbers, and underscores\\\"},\\\"buttons\\\":{\\\"save\\\":\\\"Save\\\"},\\\"success\\\":{\\\"title\\\":\\\"Success\\\",\\\"description\\\":\\\"Username updated successfully\\\"}},\\\"RemoveWorkspaceMemberConfirmDialog\\\":{\\\"title\\\":\\\"Remove workspace member\\\",\\\"description\\\":\\\"Are you sure you want to remove {memberName} from this workspace? They will no longer have access to any workspace projects or resources.\\\"},\\\"RemoveCollaboratorConfirmDialog\\\":{\\\"title\\\":\\\"Remove collaborator\\\",\\\"description\\\":\\\"Are you sure you want to remove {collaboratorName} from this project? They will no longer have access to this project.\\\"},\\\"MoveProjectToWorkspaceModal\\\":{\\\"transferProject\\\":\\\"Transfer project\\\",\\\"title\\\":\\\"Transfer {projectName}\\\",\\\"defaultProjectName\\\":\\\"Project\\\",\\\"description\\\":{\\\"movingToSpecific\\\":\\\"Moving this project to {workspaceName} will:\\\",\\\"movingToNew\\\":\\\"Moving this project to a new workspace will:\\\",\\\"removeAccess\\\":\\\"Remove access for members of {workspaceName}\\\",\\\"grantAccessSpecific\\\":\\\"Grant access to members of {workspaceName}\\\",\\\"grantAccessNew\\\":\\\"Grant access to members of the new workspace\\\",\\\"preserveAccess\\\":\\\"Preserve access for anyone directly invited to the project\\\",\\\"mayRequireRelink\\\":\\\"May require you to re-link GitHub and Supabase organizations/projects\\\"},\\\"warning\\\":{\\\"title\\\":\\\"Warning\\\",\\\"visibilityChange\\\":\\\"This action will turn the project {visibility}\\\",\\\"private\\\":\\\"private\\\",\\\"public\\\":\\\"public\\\"},\\\"form\\\":{\\\"from\\\":\\\"From\\\",\\\"to\\\":\\\"To\\\",\\\"selectWorkspace\\\":\\\"Select a workspace\\\",\\\"notAdmin\\\":\\\"(Not admin)\\\",\\\"createNew\\\":\\\"Create new\\\"},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"confirmTransfer\\\":\\\"Confirm transfer\\\",\\\"transferring\\\":\\\"Transferring...\\\"}},\\\"SupabaseDisconnectConfirmationDialog\\\":{\\\"title\\\":\\\"Disconnect Supabase\\\",\\\"description\\\":\\\"Are you sure you want to disconnect Supabase?\\\",\\\"details\\\":\\\"We will stop deploying edge functions and reading your database schema, but no changes will be made to your code. You can reconnect to Supabase later.\\\",\\\"button\\\":{\\\"disconnect\\\":\\\"Disconnect\\\"},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"disconnect\\\":\\\"Disconnect\\\"},\\\"success\\\":{\\\"title\\\":\\\"Supabase disconnected\\\",\\\"description\\\":\\\"You can connect to a new Supabase project later.\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\"}},\\\"AddMCPServerDialog\\\":{\\\"title\\\":\\\"Add MCP Server\\\",\\\"description\\\":\\\"Connect to a remote MCP server to extend the AI's capabilities.\\\",\\\"form\\\":{\\\"serverName\\\":\\\"Server Name\\\",\\\"serverNamePlaceholder\\\":\\\"My MCP Server\\\",\\\"serverUrl\\\":\\\"Server URL\\\",\\\"serverUrlPlaceholder\\\":\\\"https://mcp.example.com\\\"},\\\"advanced\\\":{\\\"title\\\":\\\"Advanced Settings\\\",\\\"bearerToken\\\":\\\"Bearer Token (Optional)\\\",\\\"bearerTokenPlaceholder\\\":\\\"Enter Bearer token or API key\\\",\\\"bearerTokenDescription\\\":\\\"Some MCP servers use API keys as Bearer tokens instead of OAuth. If your server requires a token, enter it here.\\\"},\\\"status\\\":{\\\"testing\\\":\\\"Testing connection...\\\",\\\"connectionSuccess\\\":\\\"Connection successful! Found {count} tools\\\",\\\"oauthSuccess\\\":\\\"OAuth authenticated successfully! Found {count} tools\\\",\\\"requiresOAuth\\\":\\\"This server requires OAuth authentication\\\",\\\"connectionFailed\\\":\\\"Connection failed\\\"},\\\"tools\\\":{\\\"available\\\":\\\"Available Tools ({count})\\\"},\\\"buttons\\\":{\\\"test\\\":\\\"Test\\\",\\\"testing\\\":\\\"Testing...\\\",\\\"authorize\\\":\\\"Authorize\\\",\\\"starting\\\":\\\"Starting...\\\",\\\"cancel\\\":\\\"Cancel\\\",\\\"addServer\\\":\\\"Add Server\\\",\\\"adding\\\":\\\"Adding...\\\"},\\\"validation\\\":{\\\"fillNameAndUrl\\\":\\\"Please fill in server name and URL first\\\",\\\"enterUrl\\\":\\\"Please enter a URL\\\",\\\"fillAllFields\\\":\\\"Please fill in all fields\\\",\\\"testFirst\\\":\\\"Please test the connection first\\\"},\\\"toast\\\":{\\\"connected\\\":\\\"Connected! Found {count} tools\\\",\\\"requiresOAuth\\\":\\\"This server requires OAuth authentication\\\",\\\"connectionFailed\\\":\\\"Connection failed\\\",\\\"testFailed\\\":\\\"Failed to test connection\\\",\\\"serverAdded\\\":\\\"MCP server added successfully\\\",\\\"addFailed\\\":\\\"Failed to add MCP server\\\",\\\"oauthFailed\\\":\\\"Failed to start OAuth flow\\\"}},\\\"SupabaseReauthDialog\\\":{\\\"title\\\":\\\"We got an update for you!\\\",\\\"description\\\":\\\"To make Supabase integration more robust, Lovable can now read your project logs. Please re-authenticate with Supabase to continue.\\\",\\\"button\\\":{\\\"reauthenticate\\\":\\\"Re-authenticate with Supabase\\\"}},\\\"YourAccountTab\\\":{\\\"title\\\":\\\"Account Settings\\\",\\\"description\\\":\\\"Personalize how others see and interact with you on Lovable.\\\",\\\"avatar\\\":{\\\"label\\\":\\\"Your Avatar\\\",\\\"description\\\":\\\"Your avatar is automatically generated based on your account.\\\"},\\\"userForm\\\":{\\\"name\\\":{\\\"label\\\":\\\"Name\\\",\\\"description\\\":\\\"Your full name, as visible to others.\\\"},\\\"description\\\":{\\\"label\\\":\\\"Description\\\",\\\"description\\\":\\\"A short description of yourself or your work.\\\"},\\\"location\\\":{\\\"label\\\":\\\"Location\\\",\\\"description\\\":\\\"Where you're based.\\\"},\\\"link\\\":{\\\"label\\\":\\\"Link\\\",\\\"description\\\":\\\"Add a link to your personal website or portfolio.\\\"},\\\"hideProfilePicture\\\":{\\\"label\\\":\\\"Hide Profile Picture\\\"},\\\"success\\\":{\\\"title\\\":\\\"Success\\\",\\\"description\\\":\\\"Account settings updated successfully\\\"},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"update\\\":\\\"Update\\\"}},\\\"username\\\":{\\\"label\\\":\\\"Username\\\",\\\"description\\\":\\\"Your public identifier and profile URL.\\\",\\\"placeholder\\\":\\\"Username\\\"},\\\"email\\\":{\\\"label\\\":\\\"Email\\\",\\\"description\\\":\\\"Your email address associated with your account.\\\",\\\"noEmail\\\":\\\"No email available\\\"},\\\"soundEffect\\\":{\\\"label\\\":\\\"Generation complete sound\\\",\\\"description\\\":\\\"Plays a satisfying sound notification when a generation is finished.\\\"},\\\"defaultVisibility\\\":{\\\"label\\\":\\\"Default Project Visibility\\\",\\\"description\\\":\\\"Set whether new projects are publicly accessible by default. You can always change visibility settings later per project.\\\",\\\"success\\\":{\\\"title\\\":\\\"Default project visibility updated\\\",\\\"description\\\":\\\"Default project visibility is now {visibility}\\\"}}},\\\"WorkspaceTab\\\":{\\\"title\\\":\\\"Workspace Settings\\\",\\\"description\\\":\\\"Workspaces allow you to collaborate on projects in real time.\\\",\\\"sections\\\":{\\\"avatar\\\":{\\\"label\\\":\\\"Workspace Avatar\\\",\\\"description\\\":\\\"Set an avatar for your workspace.\\\"},\\\"name\\\":{\\\"label\\\":\\\"Workspace Name\\\",\\\"description\\\":\\\"The name of your workspace.\\\",\\\"placeholder\\\":\\\"Enter workspace name\\\"},\\\"description\\\":{\\\"label\\\":\\\"Description\\\",\\\"description\\\":\\\"A brief description of your workspace.\\\",\\\"placeholder\\\":\\\"Enter workspace description\\\"},\\\"leave\\\":{\\\"label\\\":\\\"Leave Workspace\\\",\\\"description\\\":\\\"Remove yourself from this workspace.\\\",\\\"button\\\":\\\"Leave Workspace\\\"}},\\\"validation\\\":{\\\"nameRequired\\\":\\\"Workspace name is required\\\"},\\\"tooltips\\\":{\\\"adminRequired\\\":\\\"Admin permissions required to modify this setting\\\"},\\\"dialogs\\\":{\\\"leave\\\":{\\\"title\\\":\\\"Leave Workspace\\\",\\\"description\\\":\\\"Are you sure you want to leave this workspace? You will lose access to all projects and resources.\\\"}},\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"update\\\":\\\"Update\\\",\\\"leaveWorkspace\\\":\\\"Leave Workspace\\\"},\\\"success\\\":{\\\"title\\\":\\\"Workspace updated\\\",\\\"description\\\":\\\"Your workspace settings have been saved successfully.\\\"}},\\\"PeopleTab\\\":{\\\"title\\\":\\\"People\\\",\\\"defaultWorkspaceName\\\":\\\"Workspace\\\",\\\"descriptions\\\":{\\\"noTeamsPlan\\\":\\\"Collaborate with your team by inviting people to your workspace. Inviting people to your workspace gives access to workspace shared projects and credits.\\\",\\\"teamsPlan\\\":\\\"Inviting people to \\u003cstrong\\u003e{workspaceName}\\u003c/strong\\u003e gives access to workspace shared projects and credits. You're using {membershipCount}/{maxSeats} seats. Need more? \\u003clink\\u003eContact us\\u003c/link\\u003e.\\\",\\\"teamsPlanProject\\\":\\\"Inviting people to \\u003cstrong\\u003e{workspaceName}'s workspace\\u003c/strong\\u003e gives access to workspace shared projects and credits. You're using {membershipCount}/{maxSeats} seats. Need more? \\u003clink\\u003eContact us\\u003c/link\\u003e.\\\"},\\\"content\\\":{\\\"roles\\\":{\\\"admin\\\":\\\"Admin\\\",\\\"editor\\\":\\\"Editor\\\"},\\\"addEmails\\\":\\\"Add emails\\\",\\\"members\\\":\\\"Members\\\",\\\"noUsersFound\\\":\\\"No users found for '{search}'\\\",\\\"noMembersFound\\\":\\\"No members found\\\",\\\"usage\\\":\\\"Usage\\\"}},\\\"ProjectTab\\\":{\\\"overview\\\":{\\\"title\\\":\\\"Overview\\\",\\\"projectName\\\":\\\"Project name\\\",\\\"owner\\\":\\\"Owner\\\",\\\"createdAt\\\":\\\"Created at\\\",\\\"techStack\\\":\\\"Tech stack\\\",\\\"messagesCount\\\":\\\"Messages count\\\",\\\"aiEditsCount\\\":\\\"AI Edits count\\\"},\\\"upgrade\\\":{\\\"text\\\":\\\"Upgrade your plan\\\",\\\"dialogDescription\\\":\\\"Upgrade to Pro to unlock this feature.\\\"},\\\"sections\\\":{\\\"privateProject\\\":{\\\"label\\\":\\\"Private Project\\\",\\\"description\\\":\\\"Keep your project hidden and prevent others from remixing it.\\\",\\\"upgradeDescription\\\":\\\"to keep your project hidden and prevent others from remixing it.\\\"},\\\"hideBadge\\\":{\\\"label\\\":\\\"Hide \\\\\\\"Lovable\\\\\\\" Badge\\\",\\\"description\\\":\\\"Remove the \\\\\\\"Edit with Lovable\\\\\\\" badge from your published work.\\\",\\\"upgradeDescription\\\":\\\"to remove the \\\\\\\"Edit with Lovable\\\\\\\" badge from your published work.\\\"},\\\"featureProject\\\":{\\\"label\\\":\\\"Feature Project\\\",\\\"description\\\":\\\"Highlight this project on the homepage.\\\"},\\\"renameProject\\\":{\\\"label\\\":\\\"Rename Project\\\",\\\"description\\\":\\\"Update your project's title.\\\",\\\"button\\\":\\\"Rename project\\\"},\\\"remixProject\\\":{\\\"label\\\":\\\"Remix Project\\\",\\\"description\\\":\\\"Remix this project.\\\",\\\"button\\\":\\\"Remix this project\\\",\\\"unavailable\\\":\\\"(Unavailable for Supabase projects)\\\"},\\\"deleteProject\\\":{\\\"label\\\":\\\"Delete Project\\\",\\\"description\\\":\\\"Delete this project.\\\",\\\"button\\\":\\\"Delete this project\\\"},\\\"transferProject\\\":{\\\"label\\\":\\\"Transfer Project\\\",\\\"description\\\":\\\"Move the project to a different workspace.\\\"},\\\"publishLibrary\\\":{\\\"label\\\":\\\"Publish as a Library\\\",\\\"description\\\":\\\"Publish to \\u003cworkspace\\u003e{workspaceName}\\u003c/workspace\\u003e to use this project to start new projects.\\\",\\\"defaultWorkspace\\\":\\\"your workspace\\\"},\\\"category\\\":{\\\"label\\\":\\\"Project Category\\\",\\\"description\\\":\\\"Categorize your project to help others find it.\\\",\\\"placeholder\\\":\\\"Select category\\\",\\\"options\\\":{\\\"internal_tools\\\":\\\"Internal Tools\\\",\\\"website\\\":\\\"Website\\\",\\\"personal\\\":\\\"Personal\\\",\\\"consumer_app\\\":\\\"Consumer App\\\",\\\"b2b_app\\\":\\\"B2B App\\\",\\\"prototype\\\":\\\"Prototype\\\"}}}},\\\"GitHubTab\\\":{\\\"title\\\":\\\"GitHub\\\",\\\"description\\\":\\\"Sync your project 2-way with GitHub to collaborate at source.\\\"},\\\"SupabaseTab\\\":{\\\"title\\\":\\\"Supabase\\\",\\\"description\\\":\\\"Integrate user authentication, data storage, and backend capabilities.\\\",\\\"projectSections\\\":{\\\"disabled\\\":\\\"Unfortunately, your project is not able to use Supabase.\\\",\\\"loading\\\":\\\"Loading Supabase...\\\",\\\"connectionProblem\\\":{\\\"title\\\":\\\"Problem with your Supabase connection\\\",\\\"description\\\":\\\"This project is connected to Supabase organization \\u003ccode\\u003e{organizationId}\\u003c/code\\u003e, but this workspace is not connected to that organization. Disconnect the project or add the organization again.\\\",\\\"disconnect\\\":\\\"Disconnect\\\"},\\\"disconnect\\\":{\\\"success\\\":{\\\"title\\\":\\\"Supabase disconnected\\\",\\\"description\\\":\\\"You can connect to a new Supabase project later.\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\"}}}},\\\"MCPTab\\\":{\\\"title\\\":\\\"MCP\\\",\\\"description\\\":\\\"Connect to Model Context Protocol servers for enhanced AI capabilities.\\\",\\\"servers\\\":{\\\"title\\\":\\\"MCP Servers\\\",\\\"description\\\":\\\"Connect to remote MCP servers to extend the AI's capabilities with custom tools and integrations.\\\",\\\"addButton\\\":\\\"Add MCP Server\\\"}},\\\"ChatMessageLengthWarning\\\":{\\\"messageOverLimit\\\":\\\"Message is too long. Exceeded by {count, plural, one {# character} other {# characters}}.\\\",\\\"charactersLeft\\\":\\\"{count, plural, one {# character} other {# characters}} remaining\\\",\\\"limitReached\\\":\\\"Message limit reached ({count, number} characters)\\\"},\\\"ChatUpgradeRow\\\":{\\\"creditsRemaining\\\":\\\"{formattedCredits} free {count, plural, one {credit} other {credits}} remaining today\\\",\\\"upgradeButton\\\":\\\"Upgrade Now\\\"},\\\"ChatInputChatModeSelector\\\":{\\\"mode\\\":\\\"Mode\\\",\\\"chatMode\\\":\\\"Chat mode\\\",\\\"cost\\\":\\\"Cost: 1 message\\\",\\\"modes\\\":{\\\"default\\\":{\\\"title\\\":\\\"Default\\\",\\\"description\\\":\\\"Chat and make edits to your project.\\\"},\\\"chatOnly\\\":{\\\"title\\\":\\\"Chat only\\\",\\\"description\\\":\\\"Chat without making edits to your project.\\\"},\\\"agent\\\":{\\\"title\\\":\\\"Agent\\\",\\\"description\\\":\\\"Experimental reliability fixes in Lovable's AI.\\\"}}},\\\"MessageFeedbackButtons\\\":{\\\"helpful\\\":\\\"Helpful\\\",\\\"notHelpful\\\":\\\"Not helpful\\\",\\\"copied\\\":\\\"Copied!\\\",\\\"copyMessage\\\":\\\"Copy message\\\",\\\"feedback\\\":{\\\"success\\\":\\\"Thanks for your feedback!\\\",\\\"error\\\":{\\\"title\\\":\\\"Failed to save feedback\\\",\\\"description\\\":\\\"Please try again\\\"}}},\\\"ChatInputTextArea\\\":{\\\"chatMode\\\":\\\"Chat\\\",\\\"chatSuggestion\\\":\\\"Chat\\\",\\\"limitReached\\\":\\\"The text you pasted was too long.\\\",\\\"limitReachedDescription\\\":\\\"We've shortened it to {count, number} characters. Check if important parts were removed.\\\"},\\\"WorkspaceProjectFilters\\\":{\\\"search\\\":{\\\"placeholder\\\":\\\"Search projects...\\\"},\\\"sortBy\\\":{\\\"lastEdited\\\":\\\"Last edited\\\",\\\"dateCreated\\\":\\\"Date created\\\",\\\"alphabetical\\\":\\\"Alphabetical\\\"},\\\"order\\\":{\\\"newestFirst\\\":\\\"Newest first\\\",\\\"oldestFirst\\\":\\\"Oldest first\\\",\\\"aToZ\\\":\\\"A–Z\\\",\\\"zToA\\\":\\\"Z–A\\\"},\\\"labels\\\":{\\\"sortBy\\\":\\\"Sort by\\\",\\\"order\\\":\\\"Order\\\"},\\\"userFilter\\\":{\\\"allCreators\\\":\\\"All creators\\\",\\\"you\\\":\\\"(You)\\\",\\\"searchPlaceholder\\\":\\\"Search creators...\\\"}},\\\"ChatVoiceButton\\\":{\\\"notSupported\\\":\\\"Voice is not supported on this browser\\\"},\\\"ChatInputCreateProjectVisibility\\\":{\\\"draft\\\":\\\"Personal\\\",\\\"workspace\\\":\\\"Workspace\\\",\\\"public\\\":\\\"Public\\\",\\\"changeVisibility\\\":\\\"Change project visibility\\\"},\\\"ChatInputActionMenu\\\":{\\\"history\\\":\\\"History\\\",\\\"knowledge\\\":\\\"Knowledge\\\",\\\"projectSettings\\\":\\\"Project Settings\\\",\\\"attach\\\":\\\"Attach\\\"},\\\"ImportFigmaPopover\\\":{\\\"title\\\":\\\"Import from Figma\\\",\\\"step1\\\":{\\\"prefix\\\":\\\"Use the\\\",\\\"linkText\\\":\\\"Builder.io Figma plugin\\\"},\\\"step2\\\":\\\"Select a frame using auto layout\\\",\\\"step3\\\":\\\"Use 'Export to Code', then Lovable\\\",\\\"getPlugin\\\":\\\"Get the plugin\\\",\\\"disabled\\\":\\\"Figma import has been disabled for this workspace\\\"},\\\"AttachImageActionDropdown\\\":{\\\"attachImage\\\":\\\"Attach Image\\\",\\\"importFromFigma\\\":\\\"Import from Figma\\\",\\\"advancedSettings\\\":\\\"Advanced Settings\\\"},\\\"ImageAttachInput\\\":{\\\"attachImage\\\":\\\"Attach image\\\"},\\\"MobileImageUpload\\\":{\\\"camera\\\":\\\"Camera\\\",\\\"images\\\":\\\"Images\\\"},\\\"AttachImageActionModal\\\":{\\\"attach\\\":\\\"Attach\\\",\\\"importFromFigma\\\":\\\"Import from Figma\\\",\\\"advancedSettings\\\":\\\"Advanced Settings\\\",\\\"tooltip\\\":\\\"Upload images and more\\\",\\\"templates\\\":\\\"Use a template\\\"},\\\"EarnFreeCredits\\\":{\\\"getFreeCredits\\\":\\\"Get free credits\\\"},\\\"ReferralDialog\\\":{\\\"title\\\":\\\"Refer \\u0026 Earn\\\",\\\"howItWorks\\\":\\\"How it works:\\\",\\\"features\\\":{\\\"shareLink\\\":\\\"Share your invite link\\\",\\\"theyGetCredits\\\":{\\\"prefix\\\":\\\"They sign up and get\\\",\\\"credits\\\":\\\"extra 10 credits\\\"},\\\"youGetCredits\\\":{\\\"prefix\\\":\\\"You get\\\",\\\"credits\\\":\\\"10 credits\\\",\\\"suffix\\\":\\\"once they publish their first website\\\"}},\\\"inviteLink\\\":\\\"Your invite link:\\\",\\\"buttons\\\":{\\\"copied\\\":\\\"Copied!\\\",\\\"copyLink\\\":\\\"Copy link\\\",\\\"viewTerms\\\":\\\"View Terms and Conditions\\\"},\\\"errors\\\":{\\\"failedToCopy\\\":\\\"Failed to copy link\\\",\\\"fetchingLink\\\":\\\"Error fetching the link, sorry\\\"}},\\\"ReferralTerms\\\":{\\\"back\\\":\\\"Back\\\",\\\"title\\\":\\\"Terms and conditions\\\",\\\"terms\\\":{\\\"newUsersOnly\\\":\\\"This offer is for new Lovable users only (gotta share the magic with fresh eyes).\\\",\\\"rewardsUnlocked\\\":\\\"Rewards are unlocked once your invite actually publishes an app. No ghost referrals, please.\\\",\\\"rightToChange\\\":\\\"We reserve the right to change, pause, or end this program anytime. We're experimental like that.\\\",\\\"noSpam\\\":\\\"Don't spam or post your link where it doesn't belong. Let's keep it classy.\\\",\\\"sketchyBehavior\\\":\\\"If we suspect sketchy behavior, we may withhold rewards or deactivate your link.\\\",\\\"oneReward\\\":\\\"One reward per new user invited. No stacking loopholes - we're nerds, we'll catch it.\\\"}},\\\"CreditsIndicator\\\":{\\\"creditsUsed\\\":\\\"Credits Used\\\",\\\"upgrade\\\":\\\"Upgrade\\\",\\\"manage\\\":\\\"Manage\\\",\\\"bonusCredits\\\":\\\"Bonus Credits\\\",\\\"free\\\":{\\\"usedAllMonthlyCredits\\\":\\\"You've used all your free monthly credits\\\",\\\"dailyCreditsUsed\\\":\\\"{used} of your daily credits used\\\",\\\"dailyCreditsRenew\\\":\\\"Your daily credits renew at midnight UTC\\\",\\\"newCreditsTooltip\\\":\\\"You'll receive new credits {date} (at midnight UTC).\\\",\\\"dailyCreditsTooltip\\\":\\\"You get 5 free credits daily (up to 30 per month).\\\"},\\\"paid\\\":{\\\"dailyCreditsLeft\\\":\\\"You have {credits} daily {creditText} to use first\\\",\\\"credit\\\":\\\"credit\\\",\\\"credits\\\":\\\"credits\\\",\\\"monthlyCreditsUsed\\\":\\\"{used} of your monthly credits used\\\",\\\"dailyCreditsFirst\\\":\\\"Daily credits are used before monthly credits.\\\",\\\"dailyCreditsRenew\\\":\\\"Your daily credits renew at midnight UTC.\\\",\\\"monthlyCreditsRenew\\\":\\\"Your monthly credits will renew {date}. You will still receive 5 daily credits.\\\"},\\\"unlimited\\\":{\\\"dailyCreditsUsed\\\":\\\"{used} of your daily credits used\\\",\\\"dailyCreditsRenew\\\":\\\"Your daily credits renew at midnight UTC\\\",\\\"dailyCreditsTooltip\\\":\\\"You get {limit} credits daily\\\"}},\\\"ThemeSwitcher\\\":{\\\"appearance\\\":\\\"Appearance\\\",\\\"light\\\":\\\"Light\\\",\\\"dark\\\":\\\"Dark\\\",\\\"systemTheme\\\":\\\"System theme\\\"},\\\"Common\\\":{\\\"loading\\\":\\\"Loading...\\\",\\\"showMore\\\":\\\"Show more\\\"},\\\"AnnounceTeamsIsNowPro\\\":{\\\"title\\\":\\\"Teams is now Pro\\\",\\\"subtitle\\\":\\\"Collaboration is now free and included in your Pro subscription.\\\",\\\"readMore\\\":\\\"Read more\\\",\\\"gotIt\\\":\\\"Got it\\\",\\\"features\\\":{\\\"collaboration\\\":{\\\"title\\\":\\\"Free collaboration\\\",\\\"description\\\":\\\"Collaborate with your team on any project\\\"},\\\"business\\\":{\\\"title\\\":\\\"Business ready\\\",\\\"description\\\":\\\"Get support \\u0026 more features for your business\\\"},\\\"teams\\\":{\\\"title\\\":\\\"Teams experience\\\",\\\"description\\\":\\\"Shared projects, workspaces, and team management\\\"}}},\\\"AttachImageModal\\\":{\\\"title\\\":\\\"Try adding an image\\\",\\\"description\\\":\\\"Upload mockups, wireframes, or visual references for better results.\\\",\\\"addImages\\\":\\\"Add Images\\\",\\\"dismiss\\\":\\\"Dismiss\\\"},\\\"ModelSelector\\\":{\\\"selectModel\\\":\\\"Select model\\\"},\\\"WorkspaceMemberRow\\\":{\\\"roles\\\":{\\\"owner\\\":{\\\"label\\\":\\\"Owner\\\",\\\"description\\\":\\\"Owners can manage all collaborators, projects, and integrations.\\\"},\\\"admin\\\":{\\\"label\\\":\\\"Admin\\\",\\\"description\\\":\\\"Admins can manage editors, projects, and integrations.\\\"},\\\"editor\\\":{\\\"label\\\":\\\"Editor\\\",\\\"description\\\":\\\"Editors can only create and edit projects.\\\"}},\\\"status\\\":{\\\"pending\\\":\\\"Pending\\\"},\\\"actions\\\":{\\\"remove\\\":\\\"Remove\\\",\\\"leave\\\":\\\"Leave\\\"},\\\"tooltip\\\":{\\\"pendingInvite\\\":\\\"This user has been invited to join as {role}\\\"}},\\\"UsageList\\\":{\\\"showingUsageFor\\\":\\\"Showing usage for {period}.\\\",\\\"noUsageData\\\":\\\"No usage data for this period. Usage will appear here once members begin using the workspace.\\\",\\\"creditsUsed\\\":\\\"{count} credit{plural} used\\\",\\\"totalUsage\\\":\\\"Total usage across all months.\\\",\\\"creditsTotal\\\":\\\"{count} credit{plural} total\\\"},\\\"EmailInviteInput\\\":{\\\"invite\\\":\\\"Invite\\\"},\\\"MemberRowDisplay\\\":{\\\"inviteSent\\\":\\\"Invite sent\\\"},\\\"DomainsTab\\\":{\\\"connectedDomains\\\":{\\\"label\\\":\\\"Connected Domains\\\",\\\"description\\\":\\\"View or remove domains linked to your project.\\\"},\\\"addExistingDomain\\\":{\\\"label\\\":\\\"Add Existing Domain\\\",\\\"description\\\":\\\"Connect a domain you already own.\\\",\\\"connectDomain\\\":\\\"Connect Domain\\\",\\\"connectAnotherDomain\\\":\\\"Connect Another Domain\\\"},\\\"purchaseNewDomain\\\":{\\\"label\\\":\\\"Purchase New Domain\\\",\\\"description\\\":\\\"Buy a new domain through Ionos.\\\",\\\"buyDomain\\\":\\\"Buy Domain\\\"},\\\"howDomainsWork\\\":\\\"How Domains Work\\\",\\\"upgradePlan\\\":\\\"You need to be on a pro plan to connect a domain.\\\",\\\"publishTooltip\\\":\\\"You have to publish your project for this domain to work\\\",\\\"toasts\\\":{\\\"connectingDomain\\\":\\\"Connecting domain...\\\",\\\"connectingDescription\\\":\\\"Hold on while we were mapping {domain} to your project.\\\",\\\"domainConnected\\\":\\\"Domain connected!\\\",\\\"domainConnectedDescription\\\":\\\"The domain {domain} is now mapped to your project. It might take a few minutes to propagate.\\\",\\\"domainNotConnected\\\":\\\"Domain not connected\\\",\\\"domainNotConnectedDescription\\\":\\\"There was an error while connecting your domain. Please try again.\\\",\\\"errorPublishing\\\":\\\"Error when publishing your project\\\",\\\"errorUpdatingCache\\\":\\\"Error when updating deployment cache. Please report this.\\\"}},\\\"AnalyticsTab\\\":{\\\"title\\\":\\\"Analytics\\\",\\\"description\\\":\\\"Measure how your published project is performing.\\\",\\\"viewAppLive\\\":\\\"your app live\\\",\\\"unpublished\\\":{\\\"message\\\":\\\"To view analytics, you first need to publish your project.\\\"},\\\"metrics\\\":{\\\"visitors\\\":\\\"Visitors\\\",\\\"pageviews\\\":\\\"Pageviews\\\",\\\"pageviewsPerVisit\\\":\\\"Pageviews Per Visit\\\"},\\\"lists\\\":{\\\"source\\\":\\\"Source\\\",\\\"page\\\":\\\"Page\\\",\\\"country\\\":\\\"Country\\\",\\\"device\\\":\\\"Device\\\"}},\\\"KnowledgeTab\\\":{\\\"title\\\":\\\"Instructions \\u0026 Guidelines\\\",\\\"description\\\":\\\"Provide guidelines and context to improve your project's edits. Use this space to:\\\",\\\"bullets\\\":{\\\"rules\\\":\\\"Set project-specific rules or best practices.\\\",\\\"style\\\":\\\"Set coding style preferences (e.g. indentation, naming conventions).\\\",\\\"documentation\\\":\\\"Include external documentation or style guides.\\\"},\\\"placeholder\\\":\\\"Enter your instructions here...\\\",\\\"getInspiration\\\":\\\"Get Inspiration\\\",\\\"buttons\\\":{\\\"cancel\\\":\\\"Cancel\\\",\\\"save\\\":\\\"Save\\\"},\\\"toasts\\\":{\\\"success\\\":\\\"Custom instructions updated\\\",\\\"successDescription\\\":\\\"Your custom instructions have been saved successfully.\\\",\\\"error\\\":\\\"Error\\\",\\\"errorDescription\\\":\\\"Failed to update custom instructions. Please try again.\\\"},\\\"characterLimit\\\":\\\"Message is too long. Exceeded by {count} characters.\\\"},\\\"EditorNav\\\":{\\\"mainMenu\\\":{\\\"goToDashboard\\\":\\\"Go to Dashboard\\\",\\\"settings\\\":\\\"Settings\\\",\\\"renameProject\\\":\\\"Rename project\\\",\\\"language\\\":\\\"Language\\\",\\\"help\\\":\\\"Help\\\"},\\\"visiting\\\":{\\\"by\\\":\\\"by\\\",\\\"remix\\\":\\\"Remix\\\",\\\"remixTooltip\\\":\\\"Remix this project\\\",\\\"remixDisabledTooltip\\\":\\\"This project is connected to Supabase. To remix, you must be a collaborator or member of this workspace.\\\"},\\\"tooltips\\\":{\\\"inviteCollaborators\\\":\\\"Invite collaborators\\\",\\\"publishProject\\\":\\\"Publish your project\\\",\\\"hideSidebar\\\":\\\"Hide sidebar\\\",\\\"viewSidebar\\\":\\\"View sidebar\\\",\\\"hideHistory\\\":\\\"Hide history\\\",\\\"viewHistory\\\":\\\"View history\\\",\\\"visualEditor\\\":{\\\"exitCodeMode\\\":\\\"Exit code mode to use visual editor\\\",\\\"selectToEdit\\\":\\\"Select to edit ({shortcut})\\\",\\\"saveOrDiscard\\\":\\\"Save or discard to exit\\\"},\\\"presence\\\":{\\\"you\\\":\\\"(You)\\\",\\\"now\\\":\\\"Now\\\"},\\\"seoMode\\\":\\\"SEO Mode\\\",\\\"codeMode\\\":\\\"Code mode\\\",\\\"codeViewer\\\":\\\"Code viewer\\\",\\\"exitVisualEditorForSeo\\\":\\\"Exit visual editor to use SEO mode\\\",\\\"exitVisualEditorForCode\\\":\\\"Exit visual editor to use code mode\\\",\\\"saveOrDiscardChanges\\\":\\\"Please save or discard your changes\\\",\\\"loadingLivePreview\\\":\\\"Loading Live Preview...\\\",\\\"previewingLastSaved\\\":\\\"Previewing last saved version\\\"},\\\"publishMenu\\\":{\\\"publish\\\":\\\"Publish\\\",\\\"update\\\":\\\"Update\\\",\\\"publishDescription\\\":\\\"Publish your project to make it visible for others on the internet.\\\",\\\"reviewSecurity\\\":\\\"Review Security\\\",\\\"inviteByEmail\\\":\\\"Invite by email\\\",\\\"invite\\\":\\\"Invite\\\",\\\"inviteTitle\\\":\\\"Invite\\\",\\\"freeWorkspaceDescription\\\":\\\"Collaborators will use credits from the project owner's workspace ({workspaceName})\\\",\\\"proWorkspaceDescription\\\":\\\"Collaborators will use credits from the project owner's workspace ({workspaceName}). You can add unlimited collaborators to your projects.\\\",\\\"roleOptions\\\":{\\\"editor\\\":\\\"Editor\\\",\\\"admin\\\":\\\"Admin\\\",\\\"owner\\\":\\\"Owner\\\"},\\\"customDomains\\\":\\\"Custom domains\\\",\\\"pageSpeedAnalysis\\\":\\\"Page Speed Analysis\\\",\\\"publishFirstToRunAnalysis\\\":\\\"Publish first to run analysis\\\",\\\"workspace\\\":{\\\"member\\\":\\\"1 member\\\",\\\"members\\\":\\\"{count} members\\\",\\\"manageAccess\\\":\\\"Manage Workspace Access\\\",\\\"workspaceAccess\\\":\\\"Workspace Access\\\"},\\\"upgrade\\\":{\\\"toPro\\\":\\\"Upgrade to Pro\\\",\\\"toEnterprise\\\":\\\"Upgrade to Enterprise\\\",\\\"permissionControl\\\":\\\"Permission control \\u0026 more\\\",\\\"upgrade\\\":\\\"Upgrade\\\",\\\"contactUs\\\":\\\"Contact Us\\\"},\\\"inviteLink\\\":{\\\"createInviteLink\\\":\\\"Create invite link\\\",\\\"shareInviteLink\\\":\\\"Share invite link\\\",\\\"anyoneCanEdit\\\":\\\"Anyone with this link can edit\\\",\\\"create\\\":\\\"Create\\\",\\\"copy\\\":\\\"Copy\\\",\\\"copied\\\":\\\"Copied!\\\",\\\"remove\\\":\\\"Remove\\\"}}},\\\"ChatInput\\\":{\\\"askLovable\\\":\\\"Ask Lovable...\\\",\\\"askLovableModify\\\":\\\"Ask Lovable to modify {elementType}...\\\",\\\"askLovableWithQuery\\\":\\\"Ask Lovable \\\\\\\"{searchQuery}\\\\\\\"...\\\",\\\"selectToEditOrAsk\\\":\\\"Select to edit or ask Lovable to modify\\\",\\\"searchOrAsk\\\":\\\"Search or ask for changes...\\\"},\\\"ChatModeToggle\\\":{\\\"chat\\\":\\\"Chat\\\",\\\"chatTooltip\\\":\\\"Chat without making edits to your project.\\\",\\\"feelingStuck\\\":\\\"Feeling stuck?\\\",\\\"useChatMode\\\":\\\"Use chat mode to create a plan.\\\"},\\\"TipsAndTricks\\\":{\\\"settingUp\\\":\\\"Setting up...\\\",\\\"spinningUpPreview\\\":\\\"Spinning up preview...\\\",\\\"startingLivePreview\\\":\\\"Starting live preview...\\\",\\\"tryAgain\\\":\\\"Try again\\\",\\\"tips\\\":{\\\"chatWithAI\\\":\\\"Chat with AI in the sidebar\\\",\\\"selectElements\\\":\\\"Select specific elements to modify\\\",\\\"uploadImages\\\":\\\"Upload images as a reference\\\",\\\"instantPreview\\\":\\\"Instantly preview your changes\\\",\\\"customKnowledge\\\":\\\"Set custom knowledge for every edit\\\",\\\"connectSupabase\\\":\\\"Connect Supabase for backend\\\",\\\"collaborateGithub\\\":\\\"Collaborate at source, via GitHub\\\",\\\"deployReady\\\":\\\"Deploy when you're ready\\\"}},\\\"CustomInstructionsModal\\\":{\\\"manageKnowledge\\\":\\\"Manage knowledge\\\",\\\"title\\\":\\\"Manage Knowledge\\\",\\\"description\\\":\\\"Add custom context and instructions for your project. Lovable will use it in every edit. Use it to:\\\",\\\"guidelines\\\":{\\\"rules\\\":\\\"Define project-specific rules or guidelines\\\",\\\"style\\\":\\\"Set coding style preferences (e.g., indentation, naming conventions)\\\",\\\"documentation\\\":\\\"Include external documentation or style guides\\\"},\\\"placeholder\\\":\\\"Enter your custom instructions and context here...\\\",\\\"save\\\":\\\"Save\\\",\\\"toasts\\\":{\\\"success\\\":{\\\"title\\\":\\\"Custom instructions updated\\\",\\\"description\\\":\\\"Your custom instructions have been saved successfully.\\\"},\\\"error\\\":{\\\"title\\\":\\\"Error\\\",\\\"description\\\":\\\"Failed to update custom instructions. Please try again.\\\"}}}},\\\"locale\\\":\\\"en\\\",\\\"detectedLocale\\\":\\\"en\\\",\\\"children\\\":\\\"$L1e\\\"}],\\\"$L1f\\\"]}]]}]]}]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"20:I[58327,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"PanelStoreProvider\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"21:I[6911,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"DEFAULT_SIDEBAR_SIZE\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"22:I[71998,[\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"8039\\\",\\\"static/chunks/app/error-1231913338cf101d.js\\\"],\\\"default\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"23:I[92067,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"Toaster\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"24:I[96606,[\\\"5220\\\",\\\"static/chunks/89cf4ec1-076033b195043650.js\\\",\\\"4397\\\",\\\"static/chunks/29477964-6906cb520a6f0585.js\\\",\\\"5472\\\",\\\"static/chunks/e47c052e-3198041c86f8ab5c.js\\\",\\\"836\\\",\\\"static/chunks/49a1e609-e2a3d8b1cc9624b6.js\\\",\\\"2247\\\",\\\"static/chunks/330152ae-532b1d6bf88ceea5.js\\\",\\\"2621\\\",\\\"static/chunks/c0166af3-b1eb4cd85304c1c2.js\\\",\\\"8628\\\",\\\"static/chunks/8628-82ba59b0bbd139fa.js\\\",\\\"8966\\\",\\\"static/chunks/8966-e78416c35743df5b.js\\\",\\\"9550\\\",\\\"static/chunks/9550-7ad2e16139cca945.js\\\",\\\"5889\\\",\\\"static/chunks/5889-447186d5c584c9bb.js\\\",\\\"8213\\\",\\\"static/chunks/8213-6159666bc9bf909c.js\\\",\\\"9490\\\",\\\"static/chunks/9490-bb9fcf0c1b33ed83.js\\\",\\\"3720\\\",\\\"static/chunks/3720-be6e2075c260d707.js\\\",\\\"8345\\\",\\\"static/chunks/8345-096bb04821169b6f.js\\\",\\\"3139\\\",\\\"static/chunks/3139-fbf65dd8393eb8be.js\\\",\\\"9764\\\",\\\"static/chunks/9764-b09917dda37e257c.js\\\",\\\"2537\\\",\\\"static/chunks/2537-3b3179741da5e25d.js\\\",\\\"926\\\",\\\"static/chunks/926-82d27bc972afa2d0.js\\\",\\\"7738\\\",\\\"static/chunks/7738-88084d65357cbb28.js\\\",\\\"6919\\\",\\\"static/chunks/6919-0274e8cab1ff5120.js\\\",\\\"9135\\\",\\\"static/chunks/9135-1a5ef9b0bd6e2bbc.js\\\",\\\"5937\\\",\\\"static/chunks/5937-1c5d1b67124aefe9.js\\\",\\\"879\\\",\\\"static/chunks/879-c6ac14bccdf102bd.js\\\",\\\"1421\\\",\\\"static/chunks/1421-aebbf70b34f6b53f.js\\\",\\\"7757\\\",\\\"static/chunks/7757-2f4da604d6ff6961.js\\\",\\\"6077\\\",\\\"static/chunks/6077-acd43dfbbc2204fa.js\\\",\\\"5931\\\",\\\"static/chunks/5931-94d1cedbc9deb86e.js\\\",\\\"8061\\\",\\\"static/chunks/8061-ca25c5aee0b8b6cc.js\\\",\\\"2906\\\",\\\"static/chunks/2906-f7330558a0c26921.js\\\",\\\"7177\\\",\\\"static/chunks/app/layout-32d3f5f012b78de9.js\\\"],\\\"ObservabilityInitializer\\\"]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1e:[\\\"$\\\",\\\"$L20\\\",null,{\\\"initialPanelSizes\\\":[\\\"$21\\\",\\\"$NaN\\\"],\\\"children\\\":[[\\\"$\\\",\\\"$Lc\\\",null,{\\\"parallelRouterKey\\\":\\\"children\\\",\\\"error\\\":\\\"$22\\\",\\\"errorStyles\\\":[],\\\"errorScripts\\\":[],\\\"template\\\":[\\\"$\\\",\\\"$Ld\\\",null,{}],\\\"templateStyles\\\":\\\"$undefined\\\",\\\"templateScripts\\\":\\\"$undefined\\\",\\\"notFound\\\":[[[\\\"$\\\",\\\"title\\\",null,{\\\"children\\\":\\\"404: This page could not be found.\\\"}],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":\\\"$0:f:0:1:2:children:1:props:children:1:props:children:9:props:children:props:notFound:0:1:props:style\\\",\\\"children\\\":[\\\"$\\\",\\\"div\\\",null,{\\\"children\\\":[[\\\"$\\\",\\\"style\\\",null,{\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\\\"}}],[\\\"$\\\",\\\"h1\\\",null,{\\\"className\\\":\\\"next-error-h1\\\",\\\"style\\\":\\\"$0:f:0:1:2:children:1:props:children:1:props:children:9:props:children:props:notFound:0:1:props:children:props:children:1:props:style\\\",\\\"children\\\":404}],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":\\\"$0:f:0:1:2:children:1:props:children:1:props:children:9:props:children:props:notFound:0:1:props:children:props:children:2:props:style\\\",\\\"children\\\":[\\\"$\\\",\\\"h2\\\",null,{\\\"style\\\":\\\"$0:f:0:1:2:children:1:props:children:1:props:children:9:props:children:props:notFound:0:1:props:children:props:children:2:props:children:props:style\\\",\\\"children\\\":\\\"This page could not be found.\\\"}]}]]}]}]],[]],\\\"forbidden\\\":\\\"$undefined\\\",\\\"unauthorized\\\":\\\"$undefined\\\"}],[\\\"$\\\",\\\"$L23\\\",null,{\\\"closeButton\\\":true}],[\\\"$\\\",\\\"$L24\\\",null,{}]]}]\\n\"])\u003c/script\u003e\u003cscript\u003eself.__next_f.push([1,\"1f:[\\\"$\\\",\\\"$L1b\\\",null,{\\\"id\\\":\\\"netlify-identity-redirect\\\",\\\"strategy\\\":\\\"afterInteractive\\\",\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"\\\\n              if (window.netlifyIdentity) {\\\\n                window.netlifyIdentity.on(\\\\\\\"init\\\\\\\", (user) =\\u003e {\\\\n                  if (!user) {\\\\n                    window.netlifyIdentity.on(\\\\\\\"login\\\\\\\", () =\\u003e {\\\\n                      document.location.href = \\\\\\\"/admin/\\\\\\\";\\\\n                    });\\\\n                  }\\\\n                });\\\\n              }\\\\n            \\\"}}]\\n\"])\u003c/script\u003e\u003c/body\u003e\u003c/html\u003e\u003c!-- This script is automatically inserted by Netlify for Real User Monitoring (RUM). --\u003e\n\u003cscript async id=\"netlify-rum-container\" src=\"/.netlify/scripts/rum\" data-netlify-cwv-token=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaXRlX2lkIjoiMTU2MjYzNWYtNDhmYi00MTYxLWIyMzQtZDg3MzY2NjAyMGFhIiwiYWNjb3VudF9pZCI6IjVkZTI1MWE3OWI4MGUzY2U3ZDY2MjQyYiIsImRlcGxveV9pZCI6IjY4YjVlNDU2OTI5OWEyMDAwODU5ZWI2NiIsImlzcyI6Im5ldGxpZnkifQ.9IZmWkDf6vYnsbgwhT6RxaxAAperlvZVAU25D4Aas7o\"\u003e\u003c/script\u003e\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "public/coaches/sean-kanan.png",
//     "contents": "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AAAAAgAAAAAAAADypY4IrLIapAj2qZBiYbiK14CVAHYtBh/8X2755Z44b2n5bwAAAAAAAAAAAAAAAATypL48oIb5YXxnLroobxj+OMzR5ZpmCiK2BM+uZ+L56rHIb6gAAAAAAAAAAAAAAAT7oIbn776q6mgUpbbqxAIlAxik9qlW0JPjyZ3j6X5b6qYxb6wAAAAAAAAAAAAAABDz4ompLKIKrkAm4ZCBSpFnruFd2QD3YY5bUgJ6LlYKILaV7ygAAAAAAAAAAAAAABT764WoIIJb7kRWbbkrdEKx+0gO8gAb3uxGLQ3Ibl6oIJa5b7wgAAAAAAAAAAAAAAb76H6oIIL53UDG+ttut+LbmW0Ow+qO7ml6QbGz71WoIJbonz6gAAAACAAAAAAAAAb74Fb4IL75F3CcrA3Sna6TUa9dC4IBcIYFgx2ZazH4ILaqXTygAAAACAAAAAAAABT7xn64IJb4VswMcMEAABI8IXCFrZjZ7LLKbUZ3Wgn4oJb6HbzggAAAAAAAAACABDT76H74oJ77Hc4f7777ZYYo8oyB0mbnyHLXUkelIuX64Z74bbzyAAAAAAAAAAAAABTyoL744b74+ah57zL7rKM8zpShmqmIuP7RSo12cnlb47767bziAAAAAAAAAACiBRzzqL7pJb75Yh2Yq5G9Lpcq8jS1GiuE2v8AkaCgaqJdW+y++6R888oAAAAAIAAAsoU085q++ee+6P2VaMWC6CiS0lQMoF8Rpp9LmC9iemWVU++++qd888IAAAAAgAAA44U88h6+++++6HHXi+UU+mEe61AKMVIOqeNSWmB2GKmxU++++q58884gAAAAoAAA8oc886K2++++qFBQheOeCN8C1h888cXkSSK62NMhtqSZW++++qF888YIAAAAoAAQ88888uK+++++uV8IvEqolbQX1ZqojiXR6ya+yGwiuKWKe++++uP8884oAAAAgAAQ8kU+86pW++++qS2DnBdjkBiohzz8HyOaeTaKWKdGuiZi2++++y+8884gAAAAgAAQ4g088uN2+++++SqNcKrGgboTr1Fe+6am37ksUS61uuVC+++++i+8884wAAAAIAIMcIMc88Re+++++Cl4PQgRq+8w5bCRmma2Z4g6uCk2SytCe++++Zc888IAAAAAggggwwww885++++++imitwkUQP8Ah63gCMjz0J88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9s4cJ5hE4OYcvIpv3BvQHYX77P7747zzzzzzxBzzzzzzzzjxLX755/65/DeGPHqZzpYkerhYK+pTVsNRyI1F0Vzzb776orzzzzyyhBzzzzzzzzzxp3777767PuSekfcXGiuMELZLCOo+VREVEohi5ZTz7776q7zzzzzyhTjzzzzzzzzxlX777776xh2kdnHetkgnOdAYdKckFP22gWoIobbr77764rzzzzzzwDzzzyzzzzzzl3777774ZuI1n8Uu9r4L+wxEyfd0lU4ORkj2MG3777768TzzzzzzzTzzzzzzzzry9L777777mxOZd8G4SoOXOkXMWa9krHXDSbC0p5/7777633zzzzzjzjzzzzzzzzjz4r777/766YR5/B8PNvwdxLWJ4MVKLsff4bZo7b7777/73fzzzzzzxTjzzzzzzSjzxzb777765k8mtOAcEMMP7SjYGGGKcJx7n96rKr777775LTzzzzzyyyzzzzzzzyzzz77777757XQQ5ZFk+tvVtZvwsnkCFb748RpI93777775bzzzzzzzzTzzzzzzzzzzztP7777775s9mdWsR77x/FWuhVu7777K/pIbhz77776lXzzzzzzzzSzzzzzzzzzzzwb757776jIwpinTb7777777777777vq5eUN35b7775JzzzzzzzzxzzzzzzzzzzzzzvW757766qKNgfL77rKzb77rKob722S8vEFRb7776q7zzzzzzzyhTijzjzzhTTzzyo7b77767xIhzbXqbpOerCoIYJ7IovXbYCf777774Z7zzzzzzAAAADzzzzzxzzzzzyn3777775jVP8ARVY+KIuTKqd7eB0SICby++++++r688888888oAAo8888848c8888s82+++++uSLP4/03OJFYaoY3PWG/IJlU++++++y+88884848oAAwoAAAoAAA48888fq++++++u1X3g/pO998WEG9jicp17ie++++++t88888AAAAAAAA80gwwAAA888888t/++u+++qFX9oqe4T7OVtPOfSvCq+2++++lj88880844AgAAAA4AAAwAAQw8888886Z+++++uCRP0QbBL80VV/yaW9iW+++++1WY8888QwAAAAAAAA4gAAoAAAY8888088LZ+++++qA7BvsMcpS9t9JPGi++++++xa888884QQAAAAAAAAoQAAAAAAgw0088888RW2++++iCe9wLTQTWG5lrC++++++3u+88888gAAAAAAAEMAoAAAAQAoAAAU888888pGz+u+KGA0s/tPZBtegCe+++++O9808880AAAAAAAAEUkgIEAAAAgAIAEc8888888uS72++eOOGOgwgCmAOe+++2ny+88888sMMIAIAAAAAQgQoAAAAAAA4Qw888888888sPG/y++++++++++++++6jU9c888880088wQwAAAQAAIAAggAAcIIAAAAQAA88888888rKGd5a62+++2y7RymF408888oAAAAAAoAEAQAAQ884QgQoAQAwwww0ww0888888888s/1yu4YwsC221u888+888840QwwwwQwAwwgwgAAAAAAAwogAAAAAAAAc8o88888888888ss8s88888888888ggAQAAAAAoAAAAAAg8QAAEAAUsoAAAAAAAAUko80888888888888888888880884QogQAAAAEIAAIAAAUoAoAAAAA4gAAAAEAAEcss8c888888888888888888880848UooEAAAAAoAAAAAAAoAgIAAAEokAAAQQAAAw0o8w0w888888888888884884Q80wQwgwAAQAAAAAAAAIAoAIgAAAwwwAAAAAAEMUUo8Ecs8c8884888s888sAc8sAsMsAsAAAAAAAgAAAAAQwoQgAAAAAAAAAQgQgww88o808480808880888888w4w4Q484QwgQAAAAAIAAAAQgAIAAAAAAEoIAAAAAAAAc4o8EsI8c808M8Ec8cUM8IMYoAIcoAAAAAAAAAoAAAAAAAgwAgIAAEoIAAAAAAAAQwg4AQ4wAUQQowQwwQQwogwwoAQQAAAAAoAAAEoAEAgAAUog/8QALREAAgIABQQCAwEAAQUBAAAAAAECEQMQEiExIDJAUTBBEyJQYYEEI0JgcZD/2gAIAQIBAT8A/wDS7/k2vFsYnkv4ryYvFobE/wCO2Lx2J7iP8E/4LeTLti8Rus2T2dkJWsuS/Ps4ynIghZp34LIuts5kbQmxDFfmtsQxsdtkM272F4LyrJoaExPJLzWsmyTIi6F4SHkx2+BIRYmWvL1IbG19jGkRTXIsl4iHkyckuR4rfA23yR5ITuVHJS8jf2aV9mxKVSon3MW3AsRohNS4Fkh+ExDyxcXT+qOc0YXsT+S0al7NS9lr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",
//     "binary": true,
//     "sizeExceeded": false
// },
// {
//     "name": "public/favicon.ico",
//     "contents": "",
//     "binary": true,
//     "sizeExceeded": false
// },
// {
//     "name": "public/lovable-uploads/11ffb9ca-b464-4313-9bc3-58aa222d4268.png",
//     "contents": "",
//     "binary": true,
//     "sizeExceeded": false
// },
// {
//     "name": "public/lovable-uploads/483b557f-6225-4fc8-953a-49e3200f8059.png",
//     "binary": true,
//     "sizeExceeded": false
// },
// {
//     "name": "public/lovable-uploads/4a72a089-4a5a-49b2-ab0d-67a79e8a279c.png",
//     "contents": "",
//     "binary": true,
//     "sizeExceeded": false
// },
// {
//     "name": "public/lovable-uploads/ad4d84b2-e509-456b-8f77-562dbfabbbf0.png",
//     "binary": true,
//     "sizeExceeded": false
// },
// {
//     "name": "public/lovable-uploads/e660b78e-0cdd-4c62-b288-ebb8aa5bdbd2.png",
//     "contents": "",
//     "binary": true,
//     "sizeExceeded": false
// },
// {
//     "name": "public/lovable-uploads/fc5ad1be-fef6-4291-bd9e-7853e3088982.png",
//     "contents": "",
//     "binary": true,
//     "sizeExceeded": false
// },
// {
//     "name": "public/placeholder.svg",
//     "contents": "\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1200\" height=\"1200\" fill=\"none\"\u003e\u003crect width=\"1200\" height=\"1200\" fill=\"#EAEAEA\" rx=\"3\"/\u003e\u003cg opacity=\".5\"\u003e\u003cg opacity=\".5\"\u003e\u003cpath fill=\"#FAFAFA\" d=\"M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z\"/\u003e\u003cpath stroke=\"#C9C9C9\" stroke-width=\"2.418\" d=\"M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z\"/\u003e\u003c/g\u003e\u003cpath stroke=\"url(#a)\" stroke-width=\"2.418\" d=\"M0-1.209h553.581\" transform=\"scale(1 -1) rotate(45 1163.11 91.165)\"/\u003e\u003cpath stroke=\"url(#b)\" stroke-width=\"2.418\" d=\"M404.846 598.671h391.726\"/\u003e\u003cpath stroke=\"url(#c)\" stroke-width=\"2.418\" d=\"M599.5 795.742V404.017\"/\u003e\u003cpath stroke=\"url(#d)\" stroke-width=\"2.418\" d=\"m795.717 796.597-391.441-391.44\"/\u003e\u003cpath fill=\"#fff\" d=\"M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z\"/\u003e\u003cg clip-path=\"url(#e)\"\u003e\u003cpath fill=\"#666\" fill-rule=\"evenodd\" d=\"M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z\" clip-rule=\"evenodd\"/\u003e\u003c/g\u003e\u003cpath stroke=\"#C9C9C9\" stroke-width=\"2.418\" d=\"M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z\"/\u003e\u003c/g\u003e\u003cdefs\u003e\u003clinearGradient id=\"a\" x1=\"554.061\" x2=\"-.48\" y1=\".083\" y2=\".087\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/\u003e\u003cstop offset=\".208\" stop-color=\"#C9C9C9\"/\u003e\u003cstop offset=\".792\" stop-color=\"#C9C9C9\"/\u003e\u003cstop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/\u003e\u003c/linearGradient\u003e\u003clinearGradient id=\"b\" x1=\"796.912\" x2=\"404.507\" y1=\"599.963\" y2=\"599.965\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/\u003e\u003cstop offset=\".208\" stop-color=\"#C9C9C9\"/\u003e\u003cstop offset=\".792\" stop-color=\"#C9C9C9\"/\u003e\u003cstop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/\u003e\u003c/linearGradient\u003e\u003clinearGradient id=\"c\" x1=\"600.792\" x2=\"600.794\" y1=\"403.677\" y2=\"796.082\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/\u003e\u003cstop offset=\".208\" stop-color=\"#C9C9C9\"/\u003e\u003cstop offset=\".792\" stop-color=\"#C9C9C9\"/\u003e\u003cstop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/\u003e\u003c/linearGradient\u003e\u003clinearGradient id=\"d\" x1=\"404.85\" x2=\"796.972\" y1=\"403.903\" y2=\"796.02\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop stop-color=\"#C9C9C9\" stop-opacity=\"0\"/\u003e\u003cstop offset=\".208\" stop-color=\"#C9C9C9\"/\u003e\u003cstop offset=\".792\" stop-color=\"#C9C9C9\"/\u003e\u003cstop offset=\"1\" stop-color=\"#C9C9C9\" stop-opacity=\"0\"/\u003e\u003c/linearGradient\u003e\u003cclipPath id=\"e\"\u003e\u003cpath fill=\"#fff\" d=\"M581.364 580.535h38.689v38.689h-38.689z\"/\u003e\u003c/clipPath\u003e\u003c/defs\u003e\u003c/svg\u003e",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "public/robots.txt",
//     "contents": "User-agent: Googlebot\nAllow: /\n\nUser-agent: Bingbot\nAllow: /\n\nUser-agent: Twitterbot\nAllow: /\n\nUser-agent: facebookexternalhit\nAllow: /\n\nUser-agent: *\nAllow: /\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "public/seancoach.png",
//     "contents": "",
//     "binary": true,
//     "sizeExceeded": false
// },
// {
//     "name": "src/App.css",
//     "contents": "#root {\n  width: 100%;\n  height: 100vh;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/App.tsx",
//     "contents": "\nimport { BrowserRouter as Router, Routes, Route, Navigate, useParams } from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { HelpModeProvider } from \"@/contexts/HelpModeContext\";\nimport { Toaster as SonnerToaster } from \"@/components/ui/sonner\";\nimport ErrorBoundary from \"@/components/ErrorBoundary\";\n// Import pages\nimport Index from \"@/pages/Index\";\nimport Auth from \"@/pages/Auth\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport ScriptAnalysis from \"@/pages/ScriptAnalysis\";\nimport IndividualScriptAnalysis from \"@/pages/IndividualScriptAnalysis\";\nimport Profile from \"@/pages/Profile\";\nimport PublicProfile from \"@/pages/PublicProfile\";\nimport Teleprompter from \"@/pages/Teleprompter\";\nimport ActorsToolBox from \"@/pages/ActorsToolBox\";\nimport ActorsApproach from \"@/pages/ActorsApproach\";\nimport SelfTaping from \"@/pages/SelfTaping\";\nimport HeadshotEvaluation from \"@/pages/HeadshotEvaluation\";\nimport Membership from \"@/pages/Membership\";\nimport About from \"@/pages/About\";\nimport Contact from \"@/pages/Contact\";\nimport FAQ from \"@/pages/FAQ\";\nimport Privacy from \"@/pages/Privacy\";\nimport Terms from \"@/pages/Terms\";\nimport LegalNotices from \"@/pages/LegalNotices\";\nimport Cookies from \"@/pages/Cookies\";\nimport Podcast from \"@/pages/Podcast\";\nimport BlogPostDetail from \"@/pages/BlogPostDetail\";\nimport NotFound from \"@/pages/NotFound\";\nimport Test from \"@/pages/Test\";\nimport TTSDebug from \"@/pages/TTSDebug\";\nimport ProVoiceTest from \"@/pages/ProVoiceTest\";\nimport AdminScripts from \"@/pages/AdminScripts\";\nimport AdminPhotographers from \"@/pages/AdminPhotographers\";\nimport Coaches from \"@/pages/Coaches\";\nimport CoachDetail from \"@/pages/CoachDetail\";\nimport AdminCoaches from \"@/pages/AdminCoaches\";\nimport Footer from \"@/components/Footer\";\n\nimport \"./App.css\";\n\nconst queryClient = new QueryClient();\n\n// Redirect component for old script analysis URLs\nconst ScriptAnalysisRedirect = () =\u003e {\n  const { scriptId } = useParams\u003c{ scriptId: string }\u003e();\n  return \u003cNavigate to={`/analysis/${scriptId}`} replace /\u003e;\n};\n\nfunction App() {\n  return (\n    \u003cErrorBoundary\u003e\n      \u003cQueryClientProvider client={queryClient}\u003e\n        \u003cAuthProvider\u003e\n          \u003cHelpModeProvider\u003e\n            \u003cTooltipProvider\u003e\n              \u003cRouter\u003e\n              \u003cdiv className=\"App\"\u003e\n                \u003cRoutes\u003e\n                  \u003cRoute path=\"/\" element={\u003cIndex /\u003e} /\u003e\n                  \u003cRoute path=\"/auth\" element={\u003cAuth /\u003e} /\u003e\n                  \u003cRoute path=\"/dashboard\" element={\u003cDashboard /\u003e} /\u003e\n                  \u003cRoute path=\"/analysis\" element={\u003cScriptAnalysis /\u003e} /\u003e\n                  \u003cRoute path=\"/script-analysis\" element={\u003cNavigate to=\"/analysis\" replace /\u003e} /\u003e\n                  \u003cRoute path=\"/script-analysis/:scriptId\" element={\u003cScriptAnalysisRedirect /\u003e} /\u003e\n                  \u003cRoute path=\"/analysis/:scriptId\" element={\u003cIndividualScriptAnalysis /\u003e} /\u003e\n                  \u003cRoute path=\"/profile\" element={\u003cProfile /\u003e} /\u003e\n                  \u003cRoute path=\"/profile/:username\" element={\u003cPublicProfile /\u003e} /\u003e\n                  \u003cRoute path=\"/teleprompter\" element={\u003cTeleprompter /\u003e} /\u003e\n                  \u003cRoute path=\"/toolbox\" element={\u003cActorsToolBox /\u003e} /\u003e\n                  \u003cRoute path=\"/actors-toolbox\" element={\u003cNavigate to=\"/toolbox\" replace /\u003e} /\u003e\n                  \u003cRoute path=\"/approach\" element={\u003cActorsApproach /\u003e} /\u003e\n                  \u003cRoute path=\"/actors-approach\" element={\u003cNavigate to=\"/approach\" replace /\u003e} /\u003e\n                  \u003cRoute path=\"/self-taping\" element={\u003cSelfTaping /\u003e} /\u003e\n                  \u003cRoute path=\"/headshot-evaluation/:id\" element={\u003cHeadshotEvaluation /\u003e} /\u003e\n                  \u003cRoute path=\"/headshot-evaluation\" element={\u003cNavigate to=\"/self-taping#headshot-grader\" replace /\u003e} /\u003e\n                  \u003cRoute path=\"/membership\" element={\u003cMembership /\u003e} /\u003e\n                  \u003cRoute path=\"/about\" element={\u003cAbout /\u003e} /\u003e\n                  \u003cRoute path=\"/contact\" element={\u003cContact /\u003e} /\u003e\n                  \u003cRoute path=\"/faq\" element={\u003cFAQ /\u003e} /\u003e\n                  \u003cRoute path=\"/privacy\" element={\u003cPrivacy /\u003e} /\u003e\n                  \u003cRoute path=\"/terms\" element={\u003cTerms /\u003e} /\u003e\n                  \u003cRoute path=\"/legal\" element={\u003cLegalNotices /\u003e} /\u003e\n                  \u003cRoute path=\"/cookies\" element={\u003cCookies /\u003e} /\u003e\n                  \u003cRoute path=\"/podcast\" element={\u003cPodcast /\u003e} /\u003e\n                  \u003cRoute path=\"/blog/:slug\" element={\u003cBlogPostDetail /\u003e} /\u003e\n                  \u003cRoute path=\"/coaches\" element={\u003cCoaches /\u003e} /\u003e\n                  \u003cRoute path=\"/coaches/:slug\" element={\u003cCoachDetail /\u003e} /\u003e\n                  \u003cRoute path=\"/admin/scripts\" element={\u003cAdminScripts /\u003e} /\u003e\n                  \u003cRoute path=\"/admin/photographers\" element={\u003cAdminPhotographers /\u003e} /\u003e\n                  \u003cRoute path=\"/admin/coaches\" element={\u003cAdminCoaches /\u003e} /\u003e\n                  \u003cRoute path=\"/test\" element={\u003cTest /\u003e} /\u003e\n                  \u003cRoute path=\"/tts-debug\" element={\u003cTTSDebug /\u003e} /\u003e\n                  \u003cRoute path=\"/pro-voice-test\" element={\u003cProVoiceTest /\u003e} /\u003e\n                  \u003cRoute path=\"*\" element={\u003cNotFound /\u003e} /\u003e\n                \u003c/Routes\u003e\n                \u003cFooter /\u003e\n                \u003cToaster /\u003e\n                \u003cSonnerToaster /\u003e\n              \u003c/div\u003e\n            \u003c/Router\u003e\n            \u003c/TooltipProvider\u003e\n          \u003c/HelpModeProvider\u003e\n        \u003c/AuthProvider\u003e\n      \u003c/QueryClientProvider\u003e\n    \u003c/ErrorBoundary\u003e\n  );\n}\n\nexport default App;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/AIUsageIndicator.tsx",
//     "contents": "\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { Brain, MessageSquare, Video, CheckCircle } from 'lucide-react';\nimport { useAIUsageLimit } from '@/hooks/useAIUsageLimit';\n\nconst AIUsageIndicator: React.FC = () =\u003e {\n  const { usage } = useAIUsageLimit();\n\n  const usageItems = [\n    {\n      icon: Brain,\n      label: 'Script Analyses',\n      used: usage.scriptAnalyses,\n      color: 'text-yellow-400',\n    },\n    {\n      icon: MessageSquare,\n      label: 'Coaching Messages',\n      used: usage.coachingMessages,\n      color: 'text-purple-400',\n    },\n    {\n      icon: Video,\n      label: 'Video Evaluations',\n      used: usage.videoEvaluations,\n      color: 'text-red-400',\n    },\n  ];\n\n  return (\n    \u003cCard className=\"bg-gray-900/50 border-gray-700\"\u003e\n      \u003cCardHeader className=\"pb-3\"\u003e\n        \u003cCardTitle className=\"text-white text-sm flex items-center gap-2\"\u003e\n          \u003cBrain className=\"w-4 h-4\" /\u003e\n          AI Usage (Unlimited)\n          \u003cBadge variant=\"outline\" className=\"text-xs border-green-500 text-green-400\"\u003e\n            \u003cCheckCircle className=\"w-3 h-3 mr-1\" /\u003e\n            No Limits\n          \u003c/Badge\u003e\n        \u003c/CardTitle\u003e\n      \u003c/CardHeader\u003e\n      \u003cCardContent className=\"space-y-3\"\u003e\n        {usageItems.map((item) =\u003e {\n          const Icon = item.icon;\n          \n          return (\n            \u003cdiv key={item.label} className=\"space-y-2\"\u003e\n              \u003cdiv className=\"flex items-center justify-between\"\u003e\n                \u003cdiv className=\"flex items-center gap-2\"\u003e\n                  \u003cIcon className={`w-4 h-4 ${item.color}`} /\u003e\n                  \u003cspan className=\"text-gray-300 text-sm\"\u003e{item.label}\u003c/span\u003e\n                \u003c/div\u003e\n                \u003cspan className=\"text-gray-400 text-sm\"\u003e\n                  {item.used} used\n                \u003c/span\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"text-xs text-green-400\"\u003e\n                Unlimited usage available\n              \u003c/div\u003e\n            \u003c/div\u003e\n          );\n        })}\n        \n        \u003cdiv className=\"bg-green-900/20 border border-green-700/50 rounded-lg p-3 mt-4\"\u003e\n          \u003cdiv className=\"flex items-start gap-2\"\u003e\n            \u003cCheckCircle className=\"w-4 h-4 text-green-400 mt-0.5\" /\u003e\n            \u003cdiv\u003e\n              \u003cp className=\"text-green-300 text-sm font-medium\"\u003eUnlimited Access\u003c/p\u003e\n              \u003cp className=\"text-green-400 text-xs mt-1\"\u003e\n                Enjoy unlimited AI assistance for all your acting needs.\n              \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n};\n\nexport default AIUsageIndicator;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/AnalysisResults.tsx",
//     "contents": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Target, Heart, Zap, MessageSquare, Lightbulb, CheckCircle } from 'lucide-react';\nimport { SceneSummarySection } from '@/components/SceneSummarySection';\nimport { supabase } from '@/integrations/supabase/client';\nimport { DataUseDisclaimer } from '@/components/DataUseDisclaimer';\n\ninterface AnalysisResultsProps {\n  analysis: any;\n  onStartCoaching: () =\u003e void;\n}\n\n// Helper function to parse markdown-style bold text and create readable content\nconst parseText = (text: string) =\u003e {\n  if (!text) return null;\n  \n  // Split text into sentences for better readability\n  const sentences = text.split(/(?\u003c=\\.)\\s+/).filter(sentence =\u003e sentence.trim().length \u003e 0);\n  \n  return sentences.map((sentence, index) =\u003e {\n    // Handle bold text formatting\n    const parts = sentence.split('**');\n    const formattedSentence = parts.map((part, partIndex) =\u003e {\n      if (partIndex % 2 === 1) {\n        return \u003cstrong key={`${index}-${partIndex}`} className=\"font-semibold text-foreground\"\u003e{part}\u003c/strong\u003e;\n      }\n      return part;\n    });\n    \n    return (\n      \u003cp key={index} className=\"mb-3 text-muted-foreground leading-relaxed text-sm\"\u003e\n        {formattedSentence}\n      \u003c/p\u003e\n    );\n  });\n};\n\n// Helper function to format content as structured list\nconst formatContent = (text: string) =\u003e {\n  if (!text) return null;\n  \n  // Check if text contains multiple distinct points (sentences ending with periods)\n  const points = text.split(/[.!?]\\s+/).filter(point =\u003e point.trim().length \u003e 10);\n  \n  if (points.length \u003c= 1) {\n    return (\n      \u003cdiv className=\"space-y-2\"\u003e\n        {parseText(text)}\n      \u003c/div\u003e\n    );\n  }\n  \n  return (\n    \u003cdiv className=\"space-y-3\"\u003e\n      {points.map((point, index) =\u003e {\n        const trimmedPoint = point.trim();\n        if (!trimmedPoint) return null;\n        \n        // Add period if missing\n        const formattedPoint = trimmedPoint.endsWith('.') || trimmedPoint.endsWith('!') || trimmedPoint.endsWith('?') \n          ? trimmedPoint \n          : trimmedPoint + '.';\n        \n        return (\n          \u003cdiv key={index} className=\"flex items-start gap-3 bg-muted/20 rounded-lg p-3\"\u003e\n            \u003cdiv className=\"w-2 h-2 bg-brand-yellow rounded-full mt-2 flex-shrink-0\"\u003e\u003c/div\u003e\n            \u003cdiv className=\"flex-1\"\u003e\n              {parseText(formattedPoint)}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      })}\n    \u003c/div\u003e\n  );\n};\n\nconst AnalysisResults: React.FC\u003cAnalysisResultsProps\u003e = ({\n  analysis,\n  onStartCoaching\n}) =\u003e {\n  const [script, setScript] = useState\u003cany\u003e(null);\n\n  useEffect(() =\u003e {\n    const fetchScript = async () =\u003e {\n      if (analysis?.script_id) {\n        try {\n          const { data } = await supabase\n            .from('scripts')\n            .select('*')\n            .eq('id', analysis.script_id)\n            .single();\n          \n          if (data) {\n            setScript(data);\n          }\n        } catch (error) {\n          console.error('Failed to fetch script:', error);\n        }\n      }\n    };\n\n    fetchScript();\n  }, [analysis?.script_id]);\n\n  const handleSummaryGenerated = (summary: string) =\u003e {\n    setScript((prev: any) =\u003e prev ? { ...prev, scene_summary: summary } : null);\n  };\n\n  return (\n    \u003cdiv className=\"space-y-6\"\u003e\n      \u003cCard className=\"bg-card border-border\"\u003e\n        \u003cCardHeader\u003e\n          \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n            \u003cCheckCircle className=\"w-5 h-5 text-green-400\" /\u003e\n            Character Analysis Complete\n          \u003c/CardTitle\u003e\n          \u003cCardDescription className=\"text-muted-foreground\"\u003e\n            Your script has been analyzed using the {analysis.acting_method} method\n          \u003c/CardDescription\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent className=\"space-y-4\"\u003e\n          \u003cdiv className=\"flex flex-wrap gap-2\"\u003e\n            \u003cBadge variant=\"secondary\" className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\"\u003e\n              Character: {analysis.selected_character}\n            \u003c/Badge\u003e\n            \u003cBadge variant=\"secondary\" className=\"bg-blue-500/20 text-blue-400 border-blue-500/30\"\u003e\n              Method: {analysis.acting_method}\n            \u003c/Badge\u003e\n          \u003c/div\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n\n      {/* Scene Summary Section */}\n      {script \u0026\u0026 (\n        \u003cSceneSummarySection \n          script={script}\n          onSummaryGenerated={handleSummaryGenerated}\n        /\u003e\n      )}\n\n      {/* Start Coaching Button at Top */}\n      \u003cdiv className=\"flex justify-center\"\u003e\n        \u003cButton onClick={onStartCoaching} size=\"lg\" className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-bold px-8 py-4 text-lg\"\u003e\n          \u003cMessageSquare className=\"w-5 h-5 mr-2\" /\u003e\n          Start Coaching Session\n        \u003c/Button\u003e\n      \u003c/div\u003e\n\n      \u003cdiv className=\"space-y-4\"\u003e\n        \u003cAccordion type=\"multiple\" defaultValue={[\"objectives\", \"obstacles\", \"tactics\", \"insights\"]} className=\"space-y-4\"\u003e\n          \u003cAccordionItem value=\"objectives\" className=\"border-0\"\u003e\n            \u003cCard className=\"bg-card border-border\"\u003e\n              \u003cAccordionTrigger className=\"hover:no-underline p-0\"\u003e\n                \u003cCardHeader className=\"flex-row items-center space-y-0 pb-4 w-full\"\u003e\n                  \u003cdiv className=\"flex items-center gap-3\"\u003e\n                    \u003cdiv className=\"p-2 bg-yellow-500/20 rounded-lg\"\u003e\n                      \u003cTarget className=\"w-5 h-5 text-yellow-400\" /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                      \u003cCardTitle className=\"text-foreground text-xl\"\u003eObjectives\u003c/CardTitle\u003e\n                      \u003cCardDescription className=\"text-muted-foreground\"\u003e\n                        What your character wants to achieve\n                      \u003c/CardDescription\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/CardHeader\u003e\n              \u003c/AccordionTrigger\u003e\n              \u003cAccordionContent\u003e\n                \u003cCardContent className=\"pt-0\"\u003e\n                  \u003cdiv className=\"space-y-6\"\u003e\n                    {analysis.objectives?.map((objective: string, index: number) =\u003e (\n                      \u003cdiv key={index} className=\"bg-muted/30 rounded-lg p-5 border-l-4 border-brand-yellow\"\u003e\n                        \u003cdiv className=\"flex items-start gap-4\"\u003e\n                          \u003cspan className=\"text-brand-yellow font-bold text-lg mt-1 flex-shrink-0 bg-brand-yellow/20 w-8 h-8 rounded-full flex items-center justify-center\"\u003e\n                            {index + 1}\n                          \u003c/span\u003e\n                          \u003cdiv className=\"flex-1\"\u003e\n                            {formatContent(objective)}\n                          \u003c/div\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    ))}\n                  \u003c/div\u003e\n                \u003c/CardContent\u003e\n              \u003c/AccordionContent\u003e\n            \u003c/Card\u003e\n          \u003c/AccordionItem\u003e\n\n          \u003cAccordionItem value=\"obstacles\" className=\"border-0\"\u003e\n            \u003cCard className=\"bg-card border-border\"\u003e\n              \u003cAccordionTrigger className=\"hover:no-underline p-0\"\u003e\n                \u003cCardHeader className=\"flex-row items-center space-y-0 pb-4 w-full\"\u003e\n                  \u003cdiv className=\"flex items-center gap-3\"\u003e\n                    \u003cdiv className=\"p-2 bg-red-500/20 rounded-lg\"\u003e\n                      \u003cZap className=\"w-5 h-5 text-red-400\" /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                      \u003cCardTitle className=\"text-foreground text-xl\"\u003eObstacles\u003c/CardTitle\u003e\n                      \u003cCardDescription className=\"text-muted-foreground\"\u003e\n                        What stands in your character's way\n                      \u003c/CardDescription\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/CardHeader\u003e\n              \u003c/AccordionTrigger\u003e\n              \u003cAccordionContent\u003e\n                \u003cCardContent className=\"pt-0\"\u003e\n                  \u003cdiv className=\"space-y-6\"\u003e\n                    {analysis.obstacles?.map((obstacle: string, index: number) =\u003e (\n                      \u003cdiv key={index} className=\"bg-muted/30 rounded-lg p-5 border-l-4 border-red-400\"\u003e\n                        \u003cdiv className=\"flex items-start gap-4\"\u003e\n                          \u003cspan className=\"text-red-400 font-bold text-lg mt-1 flex-shrink-0 bg-red-400/20 w-8 h-8 rounded-full flex items-center justify-center\"\u003e\n                            {index + 1}\n                          \u003c/span\u003e\n                          \u003cdiv className=\"flex-1\"\u003e\n                            {formatContent(obstacle)}\n                          \u003c/div\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    ))}\n                  \u003c/div\u003e\n                \u003c/CardContent\u003e\n              \u003c/AccordionContent\u003e\n            \u003c/Card\u003e\n          \u003c/AccordionItem\u003e\n\n          \u003cAccordionItem value=\"tactics\" className=\"border-0\"\u003e\n            \u003cCard className=\"bg-card border-border\"\u003e\n              \u003cAccordionTrigger className=\"hover:no-underline p-0\"\u003e\n                \u003cCardHeader className=\"flex-row items-center space-y-0 pb-4 w-full\"\u003e\n                  \u003cdiv className=\"flex items-center gap-3\"\u003e\n                    \u003cdiv className=\"p-2 bg-green-500/20 rounded-lg\"\u003e\n                      \u003cHeart className=\"w-5 h-5 text-green-400\" /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                      \u003cCardTitle className=\"text-foreground text-xl\"\u003eTactics\u003c/CardTitle\u003e\n                      \u003cCardDescription className=\"text-muted-foreground\"\u003e\n                        How your character tries to achieve their goals\n                      \u003c/CardDescription\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/CardHeader\u003e\n              \u003c/AccordionTrigger\u003e\n              \u003cAccordionContent\u003e\n                \u003cCardContent className=\"pt-0\"\u003e\n                  \u003cdiv className=\"space-y-6\"\u003e\n                    {analysis.tactics?.map((tactic: string, index: number) =\u003e (\n                      \u003cdiv key={index} className=\"bg-muted/30 rounded-lg p-5 border-l-4 border-green-400\"\u003e\n                        \u003cdiv className=\"flex items-start gap-4\"\u003e\n                          \u003cspan className=\"text-green-400 font-bold text-lg mt-1 flex-shrink-0 bg-green-400/20 w-8 h-8 rounded-full flex items-center justify-center\"\u003e\n                            {index + 1}\n                          \u003c/span\u003e\n                          \u003cdiv className=\"flex-1\"\u003e\n                            {formatContent(tactic)}\n                          \u003c/div\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    ))}\n                  \u003c/div\u003e\n                \u003c/CardContent\u003e\n              \u003c/AccordionContent\u003e\n            \u003c/Card\u003e\n          \u003c/AccordionItem\u003e\n\n          \u003cAccordionItem value=\"insights\" className=\"border-0\"\u003e\n            \u003cCard className=\"bg-card border-border\"\u003e\n              \u003cAccordionTrigger className=\"hover:no-underline p-0\"\u003e\n                \u003cCardHeader className=\"flex-row items-center space-y-0 pb-4 w-full\"\u003e\n                  \u003cdiv className=\"flex items-center gap-3\"\u003e\n                    \u003cdiv className=\"p-2 bg-purple-500/20 rounded-lg\"\u003e\n                      \u003cLightbulb className=\"w-5 h-5 text-purple-400\" /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                      \u003cCardTitle className=\"text-foreground text-xl\"\u003eKey Insights\u003c/CardTitle\u003e\n                      \u003cCardDescription className=\"text-muted-foreground\"\u003e\n                        Important observations about your character\n                      \u003c/CardDescription\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/CardHeader\u003e\n              \u003c/AccordionTrigger\u003e\n              \u003cAccordionContent\u003e\n                \u003cCardContent className=\"pt-0\"\u003e\n                  \u003cdiv className=\"space-y-6\"\u003e\n                    {analysis.analysis_data?.character_analysis \u0026\u0026 (\n                      \u003cdiv className=\"bg-muted/30 rounded-lg p-5 border-l-4 border-purple-400\"\u003e\n                        \u003ch4 className=\"text-purple-400 font-semibold mb-4 text-lg flex items-center gap-2\"\u003e\n                          \u003cdiv className=\"w-6 h-6 bg-purple-400/20 rounded-full flex items-center justify-center\"\u003e\n                            \u003cspan className=\"text-xs\"\u003e1\u003c/span\u003e\n                          \u003c/div\u003e\n                          Character Analysis\n                        \u003c/h4\u003e\n                        \u003cdiv className=\"ml-8\"\u003e\n                          {formatContent(analysis.analysis_data.character_analysis)}\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    )}\n                    {analysis.analysis_data?.emotional_journey \u0026\u0026 (\n                      \u003cdiv className=\"bg-muted/30 rounded-lg p-5 border-l-4 border-purple-400\"\u003e\n                        \u003ch4 className=\"text-purple-400 font-semibold mb-4 text-lg flex items-center gap-2\"\u003e\n                          \u003cdiv className=\"w-6 h-6 bg-purple-400/20 rounded-full flex items-center justify-center\"\u003e\n                            \u003cspan className=\"text-xs\"\u003e2\u003c/span\u003e\n                          \u003c/div\u003e\n                          Emotional Journey\n                        \u003c/h4\u003e\n                        \u003cdiv className=\"ml-8\"\u003e\n                          {formatContent(analysis.analysis_data.emotional_journey)}\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    )}\n                    {analysis.analysis_data?.method_application \u0026\u0026 (\n                      \u003cdiv className=\"bg-muted/30 rounded-lg p-5 border-l-4 border-purple-400\"\u003e\n                        \u003ch4 className=\"text-purple-400 font-semibold mb-4 text-lg flex items-center gap-2\"\u003e\n                          \u003cdiv className=\"w-6 h-6 bg-purple-400/20 rounded-full flex items-center justify-center\"\u003e\n                            \u003cspan className=\"text-xs\"\u003e3\u003c/span\u003e\n                          \u003c/div\u003e\n                          Method Application\n                        \u003c/h4\u003e\n                        \u003cdiv className=\"ml-8\"\u003e\n                          {formatContent(analysis.analysis_data.method_application)}\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    )}\n                    {analysis.analysis_data?.scene_work \u0026\u0026 (\n                      \u003cdiv className=\"bg-muted/30 rounded-lg p-5 border-l-4 border-purple-400\"\u003e\n                        \u003ch4 className=\"text-purple-400 font-semibold mb-4 text-lg flex items-center gap-2\"\u003e\n                          \u003cdiv className=\"w-6 h-6 bg-purple-400/20 rounded-full flex items-center justify-center\"\u003e\n                            \u003cspan className=\"text-xs\"\u003e4\u003c/span\u003e\n                          \u003c/div\u003e\n                          Scene Work\n                        \u003c/h4\u003e\n                        \u003cdiv className=\"ml-8\"\u003e\n                          {formatContent(analysis.analysis_data.scene_work)}\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    )}\n                  \u003c/div\u003e\n                \u003c/CardContent\u003e\n              \u003c/AccordionContent\u003e\n            \u003c/Card\u003e\n          \u003c/AccordionItem\u003e\n        \u003c/Accordion\u003e\n      \u003c/div\u003e\n\n      \u003cCard className=\"bg-card border-border\"\u003e\n        \u003cCardContent className=\"p-6\"\u003e\n          \u003cdiv className=\"text-center\"\u003e\n            \u003ch3 className=\"text-xl font-bold text-foreground mb-2\"\u003eReady for Personalized Coaching?\u003c/h3\u003e\n            \u003cp className=\"text-muted-foreground mb-4\"\u003e\n              Start a guided coaching session based on your scene analysis\n            \u003c/p\u003e\n            \u003cButton onClick={onStartCoaching} className=\"bg-brand-yellow hover:bg-brand-yellow/90 text-brand-yellow-foreground font-bold px-8 py-3\"\u003e\n              \u003cMessageSquare className=\"w-4 h-4 mr-2\" /\u003e\n              Start Coaching Session\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n      \n      \u003cDataUseDisclaimer className=\"mt-6\" /\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default AnalysisResults;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/AuthModal.tsx",
//     "contents": "\nimport React from 'react';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () =\u003e void;\n}\n\nconst AuthModal: React.FC\u003cAuthModalProps\u003e = ({ isOpen, onClose }) =\u003e {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const handleGetStarted = () =\u003e {\n    onClose();\n    navigate('/auth', { state: { from: location } });\n  };\n\n  return (\n    \u003cDialog open={isOpen} onOpenChange={onClose}\u003e\n      \u003cDialogContent className=\"sm:max-w-[425px] bg-gray-900 border-gray-700\"\u003e\n        \u003cDialogHeader\u003e\n          \u003cDialogTitle className=\"text-white\"\u003eGet Started with MyAuditionAI.com\u003c/DialogTitle\u003e\n          \u003cDialogDescription className=\"text-gray-400\"\u003e\n            Sign in to your account or create a new one to access professional acting tools, script analysis, and personalized coaching.\n          \u003c/DialogDescription\u003e\n        \u003c/DialogHeader\u003e\n        \n        \u003cdiv className=\"space-y-4\"\u003e\n          \u003cdiv className=\"text-center\"\u003e\n            \u003ch3 className=\"text-lg font-semibold text-white mb-2\"\u003eReady to elevate your acting?\u003c/h3\u003e\n            \u003cp className=\"text-gray-400 text-sm mb-6\"\u003e\n              Join thousands of actors who are already using our platform to improve their craft.\n            \u003c/p\u003e\n            \n            \u003cButton \n              className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-bold\"\n              onClick={handleGetStarted}\n            \u003e\n              Get Started Now\n            \u003c/Button\u003e\n          \u003c/div\u003e\n          \n          \u003cdiv className=\"border-t border-gray-700 pt-4\"\u003e\n            \u003cdiv className=\"grid grid-cols-2 gap-4 text-center text-sm text-gray-400\"\u003e\n              \u003cdiv\u003e\n                \u003cdiv className=\"font-medium text-yellow-400\"\u003e✓ Free to start\u003c/div\u003e\n                \u003cdiv\u003eNo credit card required\u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv\u003e\n                \u003cdiv className=\"font-medium text-yellow-400\"\u003e✓ Instant access\u003c/div\u003e\n                \u003cdiv\u003eStart analyzing scripts today\u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/DialogContent\u003e\n    \u003c/Dialog\u003e\n  );\n};\n\nexport default AuthModal;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/CTASection.tsx",
//     "contents": "import { Button } from \"@/components/ui/button\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport AuthModal from \"./AuthModal\";\nconst CTASection = () =\u003e {\n  const navigate = useNavigate();\n  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);\n  const handleStartTrialClick = () =\u003e {\n    setIsAuthModalOpen(true);\n  };\n  const handleViewPricingClick = () =\u003e {\n    navigate(\"/membership\");\n  };\n  return \u003c\u003e\n      \u003csection className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-r from-yellow-500/10 via-orange-500/10 to-red-500/10\"\u003e\n        \u003cdiv className=\"max-w-4xl mx-auto text-center\"\u003e\n          \u003ch2 className=\"text-4xl md:text-5xl font-bold mb-6\"\u003e\n            Ready to Transform Your Performance?\n          \u003c/h2\u003e\n          \n          \u003cp className=\"text-xl text-gray-300 mb-8\"\u003e\n            Join thousands of actors who've elevated their craft with professional coaching\n          \u003c/p\u003e\n          \n          \u003cdiv className=\"flex flex-col sm:flex-row gap-4 justify-center\"\u003e\n            \u003cButton size=\"lg\" className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-bold px-8 py-4 text-lg\" onClick={handleStartTrialClick}\u003e\n              Start Free Trial\n            \u003c/Button\u003e\n            \u003cButton size=\"lg\" variant=\"outline\" onClick={handleViewPricingClick} className=\"border-white hover:bg-white px-8 py-4 text-lg text-zinc-950\"\u003e\n              View Pricing\n            \u003c/Button\u003e\n          \u003c/div\u003e\n          \n          \u003cdiv className=\"mt-8 text-sm text-gray-400\"\u003e\n            No credit card required • Cancel anytime\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n      \n      \u003cAuthModal isOpen={isAuthModalOpen} onClose={() =\u003e setIsAuthModalOpen(false)} /\u003e\n    \u003c/\u003e;\n};\nexport default CTASection;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/CoachingSession.tsx",
//     "contents": "import React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { MessageCircle, Send, ArrowLeft, Video, FileText, Target, AlertTriangle, Users, Download, FileDown, HelpCircle, ChevronDown, ChevronUp, Monitor } from 'lucide-react';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport jsPDF from 'jspdf';\nimport { DataUseDisclaimer } from '@/components/DataUseDisclaimer';\n\ninterface CoachingSessionProps {\n  analysis: any;\n  onBackToResults: () =\u003e void;\n  onStartVideoUpload: () =\u003e void;\n  onCoachingSessionCreated: (sessionId: string) =\u003e void;\n}\n\ninterface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\n// Helper function to parse markdown-style bold text\nconst parseText = (text: string) =\u003e {\n  if (!text) return text;\n  \n  // Split text by ** to find bold sections\n  const parts = text.split('**');\n  return parts.map((part, index) =\u003e {\n    // Every odd index (1, 3, 5...) should be bold\n    if (index % 2 === 1) {\n      return \u003cstrong key={index} className=\"font-semibold\"\u003e{part}\u003c/strong\u003e;\n    }\n    return part;\n  });\n};\n\n// Helper function to format content as structured list\nconst formatContent = (text: string) =\u003e {\n  if (!text) return null;\n  \n  // Check if text contains multiple distinct points (sentences ending with periods)\n  const points = text.split(/[.!?]\\s+/).filter(point =\u003e point.trim().length \u003e 10);\n  \n  if (points.length \u003c= 1) {\n    return (\n      \u003cdiv className=\"space-y-2\"\u003e\n        \u003cdiv className=\"whitespace-pre-wrap text-sm leading-relaxed\"\u003e\n          {parseText(text)}\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n  \n  return (\n    \u003cdiv className=\"space-y-3\"\u003e\n      {points.map((point, index) =\u003e {\n        const trimmedPoint = point.trim();\n        if (!trimmedPoint) return null;\n        \n        // Add period if missing\n        const formattedPoint = trimmedPoint.endsWith('.') || trimmedPoint.endsWith('!') || trimmedPoint.endsWith('?') \n          ? trimmedPoint \n          : trimmedPoint + '.';\n        \n        return (\n          \u003cdiv key={index} className=\"flex items-start gap-3 bg-muted/20 rounded-lg p-3\"\u003e\n            \u003cdiv className=\"w-2 h-2 bg-brand-yellow rounded-full mt-2 flex-shrink-0\"\u003e\u003c/div\u003e\n            \u003cdiv className=\"flex-1\"\u003e\n              \u003cdiv className=\"whitespace-pre-wrap text-sm leading-relaxed text-muted-foreground\"\u003e\n                {parseText(formattedPoint)}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      })}\n    \u003c/div\u003e\n  );\n};\n\nconst CoachingSession: React.FC\u003cCoachingSessionProps\u003e = ({\n  analysis,\n  onBackToResults,\n  onStartVideoUpload,\n  onCoachingSessionCreated\n}) =\u003e {\n  const [messages, setMessages] = useState\u003cChatMessage[]\u003e([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSummarizing, setIsSummarizing] = useState(false);\n  const [coachingSessionId, setCoachingSessionId] = useState\u003cstring\u003e('');\n  const [isQuickQuestionsOpen, setIsQuickQuestionsOpen] = useState(false);\n  const [selectedQuestion, setSelectedQuestion] = useState\u003cstring\u003e('');\n  const [script, setScript] = useState\u003cany\u003e(null);\n  const [loadingScript, setLoadingScript] = useState(true);\n  const messagesEndRef = useRef\u003cHTMLDivElement\u003e(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  // Standard acting coach questions\n  const standardQuestions = [\n    `What is my character's main objective in this scene?`,\n    `What obstacles does my character face and how do they overcome them?`,\n    `What is the subtext behind my character's dialogue in this scene?`,\n    `How should I adjust my performance using the ${analysis.acting_method} technique?`,\n    `What emotional beats should I focus on in this scene?`\n  ];\n\n  // Get the actual script content from analysis\n  const scriptContent = analysis.analysis_data?.script_content || analysis.emotional_beats?.script_content || 'No script content available';\n\n  useEffect(() =\u003e {\n    createCoachingSession();\n    fetchScriptData();\n    scrollToBottom();\n  }, []);\n\n  useEffect(() =\u003e {\n    scrollToBottom();\n  }, [messages]);\n\n  const fetchScriptData = async () =\u003e {\n    try {\n      const { data, error } = await supabase\n        .from('scripts')\n        .select('*')\n        .eq('id', analysis.script_id)\n        .single();\n\n      if (error) {\n        console.error('Error fetching script:', error);\n      } else {\n        setScript(data);\n      }\n    } catch (error) {\n      console.error('Error fetching script data:', error);\n    } finally {\n      setLoadingScript(false);\n    }\n  };\n\n  const scrollToBottom = () =\u003e {\n    messagesEndRef.current?.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'nearest'\n    });\n  };\n\n  const createCoachingSession = async () =\u003e {\n    if (!user) return;\n    try {\n      const { data, error } = await supabase.from('coaching_sessions').insert([{\n        user_id: user.id,\n        analysis_id: analysis.id,\n        chat_history: [],\n        session_status: 'active'\n      }]).select().single();\n      if (error) throw error;\n      setCoachingSessionId(data.id);\n      onCoachingSessionCreated(data.id);\n\n      // Add initial coaching message\n      const initialMessage: ChatMessage = {\n        role: 'assistant',\n        content: `Welcome to your personalized acting coaching session! I've analyzed your script and I'm ready to help you work on your character: **${analysis.selected_character}** using the **${analysis.acting_method}** method.\\n\\n${script?.scene_summary ? '📝 **Scene Summary Available**: I\\'ve generated a scene summary displayed above this chat - reference it while we work together!' : '📝 **Scene Summary**: If available, you\\'ll see a scene summary above this chat to reference during our session.'}\\n\\nI have your full script and analysis ready. What specific aspect of your performance would you like to work on today? We can focus on:\\n\\n• Specific scenes or dialogue\\n• Character motivation and objectives\\n• Emotional beats and transitions\\n• Line delivery and subtext\\n• ${analysis.acting_method} technique application\\n\\nWhat would you like to explore first?`,\n        timestamp: new Date()\n      };\n      setMessages([initialMessage]);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create coaching session.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const sendMessage = async (messageText?: string) =\u003e {\n    const textToSend = messageText || inputMessage;\n    if (!textToSend.trim() || isLoading || !coachingSessionId) return;\n    \n    const userMessage: ChatMessage = {\n      role: 'user',\n      content: textToSend,\n      timestamp: new Date()\n    };\n    const newMessages = [...messages, userMessage];\n    setMessages(newMessages);\n    \n    if (!messageText) {\n      setInputMessage('');\n    }\n    \n    setIsLoading(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('coaching-chat', {\n        body: {\n          message: textToSend,\n          analysis: analysis,\n          chatHistory: newMessages.map(msg =\u003e ({\n            role: msg.role,\n            content: msg.content\n          }))\n        }\n      });\n      if (error) throw error;\n      const assistantMessage: ChatMessage = {\n        role: 'assistant',\n        content: data.message,\n        timestamp: new Date()\n      };\n      const finalMessages = [...newMessages, assistantMessage];\n      setMessages(finalMessages);\n      await updateChatHistory(finalMessages);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to get coaching response.\",\n        variant: \"destructive\"\n      });\n    }\n    setIsLoading(false);\n  };\n\n  const updateChatHistory = async (chatMessages: ChatMessage[]) =\u003e {\n    try {\n      await supabase.from('coaching_sessions').update({\n        chat_history: chatMessages.map(msg =\u003e ({\n          role: msg.role,\n          content: msg.content,\n          timestamp: msg.timestamp.toISOString()\n        })),\n        updated_at: new Date().toISOString()\n      }).eq('id', coachingSessionId);\n    } catch (error) {\n      console.error('Failed to update chat history:', error);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) =\u003e {\n    if (e.key === 'Enter' \u0026\u0026 !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const handleQuestionSelect = (question: string) =\u003e {\n    setInputMessage(question);\n    setSelectedQuestion(question);\n    // Auto-expand questions if collapsed\n    if (!isQuickQuestionsOpen) {\n      setIsQuickQuestionsOpen(true);\n    }\n  };\n\n  const generateChatSummary = async () =\u003e {\n    if (messages.length === 0) {\n      toast({\n        title: \"No messages to summarize\",\n        description: \"Start a conversation with the AI coach first.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSummarizing(true);\n    try {\n      // Create a summary request using the coaching chat function\n      const chatContent = messages.map(msg =\u003e `${msg.role === 'user' ? 'Actor' : 'Coach'}: ${msg.content}`).join('\\n\\n');\n      \n      const summaryPrompt = `Please provide a comprehensive summary of this coaching session. Include:\n\n1. **Session Overview**: Brief description of what was discussed\n2. **Key Topics Covered**: Main areas of focus during the session\n3. **Coach Recommendations**: Important advice and suggestions given\n4. **Action Items**: Specific next steps or exercises recommended\n5. **Progress Notes**: Areas of improvement identified\n\nHere's the full conversation:\n\n${chatContent}`;\n\n      const { data, error } = await supabase.functions.invoke('coaching-chat', {\n        body: {\n          message: summaryPrompt,\n          analysis: analysis,\n          chatHistory: []\n        }\n      });\n\n      if (error) throw error;\n\n      // Generate PDF with the summary\n      await generatePDF(data.message);\n      \n      toast({\n        title: \"Summary generated!\",\n        description: \"Your coaching session summary has been downloaded.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate summary.\",\n        variant: \"destructive\"\n      });\n    }\n    setIsSummarizing(false);\n  };\n\n  const generatePDF = async (summary: string) =\u003e {\n    const doc = new jsPDF();\n    const pageWidth = doc.internal.pageSize.width;\n    const pageHeight = doc.internal.pageSize.height;\n    const margin = 20;\n    const maxWidth = pageWidth - (margin * 2);\n    \n    // Title\n    doc.setFontSize(20);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Acting Coaching Session Summary', margin, 30);\n    \n    // Session info\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`Character: ${analysis.selected_character}`, margin, 50);\n    doc.text(`Acting Method: ${analysis.acting_method}`, margin, 60);\n    doc.text(`Date: ${new Date().toLocaleDateString()}`, margin, 70);\n    \n    // Summary content\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Session Summary', margin, 90);\n    \n    doc.setFontSize(10);\n    doc.setFont('helvetica', 'normal');\n    \n    // Split summary text into lines that fit the page width\n    const summaryLines = doc.splitTextToSize(summary, maxWidth);\n    let yPosition = 105;\n    \n    summaryLines.forEach((line: string) =\u003e {\n      if (yPosition \u003e pageHeight - margin) {\n        doc.addPage();\n        yPosition = margin;\n      }\n      doc.text(line, margin, yPosition);\n      yPosition += 6;\n    });\n    \n    // Add full conversation if there's space or on new pages\n    if (messages.length \u003e 0) {\n      doc.addPage();\n      yPosition = margin;\n      \n      doc.setFontSize(14);\n      doc.setFont('helvetica', 'bold');\n      doc.text('Full Conversation', margin, yPosition);\n      yPosition += 20;\n      \n      doc.setFontSize(10);\n      doc.setFont('helvetica', 'normal');\n      \n      messages.forEach((message) =\u003e {\n        const sender = message.role === 'user' ? 'You' : 'AI Coach';\n        const timestamp = message.timestamp.toLocaleTimeString();\n        \n        // Add sender and timestamp\n        doc.setFont('helvetica', 'bold');\n        const headerText = `${sender} (${timestamp}):`;\n        doc.text(headerText, margin, yPosition);\n        yPosition += 8;\n        \n        // Add message content\n        doc.setFont('helvetica', 'normal');\n        const messageLines = doc.splitTextToSize(message.content, maxWidth);\n        \n        messageLines.forEach((line: string) =\u003e {\n          if (yPosition \u003e pageHeight - margin) {\n            doc.addPage();\n            yPosition = margin;\n          }\n          doc.text(line, margin, yPosition);\n          yPosition += 6;\n        });\n        \n        yPosition += 10; // Space between messages\n      });\n    }\n    \n    // Save the PDF\n    const fileName = `coaching-session-${analysis.selected_character}-${new Date().toISOString().split('T')[0]}.pdf`;\n    doc.save(fileName);\n  };\n\n  return (\n    \u003c\u003e\n      \u003cdiv className=\"space-y-6\"\u003e\n        {/* Header */}\n        \u003cdiv className=\"flex items-center justify-between\"\u003e\n          \u003cdiv className=\"flex items-center gap-4\"\u003e\n            \u003cButton onClick={onBackToResults} variant=\"outline\" size=\"sm\" className=\"text-foreground border-border hover:text-foreground bg-background hover:bg-muted\"\u003e\n              \u003cArrowLeft className=\"w-4 h-4 mr-2\" /\u003e\n              Back to Analysis\n            \u003c/Button\u003e\n            \u003ch1 className=\"text-2xl font-bold text-foreground\"\u003eAI Coaching Session\u003c/h1\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"flex gap-2\"\u003e\n            \u003cButton \n              onClick={generateChatSummary} \n              disabled={isSummarizing || messages.length === 0}\n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n            \u003e\n              {isSummarizing ? (\n                \u003cdiv className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"\u003e\u003c/div\u003e\n              ) : (\n                \u003cFileDown className=\"w-4 h-4 mr-2\" /\u003e\n              )}\n              {isSummarizing ? 'Generating...' : 'Download Summary'}\n            \u003c/Button\u003e\n            \u003cButton onClick={onStartVideoUpload} className=\"bg-purple-600 hover:bg-purple-700 text-white\"\u003e\n              \u003cVideo className=\"w-4 h-4 mr-2\" /\u003e\n              Upload Practice Video\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cdiv className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\"\u003e\n          {/* Script Text Panel */}\n          \u003cdiv className=\"lg:col-span-1\"\u003e\n            \u003cCard className=\"bg-card border-border h-full\"\u003e\n              \u003cCardHeader\u003e\n                \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n                  \u003cFileText className=\"w-5 h-5\" /\u003e\n                  Script Text\n                \u003c/CardTitle\u003e\n                \u003cCardDescription className=\"text-muted-foreground\"\u003e\n                  Edit your script text and work through specific scenes\n                \u003c/CardDescription\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent\u003e\n                \u003cTextarea value={scriptContent} readOnly className=\"bg-muted border-border text-foreground min-h-[400px] font-mono text-sm\" placeholder=\"Script content will appear here...\" /\u003e\n                \u003cdiv className=\"mt-2 text-xs text-muted-foreground\"\u003e\n                  {scriptContent.length} characters • Read-only view\n                \u003c/div\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          \u003c/div\u003e\n\n          {/* Right Side - Scene Summary and Chat Interface */}\n          \u003cdiv className=\"lg:col-span-2 space-y-6\"\u003e\n          {/* Scene Summary - Prominently displayed above chat */}\n          \u003cCard className=\"bg-gradient-to-r from-primary/5 to-accent/5 border-primary/20\"\u003e\n            \u003cCardHeader className=\"pb-4\"\u003e\n              \u003cCardTitle className=\"text-foreground flex items-center gap-3 text-xl\"\u003e\n                \u003cdiv className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\"\u003e\n                  \u003cFileText className=\"w-5 h-5 text-primary\" /\u003e\n                \u003c/div\u003e\n                Scene Summary\n              \u003c/CardTitle\u003e\n              \u003cCardDescription className=\"text-muted-foreground text-base\"\u003e\n                AI analysis of what's happening in your scene - reference this while asking questions\n              \u003c/CardDescription\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent\u003e\n              {loadingScript ? (\n                \u003cdiv className=\"bg-muted/20 rounded-lg p-6 text-center border-2 border-dashed border-muted-foreground/20\"\u003e\n                  \u003cdiv className=\"animate-spin rounded-full h-6 w-6 border-2 border-primary border-t-transparent mx-auto mb-3\"\u003e\u003c/div\u003e\n                  \u003cp className=\"text-muted-foreground text-base\"\u003eLoading scene summary...\u003c/p\u003e\n                \u003c/div\u003e\n              ) : script?.scene_summary ? (\n                \u003cdiv className=\"bg-primary/10 rounded-lg p-6 border-l-4 border-primary\"\u003e\n                  \u003cdiv className=\"flex items-start gap-4\"\u003e\n                    \u003cdiv className=\"w-2 h-2 bg-primary rounded-full mt-3 flex-shrink-0\"\u003e\u003c/div\u003e\n                    \u003cdiv className=\"flex-1\"\u003e\n                      \u003cp className=\"text-foreground text-base leading-relaxed font-medium\"\u003e\n                        {script.scene_summary}\n                      \u003c/p\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              ) : (\n                \u003cdiv className=\"bg-muted/20 rounded-lg p-6 text-center border-2 border-dashed border-muted-foreground/20\"\u003e\n                  \u003cFileText className=\"h-8 w-8 text-muted-foreground/40 mx-auto mb-3\" /\u003e\n                  \u003cp className=\"text-muted-foreground text-base\"\u003e\n                    No scene summary available yet. The scene summary should have been generated during analysis.\n                  \u003c/p\u003e\n                  \u003cp className=\"text-muted-foreground text-sm mt-2\"\u003e\n                    You can ask the coach about the scene even without a summary!\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              )}\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Chat Interface */}\n          \u003cCard className=\"bg-card border-border\"\u003e\n            \u003cCardHeader\u003e\n              \u003cdiv className=\"flex items-center justify-between\"\u003e\n                \u003cdiv\u003e\n                  \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n                    \u003cMessageCircle className=\"w-5 h-5\" /\u003e\n                    AI Acting Coach\n                  \u003c/CardTitle\u003e\n                  \u003cCardDescription className=\"text-muted-foreground\"\u003e\n                    Get personalized coaching for {analysis.selected_character} using {analysis.acting_method} method\n                  \u003c/CardDescription\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent className=\"flex flex-col h-[500px]\"\u003e\n              {/* Messages */}\n              \u003cScrollArea className=\"flex-1 pr-4 mb-4\"\u003e\n                \u003cdiv className=\"space-y-4\"\u003e\n                  {messages.map((message, index) =\u003e (\n                    \u003cdiv key={index} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\u003e\n                      \u003cdiv className={`max-w-[80%] p-3 rounded-lg ${message.role === 'user' ? 'bg-brand-yellow text-brand-yellow-foreground' : 'bg-muted text-foreground'}`}\u003e\n                        \u003cdiv className=\"whitespace-pre-wrap text-sm\"\u003e\n                          {parseText(message.content)}\n                        \u003c/div\u003e\n                        \u003cdiv className={`text-xs opacity-70 mt-1 ${message.role === 'user' ? 'text-brand-yellow-foreground/70' : 'text-muted-foreground'}`}\u003e\n                          {message.timestamp.toLocaleTimeString()}\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  ))}\n                  {isLoading \u0026\u0026 (\n                    \u003cdiv className=\"flex justify-start\"\u003e\n                      \u003cdiv className=\"bg-muted text-foreground p-3 rounded-lg\"\u003e\n                        \u003cdiv className=\"flex items-center gap-2\"\u003e\n                          \u003cdiv className=\"animate-spin rounded-full h-4 w-4 border-2 border-muted-foreground border-t-transparent\"\u003e\u003c/div\u003e\n                          \u003cspan className=\"text-sm\"\u003eCoach is thinking...\u003c/span\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  )}\n                  \u003cdiv ref={messagesEndRef} /\u003e\n                \u003c/div\u003e\n              \u003c/ScrollArea\u003e\n\n              {/* Input */}\n              \u003cdiv className=\"space-y-3\"\u003e\n                \u003cdiv className=\"flex gap-2\"\u003e\n                  \u003cInput \n                    value={inputMessage} \n                    onChange={e =\u003e setInputMessage(e.target.value)} \n                    onKeyPress={handleKeyPress} \n                    placeholder=\"Ask your acting coach anything...\" \n                    className=\"bg-input border-border text-foreground placeholder:text-muted-foreground\" \n                    disabled={isLoading} \n                  /\u003e\n                  \u003cButton \n                    onClick={() =\u003e sendMessage()} \n                    disabled={isLoading || !inputMessage.trim()} \n                    className=\"bg-brand-yellow hover:bg-brand-yellow/90 text-brand-yellow-foreground\"\n                  \u003e\n                    \u003cSend className=\"w-4 h-4\" /\u003e\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n\n                {/* Quick Coach Questions */}\n                \u003cCollapsible open={isQuickQuestionsOpen} onOpenChange={setIsQuickQuestionsOpen}\u003e\n                  \u003cCollapsibleTrigger asChild\u003e\n                    \u003cButton \n                      variant=\"ghost\" \n                      className=\"w-full justify-between text-muted-foreground hover:text-foreground hover:bg-muted/50 p-2 h-auto\"\n                    \u003e\n                      \u003cdiv className=\"flex items-center gap-2\"\u003e\n                        \u003cHelpCircle className=\"w-4 h-4 text-brand-yellow\" /\u003e\n                        \u003cspan className=\"text-sm font-medium\"\u003eQuick Coach Questions\u003c/span\u003e\n                      \u003c/div\u003e\n                      {isQuickQuestionsOpen ? (\n                        \u003cChevronUp className=\"w-4 h-4\" /\u003e\n                      ) : (\n                        \u003cChevronDown className=\"w-4 h-4\" /\u003e\n                      )}\n                    \u003c/Button\u003e\n                  \u003c/CollapsibleTrigger\u003e\n                  \u003cCollapsibleContent className=\"space-y-2 mt-2\"\u003e\n                    \u003cdiv className=\"bg-muted/30 rounded-lg p-3 border border-border\"\u003e\n                      \u003cp className=\"text-xs text-muted-foreground mb-3\"\u003eClick any question to add it to your input:\u003c/p\u003e\n                      \u003cdiv className=\"space-y-2\"\u003e\n                        {standardQuestions.map((question, index) =\u003e (\n                          \u003clabel \n                            key={index} \n                            className=\"flex items-start gap-3 p-2 rounded-md hover:bg-muted/50 cursor-pointer transition-colors group\"\n                          \u003e\n                            \u003cinput\n                              type=\"radio\"\n                              name=\"quickQuestion\"\n                              value={question}\n                              checked={selectedQuestion === question}\n                              onChange={() =\u003e handleQuestionSelect(question)}\n                              className=\"mt-1 w-4 h-4 text-brand-yellow bg-input border-border focus:ring-brand-yellow focus:ring-2\"\n                            /\u003e\n                            \u003cspan className=\"text-sm text-foreground group-hover:text-foreground flex-1 leading-relaxed\"\u003e\n                              {question}\n                            \u003c/span\u003e\n                          \u003c/label\u003e\n                        ))}\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/CollapsibleContent\u003e\n                \u003c/Collapsible\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      {/* Quick Reference - Updated Design */}\n      \u003cCard className=\"bg-card border-border\"\u003e\n        \u003cCardHeader\u003e\n          \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n            \u003cTarget className=\"w-5 h-5\" /\u003e\n            Quick Reference - Your Character Analysis\n          \u003c/CardTitle\u003e\n          \u003cCardDescription className=\"text-muted-foreground\"\u003e\n            Key insights to reference during your coaching session\n          \u003c/CardDescription\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent\u003e\n          \u003cdiv className=\"grid grid-cols-1 md:grid-cols-3 gap-6\"\u003e\n            \u003cdiv className=\"space-y-3\"\u003e\n              \u003cdiv className=\"flex items-center gap-3 mb-4\"\u003e\n                \u003cdiv className=\"p-2 bg-brand-yellow/20 rounded-lg\"\u003e\n                  \u003cTarget className=\"w-5 h-5 text-brand-yellow\" /\u003e\n                \u003c/div\u003e\n                \u003cdiv\u003e\n                  \u003ch4 className=\"text-foreground font-semibold text-lg\"\u003eObjectives\u003c/h4\u003e\n                  \u003cp className=\"text-muted-foreground text-sm\"\u003eWhat your character wants to achieve\u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"space-y-4\"\u003e\n                {analysis.objectives?.map((objective: string, index: number) =\u003e (\n                  \u003cdiv key={index} className=\"bg-muted/30 rounded-lg p-4 border-l-4 border-brand-yellow\"\u003e\n                    \u003cdiv className=\"flex items-start gap-3\"\u003e\n                      \u003cspan className=\"text-brand-yellow font-bold text-sm mt-1 flex-shrink-0 bg-brand-yellow/20 w-6 h-6 rounded-full flex items-center justify-center\"\u003e\n                        {index + 1}\n                      \u003c/span\u003e\n                      \u003cdiv className=\"flex-1\"\u003e\n                        {formatContent(objective)}\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                ))}\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv className=\"space-y-3\"\u003e\n              \u003cdiv className=\"flex items-center gap-3 mb-4\"\u003e\n                \u003cdiv className=\"p-2 bg-red-500/20 rounded-lg\"\u003e\n                  \u003cAlertTriangle className=\"w-5 h-5 text-red-400\" /\u003e\n                \u003c/div\u003e\n                \u003cdiv\u003e\n                  \u003ch4 className=\"text-foreground font-semibold text-lg\"\u003eObstacles\u003c/h4\u003e\n                  \u003cp className=\"text-muted-foreground text-sm\"\u003eWhat stands in your character's way\u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"space-y-4\"\u003e\n                {analysis.obstacles?.map((obstacle: string, index: number) =\u003e (\n                  \u003cdiv key={index} className=\"bg-muted/30 rounded-lg p-4 border-l-4 border-red-400\"\u003e\n                    \u003cdiv className=\"flex items-start gap-3\"\u003e\n                      \u003cspan className=\"text-red-400 font-bold text-sm mt-1 flex-shrink-0 bg-red-400/20 w-6 h-6 rounded-full flex items-center justify-center\"\u003e\n                        {index + 1}\n                      \u003c/span\u003e\n                      \u003cdiv className=\"flex-1\"\u003e\n                        {formatContent(obstacle)}\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                ))}\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv className=\"space-y-3\"\u003e\n              \u003cdiv className=\"flex items-center gap-3 mb-4\"\u003e\n                \u003cdiv className=\"p-2 bg-green-500/20 rounded-lg\"\u003e\n                  \u003cUsers className=\"w-5 h-5 text-green-400\" /\u003e\n                \u003c/div\u003e\n                \u003cdiv\u003e\n                  \u003ch4 className=\"text-foreground font-semibold text-lg\"\u003eTactics\u003c/h4\u003e\n                  \u003cp className=\"text-muted-foreground text-sm\"\u003eHow your character tries to achieve their goals\u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"space-y-4\"\u003e\n                {analysis.tactics?.map((tactic: string, index: number) =\u003e (\n                  \u003cdiv key={index} className=\"bg-muted/30 rounded-lg p-4 border-l-4 border-green-400\"\u003e\n                    \u003cdiv className=\"flex items-start gap-3\"\u003e\n                      \u003cspan className=\"text-green-400 font-bold text-sm mt-1 flex-shrink-0 bg-green-400/20 w-6 h-6 rounded-full flex items-center justify-center\"\u003e\n                        {index + 1}\n                      \u003c/span\u003e\n                      \u003cdiv className=\"flex-1\"\u003e\n                        {formatContent(tactic)}\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                ))}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n    \u003c/div\u003e\n    \n    \u003cDataUseDisclaimer className=\"mt-6\" /\u003e\n    \u003c/\u003e\n  );\n};\n\nexport default CoachingSession;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/DataUseDisclaimer.tsx",
//     "contents": "import { Link } from \"react-router-dom\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DataUseDisclaimerProps {\n  size?: \"sm\" | \"md\";\n  className?: string;\n  showLinks?: boolean;\n}\n\nexport function DataUseDisclaimer({ \n  size = \"sm\", \n  className,\n  showLinks = true \n}: DataUseDisclaimerProps) {\n  const textSizeClass = size === \"md\" ? \"text-sm\" : \"text-xs sm:text-sm\";\n  \n  return (\n    \u003cdiv className={cn(\n      textSizeClass,\n      \"text-muted-foreground mt-3\",\n      className\n    )}\u003e\n      \u003cp\u003e\n        * We will never use your scripts, voice, video, likeness, or info outside of this app. \n        {showLinks ? (\n          \u003c\u003e\n            {\" \"}As a member, you can delete all scenes you've uploaded anytime from your{\" \"}\n            \u003cLink to=\"/dashboard\" className=\"underline hover:text-foreground transition-colors\"\u003e\n              Dashboard\n            \u003c/Link\u003e\n            . View our{\" \"}\n            \u003cLink to=\"/privacy\" className=\"underline hover:text-foreground transition-colors\"\u003e\n              Privacy Policy\n            \u003c/Link\u003e\n            {\" \"}and{\" \"}\n            \u003cLink to=\"/terms\" className=\"underline hover:text-foreground transition-colors\"\u003e\n              Terms of Use\n            \u003c/Link\u003e\n            .\n          \u003c/\u003e\n        ) : (\n          \" As a member, you can delete all scenes you've uploaded anytime from your Dashboard.\"\n        )}\n      \u003c/p\u003e\n    \u003c/div\u003e\n  );\n}",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/DialogueMode.tsx",
//     "contents": "\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Play, Pause, RotateCcw, Users, Mic, MicOff, Volume2, ChevronUp, ChevronDown, Minus, Plus } from 'lucide-react';\nimport { parseScript, DialogueLine, ScriptParsing } from '@/utils/scriptParser';\nimport { useTextToSpeech } from '@/hooks/useTextToSpeech';\nimport { useToast } from '@/hooks/use-toast';\nimport FloatingSpeedControl from '@/components/FloatingSpeedControl';\n\ninterface DialogueModeProps {\n  script: string;\n  onBack: () =\u003e void;\n}\n\nconst DialogueMode: React.FC\u003cDialogueModeProps\u003e = ({ script, onBack }) =\u003e {\n  const [parsedScript, setParsedScript] = useState\u003cScriptParsing | null\u003e(null);\n  const [selectedCharacter, setSelectedCharacter] = useState\u003cstring\u003e('');\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [userTurn, setUserTurn] = useState(false);\n  const [pauseTimeout, setPauseTimeout] = useState\u003cNodeJS.Timeout | null\u003e(null);\n  const [speed, setSpeed] = useState(3); // Default to normal speed\n  \n  const scrollRef = useRef\u003cHTMLDivElement\u003e(null);\n  const { speak, stop, isPlaying } = useTextToSpeech();\n  const { toast } = useToast();\n\n  // Speed labels for dialogue context\n  const speedLabels: {[key: number]: string} = {\n    1: 'Very Slow',\n    2: 'Slow', \n    3: 'Normal',\n    4: 'Fast',\n    5: 'Very Fast'\n  };\n\n  // Speed multipliers for timing calculations\n  const getSpeedMultiplier = useCallback((currentSpeed: number) =\u003e {\n    const multipliers = {\n      1: 2.0,    // Very slow - 2x longer pauses\n      2: 1.5,    // Slow - 1.5x longer pauses\n      3: 1.0,    // Normal - standard timing\n      4: 0.7,    // Fast - 0.7x pauses\n      5: 0.5     // Very fast - 0.5x pauses\n    };\n    return multipliers[currentSpeed as keyof typeof multipliers] || 1.0;\n  }, []);\n\n  // Get speech rate based on speed\n  const getSpeechRate = useCallback((currentSpeed: number) =\u003e {\n    const rates = {\n      1: 0.7,    // Very slow speech\n      2: 0.85,   // Slow speech\n      3: 1.0,    // Normal speech\n      4: 1.2,    // Fast speech\n      5: 1.4     // Very fast speech\n    };\n    return rates[currentSpeed as keyof typeof rates] || 1.0;\n  }, []);\n\n  // Handle speed changes\n  const handleSpeedChange = useCallback((newSpeed: number) =\u003e {\n    const clampedSpeed = Math.max(1, Math.min(5, newSpeed));\n    setSpeed(clampedSpeed);\n    toast({\n      title: \"Speed Changed\",\n      description: `Dialogue speed set to ${speedLabels[clampedSpeed]}`,\n    });\n  }, [speedLabels, toast]);\n\n  // Parse script on mount\n  useEffect(() =\u003e {\n    if (script) {\n      const parsed = parseScript(script);\n      setParsedScript(parsed);\n      \n      if (parsed.characters.length === 0 || parsed.isPlainText) {\n        toast({\n          title: \"No Dialogue Characters Found\",\n          description: \"This appears to be plain text. Dialogue mode requires character names in CAPS followed by dialogue.\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  }, [script, toast]);\n\n  // Keyboard navigation for dialogue mode\n  useEffect(() =\u003e {\n    const handleKeyPress = (e: KeyboardEvent) =\u003e {\n      if (e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLInputElement) return;\n      \n      switch (e.code) {\n        case 'ArrowUp':\n          e.preventDefault();\n          goToPreviousLine();\n          break;\n        case 'ArrowDown':\n          e.preventDefault();\n          goToNextLine();\n          break;\n        case 'Space':\n          e.preventDefault();\n          if (isActive \u0026\u0026 userTurn) {\n            handleUserFinished();\n          } else if (!isActive) {\n            startDialogue();\n          }\n          break;\n        case 'Digit1':\n          e.preventDefault();\n          handleSpeedChange(1);\n          break;\n        case 'Digit2':\n          e.preventDefault();\n          handleSpeedChange(2);\n          break;\n        case 'Digit3':\n          e.preventDefault();\n          handleSpeedChange(3);\n          break;\n        case 'Digit4':\n          e.preventDefault();\n          handleSpeedChange(4);\n          break;\n        case 'Digit5':\n          e.preventDefault();\n          handleSpeedChange(5);\n          break;\n        case 'Equal':\n        case 'NumpadAdd':\n          e.preventDefault();\n          handleSpeedChange(speed + 1);\n          break;\n        case 'Minus':\n        case 'NumpadSubtract':\n          e.preventDefault();\n          handleSpeedChange(speed - 1);\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () =\u003e window.removeEventListener('keydown', handleKeyPress);\n  }, [isActive, userTurn, currentLineIndex, speed, handleSpeedChange]);\n\n  // Mouse wheel navigation for dialogue mode\n  useEffect(() =\u003e {\n    const handleWheel = (e: WheelEvent) =\u003e {\n      if (!scrollRef.current?.contains(e.target as Node)) return;\n      \n      e.preventDefault();\n      if (e.deltaY \u003e 0) {\n        goToNextLine();\n      } else {\n        goToPreviousLine();\n      }\n    };\n\n    const scrollElement = scrollRef.current;\n    if (scrollElement) {\n      scrollElement.addEventListener('wheel', handleWheel, { passive: false });\n      \n      return () =\u003e {\n        scrollElement.removeEventListener('wheel', handleWheel);\n      };\n    }\n  }, [currentLineIndex]);\n\n  const currentLine = parsedScript?.dialogues[currentLineIndex];\n  const isMyTurn = currentLine \u0026\u0026 currentLine.character === selectedCharacter;\n  const totalLines = parsedScript?.dialogues.length || 0;\n\n  const goToNextLine = useCallback(() =\u003e {\n    if (currentLineIndex \u003c totalLines - 1) {\n      setCurrentLineIndex(prev =\u003e prev + 1);\n      if (isActive) {\n        // Pause auto-play when manually navigating\n        setIsActive(false);\n        stop();\n        if (pauseTimeout) {\n          clearTimeout(pauseTimeout);\n          setPauseTimeout(null);\n        }\n      }\n    }\n  }, [currentLineIndex, totalLines, isActive, stop, pauseTimeout]);\n\n  const goToPreviousLine = useCallback(() =\u003e {\n    if (currentLineIndex \u003e 0) {\n      setCurrentLineIndex(prev =\u003e prev - 1);\n      if (isActive) {\n        // Pause auto-play when manually navigating\n        setIsActive(false);\n        stop();\n        if (pauseTimeout) {\n          clearTimeout(pauseTimeout);\n          setPauseTimeout(null);\n        }\n      }\n    }\n  }, [currentLineIndex, isActive, stop, pauseTimeout]);\n\n  const nextLine = useCallback(() =\u003e {\n    if (currentLineIndex \u003c totalLines - 1) {\n      setCurrentLineIndex(prev =\u003e prev + 1);\n    } else {\n      setIsActive(false);\n      toast({\n        title: \"Scene Complete\",\n        description: \"You've reached the end of the script!\"\n      });\n    }\n  }, [currentLineIndex, totalLines, toast]);\n\n  // Calculate automatic pause based on text length and speed\n  const calculatePauseTime = useCallback((text: string) =\u003e {\n    const wordsPerMinute = 150; // Average reading speed\n    const words = text.split(' ').length;\n    const readingTimeMs = (words / wordsPerMinute) * 60 * 1000;\n    // Apply speed multiplier\n    const speedMultiplier = getSpeedMultiplier(speed);\n    // Add extra buffer time for user to process and respond\n    const baseTime = Math.max(readingTimeMs + 2000, 3000); // Minimum 3 seconds\n    return baseTime * speedMultiplier;\n  }, [speed, getSpeedMultiplier]);\n\n  const speakCurrentLine = useCallback(async () =\u003e {\n    if (!currentLine || isMyTurn) return;\n\n    try {\n      // Choose voice based on character\n      const voiceMap: {[key: string]: string} = {\n        default: 'english',\n        // Add more character-specific voices as needed\n      };\n      \n      const voice = voiceMap[currentLine.character] || 'english';\n      const speechRate = getSpeechRate(speed);\n      \n      await speak(currentLine.text, { voice, speed: speechRate });\n      \n      // Calculate automatic pause based on sentence length and speed\n      const pauseTime = calculatePauseTime(currentLine.text);\n      \n      // After AI speaks, wait for calculated pause then move to next line\n      const timeout = setTimeout(() =\u003e {\n        nextLine();\n      }, pauseTime);\n      \n      setPauseTimeout(timeout);\n      \n    } catch (error) {\n      console.error('Error speaking line:', error);\n      toast({\n        title: \"Speech Error\",\n        description: \"Failed to play AI dialogue. Moving to next line.\",\n        variant: \"destructive\"\n      });\n      nextLine();\n    }\n  }, [currentLine, isMyTurn, speak, calculatePauseTime, nextLine, toast, getSpeechRate, speed]);\n\n  // Auto-scroll to current line\n  useEffect(() =\u003e {\n    if (scrollRef.current \u0026\u0026 currentLineIndex \u003e= 0) {\n      const currentElement = scrollRef.current.querySelector(`[data-line-index=\"${currentLineIndex}\"]`);\n      if (currentElement) {\n        currentElement.scrollIntoView({ \n          behavior: 'smooth', \n          block: 'center' \n        });\n      }\n    }\n  }, [currentLineIndex]);\n\n  // Auto-play AI lines and manage user turns\n  useEffect(() =\u003e {\n    if (isActive \u0026\u0026 currentLine) {\n      if (isMyTurn) {\n        // It's user's turn - set user turn flag\n        setUserTurn(true);\n      } else {\n        // It's AI's turn - speak after small delay (adjusted by speed)\n        const delayMultiplier = getSpeedMultiplier(speed);\n        const delay = 1000 * delayMultiplier;\n        \n        const timer = setTimeout(() =\u003e {\n          speakCurrentLine();\n        }, delay);\n\n        return () =\u003e clearTimeout(timer);\n      }\n    }\n  }, [isActive, currentLine, isMyTurn, speakCurrentLine, speed, getSpeedMultiplier]);\n\n  const startDialogue = () =\u003e {\n    if (!selectedCharacter) {\n      toast({\n        title: \"Select Character\",\n        description: \"Please select your character first.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsActive(true);\n    setUserTurn(false);\n  };\n\n  const pauseDialogue = () =\u003e {\n    setIsActive(false);\n    stop();\n    if (pauseTimeout) {\n      clearTimeout(pauseTimeout);\n      setPauseTimeout(null);\n    }\n  };\n\n  const resetDialogue = () =\u003e {\n    setIsActive(false);\n    setCurrentLineIndex(0);\n    setUserTurn(false);\n    stop();\n    if (pauseTimeout) {\n      clearTimeout(pauseTimeout);\n      setPauseTimeout(null);\n    }\n  };\n\n  const handleUserFinished = () =\u003e {\n    setUserTurn(false);\n    // Automatically advance after user finishes speaking (adjusted by speed)\n    const delayMultiplier = getSpeedMultiplier(speed);\n    const delay = 1000 * delayMultiplier;\n    \n    const timeout = setTimeout(() =\u003e {\n      nextLine();\n    }, delay);\n    setPauseTimeout(timeout);\n  };\n\n  if (!parsedScript) {\n    return (\n      \u003cdiv className=\"p-6\"\u003e\n        \u003cCard\u003e\n          \u003cCardContent className=\"p-6\"\u003e\n            \u003cp\u003eLoading dialogue mode...\u003c/p\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  if (parsedScript.characters.length === 0 || parsedScript.isPlainText) {\n    return (\n      \u003cdiv className=\"p-6\"\u003e\n        \u003cCard\u003e\n          \u003cCardContent className=\"p-6\"\u003e\n            \u003cdiv className=\"text-center space-y-4\"\u003e\n              \u003ch3 className=\"text-lg font-semibold\"\u003eNo Dialogue Characters Detected\u003c/h3\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                This appears to be plain text or doesn't contain dialogue in the expected format. \n                For dialogue mode, format your script with character names in ALL CAPS followed by their dialogue:\n              \u003c/p\u003e\n              \u003cdiv className=\"bg-muted p-4 rounded-lg text-left\"\u003e\n                \u003cpre className=\"text-sm\"\u003e\n{`JOHN: Hello, how are you today?\nMARY: I'm doing great, thanks for asking!\nJOHN: That's wonderful to hear.`}\n                \u003c/pre\u003e\n              \u003c/div\u003e\n              \u003cp className=\"text-sm text-muted-foreground\"\u003e\n                You can still use the regular script editor for plain text scripts.\n              \u003c/p\u003e\n              \u003cButton onClick={onBack}\u003eBack to Script\u003c/Button\u003e\n            \u003c/div\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  return (\n    \u003cdiv className=\"flex h-screen\"\u003e\n      {/* Settings Panel */}\n      \u003cdiv className=\"w-80 border-r border-border bg-card p-6 overflow-y-auto\"\u003e\n        \u003cdiv className=\"space-y-6\"\u003e\n          \u003cdiv className=\"flex items-center justify-between\"\u003e\n            \u003ch2 className=\"text-xl font-bold\"\u003eDialogue Mode\u003c/h2\u003e\n            \u003cUsers className=\"w-5 h-5\" /\u003e\n          \u003c/div\u003e\n\n          {/* Character Selection */}\n          \u003cCard\u003e\n            \u003cCardHeader\u003e\n              \u003cCardTitle className=\"text-sm\"\u003eSetup\u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent className=\"space-y-4\"\u003e\n              \u003cdiv\u003e\n                \u003cLabel\u003eSelect Your Character\u003c/Label\u003e\n                \u003cSelect value={selectedCharacter} onValueChange={setSelectedCharacter}\u003e\n                  \u003cSelectTrigger\u003e\n                    \u003cSelectValue placeholder=\"Choose your character\" /\u003e\n                  \u003c/SelectTrigger\u003e\n                  \u003cSelectContent\u003e\n                    {parsedScript.characters.map(character =\u003e (\n                      \u003cSelectItem key={character} value={character}\u003e\n                        {character}\n                      \u003c/SelectItem\u003e\n                    ))}\n                  \u003c/SelectContent\u003e\n                \u003c/Select\u003e\n              \u003c/div\u003e\n\n              \u003cdiv className=\"flex gap-2\"\u003e\n                \u003cButton \n                  onClick={startDialogue} \n                  disabled={!selectedCharacter || isActive}\n                  className=\"flex-1\"\n                \u003e\n                  \u003cPlay className=\"w-4 h-4 mr-2\" /\u003e\n                  Start Scene\n                \u003c/Button\u003e\n                \n                \u003cButton \n                  onClick={pauseDialogue} \n                  disabled={!isActive}\n                  variant=\"outline\"\n                \u003e\n                  \u003cPause className=\"w-4 h-4 mr-2\" /\u003e\n                  Pause\n                \u003c/Button\u003e\n                \n                \u003cButton \n                  onClick={resetDialogue}\n                  variant=\"outline\"\n                \u003e\n                  \u003cRotateCcw className=\"w-4 h-4 mr-2\" /\u003e\n                  Reset\n                \u003c/Button\u003e\n              \u003c/div\u003e\n\n              {/* Manual Navigation Controls */}\n              \u003cdiv className=\"flex gap-2\"\u003e\n                \u003cButton \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={goToPreviousLine}\n                  disabled={currentLineIndex === 0}\n                  className=\"flex-1\"\n                \u003e\n                  \u003cChevronUp className=\"w-4 h-4 mr-1\" /\u003e\n                  Previous\n                \u003c/Button\u003e\n                \u003cButton \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={goToNextLine}\n                  disabled={currentLineIndex \u003e= totalLines - 1}\n                  className=\"flex-1\"\n                \u003e\n                  \u003cChevronDown className=\"w-4 h-4 mr-1\" /\u003e\n                  Next\n                \u003c/Button\u003e\n              \u003c/div\u003e\n\n              \u003cdiv className=\"text-sm text-muted-foreground\"\u003e\n                Found {parsedScript.characters.length} characters: {parsedScript.characters.join(', ')}\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Speed Control */}\n          \u003cCard\u003e\n            \u003cCardHeader\u003e\n              \u003cCardTitle className=\"text-sm\"\u003eDialogue Speed\u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent className=\"space-y-4\"\u003e\n              \u003cdiv className=\"flex items-center gap-2\"\u003e\n                \u003cButton\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() =\u003e handleSpeedChange(speed - 1)}\n                  disabled={speed \u003c= 1}\n                  className=\"h-8 w-8 p-0\"\n                \u003e\n                  \u003cMinus className=\"w-4 h-4\" /\u003e\n                \u003c/Button\u003e\n                \n                \u003cdiv className=\"flex flex-col items-center flex-1\"\u003e\n                  \u003cBadge variant=\"secondary\" className=\"text-xs\"\u003e\n                    {speed}x\n                  \u003c/Badge\u003e\n                  \u003cspan className=\"text-xs text-muted-foreground\"\u003e\n                    {speedLabels[speed]}\n                  \u003c/span\u003e\n                \u003c/div\u003e\n                \n                \u003cButton\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() =\u003e handleSpeedChange(speed + 1)}\n                  disabled={speed \u003e= 5}\n                  className=\"h-8 w-8 p-0\"\n                \u003e\n                  \u003cPlus className=\"w-4 h-4\" /\u003e\n                \u003c/Button\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv className=\"text-xs text-muted-foreground\"\u003e\n                Keys: 1-5 for presets, +/- to adjust\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Navigation Help */}\n          \u003cCard\u003e\n            \u003cCardContent className=\"p-4\"\u003e\n              \u003cdiv className=\"text-xs space-y-1\"\u003e\n                \u003cdiv\u003e\u003cstrong\u003eNavigation:\u003c/strong\u003e\u003c/div\u003e\n                \u003cdiv\u003e↑/↓ arrows: Navigate lines\u003c/div\u003e\n                \u003cdiv\u003eMouse wheel: Navigate lines\u003c/div\u003e\n                \u003cdiv\u003eSpace: Continue/Start scene\u003c/div\u003e\n                \u003cdiv\u003e1-5: Speed presets\u003c/div\u003e\n                \u003cdiv\u003e+/-: Adjust speed\u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Current Line Status */}\n          {currentLine \u0026\u0026 (\n            \u003cCard className={`border-2 ${isMyTurn ? 'border-primary' : 'border-secondary'}`}\u003e\n              \u003cCardHeader className=\"pb-3\"\u003e\n                \u003cdiv className=\"flex items-center justify-between\"\u003e\n                  \u003cdiv className=\"flex items-center gap-2\"\u003e\n                    \u003cBadge variant={isMyTurn ? 'default' : 'secondary'}\u003e\n                      {currentLine.character}\n                    \u003c/Badge\u003e\n                    {isMyTurn ? (\n                      \u003cMic className=\"w-4 h-4 text-primary\" /\u003e\n                    ) : (\n                      \u003cVolume2 className=\"w-4 h-4 text-secondary\" /\u003e\n                    )}\n                  \u003c/div\u003e\n                  \u003cspan className=\"text-sm text-muted-foreground\"\u003e\n                    Line {currentLineIndex + 1} of {totalLines}\n                  \u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent className=\"pt-0\"\u003e\n                {isActive \u0026\u0026 isMyTurn \u0026\u0026 (\n                  \u003cdiv className=\"p-3 bg-primary/10 rounded-lg\"\u003e\n                    \u003cdiv className=\"flex items-center justify-between\"\u003e\n                      \u003cspan className=\"text-sm font-medium\"\u003eYour turn to speak\u003c/span\u003e\n                      \u003cButton \n                        onClick={handleUserFinished}\n                        size=\"sm\"\n                        variant=\"outline\"\n                      \u003e\n                        I'm finished\n                      \u003c/Button\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                )}\n                \n                {isActive \u0026\u0026 !isMyTurn \u0026\u0026 isPlaying \u0026\u0026 (\n                  \u003cdiv className=\"p-3 bg-secondary/10 rounded-lg\"\u003e\n                    \u003cdiv className=\"flex items-center gap-2\"\u003e\n                      \u003cVolume2 className=\"w-4 h-4 animate-pulse\" /\u003e\n                      \u003cspan className=\"text-sm\"\u003eAI is speaking...\u003c/span\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                )}\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          )}\n\n          {/* Script Progress */}\n          \u003cCard\u003e\n            \u003cCardContent className=\"p-4\"\u003e\n              \u003cdiv className=\"flex items-center justify-between mb-2\"\u003e\n                \u003cspan className=\"text-sm text-muted-foreground\"\u003eScene Progress\u003c/span\u003e\n                \u003cspan className=\"text-sm font-mono\"\u003e\n                  {Math.round(((currentLineIndex + 1) / totalLines) * 100)}%\n                \u003c/span\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"w-full bg-muted rounded-full h-2\"\u003e\n                \u003cdiv \n                  className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${((currentLineIndex + 1) / totalLines) * 100}%` }}\n                /\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Back Button */}\n          \u003cButton variant=\"outline\" onClick={onBack} className=\"w-full\"\u003e\n            Back to Script\n          \u003c/Button\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      {/* Script Display */}\n      \u003cdiv className=\"flex-1 bg-black relative overflow-hidden\"\u003e\n        {/* Floating Speed Control */}\n        \u003cFloatingSpeedControl\n          speed={speed}\n          onSpeedChange={handleSpeedChange}\n          speedLabels={speedLabels}\n          className=\"absolute top-4 right-4 z-10\"\n        /\u003e\n        \n        \u003cdiv \n          className=\"h-full overflow-y-auto scrollbar-hide\"\n          ref={scrollRef}\n          style={{\n            scrollBehavior: 'smooth'\n          }}\n        \u003e\n          \u003cdiv className=\"min-h-screen py-8 px-8\"\u003e\n            \u003cdiv className=\"text-center leading-relaxed tracking-wide text-2xl font-sans text-white whitespace-pre-wrap\"\u003e\n              {parsedScript.dialogues.map((line, index) =\u003e {\n                const isCurrentLine = index === currentLineIndex;\n                const isMyLine = line.character === selectedCharacter;\n                const isPastLine = index \u003c currentLineIndex;\n                \n                return (\n                  \u003cdiv \n                    key={index} \n                    data-line-index={index}\n                    className={`mb-6 transition-all duration-500 cursor-pointer ${\n                      isCurrentLine \n                        ? isMyLine \n                          ? 'text-yellow-400 font-bold scale-105 bg-yellow-400/10 p-4 rounded-lg border-2 border-yellow-400' \n                          : 'text-blue-400 font-bold scale-105 bg-blue-400/10 p-4 rounded-lg border-2 border-blue-400'\n                        : isPastLine \n                          ? 'text-gray-500 opacity-50'\n                          : 'text-white hover:text-gray-300'\n                    }`}\n                    onClick={() =\u003e setCurrentLineIndex(index)}\n                  \u003e\n                    \u003cdiv className=\"font-bold text-lg mb-2\"\u003e{line.character}:\u003c/div\u003e\n                    \u003cdiv\u003e{line.text}\u003c/div\u003e\n                  \u003c/div\u003e\n                );\n              })}\n              \u003cdiv className=\"h-screen\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default DialogueMode;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ErrorBoundary.tsx",
//     "contents": "import React, { Component, ReactNode } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { AlertTriangle, RefreshCw } from 'lucide-react';\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nclass ErrorBoundary extends Component\u003cProps, State\u003e {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return {\n      hasError: true,\n      error,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    console.error('Build timestamp:', new Date().toISOString());\n    console.error('User agent:', navigator.userAgent);\n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  handleReset = () =\u003e {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        \u003cdiv className=\"min-h-screen bg-background flex items-center justify-center p-4\"\u003e\n          \u003cCard className=\"w-full max-w-md\"\u003e\n            \u003cCardHeader className=\"text-center\"\u003e\n              \u003cdiv className=\"mx-auto mb-4 w-16 h-16 bg-destructive/10 rounded-full flex items-center justify-center\"\u003e\n                \u003cAlertTriangle className=\"w-8 h-8 text-destructive\" /\u003e\n              \u003c/div\u003e\n              \u003cCardTitle\u003eSomething went wrong\u003c/CardTitle\u003e\n              \u003cCardDescription\u003e\n                An unexpected error occurred. Please try refreshing the page.\n              \u003c/CardDescription\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent className=\"space-y-4\"\u003e\n              \u003cButton \n                onClick={this.handleReset} \n                className=\"w-full\"\n                variant=\"default\"\n              \u003e\n                \u003cRefreshCw className=\"w-4 h-4 mr-2\" /\u003e\n                Try Again\n              \u003c/Button\u003e\n              \u003cButton \n                onClick={() =\u003e window.location.href = '/'} \n                className=\"w-full\"\n                variant=\"outline\"\n              \u003e\n                Go Home\n              \u003c/Button\u003e\n              {this.state.error \u0026\u0026 (\n                \u003cdetails className=\"mt-4 p-4 bg-muted rounded-lg text-sm\"\u003e\n                  \u003csummary className=\"cursor-pointer font-medium\"\u003eTechnical Details\u003c/summary\u003e\n                  \u003cdiv className=\"mt-2 space-y-2 text-xs\"\u003e\n                    \u003cdiv\u003e\u003cstrong\u003eError:\u003c/strong\u003e {this.state.error.toString()}\u003c/div\u003e\n                    \u003cdiv\u003e\u003cstrong\u003eTimestamp:\u003c/strong\u003e {new Date().toISOString()}\u003c/div\u003e\n                    \u003cdiv\u003e\u003cstrong\u003eURL:\u003c/strong\u003e {window.location.href}\u003c/div\u003e\n                    {this.state.errorInfo?.componentStack \u0026\u0026 (\n                      \u003cpre className=\"mt-2 whitespace-pre-wrap\"\u003e\n                        \u003cstrong\u003eComponent Stack:\u003c/strong\u003e\n                        {this.state.errorInfo.componentStack}\n                      \u003c/pre\u003e\n                    )}\n                  \u003c/div\u003e\n                \u003c/details\u003e\n              )}\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        \u003c/div\u003e\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/FAQSection.tsx",
//     "contents": "import { useState } from \"react\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport type FAQItem = {\n  question: string;\n  answer: string;\n};\n\nconst defaultItems: FAQItem[] = [\n  {\n    question: \"What is MyAuditionAI and who is it for?\",\n    answer:\n      \"MyAuditionAI helps actors analyze scripts, rehearse their lines, and get AI-powered feedback on videos and headshots—great for students, pros, and coaches.\",\n  },\n  {\n    question: \"How does Scene Analysis work?\",\n    answer:\n      \"Upload a PDF or paste your text. Our AI extracts characters, beats, and notes. You can manage results in your Dashboard and export reports as PDF.\",\n  },\n  {\n    question: \"Do you evaluate audition videos?\",\n    answer:\n      \"Yes. Upload a take to get structured notes (framing, delivery, pacing) and a shareable report you can email to yourself or a coach.\",\n  },\n  {\n    question: \"What file types are supported?\",\n    answer:\n      \"PDF and plain text for scripts; common video formats for analysis. If your script is an image, use OCR upload to extract text first.\",\n  },\n  {\n    question: \"Is my data private?\",\n    answer:\n      \"We never sell your data. Your uploads are secured via our Supabase backend. You control your content and can delete items in Dashboard.\",\n  },\n  {\n    question: \"How does billing work?\",\n    answer:\n      \"See Membership for tiers. Pay with card or PayPal. You can cancel anytime from your account and keep access until the end of the period.\",\n  },\n  {\n    question: \"Is there a free trial or usage limit?\",\n    answer:\n      \"We offer limited free usage for new users to explore features. For extended access and higher limits, choose a Membership plan.\",\n  },\n  {\n    question: \"Can I bring ACTORS AI to my school or studio?\",\n    answer:\n      \"Yes. Use the Contact page to reach us—select the preset for bringing the program to your school and we’ll follow up with details.\",\n  },\n  {\n    question: \"Who are the instructors/coaches?\",\n    answer:\n      \"Industry pros including Rick Zieff and Will Roberts contribute expert insight, combining traditional training with modern AI tools.\",\n  },\n];\n\ninterface FAQSectionProps {\n  items?: FAQItem[];\n  compact?: boolean;\n  showQuestionBox?: boolean;\n  className?: string;\n}\n\nexport default function FAQSection({\n  items = defaultItems,\n  compact = false,\n  showQuestionBox = false,\n  className,\n}: FAQSectionProps) {\n  const navigate = useNavigate();\n  const [question, setQuestion] = useState(\"\");\n  const visible = compact ? items.slice(0, 6) : items;\n\n  const submitQuestion = () =\u003e {\n    if (!question.trim()) return;\n    navigate(\"/contact\", {\n      state: {\n        subject: \"Question about MyAuditionAI\",\n        message: `Hi team, I have a question: ${question}`,\n      },\n    });\n  };\n\n  return (\n    \u003csection className={className} aria-labelledby=\"faq-heading\"\u003e\n      \u003cdiv className=\"max-w-4xl mx-auto\"\u003e\n        \u003ch2 id=\"faq-heading\" className=\"text-3xl font-bold mb-6 text-white\"\u003e\n          Frequently Asked Questions\n        \u003c/h2\u003e\n        \u003cAccordion type=\"single\" collapsible className=\"w-full\"\u003e\n          {visible.map((item, idx) =\u003e (\n            \u003cAccordionItem key={idx} value={`item-${idx}`}\u003e\n              \u003cAccordionTrigger className=\"text-left text-white\"\u003e\n                {item.question}\n              \u003c/AccordionTrigger\u003e\n              \u003cAccordionContent className=\"text-gray-300\"\u003e\n                {item.answer}\n              \u003c/AccordionContent\u003e\n            \u003c/AccordionItem\u003e\n          ))}\n        \u003c/Accordion\u003e\n\n        {showQuestionBox \u0026\u0026 (\n          \u003cdiv className=\"mt-6 bg-gray-900/50 border border-gray-700 rounded-lg p-4\"\u003e\n            \u003cp className=\"text-sm text-gray-300 mb-2\"\u003e\n              Didn’t see your question? Ask us below and we’ll get back to you.\n            \u003c/p\u003e\n            \u003cdiv className=\"flex flex-col sm:flex-row gap-3\"\u003e\n              {/* Use a compact two-line field for brief questions */}\n              \u003cTextarea\n                rows={2}\n                value={question}\n                onChange={(e) =\u003e setQuestion(e.target.value)}\n                placeholder=\"Type your question (1–2 lines)…\"\n                className=\"bg-gray-800 border-gray-600 text-white\"\n              /\u003e\n              \u003cButton\n                onClick={submitQuestion}\n                className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-semibold sm:self-start\"\n              \u003e\n                Submit\n              \u003c/Button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        )}\n      \u003c/div\u003e\n    \u003c/section\u003e\n  );\n}\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/Features.tsx",
//     "contents": "\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FileText, MessageSquare, Archive } from \"lucide-react\";\n\nconst Features = () =\u003e {\n  const features = [\n    {\n      title: \"Analyze Scene with AI Acting Coach\",\n      details: \"Unlock authentic emotion \u0026 character depth.\\nRefine performances with bold, honest choices.\\nMaster scenes with timeless acting methods — grasp the scene, own it, \u0026 commit.\\nNo reader needed — practice with your AI acting partner.\\nBuild unshakable audition confidence to book the role.\",\n      bgColor: \"from-blue-500/20 to-cyan-500/20\",\n      icon: FileText\n    },\n    {\n      title: \"Teleprompter Mode with AI Scene Partner\",\n      details: \"Rehearse anytime with your AI partner.\\nSharpen timing \u0026 delivery.\\nMemorize lines faster with smart cues.\\nEasily adapt to rhythms, emotions, and styles.\",\n      bgColor: \"from-purple-500/20 to-pink-500/20\",\n      icon: MessageSquare\n    },\n    {\n      title: \"Smart Feedback, Stronger Auditions, Book the Gig.\",\n      details: \"Consistent feedback to elevate your work.\\nInstant self-tape feedback without waiting for a coach.\\nHeadshot reviews based on industry standards.\",\n      bgColor: \"from-orange-500/20 to-red-500/20\",\n      icon: Archive\n    }\n  ];\n\n  return (\n    \u003csection className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gray-900/50\"\u003e\n      \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n        \u003cdiv className=\"text-center mb-16\"\u003e\n          \u003ch2 className=\"text-4xl md:text-5xl font-bold mb-4\"\u003e\n            Professional Tools for{\" \"}\n            \u003cspan className=\"bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n              Professional Actors\n            \u003c/span\u003e\n          \u003c/h2\u003e\n          \u003cp className=\"text-xl text-gray-400 max-w-3xl mx-auto\"\u003e\n            Everything you need to prepare, perform, and perfect your craft\n          \u003c/p\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv className=\"grid grid-cols-1 md:grid-cols-3 gap-8\"\u003e\n          {features.map((feature, index) =\u003e (\n            \u003cCard key={index} className=\"bg-black/40 border-gray-700 hover:border-gray-600 transition-all duration-300 group\"\u003e\n              \u003cCardHeader\u003e\n                \u003cdiv className={`w-16 h-16 rounded-lg bg-gradient-to-br ${feature.bgColor} mb-4 flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}\u003e\n                  \u003cfeature.icon className=\"w-8 h-8 text-white\" /\u003e\n                \u003c/div\u003e\n                \u003cCardTitle className=\"text-white text-xl\"\u003e{feature.title}\u003c/CardTitle\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent\u003e\n                \u003cp className=\"text-gray-300 whitespace-pre-line\"\u003e{feature.details}\u003c/p\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          ))}\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/section\u003e\n  );\n};\n\nexport default Features;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/FloatingSpeedControl.tsx",
//     "contents": "\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Minus, Plus } from 'lucide-react';\n\ninterface FloatingSpeedControlProps {\n  speed: number;\n  onSpeedChange: (speed: number) =\u003e void;\n  speedLabels: {[key: number]: string};\n  className?: string;\n}\n\nconst FloatingSpeedControl: React.FC\u003cFloatingSpeedControlProps\u003e = ({\n  speed,\n  onSpeedChange,\n  speedLabels,\n  className = \"\"\n}) =\u003e {\n  const handleSpeedChange = (newSpeed: number) =\u003e {\n    const clampedSpeed = Math.max(1, Math.min(5, newSpeed));\n    onSpeedChange(clampedSpeed);\n  };\n\n  return (\n    \u003cdiv className={`flex items-center gap-2 bg-black/70 backdrop-blur-sm text-white p-2 rounded-lg ${className}`}\u003e\n      \u003cButton\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() =\u003e handleSpeedChange(speed - 1)}\n        disabled={speed \u003c= 1}\n        className=\"h-8 w-8 p-0 text-white hover:bg-white/20\"\n      \u003e\n        \u003cMinus className=\"w-4 h-4\" /\u003e\n      \u003c/Button\u003e\n      \n      \u003cdiv className=\"flex flex-col items-center min-w-16\"\u003e\n        \u003cBadge variant=\"secondary\" className=\"text-xs bg-white/20 text-white\"\u003e\n          {speed}x\n        \u003c/Badge\u003e\n        \u003cspan className=\"text-xs text-white/80\"\u003e\n          {speedLabels[speed]}\n        \u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cButton\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() =\u003e handleSpeedChange(speed + 1)}\n        disabled={speed \u003e= 5}\n        className=\"h-8 w-8 p-0 text-white hover:bg-white/20\"\n      \u003e\n        \u003cPlus className=\"w-4 h-4\" /\u003e\n      \u003c/Button\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default FloatingSpeedControl;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/Footer.tsx",
//     "contents": "import { Link } from \"react-router-dom\";\n\nconst Footer = () =\u003e {\n  const footerLinks = [\n    { href: \"/faq\", label: \"FAQ\" },\n    { href: \"/terms\", label: \"Terms of Use\" },\n    { href: \"/cookies\", label: \"Cookie Preferences\" },\n    { href: \"/contact\", label: \"Contact Us\" },\n    { href: \"/legal\", label: \"Legal Notices\" },\n    { href: \"/privacy\", label: \"Privacy Policy\" },\n  ];\n\n  return (\n    \u003cfooter className=\"bg-background border-t border-border py-8 px-4\"\u003e\n      \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n        \u003cdiv className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-6\"\u003e\n          {/* Footer Links */}\n          \u003cdiv className=\"flex flex-wrap gap-x-6 gap-y-3\"\u003e\n            {footerLinks.map((link) =\u003e (\n              \u003cLink\n                key={link.href}\n                to={link.href}\n                className=\"text-muted-foreground hover:text-foreground transition-colors text-sm\"\n              \u003e\n                {link.label}\n              \u003c/Link\u003e\n            ))}\n          \u003c/div\u003e\n          \n          {/* Copyright */}\n          \u003cdiv className=\"text-muted-foreground text-sm\"\u003e\n            Copyright © 2025 MyAuditionAI.com\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/footer\u003e\n  );\n};\n\nexport default Footer;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/HeadshotGrader.tsx",
//     "contents": "import React, { useState, useCallback } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Upload, Camera, Star, Target, Zap, Award, Loader2, AlertTriangle, CheckCircle, TrendingUp } from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { DataUseDisclaimer } from \"@/components/DataUseDisclaimer\";\n\nexport default function HeadshotGrader() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n  const [selectedImage, setSelectedImage] = useState\u003cFile | null\u003e(null);\n  const [imagePreview, setImagePreview] = useState\u003cstring | null\u003e(null);\n  const [headshotType, setHeadshotType] = useState\u003c'commercial' | 'theatrical'\u003e('commercial');\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState\u003cany\u003e(null);\n\n  const handleImageSelect = (event: React.ChangeEvent\u003cHTMLInputElement\u003e) =\u003e {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Validate file type\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please upload a JPEG, PNG, or WebP image.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Validate file size (5MB)\n      if (file.size \u003e 5 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please upload an image smaller than 5MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setSelectedImage(file);\n      const reader = new FileReader();\n      reader.onload = (e) =\u003e {\n        setImagePreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n      setAnalysisResult(null);\n    }\n  };\n\n  const uploadImageToSupabase = async (file: File): Promise\u003cstring\u003e =\u003e {\n    if (!user) throw new Error(\"User not authenticated\");\n\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${user.id}/headshot_${Date.now()}.${fileExt}`;\n\n    const { error: uploadError } = await supabase.storage\n      .from('actor-profiles')\n      .upload(fileName, file, { upsert: true });\n\n    if (uploadError) {\n      console.error('Upload error:', uploadError);\n      throw new Error(`Failed to upload image: ${uploadError.message}`);\n    }\n\n    const { data } = supabase.storage\n      .from('actor-profiles')\n      .getPublicUrl(fileName);\n\n    return data.publicUrl;\n  };\n\n  const analyzeHeadshot = async () =\u003e {\n    if (!selectedImage || !user) return;\n\n    setIsAnalyzing(true);\n    \n    try {\n      console.log('Starting headshot analysis...');\n      \n      // Upload image to Supabase storage first\n      const publicUrl = await uploadImageToSupabase(selectedImage);\n      console.log('Image uploaded successfully:', publicUrl);\n\n      // Call the edge function for analysis\n      const { data: savedAnalysis, error: dbError } = await supabase.functions.invoke('grade-headshot', {\n        body: {\n          imageUrl: publicUrl,\n          headshotType\n        }\n      });\n\n      if (dbError) {\n        throw dbError;\n      }\n\n      console.log('Analysis completed:', savedAnalysis);\n\n      // Navigate to full evaluation page instead of showing inline results\n      if (savedAnalysis?.analysis_id) {\n        navigate(`/headshot-evaluation/${savedAnalysis.analysis_id}`);\n      } else {\n        // Fallback: show results inline if no ID\n        setAnalysisResult(savedAnalysis);\n      }\n\n      toast({\n        title: \"Analysis Complete!\",\n        description: \"Your headshot has been professionally evaluated.\",\n      });\n    } catch (error: any) {\n      console.error('Error analyzing headshot:', error);\n      \n      // Handle specific error types with helpful messages\n      let title = \"Analysis Failed\";\n      let description = \"Please try again or contact support.\";\n      \n      // Check for rate limiting\n      if (error?.error === 'RATE_LIMIT_EXCEEDED' || error?.message?.includes('429')) {\n        title = \"Service Temporarily Busy\";\n        description = \"The AI analysis service is experiencing high demand. Please wait 60 seconds and try again.\";\n      }\n      // Check for API errors\n      else if (error?.error === 'API_ERROR') {\n        title = \"Analysis Service Error\";\n        description = error.message || \"The analysis service encountered an error. Please try again.\";\n      }\n      // Check for upload errors\n      else if (error instanceof Error \u0026\u0026 error.message.includes('upload')) {\n        description = \"Failed to upload image. Please try again.\";\n      }\n      // Check for network errors  \n      else if (error instanceof Error \u0026\u0026 (error.message.includes('network') || error.message.includes('fetch'))) {\n        description = \"Network error. Please check your connection and try again.\";\n      }\n      // Check for auth errors\n      else if (error instanceof Error \u0026\u0026 error.message.includes('auth')) {\n        description = \"Authentication error. Please sign in again.\";\n      }\n      \n      toast({\n        title,\n        description,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const getScoreColor = (score: number) =\u003e {\n    if (score \u003e= 80) return \"text-green-600\";\n    if (score \u003e= 60) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getScoreBadgeVariant = (score: number) =\u003e {\n    if (score \u003e= 80) return \"default\";\n    if (score \u003e= 60) return \"secondary\";\n    return \"destructive\";\n  };\n\n  const renderStarRating = (score: number) =\u003e {\n    const stars = Math.round((score / 100) * 5);\n    return (\n      \u003cdiv className=\"flex items-center gap-1\"\u003e\n        {[1, 2, 3, 4, 5].map((star) =\u003e (\n          \u003cStar\n            key={star}\n            className={`h-4 w-4 ${\n              star \u003c= stars ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"\n            }`}\n          /\u003e\n        ))}\n        \u003cspan className=\"ml-2 text-sm font-medium\"\u003e{stars}/5\u003c/span\u003e\n      \u003c/div\u003e\n    );\n  };\n\n  const parseAnalysisText = (text: string) =\u003e {\n    const sections = {\n      firstImpression: '',\n      castingTypes: '',\n      technicalBreakdown: '',\n      castingMatch: '',\n      redFlags: '',\n      suggestions: '',\n      finalVerdict: ''\n    };\n\n    // Extract sections using emoji markers\n    const patterns = {\n      firstImpression: /⭐️\\s*\\*\\*First Impression:\\*\\*([\\s\\S]*?)(?=🎭|$)/,\n      castingTypes: /🎭\\s*\\*\\*Casting Type Recognition:\\*\\*([\\s\\S]*?)(?=📸|$)/,\n      technicalBreakdown: /📸\\s*\\*\\*Technical Breakdown[\\s\\S]*?\\*\\*:([\\s\\S]*?)(?=🧠|$)/,\n      castingMatch: /🧠\\s*\\*\\*Casting Match \u0026 Branding:\\*\\*([\\s\\S]*?)(?=🚫|$)/,\n      redFlags: /🚫\\s*\\*\\*Red Flags[\\s\\S]*?\\*\\*:([\\s\\S]*?)(?=✅|$)/,\n      suggestions: /✅\\s*\\*\\*Fixes or Suggestions:\\*\\*([\\s\\S]*?)(?=🎬|$)/,\n      finalVerdict: /🎬\\s*\\*\\*Final Verdict[\\s\\S]*?\\*\\*:([\\s\\S]*?)(?=\\{|$)/\n    };\n\n    Object.entries(patterns).forEach(([key, pattern]) =\u003e {\n      const match = text.match(pattern);\n      if (match) {\n        sections[key as keyof typeof sections] = match[1].trim();\n      }\n    });\n\n    return sections;\n  };\n\n  return (\n    \u003cdiv className=\"w-full max-w-4xl mx-auto space-y-6\"\u003e\n      \u003cCard\u003e\n        \u003cCardHeader\u003e\n          \u003cCardTitle className=\"flex items-center gap-2\"\u003e\n            \u003cCamera className=\"h-6 w-6 text-primary\" /\u003e\n            Professional Headshot Evaluator (2025)\n          \u003c/CardTitle\u003e\n          \u003cp className=\"text-muted-foreground\"\u003e\n            Get comprehensive feedback from an AI casting director and branding consultant using up-to-date industry-standard evaluation criteria.\n          \u003c/p\u003e\n          \u003cdiv className=\"flex items-center gap-2 text-xs text-muted-foreground\"\u003e\n            \u003cspan\u003eEnhanced with Industry Knowledge Base •\u003c/span\u003e\n            \u003cspan className=\"font-medium text-primary\"\u003eGoogle Gemini Pro Vision\u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent className=\"space-y-6\"\u003e\n          {/* Headshot Type Selection */}\n          \u003cdiv className=\"space-y-3\"\u003e\n            \u003clabel className=\"text-sm font-medium\"\u003eHeadshot Type\u003c/label\u003e\n            \u003cdiv className=\"flex gap-3\"\u003e\n              \u003cButton\n                variant={headshotType === \"commercial\" ? \"default\" : \"outline\"}\n                onClick={() =\u003e setHeadshotType(\"commercial\")}\n                className=\"flex-1\"\n              \u003e\n                Commercial\n              \u003c/Button\u003e\n              \u003cButton\n                variant={headshotType === \"theatrical\" ? \"default\" : \"outline\"}\n                onClick={() =\u003e setHeadshotType(\"theatrical\")}\n                className=\"flex-1\"\n              \u003e\n                Theatrical\n              \u003c/Button\u003e\n            \u003c/div\u003e\n            \u003cp className=\"text-xs text-muted-foreground\"\u003e\n              {headshotType === \"commercial\" \n                ? \"For commercials, branding, and everyday relatable roles\"\n                : \"For dramatic roles, film, and television character work\"\n              }\n            \u003c/p\u003e\n          \u003c/div\u003e\n\n          {/* Image Upload */}\n          \u003cdiv className=\"space-y-3\"\u003e\n            \u003clabel className=\"text-sm font-medium\"\u003eUpload Your Headshot\u003c/label\u003e\n            \n            {imagePreview ? (\n              \u003cdiv className=\"space-y-4\"\u003e\n                \u003cdiv className=\"relative\"\u003e\n                  \u003cimg\n                    src={imagePreview}\n                    alt=\"Selected headshot\"\n                    className=\"w-full h-64 object-cover rounded-lg border\"\n                  /\u003e\n                  \u003cButton\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    className=\"absolute top-2 right-2\"\n                    onClick={() =\u003e {\n                      setSelectedImage(null);\n                      setImagePreview(null);\n                      setAnalysisResult(null);\n                    }}\n                  \u003e\n                    Change Photo\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n\n                {/* Analyze Button */}\n                {user \u0026\u0026 (\n                  \u003cButton\n                    onClick={analyzeHeadshot}\n                    disabled={isAnalyzing}\n                    className=\"w-full\"\n                    size=\"lg\"\n                  \u003e\n                    {isAnalyzing \u0026\u0026 \u003cLoader2 className=\"mr-2 h-4 w-4 animate-spin\" /\u003e}\n                    {isAnalyzing ? \"Analyzing Headshot...\" : \"Get Professional Evaluation\"}\n                  \u003c/Button\u003e\n                )}\n                \n                \u003cDataUseDisclaimer className=\"mt-4\" /\u003e\n\n                {/* Analysis Results - Display directly below the image */}\n                {analysisResult \u0026\u0026 (\n                  \u003cdiv className=\"space-y-6 pt-4 border-t\"\u003e\n                    {/* Overall Score */}\n                    \u003cdiv className=\"text-center space-y-4\"\u003e\n                      \u003cdiv className=\"flex items-center justify-center gap-2 mb-2\"\u003e\n                        \u003cStar className=\"h-5 w-5 text-yellow-500\" /\u003e\n                        \u003ch3 className=\"text-lg font-semibold\"\u003eOverall Assessment\u003c/h3\u003e\n                      \u003c/div\u003e\n                      \n                      \u003cdiv className={`text-3xl font-bold ${getScoreColor(analysisResult.overall_score)}`}\u003e\n                        {renderStarRating(analysisResult.overall_score)}\n                      \u003c/div\u003e\n                      \u003cBadge variant={getScoreBadgeVariant(analysisResult.overall_score)} className=\"text-sm\"\u003e\n                        Overall Rating\n                      \u003c/Badge\u003e\n                    \u003c/div\u003e\n\n                    {/* Quick Stats */}\n                    \u003cdiv className=\"grid grid-cols-1 md:grid-cols-3 gap-4 py-4 bg-muted/30 rounded-lg\"\u003e\n                      \u003cdiv className=\"text-center space-y-2\"\u003e\n                        \u003cdiv className=\"flex items-center justify-center\"\u003e\n                          \u003cZap className=\"h-4 w-4 mr-1\" /\u003e\n                          \u003cspan className=\"text-sm font-medium\"\u003eTechnical\u003c/span\u003e\n                        \u003c/div\u003e\n                        {renderStarRating(analysisResult.technical_score)}\n                      \u003c/div\u003e\n                      \n                      \u003cdiv className=\"text-center space-y-2\"\u003e\n                        \u003cdiv className=\"flex items-center justify-center\"\u003e\n                          \u003cStar className=\"h-4 w-4 mr-1\" /\u003e\n                          \u003cspan className=\"text-sm font-medium\"\u003eProfessional\u003c/span\u003e\n                        \u003c/div\u003e\n                        {renderStarRating(analysisResult.professional_score)}\n                      \u003c/div\u003e\n                      \n                      \u003cdiv className=\"text-center space-y-2\"\u003e\n                        \u003cdiv className=\"flex items-center justify-center\"\u003e\n                          \u003cTrendingUp className=\"h-4 w-4 mr-1\" /\u003e\n                          \u003cspan className=\"text-sm font-medium\"\u003eIndustry\u003c/span\u003e\n                        \u003c/div\u003e\n                        {renderStarRating(analysisResult.industry_score)}\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n\n                    {/* Casting Types */}\n                    {analysisResult.casting_types \u0026\u0026 analysisResult.casting_types.length \u003e 0 \u0026\u0026 (\n                      \u003cdiv className=\"space-y-2\"\u003e\n                        \u003ch4 className=\"font-semibold text-green-700\"\u003e🎭 Casting Types\u003c/h4\u003e\n                        \u003cdiv className=\"flex flex-wrap gap-2\"\u003e\n                          {analysisResult.casting_types.map((type: string, index: number) =\u003e (\n                            \u003cBadge key={index} variant=\"secondary\"\u003e{type}\u003c/Badge\u003e\n                          ))}\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    )}\n\n                    {/* Final Verdict */}\n                    {analysisResult.final_verdict \u0026\u0026 (\n                      \u003cdiv className=\"bg-muted/50 p-4 rounded-lg\"\u003e\n                        \u003ch4 className=\"font-semibold mb-2\"\u003e🎬 Final Verdict\u003c/h4\u003e\n                        \u003cp className=\"text-sm\"\u003e{analysisResult.final_verdict}\u003c/p\u003e\n                      \u003c/div\u003e\n                    )}\n\n                    {/* Detailed Analysis */}\n                    {analysisResult.full_analysis \u0026\u0026 (\n                      \u003cdiv className=\"space-y-4 border-t pt-4\"\u003e\n                        \u003ch3 className=\"text-lg font-semibold\"\u003eProfessional Analysis Breakdown\u003c/h3\u003e\n                        {(() =\u003e {\n                          const sections = parseAnalysisText(analysisResult.full_analysis);\n                          return (\n                            \u003cdiv className=\"space-y-4\"\u003e\n                              {sections.firstImpression \u0026\u0026 (\n                                \u003cdiv className=\"space-y-2\"\u003e\n                                  \u003ch4 className=\"font-semibold text-blue-700\"\u003e⭐️ First Impression\u003c/h4\u003e\n                                  \u003cdiv className=\"text-sm whitespace-pre-line bg-blue-50 p-3 rounded-lg\"\u003e{sections.firstImpression}\u003c/div\u003e\n                                \u003c/div\u003e\n                              )}\n\n                              {sections.castingTypes \u0026\u0026 (\n                                \u003cdiv className=\"space-y-2\"\u003e\n                                  \u003ch4 className=\"font-semibold text-purple-700\"\u003e🎭 Casting Type Recognition\u003c/h4\u003e\n                                  \u003cdiv className=\"text-sm whitespace-pre-line bg-purple-50 p-3 rounded-lg\"\u003e{sections.castingTypes}\u003c/div\u003e\n                                \u003c/div\u003e\n                              )}\n\n                              {sections.technicalBreakdown \u0026\u0026 (\n                                \u003cdiv className=\"space-y-2\"\u003e\n                                  \u003ch4 className=\"font-semibold text-green-700\"\u003e📸 Technical Breakdown\u003c/h4\u003e\n                                  \u003cdiv className=\"text-sm whitespace-pre-line bg-green-50 p-3 rounded-lg\"\u003e{sections.technicalBreakdown}\u003c/div\u003e\n                                \u003c/div\u003e\n                              )}\n\n                              {sections.castingMatch \u0026\u0026 (\n                                \u003cdiv className=\"space-y-2\"\u003e\n                                  \u003ch4 className=\"font-semibold text-indigo-700\"\u003e🧠 Casting Match \u0026 Branding\u003c/h4\u003e\n                                  \u003cdiv className=\"text-sm whitespace-pre-line bg-indigo-50 p-3 rounded-lg\"\u003e{sections.castingMatch}\u003c/div\u003e\n                                \u003c/div\u003e\n                              )}\n\n                              {sections.redFlags \u0026\u0026 (\n                                \u003cdiv className=\"space-y-2\"\u003e\n                                  \u003ch4 className=\"font-semibold text-red-700 flex items-center gap-2\"\u003e\n                                    \u003cAlertTriangle className=\"h-4 w-4\" /\u003e\n                                    🚫 Red Flags\n                                  \u003c/h4\u003e\n                                  \u003cdiv className=\"text-sm whitespace-pre-line bg-red-50 p-3 rounded-lg\"\u003e{sections.redFlags}\u003c/div\u003e\n                                \u003c/div\u003e\n                              )}\n\n                              {sections.suggestions \u0026\u0026 (\n                                \u003cdiv className=\"space-y-2\"\u003e\n                                  \u003ch4 className=\"font-semibold text-green-700 flex items-center gap-2\"\u003e\n                                    \u003cCheckCircle className=\"h-4 w-4\" /\u003e\n                                    ✅ Fixes \u0026 Suggestions\n                                  \u003c/h4\u003e\n                                  \u003cdiv className=\"text-sm whitespace-pre-line bg-green-50 p-3 rounded-lg\"\u003e{sections.suggestions}\u003c/div\u003e\n                                \u003c/div\u003e\n                              )}\n                            \u003c/div\u003e\n                          );\n                        })()}\n                      \u003c/div\u003e\n                    )}\n\n                    {/* Improvement Suggestions */}\n                    {analysisResult.improvement_suggestions \u0026\u0026 analysisResult.improvement_suggestions.length \u003e 0 \u0026\u0026 (\n                      \u003cdiv className=\"space-y-3 border-t pt-4\"\u003e\n                        \u003ch4 className=\"font-semibold flex items-center gap-2\"\u003e\n                          \u003cTrendingUp className=\"h-4 w-4\" /\u003e\n                          Action Items\n                        \u003c/h4\u003e\n                        \u003cul className=\"space-y-2\"\u003e\n                          {analysisResult.improvement_suggestions.map((suggestion: string, index: number) =\u003e (\n                            \u003cli key={index} className=\"text-sm flex items-start gap-2\"\u003e\n                              \u003cCheckCircle className=\"h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0\" /\u003e\n                              {suggestion}\n                            \u003c/li\u003e\n                          ))}\n                        \u003c/ul\u003e\n                      \u003c/div\u003e\n                    )}\n\n                    {/* Red Flags */}\n                    {analysisResult.red_flags \u0026\u0026 analysisResult.red_flags.length \u003e 0 \u0026\u0026 (\n                      \u003cdiv className=\"space-y-3 border-t pt-4\"\u003e\n                        \u003ch4 className=\"font-semibold flex items-center gap-2 text-red-600\"\u003e\n                          \u003cAlertTriangle className=\"h-4 w-4\" /\u003e\n                          Issues to Address\n                        \u003c/h4\u003e\n                        \u003cul className=\"space-y-2\"\u003e\n                          {analysisResult.red_flags.map((flag: string, index: number) =\u003e (\n                            \u003cli key={index} className=\"text-sm flex items-start gap-2\"\u003e\n                              \u003cAlertTriangle className=\"h-4 w-4 text-red-500 mt-0.5 flex-shrink-0\" /\u003e\n                              {flag}\n                            \u003c/li\u003e\n                          ))}\n                        \u003c/ul\u003e\n                      \u003c/div\u003e\n                    )}\n                  \u003c/div\u003e\n                )}\n              \u003c/div\u003e\n            ) : (\n              \u003cdiv className=\"w-full h-64 border-2 border-dashed border-muted-foreground/25 rounded-lg flex items-center justify-center cursor-pointer hover:border-muted-foreground/50 transition-colors\"\u003e\n                \u003clabel className=\"cursor-pointer text-center\"\u003e\n                  \u003cUpload className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" /\u003e\n                  \u003cp className=\"text-sm text-muted-foreground mb-2\"\u003eClick to upload your headshot\u003c/p\u003e\n                  \u003cp className=\"text-xs text-muted-foreground\"\u003eJPEG, PNG, or WebP (max 5MB)\u003c/p\u003e\n                  \u003cinput\n                    type=\"file\"\n                    accept=\"image/jpeg,image/jpg,image/png,image/webp\"\n                    onChange={handleImageSelect}\n                    className=\"hidden\"\n                  /\u003e\n                \u003c/label\u003e\n              \u003c/div\u003e\n            )}\n          \u003c/div\u003e\n\n          {!user \u0026\u0026 (\n            \u003cdiv className=\"text-center space-y-3 py-4 bg-muted/30 rounded-lg\"\u003e\n              \u003cp className=\"text-sm text-muted-foreground\"\u003e\n                Please sign in to use the professional headshot evaluator.\n              \u003c/p\u003e\n              \u003cButton asChild variant=\"default\"\u003e\n                \u003cLink to=\"/auth\"\u003eSign In / Sign Up\u003c/Link\u003e\n              \u003c/Button\u003e\n            \u003c/div\u003e\n          )}\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n    \u003c/div\u003e\n  );\n}\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/Hero.tsx",
//     "contents": "import { useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport AuthModal from \"./AuthModal\";\nimport { HelpTooltip } from \"@/components/ui/help-tooltip\";\nconst Hero = () =\u003e {\n  const navigate = useNavigate();\n  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);\n  const handleActorsToolBoxClick = () =\u003e {\n    navigate(\"/toolbox\");\n  };\n  const handleScriptAnalysisClick = () =\u003e {\n    console.log('[Hero] Navigating to script analysis...');\n    navigate(\"/analysis\");\n  };\n  const handleSelfTapingClick = () =\u003e {\n    navigate(\"/teleprompter\");\n  };\n  return \u003c\u003e\n      \u003cdiv className=\"relative min-h-screen flex items-center justify-center overflow-hidden\"\u003e\n        {/* New background image */}\n        \u003cdiv className=\"absolute inset-0\"\u003e\n          \u003cdiv className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\" style={{\n          backgroundImage: `url('/lovable-uploads/e660b78e-0cdd-4c62-b288-ebb8aa5bdbd2.png')`\n        }} onError={() =\u003e console.log('Background image failed to load')} onLoad={() =\u003e console.log('Background image loaded successfully')}\u003e\u003c/div\u003e\n          \n          {/* Reduced opacity gradient overlay for better poster visibility */}\n          \u003cdiv className=\"absolute inset-0 bg-gradient-to-br from-black/30 via-black/20 to-black/40 z-10\"\u003e\u003c/div\u003e\n          \n          {/* Subtle texture overlay for depth */}\n          \u003cdiv className=\"absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg%20width%3D%2260%22%20height%3D%2260%22%20viewBox%3D%220%200%2060%2060%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%3Cg%20fill%3D%22none%22%20fill-rule%3D%22evenodd%22%3E%3Cg%20fill%3D%22%23ffffff%22%20fill-opacity%3D%220.02%22%3E%3Ccircle%20cx%3D%2230%22%20cy%3D%2230%22%20r%3D%223%22/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-40 z-20 bg-rose-950\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n        \n        {/* Content */}\n        \u003cdiv className=\"relative z-30 text-center max-w-5xl mx-auto px-4 sm:px-6 lg:px-8\"\u003e\n          \u003ch1 className=\"text-3xl md:text-4xl lg:text-5xl font-extrabold mb-4 leading-snug tracking-tight drop-shadow-2xl text-transparent bg-clip-text bg-gradient-to-r from-[hsl(var(--brand-orange))] to-[hsl(var(--brand-yellow))]\"\u003e\n            Prep it! Shoot it, Book it!\n          \u003c/h1\u003e\n          \n          \u003cp className=\"text-xl md:text-2xl text-gray-100 mb-8 max-w-4xl mx-auto leading-relaxed font-medium drop-shadow-lg\"\u003e\n            Transform auditions with AI coaching — from script to character — giving you the confidence and edge to book the job.\n          \u003c/p\u003e\n          \n          \u003cdiv className=\"flex flex-col lg:flex-row gap-8 justify-center items-center mb-16\" role=\"navigation\" aria-label=\"Primary actions\"\u003e\n            \u003cHelpTooltip content=\"Tip: Upload a PDF or paste your script text, then run analysis for insights.\" side=\"top\"\u003e\n              \u003cbutton onClick={handleScriptAnalysisClick} className=\"group relative w-72 h-32 rounded-2xl bg-gradient-to-br from-[hsl(var(--brand-orange))] via-[hsl(var(--brand-yellow))] to-orange-500 hover:from-[hsl(var(--brand-yellow))] hover:to-[hsl(var(--brand-orange))] text-black shadow-2xl backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-[0_20px_40px_rgba(255,165,0,0.4)] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[hsl(var(--brand-yellow))] focus-visible:ring-offset-2 focus-visible:ring-offset-background overflow-hidden\" aria-label=\"Analyze Scene with AI\"\u003e\n                \u003cdiv className=\"absolute inset-0 bg-white/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\u003e\u003c/div\u003e\n                \u003cdiv className=\"relative z-10 flex flex-col items-center justify-center h-full space-y-2\"\u003e\n                  \u003csvg className=\"w-8 h-8 mb-1\" fill=\"currentColor\" viewBox=\"0 0 24 24\"\u003e\n                    \u003cpath d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6z\" /\u003e\n                    \u003cpath d=\"M14 2v6h6\" /\u003e\n                    \u003cpath d=\"M16 13H8\" /\u003e\n                    \u003cpath d=\"M16 17H8\" /\u003e\n                    \u003cpath d=\"M10 9H8\" /\u003e\n                  \u003c/svg\u003e\n                  \u003cspan className=\"text-lg font-bold tracking-wide\"\u003eAnalyze Scene with AI\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/button\u003e\n            \u003c/HelpTooltip\u003e\n            \u003cHelpTooltip content=\"Tip: Upload a PDF or paste text to start self-taping.\" side=\"top\"\u003e\n              \u003cbutton onClick={handleSelfTapingClick} className=\"group relative w-72 h-32 rounded-2xl bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 hover:from-purple-600 hover:to-blue-600 text-white shadow-2xl backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-[0_20px_40px_rgba(124,58,237,0.4)] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-400 focus-visible:ring-offset-2 focus-visible:ring-offset-background overflow-hidden\" aria-label=\"Self Tape\"\u003e\n                \u003cdiv className=\"absolute inset-0 bg-white/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\u003e\u003c/div\u003e\n                \u003cdiv className=\"relative z-10 flex flex-col items-center justify-center h-full space-y-2\"\u003e\n                  \u003csvg className=\"w-8 h-8 mb-1\" fill=\"currentColor\" viewBox=\"0 0 24 24\"\u003e\n                    \u003cpath d=\"M23 7l-7 5 7 5V7z\" /\u003e\n                    \u003crect x=\"1\" y=\"5\" width=\"15\" height=\"14\" rx=\"2\" ry=\"2\" /\u003e\n                  \u003c/svg\u003e\n                  \u003cspan className=\"text-lg font-bold tracking-wide\"\u003eSelf Tape\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/button\u003e\n            \u003c/HelpTooltip\u003e\n            \u003cbutton onClick={handleActorsToolBoxClick} className=\"group relative w-72 h-32 rounded-2xl bg-gradient-to-br from-emerald-600 via-teal-600 to-cyan-700 hover:from-teal-600 hover:to-emerald-600 text-white shadow-2xl backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-[0_20px_40px_rgba(20,184,166,0.4)] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-teal-400 focus-visible:ring-offset-2 focus-visible:ring-offset-background overflow-hidden\" aria-label=\"Actors Tool Box\"\u003e\n              \u003cdiv className=\"absolute inset-0 bg-white/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"relative z-10 flex flex-col items-center justify-center h-full space-y-2\"\u003e\n                \u003csvg className=\"w-8 h-8 mb-1\" fill=\"currentColor\" viewBox=\"0 0 24 24\"\u003e\n                  \u003cpath d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" /\u003e\n                  \u003ccircle cx=\"12\" cy=\"7\" r=\"4\" /\u003e\n                \u003c/svg\u003e\n                \u003cspan className=\"text-lg font-bold tracking-wide\"\u003eActors Tool Box\u003c/span\u003e\n              \u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/div\u003e\n          \n          {/* Info Cards with Speech Bubbles */}\n          \u003cdiv className=\"flex flex-col lg:flex-row gap-8 justify-center items-start mt-8\"\u003e\n            {/* Analysis Scene Info */}\n            \u003cdiv className=\"relative w-80\"\u003e\n              {/* White triangle arrow pointing up */}\n              \u003cdiv className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-[10px] border-r-[10px] border-b-[10px] border-l-transparent border-r-transparent border-b-white z-20\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"bg-black/80 backdrop-blur-sm border border-white rounded-lg p-6 shadow-xl text-left\"\u003e\n                \u003ch3 className=\"text-lg font-bold text-[hsl(var(--brand-yellow))] mb-3 text-left\"\u003eAnalyze Scene with AI Acting Coach\u003c/h3\u003e\n                \n                \u003ch4 className=\"text-base font-bold text-[hsl(var(--brand-yellow))] mb-2 text-left\"\u003eSTEP-BY-STEP\u003c/h4\u003e\n                \u003cul className=\"text-sm text-white space-y-2 leading-relaxed text-left mb-4\"\u003e\n                  \u003cli\u003e1. Upload your scene to the AI Acting Coach.\u003c/li\u003e\n                  \u003cli\u003e2. Get instant feedback and evaluation.\u003c/li\u003e\n                  \u003cli\u003e3. Edit your script for teleprompter use.\u003c/li\u003e\n                  \u003cli\u003e4. Ask follow-up questions to the coach.\u003c/li\u003e\n                  \u003cli\u003e5. Download your personalized report.\u003c/li\u003e\n                  \u003cli\u003e6. Move to self-tape and start recording.\u003c/li\u003e\n                \u003c/ul\u003e\n                \n                \u003ch4 className=\"text-base font-bold text-[hsl(var(--brand-yellow))] mb-2 text-left\"\u003eBENEFITS\u003c/h4\u003e\n                \u003cul className=\"text-sm text-white space-y-2 leading-relaxed text-left\"\u003e\n                  \u003cli\u003e• Grow as an actor with every use.\u003c/li\u003e\n                  \u003cli\u003e• Train anytime—it's more than auditions, it's mastery.\u003c/li\u003e\n                  \u003cli\u003e• Elevate scenes with proven acting techniques.\u003c/li\u003e\n                  \u003cli\u003e• AI helps you create bold choices for your scene.\u003c/li\u003e\n                  \u003cli\u003e• Build unshakable confidence to book the role.\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \n            {/* Self Tape Info */}\n            \u003cdiv className=\"relative w-80\"\u003e\n              {/* White triangle arrow pointing up */}\n              \u003cdiv className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-[10px] border-r-[10px] border-b-[10px] border-l-transparent border-r-transparent border-b-white z-20\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"bg-black/80 backdrop-blur-sm border border-white rounded-lg p-6 shadow-xl text-left\"\u003e\n                \u003ch3 className=\"text-lg font-bold text-[hsl(var(--brand-yellow))] mb-3 text-left\"\u003eActor's Audition Dashboard\u003c/h3\u003e\n                \u003ch4 className=\"text-base font-bold text-[hsl(var(--brand-yellow))] mb-2 text-left\"\u003eSTEP-BY-STEP\u003c/h4\u003e\n                \u003cul className=\"text-sm text-white space-y-2 leading-relaxed text-left mb-4\"\u003e\n                  \u003cli\u003e1. Upload your edited scene into the teleprompter\u003c/li\u003e\n                  \u003cli\u003e2. Select your character for the scene \u0026 pick your AI reader\u003c/li\u003e\n                  \u003cli\u003e3. Customize read speed, font size,\u003c/li\u003e\n                  \u003cli\u003e4. Pick your AI scene partner.\u003c/li\u003e\n                  \u003cli\u003e5. Rehearse scenes as AI voices read with you\u003c/li\u003e\n                  \u003cli\u003e6. Upload your final video for AI evaluation—covering acting, sound, and lighting.\u003c/li\u003e\n                \u003c/ul\u003e\n                \n                \u003ch4 className=\"text-base font-bold text-[hsl(var(--brand-yellow))] mb-2 text-left\"\u003eBENEFITS\u003c/h4\u003e\n                \u003cul className=\"text-sm text-white space-y-2 leading-relaxed text-left\"\u003e\n                  \u003cli\u003e• No more searching for scene partners\u003c/li\u003e\n                  \u003cli\u003e• Work with top-quality AI readers\u003c/li\u003e\n                  \u003cli\u003e• Rehearse and prep auditions anytime, anywhere\u003c/li\u003e\n                  \u003cli\u003e• Be first to submit auditions—not last\u003c/li\u003e\n                  \u003cli\u003e• Get industry-standard feedback on every self-tape\u003c/li\u003e\n                  \u003cli\u003e• Turn every scene into a learning opportunity, not just auditions\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \n            {/* Actors Toolbox Info */}\n            \u003cdiv className=\"relative w-80\"\u003e\n              {/* White triangle arrow pointing up */}\n              \u003cdiv className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-[10px] border-r-[10px] border-b-[10px] border-l-transparent border-r-transparent border-b-white z-20\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"bg-black/80 backdrop-blur-sm border border-white rounded-lg p-6 shadow-xl text-left\"\u003e\n                \u003ch3 className=\"text-lg font-bold text-[hsl(var(--brand-yellow))] mb-3 text-left\"\u003eActors Toolbox\u003c/h3\u003e\n                \n                \u003ch4 className=\"text-base font-bold text-[hsl(var(--brand-yellow))] mb-2 text-left\"\u003eSTEP-BY-STEP\u003c/h4\u003e\n                \u003cul className=\"text-sm text-white space-y-2 leading-relaxed text-left mb-4\"\u003e\n                  \u003cli\u003e1. Digital actor profile with headshots, résumé, demo reel, and shareable vanity link\u003c/li\u003e\n                  \u003cli\u003e2. Actors Journal: AI reminders \u0026 tools to never miss an audition.\u003c/li\u003e\n                  \u003cli\u003e3. AI reminders, audition tracking, and instant reports for your agent \u0026/or manager\u003c/li\u003e\n                \u003c/ul\u003e\n                \n                \u003ch4 className=\"text-base font-bold text-[hsl(var(--brand-yellow))] mb-2 text-left\"\u003eBENEFITS\u003c/h4\u003e\n                \u003cp className=\"text-sm text-white mb-4 leading-relaxed text-left font-bold\"\u003eActors Approach Toolbox\u003c/p\u003e\n                \u003cul className=\"text-sm text-white space-y-2 leading-relaxed text-left mb-4\"\u003e\n                  \u003cli\u003e• 375+ acting training videos with exercises from Stanislavsky, Meisner, Adler, and more\u003c/li\u003e\n                  \u003cli\u003e• One-time payment—unlock lifetime access\u003c/li\u003e\n                \u003c/ul\u003e\n                \n                \u003cp className=\"text-sm text-white mb-2 leading-relaxed text-left font-bold\"\u003eHeadshot Evaluation\u003c/p\u003e\n                \u003cul className=\"text-sm text-white space-y-2 leading-relaxed text-left\"\u003e\n                  \u003cli\u003e• Industry-standard headshot evaluations (commercial \u0026 theatrical)\u003c/li\u003e\n                \u003c/ul\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \n        \u003c/div\u003e\n      \u003c/div\u003e\n      \n      \u003cAuthModal isOpen={isAuthModalOpen} onClose={() =\u003e setIsAuthModalOpen(false)} /\u003e\n    \u003c/\u003e;\n};\nexport default Hero;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/MethodologySection.tsx",
//     "contents": "\nconst MethodologySection = () =\u003e {\n  const methods = [\n    \"Stanislavski\", \"Meisner\", \"Strasberg\", \"Uta Hagen\"\n  ];\n\n  return (\n    \u003csection className=\"py-20 px-4 sm:px-6 lg:px-8\"\u003e\n      \u003cdiv className=\"max-w-7xl mx-auto text-center\"\u003e\n        \u003ch2 className=\"text-4xl md:text-5xl font-bold mb-8\"\u003e\n          Master Every{\" \"}\n          \u003cspan className=\"bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n            Acting Method\n          \u003c/span\u003e\n        \u003c/h2\u003e\n        \n        \u003cp className=\"text-xl text-gray-400 mb-12 max-w-3xl mx-auto\"\u003e\n          Our AI coach is trained in all major acting methodologies, \n          adapting to your preferred technique and artistic vision.\n        \u003c/p\u003e\n        \n        \u003cdiv className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-4 gap-4\"\u003e\n          {methods.map((method, index) =\u003e (\n            \u003cdiv \n              key={index}\n              className=\"bg-gradient-to-br from-gray-800 to-gray-900 border border-gray-700 rounded-lg p-4 hover:border-yellow-500/50 transition-all duration-300 hover:scale-105\"\n            \u003e\n              \u003cspan className=\"text-white font-semibold text-sm\"\u003e{method}\u003c/span\u003e\n            \u003c/div\u003e\n          ))}\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/section\u003e\n  );\n};\n\nexport default MethodologySection;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/Navigation.tsx",
//     "contents": "import { Button } from \"@/components/ui/button\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { Menu, X, User, LogOut, ChevronDown } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useHelpMode } from \"@/contexts/HelpModeContext\";\nimport { HelpTooltip } from \"@/components/ui/help-tooltip\";\n\nconst Navigation = () =\u003e {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user, signOut, loading } = useAuth();\n  const { toast } = useToast();\n  const [avatarUrl, setAvatarUrl] = useState\u003cstring | null\u003e(null);\n  const { enabled: helpEnabled, setEnabled: setHelpEnabled } = useHelpMode();\n\n  const navigationItems = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/analysis\", label: \"Scene Analysis\" },\n    { href: \"/membership\", label: \"Membership\" },\n    { href: \"/about\", label: \"About\" },\n    { href: \"/faq\", label: \"FAQ\" },\n    { href: \"/contact\", label: \"Contact\" },\n  ];\n\n  const actorsToolsItems = [\n    { href: \"/self-taping#headshot-grader\", label: \"Evaluate Headshot\" },\n    { href: \"/approach\", label: \"Actors Approach\" },\n  ];\n\n  const selfTapingItems = [\n    { href: \"/teleprompter\", label: \"Teleprompter\" },\n    { href: \"https://preview--myauditionai.lovable.app/self-taping\", label: \"How to self tape\", external: true },\n  ];\n\n  const isActiveRoute = (href: string) =\u003e {\n    if (href === \"/\") {\n      return location.pathname === \"/\";\n    }\n    return location.pathname.startsWith(href);\n  };\n\n  const isActorsToolsActive = () =\u003e {\n    return actorsToolsItems.some(item =\u003e isActiveRoute(item.href)) || \n           selfTapingItems.some(item =\u003e !item.external \u0026\u0026 isActiveRoute(item.href));\n  };\n\n  const isAboutGroupActive = () =\u003e {\n    return isActiveRoute('/about') || isActiveRoute('/faq') || isActiveRoute('/podcast');\n  };\n  const initials = (user?.user_metadata?.full_name || user?.email || 'U')\n    ?.split(' ')\n    .map((n: string) =\u003e n[0])\n    .join('')\n    .slice(0, 2)\n    .toUpperCase();\n\n  useEffect(() =\u003e {\n    const fetchAvatar = async () =\u003e {\n      if (!user) { setAvatarUrl(null); return; }\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('avatar_url')\n        .eq('id', user.id)\n        .maybeSingle();\n      if (!error \u0026\u0026 data) setAvatarUrl(data.avatar_url || null);\n    };\n    fetchAvatar();\n  }, [user]);\n\n  const handleSignOut = async () =\u003e {\n    const { error } = await signOut();\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Signed out\",\n        description: \"You've been signed out successfully.\",\n      });\n      navigate(\"/\");\n    }\n  };\n\n  const handleLoginClick = () =\u003e {\n    navigate(\"/auth\", { state: { from: location } });\n  };\n\n  const handleDashboardClick = () =\u003e {\n    navigate(\"/dashboard\");\n  };\n\n  const handleJoinMembershipClick = () =\u003e {\n    navigate(\"/membership\");\n  };\n\n  const handleProfileClick = () =\u003e {\n    navigate(\"/profile\");\n  };\n\n  const { data: isAdmin } = useQuery({\n    queryKey: ['is-admin', user?.id],\n    queryFn: async () =\u003e {\n      if (!user) return false;\n      const { data, error } = await supabase\n        .from('user_roles')\n        .select('role')\n        .eq('user_id', user.id);\n      if (error) return false;\n      return (data || []).some((r: { role: string }) =\u003e r.role === 'admin');\n    },\n    enabled: !!user,\n  });\n\n  if (loading) {\n    return (\n      \u003cnav className=\"fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-md border-b border-gray-800\"\u003e\n        \u003cdiv className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-6\"\u003e\n          \u003cdiv className=\"flex justify-between items-center h-16\"\u003e\n            \u003cdiv className=\"flex items-center\"\u003e\n              \u003cLink to=\"/\" className=\"flex items-center space-x-3\"\u003e\n                \u003cimg \n                  src=\"/lovable-uploads/483b557f-6225-4fc8-953a-49e3200f8059.png\" \n                  alt=\"MyAuditionAI.com Logo\" \n                  className=\"h-10 w-10 object-contain\"\n                /\u003e\n                \u003cspan className=\"text-2xl font-bold bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n                  MyAuditionAI.com\n                \u003c/span\u003e\n              \u003c/Link\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"text-gray-400\"\u003eLoading...\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/nav\u003e\n    );\n  }\n\n  return (\n    \u003cnav className=\"fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-md border-b border-gray-800\"\u003e\n      \u003cdiv className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-6\"\u003e\n        \u003cdiv className=\"flex justify-between items-center h-16\"\u003e\n          \u003cdiv className=\"flex items-center\"\u003e\n            \u003cLink to=\"/\" className=\"flex items-center space-x-3\"\u003e\n              \u003cimg \n                src=\"/lovable-uploads/483b557f-6225-4fc8-953a-49e3200f8059.png\" \n                alt=\"MyAuditionAI.com Logo\" \n                className=\"h-10 w-10 object-contain\"\n              /\u003e\n              \u003cspan className=\"text-2xl font-bold bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n                MyAuditionAI.com\n              \u003c/span\u003e\n            \u003c/Link\u003e\n          \u003c/div\u003e\n          \n          {/* Desktop Navigation */}\n          \u003cdiv className=\"hidden md:flex items-center space-x-8\"\u003e\n            {navigationItems\n              .filter((item) =\u003e item.label !== \"About\" \u0026\u0026 item.label !== \"FAQ\")\n              .map((item) =\u003e (\n                item.label === \"Scene Analysis\" ? (\n                  \u003cHelpTooltip\n                    key={item.href}\n                    content=\"Upload a PDF or paste your script to get AI notes and character breakdowns.\"\n                    side=\"bottom\"\n                  \u003e\n                    \u003cLink\n                      to={item.href}\n                      className={`transition-colors ${\n                        isActiveRoute(item.href)\n                          ? \"text-yellow-400\"\n                          : \"text-gray-300 hover:text-white\"\n                      }`}\n                    \u003e\n                      {item.label}\n                    \u003c/Link\u003e\n                  \u003c/HelpTooltip\u003e\n                ) : (\n                  \u003cLink\n                    key={item.href}\n                    to={item.href}\n                    className={`transition-colors ${\n                      isActiveRoute(item.href)\n                        ? \"text-yellow-400\"\n                        : \"text-gray-300 hover:text-white\"\n                    }`}\n                  \u003e\n                    {item.label}\n                  \u003c/Link\u003e\n                )\n              ))}\n\n            {/* About Dropdown (with FAQ and Podcast) */}\n            \u003cDropdownMenu\u003e\n              \u003cDropdownMenuTrigger asChild\u003e\n                \u003cbutton className={`flex items-center space-x-1 transition-colors ${\n                  isAboutGroupActive()\n                    ? \"text-yellow-400\"\n                    : \"text-gray-300 hover:text-white\"\n                }`}\u003e\n                  \u003cspan\u003eAbout\u003c/span\u003e\n                  \u003cChevronDown className=\"h-4 w-4\" /\u003e\n                \u003c/button\u003e\n              \u003c/DropdownMenuTrigger\u003e\n               \u003cDropdownMenuContent className=\"min-w-[200px]\"\u003e\n                 \u003cDropdownMenuItem asChild\u003e\n                   \u003cLink\n                     to=\"/about\"\n                     className={isActiveRoute('/about') ? 'text-primary bg-accent' : ''}\n                   \u003e\n                     About\n                   \u003c/Link\u003e\n                 \u003c/DropdownMenuItem\u003e\n                 \u003cDropdownMenuItem asChild\u003e\n                   \u003cLink\n                     to=\"/faq\"\n                     className={isActiveRoute('/faq') ? 'text-primary bg-accent' : ''}\n                   \u003e\n                     FAQ\n                   \u003c/Link\u003e\n                 \u003c/DropdownMenuItem\u003e\n                 \u003cDropdownMenuItem asChild\u003e\n                   \u003cLink\n                     to=\"/podcast\"\n                     className={isActiveRoute('/podcast') ? 'text-primary bg-accent' : ''}\n                   \u003e\n                     Podcast\n                   \u003c/Link\u003e\n                 \u003c/DropdownMenuItem\u003e\n              \u003c/DropdownMenuContent\u003e\n            \u003c/DropdownMenu\u003e\n\n            \u003cDropdownMenu\u003e\n              \u003cDropdownMenuTrigger asChild\u003e\n                \u003cbutton className={`flex items-center space-x-1 transition-colors hover:bg-white/10 px-3 py-2 rounded-md ${\n                  isActorsToolsActive()\n                    ? \"text-yellow-400 bg-yellow-400/10\"\n                    : \"text-gray-300 hover:text-white\"\n                }`}\u003e\n                  \u003cspan\u003eActors Tools\u003c/span\u003e\n                  \u003cChevronDown className=\"h-4 w-4\" /\u003e\n                \u003c/button\u003e\n              \u003c/DropdownMenuTrigger\u003e\n                \u003cDropdownMenuContent className=\"w-56 bg-background border-border shadow-lg rounded-lg backdrop-blur-sm\"\u003e\n                  {/* Self Taping Submenu */}\n                  \u003cDropdownMenu\u003e\n                    \u003cDropdownMenuTrigger asChild\u003e\n                      \u003cDropdownMenuItem className=\"cursor-pointer\"\u003e\n                        \u003cspan className=\"flex items-center justify-between w-full\"\u003e\n                          Self Taping\n                          \u003cChevronDown className=\"h-4 w-4 ml-2\" /\u003e\n                        \u003c/span\u003e\n                      \u003c/DropdownMenuItem\u003e\n                    \u003c/DropdownMenuTrigger\u003e\n                    \u003cDropdownMenuContent side=\"right\" className=\"w-48\"\u003e\n                      {selfTapingItems.map((item) =\u003e (\n                        \u003cDropdownMenuItem key={item.href} asChild\u003e\n                          {item.external ? (\n                            \u003ca\n                              href={item.href}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"w-full block px-3 py-2 text-sm transition-colors hover:bg-accent hover:text-accent-foreground\"\n                            \u003e\n                              {item.label}\n                            \u003c/a\u003e\n                          ) : (\n                            \u003cLink\n                              to={item.href}\n                              className={`w-full block px-3 py-2 text-sm transition-colors ${isActiveRoute(item.href) ? 'bg-accent text-accent-foreground' : 'hover:bg-accent hover:text-accent-foreground'}`}\n                            \u003e\n                              \u003cHelpTooltip\n                                content=\"Upload a PDF or paste your scene, then start self-taping.\"\n                                side=\"right\"\n                              \u003e\n                                \u003cspan\u003e{item.label}\u003c/span\u003e\n                              \u003c/HelpTooltip\u003e\n                            \u003c/Link\u003e\n                          )}\n                        \u003c/DropdownMenuItem\u003e\n                      ))}\n                    \u003c/DropdownMenuContent\u003e\n                  \u003c/DropdownMenu\u003e\n                  \n                  {/* Other Actors Tools */}\n                  {actorsToolsItems.map((item) =\u003e (\n                    \u003cDropdownMenuItem key={item.href} asChild\u003e\n                      \u003cLink\n                        to={item.href}\n                        className={`w-full block px-3 py-2 text-sm transition-colors ${isActiveRoute(item.href) ? 'bg-accent text-accent-foreground' : 'hover:bg-accent hover:text-accent-foreground'}`}\n                      \u003e\n                        {item.label === \"Evaluate Headshot\" ? (\n                          \u003cHelpTooltip\n                            content=\"Get AI-powered feedback on your headshots to improve your casting potential.\"\n                            side=\"right\"\n                          \u003e\n                            \u003cspan\u003e{item.label}\u003c/span\u003e\n                          \u003c/HelpTooltip\u003e\n                        ) : (\n                          \u003cspan\u003e{item.label}\u003c/span\u003e\n                        )}\n                      \u003c/Link\u003e\n                    \u003c/DropdownMenuItem\u003e\n                  ))}\n                \u003c/DropdownMenuContent\u003e\n            \u003c/DropdownMenu\u003e\n\n            {/* Admin dropdown with multiple admin links */}\n            {isAdmin \u0026\u0026 (\n              \u003cDropdownMenu\u003e\n                \u003cDropdownMenuTrigger asChild\u003e\n                  \u003cbutton className={`flex items-center space-x-1 transition-colors hover:bg-white/10 px-3 py-2 rounded-md ${\n                    isActiveRoute('/admin')\n                      ? \"text-yellow-400 bg-yellow-400/10\"\n                      : \"text-gray-300 hover:text-white\"\n                  }`}\u003e\n                    \u003cspan\u003eAdmin\u003c/span\u003e\n                    \u003cChevronDown className=\"h-4 w-4\" /\u003e\n                  \u003c/button\u003e\n                \u003c/DropdownMenuTrigger\u003e\n                \u003cDropdownMenuContent className=\"w-56 bg-background border-border shadow-lg rounded-lg backdrop-blur-sm\"\u003e\n                   \u003cDropdownMenuItem asChild\u003e\n                    \u003cLink\n                      to=\"/admin/scripts\"\n                      className={`w-full block px-3 py-2 text-sm transition-colors ${isActiveRoute('/admin/scripts') ? 'bg-accent text-accent-foreground' : 'hover:bg-accent hover:text-accent-foreground'}`}\n                    \u003e\n                      Scripts Manager\n                    \u003c/Link\u003e\n                  \u003c/DropdownMenuItem\u003e\n                  \u003cDropdownMenuItem asChild\u003e\n                    \u003cLink\n                      to=\"/admin/coaches\"\n                      className={`w-full block px-3 py-2 text-sm transition-colors ${isActiveRoute('/admin/coaches') ? 'bg-accent text-accent-foreground' : 'hover:bg-accent hover:text-accent-foreground'}`}\n                    \u003e\n                      Coaches Manager\n                    \u003c/Link\u003e\n                  \u003c/DropdownMenuItem\u003e\n                  \u003cDropdownMenuItem asChild\u003e\n                    \u003cLink\n                      to=\"/admin/photographers\"\n                      className={`w-full block px-3 py-2 text-sm transition-colors ${isActiveRoute('/admin/photographers') ? 'bg-accent text-accent-foreground' : 'hover:bg-accent hover:text-accent-foreground'}`}\n                    \u003e\n                      Photographers Manager\n                    \u003c/Link\u003e\n                  \u003c/DropdownMenuItem\u003e\n                \u003c/DropdownMenuContent\u003e\n              \u003c/DropdownMenu\u003e\n            )}\n          \u003c/div\u003e\n          \n          {/* Desktop Buttons */}\n          \u003cdiv className=\"hidden md:flex items-center space-x-4\"\u003e\n            \u003cdiv className=\"flex items-center gap-2 mr-2\"\u003e\n              \u003cspan className=\"text-sm text-gray-300\"\u003eHelp\u003c/span\u003e\n              \u003cSwitch\n                checked={helpEnabled}\n                onCheckedChange={(v) =\u003e setHelpEnabled(v)}\n                aria-label=\"Toggle help mode\"\n              /\u003e\n            \u003c/div\u003e\n            {user ? (\n              \u003cDropdownMenu\u003e\n                \u003cDropdownMenuTrigger className=\"outline-none\"\u003e\n                  \u003cAvatar className=\"h-12 w-12\"\u003e\n                    \u003cAvatarImage src={avatarUrl ?? undefined} alt={user.user_metadata?.full_name || user.email || 'Profile'} /\u003e\n                    \u003cAvatarFallback\u003e\n                      {(user.user_metadata?.full_name || user.email || 'U')\n                        .split(' ')\n                        .map((n: string) =\u003e n[0])\n                        .join('')\n                        .slice(0, 2)\n                        .toUpperCase()}\n                    \u003c/AvatarFallback\u003e\n                  \u003c/Avatar\u003e\n                \u003c/DropdownMenuTrigger\u003e\n                \u003cDropdownMenuContent align=\"end\" className=\"bg-popover text-popover-foreground border-border z-50\"\u003e\n                  \u003cDropdownMenuItem className=\"text-foreground\" onClick={handleDashboardClick}\u003eDashboard\u003c/DropdownMenuItem\u003e\n                  \u003cDropdownMenuItem className=\"text-foreground\" onClick={handleProfileClick}\u003eProfile\u003c/DropdownMenuItem\u003e\n                  \u003cDropdownMenuItem className=\"text-foreground\" onClick={handleSignOut}\u003e\n                    \u003cLogOut className=\"w-4 h-4 mr-2\" /\u003e Sign Out\n                  \u003c/DropdownMenuItem\u003e\n                \u003c/DropdownMenuContent\u003e\n              \u003c/DropdownMenu\u003e\n            ) : (\n              \u003c\u003e\n                \u003cButton \n                  variant=\"ghost\" \n                  className=\"bg-white text-black hover:bg-black hover:text-white border border-gray-300\" \n                  onClick={handleLoginClick}\n                \u003e\n                  Sign In\n                \u003c/Button\u003e\n                \u003cButton \n                  size=\"sm\"\n                  className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-medium h-8 px-3 text-xs\" \n                  onClick={handleJoinMembershipClick}\n                \u003e\n                  Join Membership\n                \u003c/Button\u003e\n              \u003c/\u003e\n            )}\n          \u003c/div\u003e\n\n          {/* Mobile menu button */}\n          \u003cdiv className=\"md:hidden\"\u003e\n            \u003cButton\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() =\u003e setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"text-white hover:bg-white/10\"\n            \u003e\n              {isMobileMenuOpen ? \u003cX size={24} /\u003e : \u003cMenu size={24} /\u003e}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        {/* Mobile Navigation Menu */}\n        {isMobileMenuOpen \u0026\u0026 (\n          \u003cdiv className=\"md:hidden border-t border-gray-800 bg-black/90 backdrop-blur-md\"\u003e\n            \u003cdiv className=\"px-2 pt-2 pb-3 space-y-1\"\u003e\n              {navigationItems.map((item) =\u003e (\n                \u003cLink\n                  key={item.href}\n                  to={item.href}\n                  onClick={() =\u003e setIsMobileMenuOpen(false)}\n                  className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                    isActiveRoute(item.href)\n                      ? \"text-yellow-400 bg-gray-800/50\"\n                      : \"text-gray-300 hover:text-white hover:bg-gray-800/30\"\n                  }`}\n                \u003e\n                  {item.label}\n                \u003c/Link\u003e\n              ))}\n              {/* Self Taping items in mobile */}\n              \u003cdiv className=\"px-3 py-1 text-xs font-semibold text-gray-400 uppercase tracking-wide\"\u003eSelf Taping\u003c/div\u003e\n              {selfTapingItems.map((item) =\u003e (\n                item.external ? (\n                  \u003ca\n                    key={item.href}\n                    href={item.href}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"block px-6 py-2 rounded-md text-base font-medium transition-colors text-gray-300 hover:text-white hover:bg-gray-800/30\"\n                  \u003e\n                    {item.label}\n                  \u003c/a\u003e\n                ) : (\n                  \u003cLink\n                    key={item.href}\n                    to={item.href}\n                    onClick={() =\u003e setIsMobileMenuOpen(false)}\n                    className={`block px-6 py-2 rounded-md text-base font-medium transition-colors ${\n                      isActiveRoute(item.href)\n                        ? \"text-yellow-400 bg-gray-800/50\"\n                        : \"text-gray-300 hover:text-white hover:bg-gray-800/30\"\n                    }`}\n                  \u003e\n                    {item.label}\n                  \u003c/Link\u003e\n                )\n              ))}\n              \n              {/* Other Actors Tools items in mobile */}\n              \u003cdiv className=\"px-3 py-1 text-xs font-semibold text-gray-400 uppercase tracking-wide mt-4\"\u003eActors Tools\u003c/div\u003e\n              {actorsToolsItems.map((item) =\u003e (\n                \u003cLink\n                  key={item.href}\n                  to={item.href}\n                  onClick={() =\u003e setIsMobileMenuOpen(false)}\n                  className={`block px-6 py-2 rounded-md text-base font-medium transition-colors ${\n                    isActiveRoute(item.href)\n                      ? \"text-yellow-400 bg-gray-800/50\"\n                      : \"text-gray-300 hover:text-white hover:bg-gray-800/30\"\n                  }`}\n                \u003e\n                  {item.label}\n                \u003c/Link\u003e\n              ))}\n              {/* Admin links in mobile */}\n              {isAdmin \u0026\u0026 (\n                \u003c\u003e\n                   \u003cLink\n                    to=\"/admin/scripts\"\n                    onClick={() =\u003e setIsMobileMenuOpen(false)}\n                    className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                      isActiveRoute(\"/admin/scripts\")\n                        ? \"text-yellow-400 bg-gray-800/50\"\n                        : \"text-gray-300 hover:text-white hover:bg-gray-800/30\"\n                    }`}\n                  \u003e\n                    Scripts Manager\n                  \u003c/Link\u003e\n                  \u003cLink\n                    to=\"/admin/coaches\"\n                    onClick={() =\u003e setIsMobileMenuOpen(false)}\n                    className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                      isActiveRoute(\"/admin/coaches\")\n                        ? \"text-yellow-400 bg-gray-800/50\"\n                        : \"text-gray-300 hover:text-white hover:bg-gray-800/30\"\n                    }`}\n                  \u003e\n                    Coaches Manager\n                  \u003c/Link\u003e\n                  \u003cLink\n                    to=\"/admin/photographers\"\n                    onClick={() =\u003e setIsMobileMenuOpen(false)}\n                    className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                      isActiveRoute(\"/admin/photographers\")\n                        ? \"text-yellow-400 bg-gray-800/50\"\n                        : \"text-gray-300 hover:text-white hover:bg-gray-800/30\"\n                    }`}\n                  \u003e\n                    Photographers Manager\n                  \u003c/Link\u003e\n                \u003c/\u003e\n              )}\n              \u003cdiv className=\"px-3 py-2 flex items-center justify-between\"\u003e\n                \u003cspan className=\"text-gray-300\"\u003eHelp\u003c/span\u003e\n                \u003cSwitch checked={helpEnabled} onCheckedChange={(v)=\u003e setHelpEnabled(v)} aria-label=\"Toggle help mode\" /\u003e\n              \u003c/div\u003e\n              {user \u0026\u0026 (\n                \u003cLink\n                  to=\"/profile\"\n                  onClick={() =\u003e setIsMobileMenuOpen(false)}\n                  className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                    isActiveRoute(\"/profile\")\n                      ? \"text-yellow-400 bg-gray-800/50\"\n                      : \"text-gray-300 hover:text-white hover:bg-gray-800/30\"\n                  }`}\n                \u003e\n                  {user.user_metadata?.full_name || user.email}\n                \u003c/Link\u003e\n              )}\n              \u003cdiv className=\"pt-4 pb-3 border-t border-gray-800 space-y-2\"\u003e\n                {user ? (\n                  \u003c\u003e\n                    \u003cdiv className=\"px-3 py-2 text-gray-300 text-sm\"\u003e\n                      Signed in as: {user.user_metadata?.full_name || user.email}\n                    \u003c/div\u003e\n                    \u003cButton \n                      variant=\"ghost\" \n                      className=\"w-full bg-white text-black hover:bg-black hover:text-white justify-start border border-gray-300\" \n                      onClick={() =\u003e {\n                        handleDashboardClick();\n                        setIsMobileMenuOpen(false);\n                      }}\n                    \u003e\n                      Dashboard\n                    \u003c/Button\u003e\n                    \u003cButton \n                      variant=\"ghost\" \n                      className=\"w-full bg-white text-black hover:bg-black hover:text-white justify-start border border-gray-300\" \n                      onClick={() =\u003e {\n                        handleSignOut();\n                        setIsMobileMenuOpen(false);\n                      }}\n                    \u003e\n                      \u003cLogOut className=\"w-4 h-4 mr-2\" /\u003e\n                      Sign Out\n                    \u003c/Button\u003e\n                  \u003c/\u003e\n                ) : (\n                  \u003c\u003e\n                    \u003cButton \n                      variant=\"ghost\" \n                      className=\"w-full bg-white text-black hover:bg-black hover:text-white justify-start border border-gray-300\" \n                      onClick={() =\u003e {\n                        handleLoginClick();\n                        setIsMobileMenuOpen(false);\n                      }}\n                    \u003e\n                      Sign In\n                    \u003c/Button\u003e\n                    \u003cButton \n                      className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold\" \n                      onClick={() =\u003e {\n                        handleJoinMembershipClick();\n                        setIsMobileMenuOpen(false);\n                      }}\n                    \u003e\n                      Join Membership\n                    \u003c/Button\u003e\n                  \u003c/\u003e\n                )}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        )}\n      \u003c/div\u003e\n    \u003c/nav\u003e\n  );\n};\n\nexport default Navigation;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/PageHeaderNav.tsx",
//     "contents": "import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, Home, ArrowRight } from 'lucide-react';\n\ninterface PageHeaderNavProps {\n  title?: string;\n  showForward?: boolean;\n}\n\nconst PageHeaderNav: React.FC\u003cPageHeaderNavProps\u003e = ({ \n  title, \n  showForward = false \n}) =\u003e {\n  const navigate = useNavigate();\n\n  return (\n    \u003cdiv className=\"sticky top-0 z-50 bg-background/80 backdrop-blur border-b border-border\"\u003e\n      \u003cdiv className=\"container max-w-7xl mx-auto px-4 py-3\"\u003e\n        \u003cdiv className=\"flex items-center justify-between\"\u003e\n          \u003cdiv className=\"flex items-center gap-3\"\u003e\n            \u003cButton\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() =\u003e navigate(-1)}\n              className=\"flex items-center gap-2\"\n              aria-label=\"Go back\"\n            \u003e\n              \u003cArrowLeft className=\"w-4 h-4\" /\u003e\n              Back\n            \u003c/Button\u003e\n            \n            \u003cButton\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() =\u003e navigate('/')}\n              className=\"flex items-center gap-2\"\n              aria-label=\"Go to homepage\"\n            \u003e\n              \u003cHome className=\"w-4 h-4\" /\u003e\n              Home\n            \u003c/Button\u003e\n\n            {showForward \u0026\u0026 (\n              \u003cButton\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() =\u003e navigate(1)}\n                className=\"flex items-center gap-2\"\n                aria-label=\"Go forward\"\n              \u003e\n                \u003cArrowRight className=\"w-4 h-4\" /\u003e\n                Forward\n              \u003c/Button\u003e\n            )}\n          \u003c/div\u003e\n\n          {title \u0026\u0026 (\n            \u003ch1 className=\"font-semibold text-foreground text-lg\"\u003e\n              {title}\n            \u003c/h1\u003e\n          )}\n\n          \u003cdiv className=\"w-32\" /\u003e {/* Spacer for centered title */}\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default PageHeaderNav;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/PayPalButton.tsx",
//     "contents": "\nimport React, { useEffect, useRef } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\nimport { SubscriptionPlan } from '@/types/subscription';\n\ninterface PayPalButtonProps {\n  plan: SubscriptionPlan;\n  onSuccess?: () =\u003e void;\n}\n\ndeclare global {\n  interface Window {\n    paypal?: any;\n  }\n}\n\nconst PayPalButton: React.FC\u003cPayPalButtonProps\u003e = ({ plan, onSuccess }) =\u003e {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const paypalRef = useRef\u003cHTMLDivElement\u003e(null);\n  const buttonRendered = useRef(false);\n  const containerIdRef = useRef(`paypal-button-${plan.id}-${Math.random().toString(36).substr(2, 9)}`);\n\n  useEffect(() =\u003e {\n    const renderPayPalButton = () =\u003e {\n      if (!window.paypal || !paypalRef.current || buttonRendered.current) return;\n\n      console.log(`PayPal: Rendering button for plan ${plan.name} (${plan.id})`);\n\n      // Clear any existing PayPal buttons in this container\n      if (paypalRef.current) {\n        paypalRef.current.innerHTML = '';\n      }\n\n      buttonRendered.current = true;\n\n      // For Pro plan, use subscription, otherwise use one-time payment\n      if (plan.paypal_plan_id) {\n        // Subscription flow for Pro plan\n        window.paypal.Buttons({\n          style: {\n            shape: 'pill',\n            color: 'gold',\n            layout: 'vertical',\n            label: 'subscribe'\n          },\n          createSubscription: (data: any, actions: any) =\u003e {\n            return actions.subscription.create({\n              plan_id: plan.paypal_plan_id\n            });\n          },\n          onApprove: async (data: any, actions: any) =\u003e {\n            try {\n              console.log('PayPal subscription approved:', data);\n\n              if (!user) {\n                throw new Error('User not authenticated');\n              }\n\n              // Create subscription in database\n              const { data: newSubscription, error } = await supabase\n                .from('user_subscriptions')\n                .insert({\n                  user_id: user.id,\n                  plan_id: plan.id,\n                  status: 'active',\n                  paypal_subscription_id: data.subscriptionID\n                })\n                .select()\n                .single();\n\n              if (error) throw error;\n\n              // Create usage record\n              await supabase\n                .from('user_usage')\n                .insert({\n                  user_id: user.id,\n                  subscription_id: newSubscription.id\n                });\n\n              toast({\n                title: \"Subscription Successful!\",\n                description: `Welcome to the ${plan.name} plan!`,\n              });\n\n              onSuccess?.();\n            } catch (error: any) {\n              console.error('Subscription processing error:', error);\n              toast({\n                title: \"Subscription Error\",\n                description: error.message || \"Failed to process subscription\",\n                variant: \"destructive\",\n              });\n            }\n          },\n          onError: (err: any) =\u003e {\n            console.error('PayPal subscription error:', err);\n            toast({\n              title: \"Subscription Error\",\n              description: \"There was an error processing your subscription\",\n              variant: \"destructive\",\n            });\n          }\n        }).render(paypalRef.current);\n      } else {\n        // One-time payment flow for other plans\n        window.paypal.Buttons({\n          createOrder: (data: any, actions: any) =\u003e {\n            return actions.order.create({\n              purchase_units: [{\n                amount: {\n                  value: plan.price.toString(),\n                  currency_code: plan.currency\n                },\n                description: `${plan.name} Plan - MyAuditionAI.com`\n              }]\n            });\n          },\n          onApprove: async (data: any, actions: any) =\u003e {\n            try {\n              const order = await actions.order.capture();\n              console.log('PayPal order captured:', order);\n\n              if (!user) {\n                throw new Error('User not authenticated');\n              }\n\n              // Create subscription in database\n              const { data: newSubscription, error } = await supabase\n                .from('user_subscriptions')\n                .insert({\n                  user_id: user.id,\n                  plan_id: plan.id,\n                  status: 'active',\n                  paypal_subscription_id: order.id\n                })\n                .select()\n                .single();\n\n              if (error) throw error;\n\n              // Create usage record\n              await supabase\n                .from('user_usage')\n                .insert({\n                  user_id: user.id,\n                  subscription_id: newSubscription.id\n                });\n\n              toast({\n                title: \"Payment Successful!\",\n                description: `Welcome to the ${plan.name} plan!`,\n              });\n\n              onSuccess?.();\n            } catch (error: any) {\n              console.error('Payment processing error:', error);\n              toast({\n                title: \"Payment Error\",\n                description: error.message || \"Failed to process payment\",\n                variant: \"destructive\",\n              });\n            }\n          },\n          onError: (err: any) =\u003e {\n            console.error('PayPal error:', err);\n            toast({\n              title: \"Payment Error\",\n              description: \"There was an error processing your payment\",\n              variant: \"destructive\",\n            });\n          }\n        }).render(paypalRef.current);\n      }\n    };\n\n    // Load PayPal SDK if not already loaded\n    const existingScript = document.querySelector('script[src*=\"paypal.com/sdk/js\"]');\n    \n    if (!window.paypal \u0026\u0026 !existingScript) {\n      console.log('PayPal: Loading SDK script');\n      const script = document.createElement('script');\n      script.src = 'https://www.paypal.com/sdk/js?client-id=AYEDG0LTGwLOVEtJVaOV3np5AxHw7abQFFTyCLO5ceWtZ2_HTdyqepwGoJN6OOEhPRxZYiBHADZsXs0R\u0026vault=true\u0026intent=subscription\u0026currency=USD';\n      script.onload = renderPayPalButton;\n      script.onerror = () =\u003e console.error('PayPal: Failed to load SDK script');\n      document.head.appendChild(script);\n    } else if (window.paypal) {\n      console.log('PayPal: SDK already loaded, rendering button');\n      renderPayPalButton();\n    } else {\n      console.log('PayPal: SDK script already exists, waiting for load');\n      // Script exists but paypal not loaded yet, wait for it\n      const checkPayPal = setInterval(() =\u003e {\n        if (window.paypal) {\n          clearInterval(checkPayPal);\n          renderPayPalButton();\n        }\n      }, 100);\n      \n      // Cleanup interval after 10 seconds\n      setTimeout(() =\u003e clearInterval(checkPayPal), 10000);\n    }\n\n    return () =\u003e {\n      console.log(`PayPal: Cleaning up button for plan ${plan.name} (${plan.id})`);\n      buttonRendered.current = false;\n      if (paypalRef.current) {\n        paypalRef.current.innerHTML = '';\n      }\n    };\n  }, [plan, user, toast, onSuccess]);\n\n  if (plan.price === 0) {\n    return null; // Don't show PayPal button for free plans\n  }\n\n  return \u003cdiv ref={paypalRef} className=\"w-full\" /\u003e;\n};\n\nexport default PayPalButton;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ProfileImageUpload.tsx",
//     "contents": "\nimport { useState, useRef } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, X, Loader2 } from \"lucide-react\";\nimport { DataUseDisclaimer } from \"@/components/DataUseDisclaimer\";\n\ninterface ProfileImageUploadProps {\n  label: string;\n  currentUrl?: string;\n  onUpload: (url: string) =\u003e void;\n}\n\nexport function ProfileImageUpload({ label, currentUrl, onUpload }: ProfileImageUploadProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [uploading, setUploading] = useState(false);\n  const fileInputRef = useRef\u003cHTMLInputElement\u003e(null);\n\n  const handleFileSelect = (event: React.ChangeEvent\u003cHTMLInputElement\u003e) =\u003e {\n    const file = event.target.files?.[0];\n    if (file) {\n      uploadImage(file);\n    }\n  };\n\n  const uploadImage = async (file: File) =\u003e {\n    if (!user) return;\n\n    // Validate file type\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    if (!allowedTypes.includes(file.type)) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload a JPEG, PNG, or WebP image.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (5MB)\n    if (file.size \u003e 5 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please upload an image smaller than 5MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n\n    try {\n      const fileExt = file.name.split('.').pop();\n      // Sanitize filename: remove spaces, special chars, convert to lowercase\n      const sanitizedLabel = label.toLowerCase()\n        .replace(/[^a-z0-9]/g, '_')\n        .replace(/_+/g, '_')\n        .replace(/^_|_$/g, '');\n      const fileName = `${user.id}/${sanitizedLabel}_${Date.now()}.${fileExt}`;\n\n      const { error: uploadError } = await supabase.storage\n        .from('actor-profiles')\n        .upload(fileName, file, {\n          upsert: true\n        });\n\n      if (uploadError) throw uploadError;\n\n      const { data } = supabase.storage\n        .from('actor-profiles')\n        .getPublicUrl(fileName);\n\n      onUpload(data.publicUrl);\n\n      toast({\n        title: \"Success\",\n        description: \"Image uploaded successfully!\",\n      });\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload image.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const handleRemove = () =\u003e {\n    onUpload('');\n  };\n\n  return (\n    \u003cdiv className=\"space-y-4\"\u003e\n      \u003cLabel className=\"text-white\"\u003e{label}\u003c/Label\u003e\n      \n      {currentUrl ? (\n        \u003cdiv className=\"relative\"\u003e\n            \u003cimg\n              src={currentUrl}\n              alt={label}\n              className=\"w-full h-48 object-cover rounded-lg border\"\n              onError={(e) =\u003e {\n                console.error('Image failed to load:', currentUrl);\n                // Show placeholder instead of empty src\n                e.currentTarget.style.display = 'none';\n                const placeholder = e.currentTarget.nextElementSibling as HTMLElement;\n                if (placeholder) placeholder.style.display = 'flex';\n              }}\n            /\u003e\n            \u003cdiv className=\"w-full h-48 border-2 border-dashed border-muted-foreground/25 rounded-lg items-center justify-center hidden bg-muted/20\"\u003e\n              \u003cdiv className=\"text-center\"\u003e\n                \u003cUpload className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" /\u003e\n                \u003cp className=\"text-sm text-muted-foreground\"\u003eFailed to load image\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003cButton\n            variant=\"destructive\"\n            size=\"sm\"\n            className=\"absolute top-2 right-2 text-white hover:text-white\"\n            onClick={handleRemove}\n          \u003e\n            \u003cX className=\"h-4 w-4\" /\u003e\n          \u003c/Button\u003e\n        \u003c/div\u003e\n      ) : (\n        \u003cdiv className=\"w-full h-48 border-2 border-dashed border-muted-foreground/25 rounded-lg flex items-center justify-center\"\u003e\n          \u003cdiv className=\"text-center\"\u003e\n            \u003cUpload className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" /\u003e\n            \u003cp className=\"text-sm text-muted-foreground\"\u003eNo image uploaded\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      )}\n\n      \u003cinput\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/jpeg,image/jpg,image/png,image/webp\"\n        onChange={handleFileSelect}\n        className=\"hidden\"\n      /\u003e\n      \n      \u003cButton\n        variant=\"outline\"\n        onClick={() =\u003e fileInputRef.current?.click()}\n        disabled={uploading}\n        className=\"w-full\"\n      \u003e\n        {uploading \u0026\u0026 \u003cLoader2 className=\"mr-2 h-4 w-4 animate-spin\" /\u003e}\n        {currentUrl ? \"Replace Image\" : \"Upload Image\"}\n      \u003c/Button\u003e\n      \n      \u003cDataUseDisclaimer size=\"sm\" className=\"mt-3\" /\u003e\n    \u003c/div\u003e\n  );\n}\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ProfileVideoUpload.tsx",
//     "contents": "import { useState, useRef } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, X, Loader2, Play } from \"lucide-react\";\nimport { DataUseDisclaimer } from \"@/components/DataUseDisclaimer\";\n\ninterface ProfileVideoUploadProps {\n  label: string;\n  currentUrl?: string;\n  currentTitle?: string;\n  onUpload: (url: string) =\u003e void;\n  onTitleChange: (title: string) =\u003e void;\n}\n\nexport function ProfileVideoUpload({ \n  label, \n  currentUrl, \n  currentTitle, \n  onUpload, \n  onTitleChange \n}: ProfileVideoUploadProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [uploading, setUploading] = useState(false);\n  const fileInputRef = useRef\u003cHTMLInputElement\u003e(null);\n\n  const handleFileSelect = (event: React.ChangeEvent\u003cHTMLInputElement\u003e) =\u003e {\n    const file = event.target.files?.[0];\n    if (file) {\n      uploadVideo(file);\n    }\n  };\n\n  const uploadVideo = async (file: File) =\u003e {\n    if (!user) return;\n\n    // Validate file type\n    const allowedTypes = ['video/mp4', 'video/mov', 'video/quicktime'];\n    if (!allowedTypes.includes(file.type)) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload an MP4 or MOV video file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (50MB)\n    if (file.size \u003e 50 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please upload a video smaller than 50MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n\n    try {\n      const fileExt = file.name.split('.').pop();\n      // Sanitize filename: remove spaces, special chars, convert to lowercase\n      const sanitizedLabel = label.toLowerCase()\n        .replace(/[^a-z0-9]/g, '_')\n        .replace(/_+/g, '_')\n        .replace(/^_|_$/g, '');\n      const fileName = `${user.id}/${sanitizedLabel}_${Date.now()}.${fileExt}`;\n\n      const { error: uploadError } = await supabase.storage\n        .from('actor-profiles')\n        .upload(fileName, file, {\n          upsert: true\n        });\n\n      if (uploadError) throw uploadError;\n\n      const { data } = supabase.storage\n        .from('actor-profiles')\n        .getPublicUrl(fileName);\n\n      onUpload(data.publicUrl);\n\n      toast({\n        title: \"Success\",\n        description: \"Video uploaded successfully!\",\n      });\n    } catch (error) {\n      console.error('Error uploading video:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload video.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const handleRemove = () =\u003e {\n    onUpload('');\n    onTitleChange('');\n  };\n\n  return (\n    \u003cdiv className=\"space-y-4\"\u003e\n      \u003cLabel className=\"text-white\"\u003e{label}\u003c/Label\u003e\n      \n      \u003cdiv className=\"space-y-3\"\u003e\n        \u003cInput\n          placeholder=\"Video title\"\n          value={currentTitle || ''}\n          onChange={(e) =\u003e onTitleChange(e.target.value)}\n        /\u003e\n        \n        {currentUrl ? (\n          \u003cdiv className=\"relative\"\u003e\n            \u003cdiv className=\"w-full aspect-video rounded-lg border overflow-hidden\"\u003e\n              \u003cvideo\n                src={currentUrl}\n                className=\"w-full h-full object-cover\"\n                controls\n                preload=\"metadata\"\n                onError={(e) =\u003e {\n                  console.error('Video failed to load:', currentUrl);\n                  // Show error message instead of broken video\n                  e.currentTarget.style.display = 'none';\n                  const placeholder = e.currentTarget.parentElement?.nextElementSibling as HTMLElement;\n                  if (placeholder) placeholder.style.display = 'flex';\n                }}\n              /\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"w-full aspect-video border-2 border-dashed border-muted-foreground/25 rounded-lg items-center justify-center hidden bg-muted/20\"\u003e\n              \u003cdiv className=\"text-center\"\u003e\n                \u003cPlay className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" /\u003e\n                \u003cp className=\"text-sm text-muted-foreground\"\u003eFailed to load video\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cButton\n              variant=\"destructive\"\n              size=\"sm\"\n              className=\"absolute top-2 right-2 text-white hover:text-white\"\n              onClick={handleRemove}\n            \u003e\n              \u003cX className=\"h-4 w-4\" /\u003e\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        ) : (\n          \u003cdiv className=\"w-full aspect-video border-2 border-dashed border-muted-foreground/25 rounded-lg flex items-center justify-center\"\u003e\n            \u003cdiv className=\"text-center\"\u003e\n              \u003cPlay className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" /\u003e\n              \u003cp className=\"text-sm text-muted-foreground\"\u003eNo video uploaded\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        )}\n\n        \u003cinput\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"video/mp4,video/mov,video/quicktime\"\n          onChange={handleFileSelect}\n          className=\"hidden\"\n        /\u003e\n        \n        \u003cButton\n          variant=\"outline\"\n          onClick={() =\u003e fileInputRef.current?.click()}\n          disabled={uploading}\n          className=\"w-full\"\n        \u003e\n          {uploading \u0026\u0026 \u003cLoader2 className=\"mr-2 h-4 w-4 animate-spin\" /\u003e}\n          {currentUrl ? \"Replace Video\" : \"Upload Video\"}\n        \u003c/Button\u003e\n      \u003c/div\u003e\n      \n      \u003cDataUseDisclaimer size=\"sm\" className=\"mt-3\" /\u003e\n    \u003c/div\u003e\n  );\n}\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/PromoBanner.tsx",
//     "contents": "\nimport { Link } from \"react-router-dom\";\n\nconst PromoBanner = () =\u003e {\n  return (\n    \u003csection className=\"py-8 px-4 sm:px-6 lg:px-8\"\u003e\n      \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n        \u003cdiv className=\"flex flex-col lg:flex-row gap-4 items-start\"\u003e\n          {/* Book a Coach banner */}\n          \u003cdiv className=\"flex-[1.35]\"\u003e\n            \u003cLink to=\"/coaches\" className=\"block hover:opacity-90 transition-opacity\"\u003e\n              \u003cimg \n                src=\"/lovable-uploads/fc5ad1be-fef6-4291-bd9e-7853e3088982.png\" \n                alt=\"Book a Coach banner - Click to view available coaches\"\n                className=\"w-full h-auto object-contain rounded-lg cursor-pointer\"\n              /\u003e\n            \u003c/Link\u003e\n          \u003c/div\u003e\n          \n          {/* Sean Kanan banner - reduced 50% */}\n          \u003cdiv className=\"flex-1\"\u003e\n            \u003cLink to=\"/coaches\" className=\"block hover:opacity-90 transition-opacity\"\u003e\n              \u003cimg \n                src=\"/lovable-uploads/4a72a089-4a5a-49b2-ab0d-67a79e8a279c.png\" \n                alt=\"Spotlight Coach Sean Kanan banner - Click to view available coaches\"\n                className=\"w-1/2 h-auto object-contain rounded-lg cursor-pointer mx-auto\"\n                onError={(e) =\u003e { e.currentTarget.src = \"/seancoach.png\"; }}\n              /\u003e\n            \u003c/Link\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/section\u003e\n  );\n};\n\nexport default PromoBanner;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ProtectedRoute.tsx",
//     "contents": "\nimport React, { useEffect } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nconst ProtectedRoute: React.FC\u003cProtectedRouteProps\u003e = ({ children }) =\u003e {\n  const { user, loading } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() =\u003e {\n    if (!loading \u0026\u0026 !user) {\n      // Redirect to auth page with current location\n      navigate('/auth', { \n        state: { from: location },\n        replace: true \n      });\n    }\n  }, [user, loading, navigate, location]);\n\n  // Show loading spinner while checking auth\n  if (loading) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-black text-white flex items-center justify-center\"\u003e\n        \u003cdiv className=\"text-center\"\u003e\n          \u003cdiv className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-yellow-500 mx-auto mb-4\"\u003e\u003c/div\u003e\n          \u003cp className=\"text-gray-400\"\u003eLoading...\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  // Don't render children if not authenticated\n  if (!user) {\n    return null;\n  }\n\n  return \u003c\u003e{children}\u003c/\u003e;\n};\n\nexport default ProtectedRoute;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/QuickSceneSummary.tsx",
//     "contents": "import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Loader2, FileText, Sparkles } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface QuickSceneSummaryProps {\n  onSummaryGenerated?: (summary: string) =\u003e void;\n}\n\nconst QuickSceneSummary: React.FC\u003cQuickSceneSummaryProps\u003e = ({ \n  onSummaryGenerated \n}) =\u003e {\n  const [scriptText, setScriptText] = useState('');\n  const [summary, setSummary] = useState('');\n  const [generatingSummary, setGeneratingSummary] = useState(false);\n  const { toast } = useToast();\n\n  const generateSummary = async () =\u003e {\n    if (!scriptText.trim()) {\n      toast({\n        title: \"Missing Script\",\n        description: \"Please paste your script content first.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (scriptText.trim().length \u003c 50) {\n      toast({\n        title: \"Script Too Short\",\n        description: \"Please provide a longer script excerpt for better analysis.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setGeneratingSummary(true);\n    \n    try {\n      console.log('Generating scene summary for pasted text...');\n      \n      const { data, error } = await supabase.functions.invoke('summarize-scene', {\n        body: {\n          scriptTitle: 'Pasted Script',\n          scriptContent: scriptText\n        }\n      });\n\n      if (error) {\n        console.error('Summary generation error:', error);\n        throw error;\n      }\n\n      if (!data?.summary) {\n        throw new Error('No summary returned from the service');\n      }\n\n      setSummary(data.summary);\n      onSummaryGenerated?.(data.summary);\n      \n      toast({\n        title: \"Summary Generated!\",\n        description: \"Your scene summary has been created successfully.\"\n      });\n\n      console.log('Scene summary generated successfully');\n\n    } catch (error: any) {\n      console.error('Error generating summary:', error);\n      \n      let errorMessage = \"Failed to generate scene summary. Please try again.\";\n      \n      if (error.message?.includes('429') || error.message?.includes('quota exceeded')) {\n        errorMessage = \"🚨 API quota exceeded. Please try again later.\";\n      } else if (error.message?.includes('503') || error.message?.includes('overloaded')) {\n        errorMessage = \"⏳ Service temporarily overloaded. Please try again in a few moments.\";\n      } else if (error.message?.includes('400')) {\n        errorMessage = \"❌ Invalid script content. Please check your text and try again.\";\n      } else if (error.message?.includes('timeout')) {\n        errorMessage = \"⏱️ Request timed out. Your script might be too long.\";\n      }\n\n      toast({\n        title: \"Summary Failed\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    }\n    \n    setGeneratingSummary(false);\n  };\n\n  const clearAll = () =\u003e {\n    setScriptText('');\n    setSummary('');\n  };\n\n  return (\n    \u003cCard className=\"bg-card border-border\"\u003e\n      \u003cCardHeader className=\"pb-6\"\u003e\n        \u003cCardTitle className=\"text-foreground flex items-center gap-3 text-xl\"\u003e\n          \u003cdiv className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\"\u003e\n            \u003cFileText className=\"w-5 h-5 text-primary\" /\u003e\n          \u003c/div\u003e\n          Quick Scene Summary\n        \u003c/CardTitle\u003e\n        \u003cCardDescription className=\"text-muted-foreground text-base leading-relaxed\"\u003e\n          Paste any script text below and get an instant AI-powered summary of the scene\n        \u003c/CardDescription\u003e\n      \u003c/CardHeader\u003e\n      \n      \u003cCardContent className=\"space-y-6\"\u003e\n        {/* Script Input */}\n        \u003cdiv className=\"space-y-3\"\u003e\n          \u003cLabel htmlFor=\"script-text\" className=\"text-foreground text-base font-medium\"\u003e\n            Paste Script Content\n          \u003c/Label\u003e\n          \u003cTextarea\n            id=\"script-text\"\n            value={scriptText}\n            onChange={(e) =\u003e setScriptText(e.target.value)}\n            placeholder=\"Paste your script text here... (minimum 50 characters for meaningful analysis)\"\n            className=\"min-h-[200px] bg-background border-border text-foreground resize-y text-base\"\n          /\u003e\n          \u003cdiv className=\"flex items-center justify-between text-sm text-muted-foreground\"\u003e\n            \u003cspan\u003e{scriptText.length} characters\u003c/span\u003e\n            {scriptText.length \u003e 0 \u0026\u0026 (\n              \u003cButton\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={clearAll}\n                className=\"text-muted-foreground hover:text-foreground\"\n              \u003e\n                Clear\n              \u003c/Button\u003e\n            )}\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        {/* Generate Button */}\n        \u003cButton \n          onClick={generateSummary} \n          disabled={!scriptText.trim() || scriptText.trim().length \u003c 50 || generatingSummary}\n          className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground font-semibold text-base h-12\"\n        \u003e\n          {generatingSummary ? (\n            \u003c\u003e\n              \u003cLoader2 className=\"mr-3 h-5 w-5 animate-spin\" /\u003e\n              Generating Summary...\n            \u003c/\u003e\n          ) : (\n            \u003c\u003e\n              \u003cSparkles className=\"mr-3 h-5 w-5\" /\u003e\n              Summarize Scene\n            \u003c/\u003e\n          )}\n        \u003c/Button\u003e\n\n        {/* Summary Output */}\n        {summary \u0026\u0026 (\n          \u003cdiv className=\"space-y-3 pt-4 border-t border-border\"\u003e\n            \u003cLabel className=\"text-foreground text-base font-medium\"\u003e\n              Generated Summary\n            \u003c/Label\u003e\n            \u003cdiv className=\"bg-muted/50 rounded-lg p-4 border border-border\"\u003e\n              \u003cp className=\"text-foreground leading-relaxed text-base\"\u003e\n                {summary}\n              \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        )}\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n};\n\nexport default QuickSceneSummary;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ResumeUpload.tsx",
//     "contents": "import { useState, useRef } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, X, Loader2, FileText, Download } from \"lucide-react\";\nimport { DataUseDisclaimer } from \"@/components/DataUseDisclaimer\";\n\ninterface ResumeUploadProps {\n  currentUrl?: string;\n  onUpload: (url: string) =\u003e void;\n}\n\nexport function ResumeUpload({ currentUrl, onUpload }: ResumeUploadProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [uploading, setUploading] = useState(false);\n  const fileInputRef = useRef\u003cHTMLInputElement\u003e(null);\n\n  const handleFileSelect = (event: React.ChangeEvent\u003cHTMLInputElement\u003e) =\u003e {\n    const file = event.target.files?.[0];\n    if (file) {\n      uploadResume(file);\n    }\n  };\n\n  const uploadResume = async (file: File) =\u003e {\n    if (!user) return;\n\n    // Validate file type\n    if (file.type !== 'application/pdf') {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload a PDF file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (10MB)\n    if (file.size \u003e 10 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please upload a resume smaller than 10MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n\n    try {\n      const fileName = `${user.id}/resume_${Date.now()}.pdf`;\n\n      const { error: uploadError } = await supabase.storage\n        .from('actor-profiles')\n        .upload(fileName, file, {\n          upsert: true\n        });\n\n      if (uploadError) throw uploadError;\n\n      const { data } = supabase.storage\n        .from('actor-profiles')\n        .getPublicUrl(fileName);\n\n      onUpload(data.publicUrl);\n\n      toast({\n        title: \"Success\",\n        description: \"Resume uploaded successfully!\",\n      });\n    } catch (error) {\n      console.error('Error uploading resume:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload resume.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const handleRemove = () =\u003e {\n    onUpload('');\n  };\n\n  const handleDownload = () =\u003e {\n    if (currentUrl) {\n      window.open(currentUrl, '_blank');\n    }\n  };\n\n  return (\n    \u003cdiv className=\"space-y-4\"\u003e\n      \u003cLabel\u003eResume (PDF)\u003c/Label\u003e\n      \n      {currentUrl ? (\n        \u003cdiv className=\"border rounded-lg p-4\"\u003e\n          \u003cdiv className=\"flex items-center justify-between\"\u003e\n            \u003cdiv className=\"flex items-center space-x-3\"\u003e\n              \u003cFileText className=\"h-8 w-8 text-muted-foreground\" /\u003e\n              \u003cdiv\u003e\n                \u003cp className=\"font-medium\"\u003eResume.pdf\u003c/p\u003e\n                \u003cp className=\"text-sm text-muted-foreground\"\u003ePDF document uploaded\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"flex space-x-2\"\u003e\n              \u003cButton variant=\"outline\" size=\"sm\" onClick={handleDownload}\u003e\n                \u003cDownload className=\"h-4 w-4 mr-2\" /\u003e\n                View\n              \u003c/Button\u003e\n              \u003cButton variant=\"destructive\" size=\"sm\" className=\"text-white hover:text-white\" onClick={handleRemove}\u003e\n                \u003cX className=\"h-4 w-4\" /\u003e\n              \u003c/Button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      ) : (\n        \u003cdiv className=\"w-full h-32 border-2 border-dashed border-muted-foreground/25 rounded-lg flex items-center justify-center\"\u003e\n          \u003cdiv className=\"text-center\"\u003e\n            \u003cFileText className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" /\u003e\n            \u003cp className=\"text-sm text-muted-foreground\"\u003eNo resume uploaded\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      )}\n\n      \u003cinput\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"application/pdf\"\n        onChange={handleFileSelect}\n        className=\"hidden\"\n      /\u003e\n      \n      \u003cButton\n        variant=\"outline\"\n        onClick={() =\u003e fileInputRef.current?.click()}\n        disabled={uploading}\n        className=\"w-full\"\n      \u003e\n        {uploading \u0026\u0026 \u003cLoader2 className=\"mr-2 h-4 w-4 animate-spin\" /\u003e}\n        {currentUrl ? \"Replace Resume\" : \"Upload Resume\"}\n      \u003c/Button\u003e\n      \n      \u003cDataUseDisclaimer size=\"sm\" className=\"mt-3\" /\u003e\n    \u003c/div\u003e\n  );\n}",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/SceneSummarySection.tsx",
//     "contents": "import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, FileText, RefreshCw } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface SceneSummarySectionProps {\n  script: {\n    id: string;\n    title: string;\n    content: string;\n    scene_summary?: string;\n  };\n  onSummaryGenerated: (summary: string) =\u003e void;\n}\n\nexport const SceneSummarySection: React.FC\u003cSceneSummarySectionProps\u003e = ({\n  script,\n  onSummaryGenerated\n}) =\u003e {\n  const [generatingSummary, setGeneratingSummary] = useState(false);\n  const { toast } = useToast();\n\n  const generateSceneSummary = async () =\u003e {\n    if (!script) return;\n    \n    console.log('Starting scene summary generation for script:', script.id);\n    setGeneratingSummary(true);\n    \n    try {\n      console.log('Invoking summarize-scene function...');\n      const { data, error } = await supabase.functions.invoke('summarize-scene', {\n        body: {\n          scriptTitle: script.title,\n          scriptContent: script.content\n        }\n      });\n\n      console.log('Summary function response:', { data, error });\n\n      if (error) {\n        console.error('Summary function error:', error);\n        throw error;\n      }\n\n      if (!data?.summary) {\n        console.error('No summary in response:', data);\n        throw new Error('No summary generated');\n      }\n\n      console.log('Generated summary:', data.summary);\n\n      // Update the script in the database with the new summary\n      console.log('Updating script in database...');\n      const { error: updateError } = await supabase\n        .from('scripts')\n        .update({ scene_summary: data.summary })\n        .eq('id', script.id);\n\n      if (updateError) {\n        console.error('Database update error:', updateError);\n        throw updateError;\n      }\n\n      console.log('Script updated successfully');\n      \n      // Notify parent component\n      onSummaryGenerated(data.summary);\n\n      toast({\n        title: \"Summary Generated!\",\n        description: \"Scene summary has been created successfully.\"\n      });\n    } catch (error: any) {\n      console.error('Complete summary generation error:', error);\n      \n      let errorMessage = \"Failed to generate scene summary. Please try again.\";\n      \n      if (error.message?.includes('AI service not configured')) {\n        errorMessage = \"AI service is not properly configured. Please contact support.\";\n      } else if (error.message?.includes('429') || error.message?.includes('quota')) {\n        errorMessage = \"API quota exceeded. Please try again later.\";\n      } else if (error.message?.includes('Network')) {\n        errorMessage = \"Network error. Please check your connection and try again.\";\n      }\n      \n      toast({\n        title: \"Summary Generation Failed\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    }\n    setGeneratingSummary(false);\n  };\n\n  return (\n    \u003cCard className=\"bg-card border-border\"\u003e\n      \u003cCardHeader className=\"pb-4\"\u003e\n        \u003cCardTitle className=\"text-foreground flex items-center justify-between text-xl\"\u003e\n          \u003cdiv className=\"flex items-center gap-3\"\u003e\n            \u003cdiv className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\"\u003e\n              \u003cFileText className=\"w-5 h-5 text-primary\" /\u003e\n            \u003c/div\u003e\n            Scene Summary\n          \u003c/div\u003e\n          {script.scene_summary \u0026\u0026 (\n            \u003cButton\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={generateSceneSummary}\n              disabled={generatingSummary}\n              className=\"h-8 px-3\"\n            \u003e\n              {generatingSummary ? (\n                \u003cLoader2 className=\"h-4 w-4 animate-spin\" /\u003e\n              ) : (\n                \u003cRefreshCw className=\"h-4 w-4\" /\u003e\n              )}\n              {generatingSummary ? 'Generating...' : 'Regenerate'}\n            \u003c/Button\u003e\n          )}\n        \u003c/CardTitle\u003e\n      \u003c/CardHeader\u003e\n      \u003cCardContent\u003e\n        {script.scene_summary ? (\n          \u003cdiv className=\"bg-muted/30 rounded-lg p-4 border-l-4 border-primary\"\u003e\n            \u003cp className=\"text-foreground text-base leading-relaxed font-medium\"\u003e\n              {script.scene_summary}\n            \u003c/p\u003e\n          \u003c/div\u003e\n        ) : (\n          \u003cdiv className=\"bg-muted/20 rounded-lg p-6 text-center border-2 border-dashed border-muted-foreground/20\"\u003e\n            \u003cFileText className=\"h-12 w-12 text-muted-foreground/40 mx-auto mb-3\" /\u003e\n            \u003cp className=\"text-muted-foreground text-base mb-4\"\u003e\n              No scene summary available yet. Generate one to get AI insights about what's happening in this scene.\n            \u003c/p\u003e\n            \u003cButton\n              variant=\"outline\"\n              onClick={generateSceneSummary}\n              disabled={generatingSummary}\n              className=\"mx-auto\"\n            \u003e\n              {generatingSummary ? (\n                \u003c\u003e\n                  \u003cLoader2 className=\"h-4 w-4 animate-spin mr-2\" /\u003e\n                  Generating Summary...\n                \u003c/\u003e\n              ) : (\n                \u003c\u003e\n                  \u003cFileText className=\"h-4 w-4 mr-2\" /\u003e\n                  Generate Scene Summary\n                \u003c/\u003e\n              )}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        )}\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n};",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ScriptAnalysisHeader.tsx",
//     "contents": "\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { RotateCcw, FileText, MessageSquare } from 'lucide-react';\n\ninterface ScriptAnalysisHeaderProps {\n  onSignOut: () =\u003e void;\n  onResetWorkflow: () =\u003e void;\n  scriptTitle?: string;\n  showCoachingButton?: boolean;\n  onStartCoaching?: () =\u003e void;\n}\n\nconst ScriptAnalysisHeader: React.FC\u003cScriptAnalysisHeaderProps\u003e = ({\n  onSignOut,\n  onResetWorkflow,\n  scriptTitle,\n  showCoachingButton = false,\n  onStartCoaching\n}) =\u003e {\n  return (\n    \u003cCard className=\"bg-gray-900/50 border-gray-700 mb-8\"\u003e\n      \u003cCardContent className=\"p-6\"\u003e\n        \u003cdiv className=\"flex justify-between items-center\"\u003e\n          \u003cdiv\u003e\n            \u003ch1 className=\"text-3xl font-bold text-white mb-2 flex items-center gap-2\"\u003e\n              \u003cFileText className=\"w-8 h-8\" /\u003e\n              Scene Analysis\n            \u003c/h1\u003e\n            {scriptTitle \u0026\u0026 (\n              \u003cp className=\"text-gray-400 text-lg\"\u003e\n                Working on: \u003cspan className=\"text-white font-medium\"\u003e{scriptTitle}\u003c/span\u003e\n              \u003c/p\u003e\n            )}\n            {!scriptTitle \u0026\u0026 (\n              \u003cp className=\"text-gray-400\"\u003e\n                Analyze your scene with AI-powered acting techniques\n              \u003c/p\u003e\n            )}\n          \u003c/div\u003e\n          \u003cdiv className=\"flex gap-3\"\u003e\n            {showCoachingButton \u0026\u0026 onStartCoaching \u0026\u0026 (\n              \u003cButton \n                onClick={onStartCoaching}\n                className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-bold\"\n              \u003e\n                \u003cMessageSquare className=\"w-4 h-4 mr-2\" /\u003e\n                Start Coaching Session\n              \u003c/Button\u003e\n            )}\n            \u003cButton \n              onClick={onResetWorkflow}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold px-6 py-2 border-0 shadow-lg transition-all duration-200\"\n            \u003e\n              \u003cRotateCcw className=\"w-4 h-4 mr-2\" /\u003e\n              New Analysis\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n};\n\nexport default ScriptAnalysisHeader;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ScriptAnalysisHistory.tsx",
//     "contents": "import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Calendar, Users, ArrowRight, Eye, Trash2 } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\ninterface ScriptWithAnalysis {\n  id: string;\n  title: string;\n  content: string;\n  characters: string[];\n  genre: string | null;\n  created_at: string;\n  updated_at: string;\n  script_analyses: Array\u003c{\n    id: string;\n    created_at: string;\n    selected_character: string;\n    acting_method: string;\n  }\u003e;\n}\n\ninterface ScriptAnalysisHistoryProps {\n  onContinueAnalysis?: (scriptId: string) =\u003e void;\n  onStartFirstAnalysis?: () =\u003e void;\n}\n\nconst ScriptAnalysisHistory = ({ onContinueAnalysis, onStartFirstAnalysis }: ScriptAnalysisHistoryProps) =\u003e {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: scriptsWithAnalyses = [], isLoading } = useQuery({\n    queryKey: ['scripts-with-analyses', user?.id],\n    queryFn: async () =\u003e {\n      if (!user) return [];\n      \n      const { data, error } = await supabase\n        .from('scripts')\n        .select(`\n          *,\n          script_analyses(\n            id,\n            created_at,\n            selected_character,\n            acting_method\n          )\n        `)\n        .eq('user_id', user.id)\n        .order('updated_at', { ascending: false });\n\n      if (error) throw error;\n      \n      // Filter to only show scripts that have analyses and limit to 15\n      const scriptsWithExistingAnalyses = data\n        .filter(script =\u003e script.script_analyses \u0026\u0026 script.script_analyses.length \u003e 0)\n        .slice(0, 15);\n      \n      return scriptsWithExistingAnalyses as ScriptWithAnalysis[];\n    },\n    enabled: !!user,\n  });\n\n  const deleteScriptMutation = useMutation({\n    mutationFn: async (scriptId: string) =\u003e {\n      // Delete script analyses first (due to foreign key constraint)\n      const { error: analysisError } = await supabase\n        .from('script_analyses')\n        .delete()\n        .eq('script_id', scriptId);\n\n      if (analysisError) throw analysisError;\n\n      // Delete the script itself\n      const { error: scriptError } = await supabase\n        .from('scripts')\n        .delete()\n        .eq('id', scriptId)\n        .eq('user_id', user?.id);\n\n      if (scriptError) throw scriptError;\n    },\n    onSuccess: () =\u003e {\n      queryClient.invalidateQueries({ queryKey: ['scripts-with-analyses', user?.id] });\n      toast({\n        title: \"Script deleted\",\n        description: \"The script and its analysis have been removed from your history.\",\n      });\n    },\n    onError: (error: any) =\u003e {\n      console.error('Error deleting script:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete script. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleContinueAnalysis = (scriptId: string) =\u003e {\n    if (onContinueAnalysis) {\n      onContinueAnalysis(scriptId);\n    } else {\n      navigate(`/analysis/${scriptId}`);\n    }\n  };\n\n  const formatDate = (dateString: string) =\u003e {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      \u003cdiv className=\"space-y-4\"\u003e\n        {[...Array(3)].map((_, i) =\u003e (\n          \u003cCard key={i} className=\"animate-pulse\"\u003e\n            \u003cCardContent className=\"p-6\"\u003e\n              \u003cdiv className=\"h-4 bg-muted rounded w-1/3 mb-2\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"h-3 bg-muted rounded w-1/2\"\u003e\u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        ))}\n      \u003c/div\u003e\n    );\n  }\n\n  if (scriptsWithAnalyses.length === 0) {\n    return (\n      \u003cCard\u003e\n        \u003cCardContent className=\"p-12 text-center\"\u003e\n          \u003cFileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" /\u003e\n          \u003ch3 className=\"text-xl font-semibold text-foreground mb-2\"\u003eNo script analyses yet\u003c/h3\u003e\n          \u003cp className=\"text-muted-foreground mb-6\"\u003eStart by analyzing your first script to see your analysis history here.\u003c/p\u003e\n          \u003cButton \n            onClick={() =\u003e onStartFirstAnalysis ? onStartFirstAnalysis() : navigate('/analysis')}\n            className=\"bg-primary hover:bg-primary/90\"\n          \u003e\n            \u003cFileText className=\"w-4 h-4 mr-2\" /\u003e\n            Start First Analysis\n          \u003c/Button\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n    );\n  }\n\n  return (\n    \u003cdiv className=\"space-y-4\"\u003e\n      \u003cdiv className=\"mb-6\"\u003e\n        \u003cdiv className=\"flex justify-between items-center\"\u003e\n          \u003cdiv\u003e\n            \u003ch2 className=\"text-2xl font-bold text-foreground\"\u003eScene Analysis History\u003c/h2\u003e\n            \u003cp className=\"text-muted-foreground\"\u003eContinue working on your analyzed scenes\u003c/p\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"text-right\"\u003e\n            \u003cBadge variant=\"outline\" className=\"text-muted-foreground border-border\"\u003e\n              {scriptsWithAnalyses.length} / 15 scripts\n            \u003c/Badge\u003e\n            \u003cp className=\"text-xs text-muted-foreground mt-1\"\u003eMaximum 15 scripts saved\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      \u003cdiv className=\"grid gap-4\"\u003e\n        {scriptsWithAnalyses.map((script) =\u003e {\n          const latestAnalysis = script.script_analyses[0]; // Assuming they're ordered by date\n          \n          return (\n            \u003cCard key={script.id} className=\"hover:bg-accent/50 transition-colors\"\u003e\n              \u003cCardHeader\u003e\n                \u003cdiv className=\"flex justify-between items-start\"\u003e\n                  \u003cdiv className=\"flex-1\"\u003e\n                    \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n                      \u003cFileText className=\"w-5 h-5\" /\u003e\n                      {script.title}\n                      \u003cBadge variant=\"secondary\" className=\"bg-accent/30 text-accent-foreground border-accent ml-2\"\u003e\n                        Analyzed\n                      \u003c/Badge\u003e\n                    \u003c/CardTitle\u003e\n                    \u003cCardDescription className=\"text-muted-foreground mt-2\"\u003e\n                      {script.content.length \u003e 150 \n                        ? `${script.content.substring(0, 150)}...` \n                        : script.content}\n                    \u003c/CardDescription\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"flex items-center gap-2 ml-4\"\u003e\n                    \u003cButton\n                      onClick={() =\u003e navigate(`/analysis/${script.id}?step=results`)}\n                      size=\"sm\"\n                      className=\"bg-primary hover:bg-primary/90 font-medium px-4 py-2 transition-all duration-200 hover:scale-105 shadow-lg hover:shadow-xl\"\n                    \u003e\n                      \u003cEye className=\"w-4 h-4 mr-1\" /\u003e\n                      View Analysis\n                      \u003cArrowRight className=\"w-4 h-4 ml-1\" /\u003e\n                    \u003c/Button\u003e\n                    \n                    \u003cAlertDialog\u003e\n                      \u003cAlertDialogTrigger asChild\u003e\n                        \u003cButton\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"border-destructive text-destructive hover:bg-destructive hover:text-destructive-foreground\"\n                        \u003e\n                          \u003cTrash2 className=\"w-4 h-4\" /\u003e\n                        \u003c/Button\u003e\n                      \u003c/AlertDialogTrigger\u003e\n                      \u003cAlertDialogContent\u003e\n                        \u003cAlertDialogHeader\u003e\n                          \u003cAlertDialogTitle className=\"text-foreground\"\u003eDelete Scene Analysis\u003c/AlertDialogTitle\u003e\n                          \u003cAlertDialogDescription className=\"text-muted-foreground\"\u003e\n                            Are you sure you want to delete \"{script.title}\" and all its analyses? This action cannot be undone.\n                          \u003c/AlertDialogDescription\u003e\n                        \u003c/AlertDialogHeader\u003e\n                        \u003cAlertDialogFooter\u003e\n                          \u003cAlertDialogCancel\u003e\n                            Cancel\n                          \u003c/AlertDialogCancel\u003e\n                          \u003cAlertDialogAction\n                            onClick={() =\u003e deleteScriptMutation.mutate(script.id)}\n                            className=\"bg-destructive hover:bg-destructive/90 text-destructive-foreground\"\n                            disabled={deleteScriptMutation.isPending}\n                          \u003e\n                            {deleteScriptMutation.isPending ? \"Deleting...\" : \"Delete\"}\n                          \u003c/AlertDialogAction\u003e\n                        \u003c/AlertDialogFooter\u003e\n                      \u003c/AlertDialogContent\u003e\n                    \u003c/AlertDialog\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent\u003e\n                \u003cdiv className=\"flex flex-wrap gap-2 mb-4\"\u003e\n                  {script.genre \u0026\u0026 (\n                    \u003cBadge variant=\"secondary\" className=\"bg-secondary/30 text-secondary-foreground border-secondary\"\u003e\n                      {script.genre}\n                    \u003c/Badge\u003e\n                  )}\n                  {script.characters \u0026\u0026 script.characters.length \u003e 0 \u0026\u0026 (\n                    \u003cBadge variant=\"secondary\" className=\"bg-accent/30 text-accent-foreground border-accent\"\u003e\n                      \u003cUsers className=\"w-3 h-3 mr-1\" /\u003e\n                      {script.characters.length} character{script.characters.length !== 1 ? 's' : ''}\n                    \u003c/Badge\u003e\n                  )}\n                  \u003cBadge variant=\"outline\" className=\"text-muted-foreground border-border\"\u003e\n                    \u003cCalendar className=\"w-3 h-3 mr-1\" /\u003e\n                    Last analyzed: {formatDate(latestAnalysis.created_at)}\n                  \u003c/Badge\u003e\n                \u003c/div\u003e\n\n                {latestAnalysis \u0026\u0026 (\n                  \u003cdiv className=\"mb-4 p-3 bg-muted/50 rounded-lg\"\u003e\n                    \u003cp className=\"text-sm text-muted-foreground mb-1\"\u003eLatest Analysis:\u003c/p\u003e\n                    \u003cdiv className=\"flex flex-wrap gap-2\"\u003e\n                      \u003cBadge variant=\"outline\" className=\"text-xs text-primary border-primary\"\u003e\n                        Character: {latestAnalysis.selected_character}\n                      \u003c/Badge\u003e\n                      \u003cBadge variant=\"outline\" className=\"text-xs text-secondary-foreground border-secondary\"\u003e\n                        Method: {latestAnalysis.acting_method}\n                      \u003c/Badge\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                )}\n\n                {script.characters \u0026\u0026 script.characters.length \u003e 0 \u0026\u0026 (\n                  \u003cdiv\u003e\n                    \u003cp className=\"text-sm text-muted-foreground mb-2\"\u003eAll Characters:\u003c/p\u003e\n                    \u003cdiv className=\"flex flex-wrap gap-1\"\u003e\n                      {script.characters.slice(0, 5).map((character, index) =\u003e (\n                        \u003cBadge key={index} variant=\"outline\" className=\"text-xs text-muted-foreground border-border\"\u003e\n                          {character}\n                        \u003c/Badge\u003e\n                      ))}\n                      {script.characters.length \u003e 5 \u0026\u0026 (\n                        \u003cBadge variant=\"outline\" className=\"text-xs text-muted-foreground border-border\"\u003e\n                          +{script.characters.length - 5} more\n                        \u003c/Badge\u003e\n                      )}\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                )}\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          );\n        })}\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default ScriptAnalysisHistory;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ScriptAnalysisMarketing.tsx",
//     "contents": "\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Upload, Brain, Target, FileText } from 'lucide-react';\n\ninterface ScriptAnalysisMarketingProps {\n  onStartAnalysisClick: () =\u003e void;\n}\n\nconst ScriptAnalysisMarketing: React.FC\u003cScriptAnalysisMarketingProps\u003e = ({ onStartAnalysisClick }) =\u003e {\n  const analysisFeatures = [\n    {\n      icon: Upload,\n      title: \"Upload Your Script\",\n      description: \"Easily upload scripts in PDF or text format for analysis\"\n    },\n    {\n      icon: Brain,\n      title: \"AI-Powered Analysis\",\n      description: \"Advanced AI breaks down character motivations and scene objectives\"\n    },\n    {\n      icon: Target,\n      title: \"Character Objectives\",\n      description: \"Identify clear objectives, obstacles, and tactics for each scene\"\n    },\n    {\n      icon: FileText,\n      title: \"Detailed Reports\",\n      description: \"Get comprehensive breakdowns with actionable insights\"\n    }\n  ];\n\n  return (\n    \u003c\u003e\n      {/* Hero Section */}\n      \u003cdiv className=\"text-center mb-16\"\u003e\n        \u003ch1 className=\"text-5xl md:text-6xl font-bold mb-6\"\u003e\n          Scene{\" \"}\n          \u003cspan className=\"bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n            Analysis\n          \u003c/span\u003e\n        \u003c/h1\u003e\n        \u003cp className=\"text-xl text-marketing-text-dark max-w-3xl mx-auto mb-8\"\u003e\n          Transform your scene study with AI-powered analysis that reveals character depths, \n          scene objectives, and performance insights you might have missed.\n        \u003c/p\u003e\n        \u003cButton size=\"lg\" className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-bold px-8 py-4 text-lg\" onClick={onStartAnalysisClick}\u003e\n          Start Analysis\n        \u003c/Button\u003e\n      \u003c/div\u003e\n\n      {/* Features Grid */}\n      \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\"\u003e\n        {analysisFeatures.map((feature, index) =\u003e (\n          \u003cCard key={index} className=\"bg-gray-900/50 border-gray-700 hover:border-gray-600 transition-colors\"\u003e\n            \u003cCardHeader className=\"text-center\"\u003e\n              \u003cfeature.icon className=\"w-12 h-12 text-yellow-400 mx-auto mb-4\" /\u003e\n              \u003cCardTitle className=\"text-white text-lg\"\u003e{feature.title}\u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent\u003e\n              \u003cCardDescription className=\"text-marketing-text-dark text-center\"\u003e\n                {feature.description}\n              \u003c/CardDescription\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        ))}\n      \u003c/div\u003e\n\n      {/* Call to Action */}\n      \u003cdiv className=\"text-center bg-marketing-cta-bg rounded-lg p-12\"\u003e\n        \u003ch2 className=\"text-3xl font-bold mb-4 text-marketing-text-dark\"\u003eReady to Analyze Your Next Scene?\u003c/h2\u003e\n        \u003cp className=\"text-marketing-text-dark mb-6 text-lg\"\u003e\n          Join thousands of actors who've improved their performances with our analysis tools.\n        \u003c/p\u003e\n        \u003cButton size=\"lg\" className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-bold px-8 py-4 text-lg\" onClick={onStartAnalysisClick}\u003e\n          Get Started Now\n        \u003c/Button\u003e\n      \u003c/div\u003e\n    \u003c/\u003e\n  );\n};\n\nexport default ScriptAnalysisMarketing;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ScriptAnalysisWorkflowSteps.tsx",
//     "contents": "\nimport React from 'react';\n\ntype AnalysisStep = 'upload' | 'analyze' | 'results' | 'coaching' | 'video-upload' | 'video-evaluation';\n\ninterface ScriptAnalysisWorkflowStepsProps {\n  currentStep: AnalysisStep;\n}\n\nconst ScriptAnalysisWorkflowSteps: React.FC\u003cScriptAnalysisWorkflowStepsProps\u003e = ({ currentStep }) =\u003e {\n  const getStepStatus = (step: AnalysisStep) =\u003e {\n    const steps = ['upload', 'analyze', 'results'];\n    const currentIndex = steps.indexOf(currentStep);\n    const stepIndex = steps.indexOf(step);\n    \n    if (stepIndex \u003c currentIndex) return 'completed';\n    if (stepIndex === currentIndex) return 'current';\n    return 'upcoming';\n  };\n\n  const getStepClasses = (status: string) =\u003e {\n    switch (status) {\n      case 'completed':\n        return 'text-green-400';\n      case 'current':\n        return 'text-yellow-400';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  const getCircleClasses = (status: string) =\u003e {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-400 text-black';\n      case 'current':\n        return 'bg-yellow-400 text-black';\n      default:\n        return 'bg-gray-600';\n    }\n  };\n\n  return (\n    \u003cdiv className=\"mb-8\"\u003e\n      \u003cdiv className=\"flex items-center space-x-4\"\u003e\n        \u003cdiv className={`flex items-center space-x-2 ${getStepClasses(getStepStatus('upload'))}`}\u003e\n          \u003cdiv className={`w-8 h-8 rounded-full flex items-center justify-center ${getCircleClasses(getStepStatus('upload'))}`}\u003e\n            1\n          \u003c/div\u003e\n          \u003cspan\u003eUpload Script\u003c/span\u003e\n        \u003c/div\u003e\n        \u003cdiv className=\"h-px bg-gray-600 flex-1\"\u003e\u003c/div\u003e\n        \u003cdiv className={`flex items-center space-x-2 ${getStepClasses(getStepStatus('analyze'))}`}\u003e\n          \u003cdiv className={`w-8 h-8 rounded-full flex items-center justify-center ${getCircleClasses(getStepStatus('analyze'))}`}\u003e\n            2\n          \u003c/div\u003e\n          \u003cspan\u003eConfigure Analysis\u003c/span\u003e\n        \u003c/div\u003e\n        \u003cdiv className=\"h-px bg-gray-600 flex-1\"\u003e\u003c/div\u003e\n        \u003cdiv className={`flex items-center space-x-2 ${getStepClasses(getStepStatus('results'))}`}\u003e\n          \u003cdiv className={`w-8 h-8 rounded-full flex items-center justify-center ${getCircleClasses(getStepStatus('results'))}`}\u003e\n            3\n          \u003c/div\u003e\n          \u003cspan\u003eView Results\u003c/span\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default ScriptAnalysisWorkflowSteps;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ScriptAnalyzer.tsx",
//     "contents": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, BookOpen, User } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAIUsageLimit } from '@/hooks/useAIUsageLimit';\nimport { SceneSummarySection } from '@/components/SceneSummarySection';\nimport QuickSceneSummary from '@/components/QuickSceneSummary';\nimport { DataUseDisclaimer } from '@/components/DataUseDisclaimer';\ninterface ScriptAnalyzerProps {\n  scriptId: string;\n  onAnalysisComplete: (analysisId: string) =\u003e void;\n}\ninterface Script {\n  id: string;\n  title: string;\n  content: string;\n  characters: string[];\n  scene_summary?: string;\n}\nconst ScriptAnalyzer: React.FC\u003cScriptAnalyzerProps\u003e = ({\n  scriptId,\n  onAnalysisComplete\n}) =\u003e {\n  const [script, setScript] = useState\u003cScript | null\u003e(null);\n  const [selectedCharacter, setSelectedCharacter] = useState('');\n  const [actingMethod, setActingMethod] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [analyzing, setAnalyzing] = useState(false);\n  const {\n    user\n  } = useAuth();\n  const {\n    toast\n  } = useToast();\n  const {\n    checkLimit,\n    updateUsage,\n    showLimitNotification\n  } = useAIUsageLimit();\n  const actingMethods = [{\n    value: 'meisner',\n    label: 'Meisner Technique',\n    description: 'Focus on truthful reactions and living truthfully under imaginary circumstances'\n  }, {\n    value: 'stanislavski',\n    label: 'Stanislavski System',\n    description: 'Emotional memory, given circumstances, and the magic if'\n  }, {\n    value: 'method',\n    label: 'Method Acting',\n    description: 'Drawing from personal experiences and emotions'\n  }, {\n    value: 'hagen',\n    label: 'Hagen Technique',\n    description: 'Substitution and emotional memory work'\n  }, {\n    value: 'none',\n    label: 'None (Natural Analysis)',\n    description: 'Analyze performance based on natural observation and general acting principles'\n  }];\n  useEffect(() =\u003e {\n    fetchScript();\n  }, [scriptId]);\n  const fetchScript = async () =\u003e {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('scripts').select('*').eq('id', scriptId).single();\n      if (error) throw error;\n      setScript(data as Script);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load script.\",\n        variant: \"destructive\"\n      });\n    }\n    setLoading(false);\n  };\n\n  const handleSummaryGenerated = (summary: string) =\u003e {\n    setScript(prev =\u003e prev ? { ...prev, scene_summary: summary } : null);\n  };\n  const handleAnalyze = async () =\u003e {\n    if (!selectedCharacter || !actingMethod) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select a character and acting method.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Validate character exists in script and is not malformed\n    if (!script?.characters?.includes(selectedCharacter)) {\n      toast({\n        title: \"Invalid Character\",\n        description: \"Selected character is not found in the script. Please choose a valid character.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Check for malformed character names (likely dialogue fragments)\n    if (selectedCharacter.length \u003e 30 || selectedCharacter.split(' ').length \u003e 3) {\n      toast({\n        title: \"Invalid Character Selection\",\n        description: \"The selected character appears to be malformed. Please upload the script again or choose a different character.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Validate script content\n    if (!script?.content || script.content.trim().length \u003c 50) {\n      toast({\n        title: \"Invalid Script\",\n        description: \"Script content is too short or empty. Please upload a valid script.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    if (!checkLimit('script_analyses')) {\n      showLimitNotification('Script Analyses');\n      return;\n    }\n    setAnalyzing(true);\n    try {\n      // Auto-generate scene summary if missing\n      if (!script.scene_summary) {\n        console.log('No scene summary found, generating one...');\n        try {\n          const { data: summaryData, error: summaryError } = await supabase.functions.invoke('summarize-scene', {\n            body: {\n              scriptTitle: script.title,\n              scriptContent: script.content\n            }\n          });\n\n          if (!summaryError \u0026\u0026 summaryData?.summary) {\n            // Update the script in the database with the new summary\n            const { error: updateError } = await supabase\n              .from('scripts')\n              .update({ scene_summary: summaryData.summary })\n              .eq('id', scriptId);\n\n            if (!updateError) {\n              // Update local state\n              setScript(prev =\u003e prev ? { ...prev, scene_summary: summaryData.summary } : null);\n              console.log('Scene summary generated and saved successfully');\n            }\n          }\n        } catch (summaryError) {\n          console.log('Failed to generate scene summary, continuing with analysis:', summaryError);\n          // Don't block the analysis if summary generation fails\n        }\n      }\n\n      console.log('Starting analysis with:', {\n        scriptTitle: script?.title,\n        selectedCharacter,\n        actingMethod,\n        scriptLength: script?.content?.length,\n        charactersCount: script?.characters?.length\n      });\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('analyze-script', {\n        body: {\n          scriptContent: script?.content,\n          scriptTitle: script?.title,\n          selectedCharacter,\n          actingMethod\n        }\n      });\n      if (error) {\n        console.error('Edge function error:', error);\n        throw error;\n      }\n      if (!data) {\n        throw new Error('No data returned from analysis function');\n      }\n      await updateUsage('script_analyses');\n\n      // Store the analysis in the database\n      const {\n        data: analysisData,\n        error: analysisError\n      } = await supabase.from('script_analyses').insert({\n        script_id: scriptId,\n        user_id: user?.id,\n        selected_character: selectedCharacter,\n        acting_method: actingMethod,\n        analysis_data: data.analysis_data,\n        objectives: data.objectives,\n        obstacles: data.obstacles,\n        tactics: data.tactics\n      }).select().single();\n      if (analysisError) throw analysisError;\n      toast({\n        title: \"Analysis Complete!\",\n        description: `Your ${selectedCharacter} analysis using ${actingMethods.find(m =\u003e m.value === actingMethod)?.label} is ready.`\n      });\n      onAnalysisComplete(analysisData.id);\n    } catch (error: any) {\n      console.error('Analysis error:', error);\n      let errorMessage = \"Failed to analyze script. Please try again.\";\n      let showRetry = true;\n\n      // Parse different error types for better user experience\n      if (error.message?.includes('429') || error.message?.includes('quota exceeded')) {\n        errorMessage = \"🚨 API quota exceeded. Your Google AI plan has reached its daily limit. Please upgrade your Google AI API plan or wait until tomorrow.\";\n        showRetry = false;\n      } else if (error.message?.includes('503') || error.message?.includes('overloaded')) {\n        errorMessage = \"⏳ Google AI service is temporarily overloaded. Please try again in a few moments.\";\n      } else if (error.message?.includes('400') || error.message?.includes('Invalid request')) {\n        errorMessage = \"❌ Invalid script format. Please check your script content and character selection.\";\n      } else if (error.message?.includes('403') || error.message?.includes('access denied')) {\n        errorMessage = \"🔑 API access denied. Please check your Google AI API key configuration.\";\n        showRetry = false;\n      } else if (error.message?.includes('API key')) {\n        errorMessage = \"🔧 AI service configuration error. Please contact support.\";\n        showRetry = false;\n      } else if (error.message?.includes('timeout')) {\n        errorMessage = \"⏱️ Analysis timed out. Your script might be too long. Try with a shorter script.\";\n      } else if (error.message?.includes('NetworkError') || error.message?.includes('fetch')) {\n        errorMessage = \"🌐 Network connection error. Please check your internet connection and try again.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      toast({\n        title: \"Analysis Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n        duration: showRetry ? 5000 : 8000\n      });\n    }\n    setAnalyzing(false);\n  };\n  if (loading) {\n    return \u003cdiv className=\"flex items-center justify-center min-h-[400px]\"\u003e\n        \u003cLoader2 className=\"h-8 w-8 animate-spin text-foreground\" /\u003e\n        \u003cspan className=\"ml-2 text-foreground\"\u003eLoading script...\u003c/span\u003e\n      \u003c/div\u003e;\n  }\n  if (!script) return null;\n  return \u003cdiv className=\"space-y-8\"\u003e\n      {/* Page Header */}\n      \u003cdiv className=\"text-center space-y-4\"\u003e\n        \u003ch1 className=\"text-4xl font-bold text-foreground\"\u003eConfigure Your Analysis\u003c/h1\u003e\n        \u003cp className=\"text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed\"\u003e\n          Choose your character and acting method to get personalized analysis for \u003cstrong\u003e\"{script.title}\"\u003c/strong\u003e\n        \u003c/p\u003e\n      \u003c/div\u003e\n\n      {/* Scene Summary */}\n      \u003cSceneSummarySection \n        script={script}\n        onSummaryGenerated={handleSummaryGenerated}\n      /\u003e\n\n      {/* Two-Column Layout */}\n      \u003cdiv className=\"space-y-8\"\u003e\n        \n        {/* Left: Configuration */}\n        \u003cCard className=\"bg-card border-border\"\u003e\n          \u003cCardHeader className=\"pb-6\"\u003e\n            \u003cCardTitle className=\"text-foreground flex items-center gap-3 text-xl\"\u003e\n              \u003cdiv className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\"\u003e\n                \u003cBookOpen className=\"w-5 h-5 text-primary\" /\u003e\n              \u003c/div\u003e\n              Analysis Configuration\n            \u003c/CardTitle\u003e\n            \u003cCardDescription className=\"text-muted-foreground text-base leading-relaxed\"\u003e\n              Select the character and method for your personalized scene analysis\n            \u003c/CardDescription\u003e\n          \u003c/CardHeader\u003e\n          \u003cCardContent className=\"space-y-8\"\u003e\n            {/* Character Selection */}\n            \u003cdiv className=\"space-y-4\"\u003e\n              \u003cLabel htmlFor=\"character\" className=\"text-foreground flex items-center gap-3 text-lg font-medium\"\u003e\n                \u003cUser className=\"h-5 w-5 text-primary\" /\u003e\n                Select Character to Analyze\n              \u003c/Label\u003e\n              \u003cSelect value={selectedCharacter} onValueChange={setSelectedCharacter}\u003e\n                \u003cSelectTrigger className=\"bg-background border-border text-foreground h-14 text-base\"\u003e\n                  \u003cSelectValue placeholder=\"Choose a character from your script...\" /\u003e\n                \u003c/SelectTrigger\u003e\n                \u003cSelectContent className=\"bg-background border-border\"\u003e\n                  {script.characters \u0026\u0026 script.characters.length \u003e 0 ? script.characters.filter(character =\u003e character.length \u003c= 30 \u0026\u0026 character.split(' ').length \u003c= 3 \u0026\u0026 !/\\b(READY|WINNER|ORDERS|CONGRATULATIONS|INCREDIBLE|HAVOC|CRIMSON)\\b/i.test(character)).map(character =\u003e \u003cSelectItem key={character} value={character} className=\"text-foreground hover:bg-muted text-base py-3\"\u003e\n                          \u003cdiv className=\"flex items-center justify-between w-full\"\u003e\n                            \u003cspan className=\"font-medium\"\u003e{character}\u003c/span\u003e\n                            {character.length \u003e 20 \u0026\u0026 \u003cspan className=\"text-xs text-muted-foreground ml-2\"\u003e(Verify if valid)\u003c/span\u003e}\n                          \u003c/div\u003e\n                        \u003c/SelectItem\u003e) : \u003cSelectItem value=\"no-characters\" disabled className=\"text-muted-foreground\"\u003e\n                      No valid characters found in script\n                    \u003c/SelectItem\u003e}\n                \u003c/SelectContent\u003e\n              \u003c/Select\u003e\n            \u003c/div\u003e\n\n            {/* Acting Method Selection */}\n            \u003cdiv className=\"space-y-4\"\u003e\n              \u003cLabel htmlFor=\"method\" className=\"text-foreground text-lg font-medium\"\u003e\n                Acting Method/Technique\n              \u003c/Label\u003e\n              \u003cSelect value={actingMethod} onValueChange={setActingMethod}\u003e\n                \u003cSelectTrigger className=\"bg-background border-border text-foreground h-14 text-base\"\u003e\n                  \u003cSelectValue placeholder=\"Choose your preferred acting method...\" /\u003e\n                \u003c/SelectTrigger\u003e\n                \u003cSelectContent className=\"bg-background border-border\"\u003e\n                  {actingMethods.map(method =\u003e \u003cSelectItem key={method.value} value={method.value} className=\"text-foreground hover:bg-muted py-4\"\u003e\n                      \u003cdiv className=\"space-y-1\"\u003e\n                        \u003cdiv className=\"font-medium text-base\"\u003e{method.label}\u003c/div\u003e\n                        \u003cdiv className=\"text-sm text-muted-foreground leading-relaxed\"\u003e{method.description}\u003c/div\u003e\n                      \u003c/div\u003e\n                    \u003c/SelectItem\u003e)}\n                \u003c/SelectContent\u003e\n              \u003c/Select\u003e\n              {actingMethod \u0026\u0026 \u003cdiv className=\"mt-3\"\u003e\n                  \u003cBadge variant=\"secondary\" className=\"bg-primary/10 text-primary px-4 py-2 text-base\"\u003e\n                    {actingMethods.find(m =\u003e m.value === actingMethod)?.label}\n                  \u003c/Badge\u003e\n                \u003c/div\u003e}\n            \u003c/div\u003e\n\n            {/* Analyze Button */}\n            \u003cButton onClick={handleAnalyze} disabled={!selectedCharacter || !actingMethod || analyzing} className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground font-semibold text-lg h-16\"\u003e\n              {analyzing ? \u003c\u003e\n                  \u003cLoader2 className=\"mr-3 h-5 w-5 animate-spin\" /\u003e\n                  Analyzing Character...\n                \u003c/\u003e : 'Start Character Analysis'}\n            \u003c/Button\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n\n        {/* Quick Scene Summary */}\n        \u003cQuickSceneSummary onSummaryGenerated={handleSummaryGenerated} /\u003e\n        \n        \u003cDataUseDisclaimer className=\"mt-6\" /\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e;\n};\nexport default ScriptAnalyzer;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ScriptFileUpload.tsx",
//     "contents": "\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Upload, FileText, Loader2, AlertTriangle, CheckCircle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { supabase } from '@/integrations/supabase/client';\nimport { DataUseDisclaimer } from '@/components/DataUseDisclaimer';\n\ninterface ScriptFileUploadProps {\n  onTextExtracted: (text: string, fileName: string) =\u003e void;\n}\n\nconst ScriptFileUpload: React.FC\u003cScriptFileUploadProps\u003e = ({ onTextExtracted }) =\u003e {\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadStatus, setUploadStatus] = useState\u003c'idle' | 'success' | 'error' | 'retry'\u003e('idle');\n  const [lastError, setLastError] = useState\u003cstring | null\u003e(null);\n  const [extractedFileName, setExtractedFileName] = useState\u003cstring\u003e('');\n  const { toast } = useToast();\n\n  const handleFileUpload = async (event: React.ChangeEvent\u003cHTMLInputElement\u003e) =\u003e {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Reset status\n    setUploadStatus('idle');\n    setLastError(null);\n    setExtractedFileName('');\n\n    // Enhanced file validation\n    const allowedTypes = ['text/plain', 'application/pdf'];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    \n    if (!allowedTypes.includes(file.type)) {\n      const errorMsg = \"Please upload a PDF or TXT file.\";\n      setLastError(errorMsg);\n      setUploadStatus('error');\n      toast({\n        title: \"Invalid File Type\",\n        description: errorMsg,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (file.size \u003e maxSize) {\n      const errorMsg = \"File too large. Please select a file smaller than 10MB.\";\n      setLastError(errorMsg);\n      setUploadStatus('error');\n      toast({\n        title: \"File Too Large\",\n        description: errorMsg,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      console.log('Uploading file:', file.name, 'Type:', file.type, 'Size:', file.size);\n\n      const { data, error } = await supabase.functions.invoke('extract-text', {\n        body: formData\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      console.log('PDF extraction response:', data);\n      console.log('Extracted text length:', data?.text?.length);\n      console.log('First 100 chars:', data?.text?.substring(0, 100));\n      \n      if (data?.text \u0026\u0026 data.text.trim()) {\n        console.log('🔄 Calling onTextExtracted with:', {\n          textLength: data.text.length,\n          fileName: file.name,\n          firstChars: data.text.substring(0, 50)\n        });\n        onTextExtracted(data.text, file.name);\n        setExtractedFileName(file.name);\n        setUploadStatus('success');\n        toast({\n          title: \"Success!\",\n          description: `Text extracted from ${file.name} (${data.text.length} characters)`,\n        });\n      } else {\n        throw new Error('No text could be extracted from the file. The file might be corrupted or contain only images.');\n      }\n    } catch (error) {\n      console.error('File upload error:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Failed to extract text from file';\n      setLastError(errorMessage);\n      setUploadStatus('error');\n      \n      toast({\n        title: \"Extraction Failed\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsUploading(false);\n      // Reset file input\n      event.target.value = '';\n    }\n  };\n\n  const handleRetry = () =\u003e {\n    setUploadStatus('retry');\n    setLastError(null);\n    // Trigger file input click\n    const fileInput = document.getElementById('script-file') as HTMLInputElement;\n    fileInput?.click();\n  };\n\n  return (\n    \u003cdiv className=\"space-y-4\"\u003e\n      \u003cCard className=\"bg-card border-border\"\u003e\n        \u003cCardHeader\u003e\n          \u003cCardTitle className=\"text-lg flex items-center gap-2 text-foreground\"\u003e\n            \u003cUpload className=\"w-5 h-5\" /\u003e\n            Upload Script File\n          \u003c/CardTitle\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent\u003e\n          \u003cDataUseDisclaimer size=\"sm\" className=\"mb-4\" /\u003e\n          \u003cdiv className=\"space-y-4\"\u003e\n            {/* Main Upload Area */}\n            \u003cdiv className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n              uploadStatus === 'success' ? 'border-green-500 bg-green-50 dark:bg-green-950/20' :\n              uploadStatus === 'error' ? 'border-red-500 bg-red-50 dark:bg-red-950/20' :\n              'border-border hover:border-primary/50'\n            }`}\u003e\n              {uploadStatus === 'success' ? (\n                \u003cdiv className=\"space-y-3\"\u003e\n                  \u003cCheckCircle className=\"w-12 h-12 mx-auto text-green-600\" /\u003e\n                  \u003cdiv\u003e\n                    \u003cp className=\"font-medium text-green-800 dark:text-green-400\"\u003e\n                      File Uploaded Successfully!\n                    \u003c/p\u003e\n                    \u003cp className=\"text-sm text-green-600 dark:text-green-500\"\u003e\n                      {extractedFileName}\n                    \u003c/p\u003e\n                  \u003c/div\u003e\n                  \u003cButton variant=\"outline\" size=\"sm\" onClick={() =\u003e {\n                    setUploadStatus('idle');\n                    setExtractedFileName('');\n                  }}\u003e\n                    Upload Another File\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              ) : uploadStatus === 'error' ? (\n                \u003cdiv className=\"space-y-3\"\u003e\n                  \u003cAlertTriangle className=\"w-12 h-12 mx-auto text-red-600\" /\u003e\n                  \u003cdiv\u003e\n                    \u003cp className=\"font-medium text-red-800 dark:text-red-400\"\u003e\n                      Upload Failed\n                    \u003c/p\u003e\n                    \u003cp className=\"text-sm text-red-600 dark:text-red-500\"\u003e\n                      {lastError}\n                    \u003c/p\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"flex gap-2 justify-center\"\u003e\n                    \u003cButton variant=\"outline\" size=\"sm\" onClick={handleRetry}\u003e\n                      Try Again\n                    \u003c/Button\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              ) : (\n                \u003cdiv className=\"space-y-3\"\u003e\n                  \u003cUpload className=\"w-12 h-12 mx-auto text-muted-foreground\" /\u003e\n                  \u003cdiv\u003e\n                    \u003cp className=\"text-lg font-medium text-foreground mb-1\"\u003e\n                      Choose Your Script File\n                    \u003c/p\u003e\n                    \u003cp className=\"text-sm text-muted-foreground\"\u003e\n                      Upload PDF or TXT files (up to 10MB)\n                    \u003c/p\u003e\n                  \u003c/div\u003e\n                  \u003clabel htmlFor=\"script-file\" className=\"cursor-pointer\"\u003e\n                    \u003cButton \n                      disabled={isUploading} \n                      size=\"lg\"\n                      className=\"bg-primary hover:bg-primary/90 text-primary-foreground\"\n                      asChild\n                    \u003e\n                      \u003cspan\u003e\n                        {isUploading ? (\n                          \u003c\u003e\n                            \u003cLoader2 className=\"w-4 h-4 mr-2 animate-spin\" /\u003e\n                            Extracting Text...\n                          \u003c/\u003e\n                        ) : (\n                          \u003c\u003e\n                            \u003cUpload className=\"w-4 h-4 mr-2\" /\u003e\n                            Choose File\n                          \u003c/\u003e\n                        )}\n                      \u003c/span\u003e\n                    \u003c/Button\u003e\n                  \u003c/label\u003e\n                  \u003cinput\n                    id=\"script-file\"\n                    type=\"file\"\n                    accept=\".pdf,.txt\"\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                    disabled={isUploading}\n                  /\u003e\n                \u003c/div\u003e\n              )}\n            \u003c/div\u003e\n\n            {/* Help Text */}\n            \u003cdiv className=\"text-center\"\u003e\n              \u003cp className=\"text-xs text-muted-foreground\"\u003e\n                \u003cstrong\u003eSupported formats:\u003c/strong\u003e PDF, TXT • \u003cstrong\u003eMax size:\u003c/strong\u003e 10MB\n              \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n\n    \u003c/div\u003e\n  );\n};\n\nexport default ScriptFileUpload;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ScriptTextEditor.tsx",
//     "contents": "\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { FileText, Save, RefreshCw } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { DataUseDisclaimer } from '@/components/DataUseDisclaimer';\n\ninterface ScriptTextEditorProps {\n  scriptId: string;\n  onScriptUpdated?: () =\u003e void;\n  onContentChange?: (content: string) =\u003e void;\n}\n\nconst ScriptTextEditor: React.FC\u003cScriptTextEditorProps\u003e = ({ scriptId, onScriptUpdated, onContentChange }) =\u003e {\n  const [script, setScript] = useState\u003cany\u003e(null);\n  const [editedContent, setEditedContent] = useState('');\n  const [saving, setSaving] = useState(false);\n  const [lastSaveTime, setLastSaveTime] = useState\u003cstring\u003e('');\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const fetchedScriptId = useRef\u003cstring\u003e('');\n\n  useEffect(() =\u003e {\n    console.log('[ScriptTextEditor] Component mounted/updated with scriptId:', scriptId);\n    \n    // Only fetch if we haven't fetched this script yet or if it's a different script\n    if (!scriptId || fetchedScriptId.current === scriptId) {\n      return;\n    }\n    \n    const fetchScript = async () =\u003e {\n      console.log('[ScriptTextEditor] Fetching script data for ID:', scriptId);\n      \n      const { data, error } = await supabase\n        .from('scripts')\n        .select('*')\n        .eq('id', scriptId)\n        .single();\n\n      if (error) {\n        console.error('[ScriptTextEditor] Error fetching script:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load script.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      console.log('[ScriptTextEditor] Script fetched successfully:', {\n        id: data.id,\n        title: data.title,\n        contentLength: data.content?.length,\n        updated_at: data.updated_at\n      });\n\n      setScript(data);\n      setEditedContent(data.content);\n      setIsInitialLoad(false);\n      fetchedScriptId.current = scriptId;\n      \n      // Notify parent of initial content\n      if (onContentChange) {\n        onContentChange(data.content);\n      }\n    };\n\n    fetchScript();\n  }, [scriptId]); // Only depend on scriptId, not onContentChange\n\n  const handleContentChange = (newContent: string) =\u003e {\n    console.log('[ScriptTextEditor] Content changed, length:', newContent.length);\n    setEditedContent(newContent);\n    \n    // Notify parent component of content changes immediately\n    if (onContentChange) {\n      onContentChange(newContent);\n    }\n  };\n\n\n  const saveScript = async () =\u003e {\n    if (!user || !script) {\n      console.warn('[ScriptTextEditor] Save blocked - missing user or script:', { user: !!user, script: !!script });\n      return;\n    }\n\n    console.log('[ScriptTextEditor] Starting save process...', {\n      scriptId,\n      originalContentLength: script.content?.length,\n      editedContentLength: editedContent.length,\n      hasChanges: editedContent !== script.content\n    });\n\n    setSaving(true);\n    const saveTimestamp = new Date().toISOString();\n    \n    try {\n      const { data, error } = await supabase\n        .from('scripts')\n        .update({ \n          content: editedContent,\n          updated_at: saveTimestamp\n        })\n        .eq('id', scriptId)\n        .select('*')\n        .single();\n\n      if (error) {\n        console.error('[ScriptTextEditor] Database save error:', error);\n        throw error;\n      }\n\n      console.log('[ScriptTextEditor] Save successful:', {\n        id: data.id,\n        contentLength: data.content?.length,\n        updated_at: data.updated_at\n      });\n\n      // Update local state to prevent re-fetch\n      const updatedScript = { ...script, content: editedContent, updated_at: saveTimestamp };\n      setScript(updatedScript);\n      setLastSaveTime(saveTimestamp);\n      \n      toast({\n        title: \"Script Updated\",\n        description: \"Your script has been saved successfully.\",\n      });\n\n      if (onScriptUpdated) {\n        onScriptUpdated();\n      }\n    } catch (error: any) {\n      console.error('[ScriptTextEditor] Save failed:', error);\n      toast({\n        title: \"Error\", \n        description: error.message || \"Failed to save script.\",\n        variant: \"destructive\",\n      });\n    }\n    setSaving(false);\n  };\n\n  const resetContent = () =\u003e {\n    if (script) {\n      console.log('[ScriptTextEditor] Resetting content to original');\n      setEditedContent(script.content);\n      setLastSaveTime(''); // Clear save timestamp to allow re-fetch if needed\n      \n      // Notify parent of reset content\n      if (onContentChange) {\n        onContentChange(script.content);\n      }\n      \n      toast({\n        title: \"Reset Complete\", \n        description: \"Script content has been reset to original.\",\n      });\n    }\n  };\n\n  if (!script) {\n    return \u003cdiv className=\"text-muted-foreground\"\u003eLoading script...\u003c/div\u003e;\n  }\n\n  const hasChanges = editedContent !== script.content;\n\n  return (\n    \u003cCard className=\"bg-card border-border\"\u003e\n      \u003cCardHeader className=\"pb-6\"\u003e\n        \u003cCardTitle className=\"text-foreground flex items-center gap-3 text-xl\"\u003e\n          \u003cdiv className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\"\u003e\n            \u003cFileText className=\"w-5 h-5 text-primary\" /\u003e\n          \u003c/div\u003e\n          Script Text Editor\n        \u003c/CardTitle\u003e\n        \u003cCardDescription className=\"text-muted-foreground text-base leading-relaxed\"\u003e\n          Edit your script text for {script.title}\n        \u003c/CardDescription\u003e\n      \u003c/CardHeader\u003e\n      \u003cCardContent className=\"space-y-6\"\u003e\n\n        {/* Script Content Editor */}\n        \u003cdiv className=\"space-y-3\"\u003e\n          \u003cdiv className=\"flex justify-between items-center\"\u003e\n            \u003clabel className=\"text-foreground text-base font-medium\"\u003eScript Content\u003c/label\u003e\n            \u003cdiv className=\"flex gap-2\"\u003e\n              {hasChanges \u0026\u0026 (\n                \u003cButton\n                  onClick={resetContent}\n                  variant=\"outline\"\n                  size=\"sm\"\n                \u003e\n                  \u003cRefreshCw className=\"w-4 h-4 mr-2\" /\u003e\n                  Reset\n                \u003c/Button\u003e\n              )}\n              \u003cButton\n                onClick={saveScript}\n                disabled={saving || !hasChanges}\n                size=\"sm\"\n                className=\"bg-primary hover:bg-primary/90\"\n              \u003e\n                {saving ? (\n                  \u003c\u003e\n                    \u003cdiv className=\"animate-spin rounded-full h-4 w-4 border border-white border-t-transparent mr-2\"\u003e\u003c/div\u003e\n                    Saving...\n                  \u003c/\u003e\n                ) : (\n                  \u003c\u003e\n                    \u003cSave className=\"w-4 h-4 mr-2\" /\u003e\n                    Save Changes\n                  \u003c/\u003e\n                )}\n              \u003c/Button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \n          \u003cTextarea\n            id=\"script-content\"\n            value={editedContent}\n            onChange={(e) =\u003e handleContentChange(e.target.value)}\n            placeholder=\"Edit your script content here...\"\n            className=\"bg-background border-border text-foreground placeholder:text-muted-foreground min-h-[400px] font-mono text-base\"\n          /\u003e\n          \n          \u003cdiv className=\"flex justify-between text-sm text-muted-foreground\"\u003e\n            \u003cspan\u003e{editedContent.length} characters\u003c/span\u003e\n            \u003cdiv className=\"flex gap-4\"\u003e\n              {hasChanges \u0026\u0026 (\n                \u003cspan className=\"text-amber-500\"\u003e⚠️ Unsaved changes\u003c/span\u003e\n              )}\n              {lastSaveTime \u0026\u0026 (\n                \u003cspan className=\"text-emerald-500\"\u003e✓ Last saved: {new Date(lastSaveTime).toLocaleTimeString()}\u003c/span\u003e\n              )}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        {/* Quick Actions */}\n        \u003cdiv className=\"bg-muted/50 p-4 rounded-lg border\"\u003e\n          \u003ch4 className=\"text-foreground font-medium mb-3\"\u003eQuick Actions\u003c/h4\u003e\n          \u003cdiv className=\"flex flex-wrap gap-2 text-sm\"\u003e\n            \u003cBadge variant=\"outline\" className=\"text-muted-foreground border-border\"\u003e\n              Ctrl+F to find text\n            \u003c/Badge\u003e\n            \u003cBadge variant=\"outline\" className=\"text-muted-foreground border-border\"\u003e\n              Changes auto-saved when you click Save\n            \u003c/Badge\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/CardContent\u003e\n      \n      \u003cDataUseDisclaimer className=\"mt-4\" /\u003e\n    \u003c/Card\u003e\n  );\n};\n\nexport default ScriptTextEditor;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/ScriptUpload.tsx",
//     "contents": "import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { FileText, Scan, Upload, X, Eye, EyeOff, Edit3, Save, ScanText } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { DataUseDisclaimer } from '@/components/DataUseDisclaimer';\n\ninterface ScriptUploadProps {\n  onScriptUploaded: (scriptId: string) =\u003e void;\n}\n\nconst ScriptUpload: React.FC\u003cScriptUploadProps\u003e = ({ onScriptUploaded }) =\u003e {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const [detectedCharacters, setDetectedCharacters] = useState\u003cstring[]\u003e([]);\n  const [selectedFile, setSelectedFile] = useState\u003cFile | null\u003e(null);\n  const [extractingText, setExtractingText] = useState(false);\n  const [showPreview, setShowPreview] = useState(true);\n  const [isEditingPreview, setIsEditingPreview] = useState(false);\n  const [editableContent, setEditableContent] = useState('');\n  const [isOcrProcessing, setIsOcrProcessing] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const extractCharacters = (text: string): string[] =\u003e {\n    const characterSet = new Set\u003cstring\u003e();\n    \n    // Method 1: Character names followed by colons (most common in scripts)\n    const dialogueMatches = text.match(/^[A-Z][A-Z\\s\\-'\\.]+:/gm);\n    if (dialogueMatches) {\n      dialogueMatches.forEach(match =\u003e {\n        const name = match.replace(':', '').trim();\n        if (name.length \u003e 1 \u0026\u0026 name.length \u003c 30 \u0026\u0026 \n            !name.includes('FADE') \u0026\u0026 !name.includes('CUT') \u0026\u0026 \n            !name.includes('INT') \u0026\u0026 !name.includes('EXT')) {\n          characterSet.add(name);\n        }\n      });\n    }\n    \n    // Method 2: Character names in parentheses\n    const parentheticalMatches = text.match(/\\(([A-Z][A-Z\\s\\-']+)\\)/g);\n    if (parentheticalMatches) {\n      parentheticalMatches.forEach(match =\u003e {\n        const name = match.replace(/[()]/g, '').trim();\n        if (name.length \u003e 1 \u0026\u0026 name.length \u003c 30 \u0026\u0026 \n            !name.toLowerCase().includes('pause') \u0026\u0026 \n            !name.toLowerCase().includes('beat') \u0026\u0026\n            !name.toLowerCase().includes('cont')) {\n          characterSet.add(name.toUpperCase());\n        }\n      });\n    }\n    \n    // Method 3: Names at the beginning of lines (screenplay format)\n    const screenplayMatches = text.match(/^\\s*([A-Z][A-Z\\s\\-']+)$/gm);\n    if (screenplayMatches) {\n      screenplayMatches.forEach(match =\u003e {\n        const name = match.trim();\n        if (name.length \u003e 1 \u0026\u0026 name.length \u003c 30 \u0026\u0026 \n            !name.includes('FADE') \u0026\u0026 !name.includes('CUT') \u0026\u0026 \n            !name.includes('INT') \u0026\u0026 !name.includes('EXT') \u0026\u0026\n            !name.includes('SCENE') \u0026\u0026 !name.includes('ACT')) {\n          characterSet.add(name);\n        }\n      });\n    }\n    \n    const characters = Array.from(characterSet);\n    \n    // Sort by frequency in the text\n    const sortedCharacters = characters\n      .filter(char =\u003e {\n        const lowerChar = char.toLowerCase();\n        return !lowerChar.includes('narrator') \u0026\u0026 \n               !lowerChar.includes('voice') \u0026\u0026 \n               !lowerChar.includes('announcer') \u0026\u0026\n               !lowerChar.includes('off') \u0026\u0026\n               !lowerChar.includes('cont');\n      })\n      .sort((a, b) =\u003e {\n        const countA = (text.match(new RegExp(a, 'gi')) || []).length;\n        const countB = (text.match(new RegExp(b, 'gi')) || []).length;\n        return countB - countA;\n      })\n      .slice(0, 10);\n    \n    return sortedCharacters.length \u003e 0 ? sortedCharacters : ['MAIN CHARACTER', 'PROTAGONIST', 'LEAD ROLE'];\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent\u003cHTMLInputElement\u003e) =\u003e {\n    const file = event.target.files?.[0];\n    if (file) {\n      const maxSize = 10 * 1024 * 1024; // 10MB limit\n      if (file.size \u003e maxSize) {\n        toast({\n          title: \"File too large\",\n          description: \"Please select a file smaller than 10MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const allowedTypes = ['application/pdf', 'text/plain'];\n      const allowedExtensions = ['.pdf', '.txt'];\n      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n      \n      if (!allowedTypes.includes(file.type) \u0026\u0026 !allowedExtensions.includes(fileExtension)) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select a PDF or TXT file.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setSelectedFile(file);\n      if (!title) {\n        setTitle(file.name.replace(/\\.[^/.]+$/, \"\")); // Remove file extension for title\n      }\n    }\n  };\n\n  const extractTextFromFile = async () =\u003e {\n    if (!selectedFile) return;\n\n    setExtractingText(true);\n    try {\n      const formData = new FormData();\n      formData.append('file', selectedFile);\n\n      const { data, error } = await supabase.functions.invoke('extract-text', {\n        body: formData,\n      });\n\n      if (error) {\n        throw new Error(error.message || 'Failed to extract text from file');\n      }\n\n      if (data?.text) {\n        setContent(data.text);\n        const characters = extractCharacters(data.text);\n        setDetectedCharacters(characters);\n        \n        toast({\n          title: \"Text extracted successfully!\",\n          description: `Extracted ${data.text.length} characters and detected ${characters.length} script characters.`,\n        });\n      } else {\n        throw new Error('No text was extracted from the file');\n      }\n    } catch (error: any) {\n      console.error('Text extraction error:', error);\n      toast({\n        title: \"Extraction failed\",\n        description: error.message || \"Failed to extract text from the file.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setExtractingText(false);\n    }\n  };\n\n\n  const clearFile = () =\u003e {\n    setSelectedFile(null);\n    const fileInput = document.getElementById('file-input') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.value = '';\n    }\n  };\n\n  const scanContentForCharacters = () =\u003e {\n    if (content) {\n      const characters = extractCharacters(content);\n      setDetectedCharacters(characters);\n      toast({\n        title: \"Characters detected!\",\n        description: `Found ${characters.length} characters in your script.`,\n      });\n    }\n  };\n\n  const handleContentChange = (newContent: string) =\u003e {\n    setContent(newContent);\n    if (newContent.trim()) {\n      const characters = extractCharacters(newContent);\n      setDetectedCharacters(characters);\n    }\n  };\n\n  const startEditingPreview = () =\u003e {\n    setEditableContent(content);\n    setIsEditingPreview(true);\n  };\n\n  const savePreviewChanges = () =\u003e {\n    setContent(editableContent);\n    const characters = extractCharacters(editableContent);\n    setDetectedCharacters(characters);\n    setIsEditingPreview(false);\n    toast({\n      title: \"Script updated!\",\n      description: \"Your changes have been saved to the script.\",\n    });\n  };\n\n  const cancelPreviewEdit = () =\u003e {\n    setEditableContent('');\n    setIsEditingPreview(false);\n  };\n\n\n  const formatScriptContent = (content: string) =\u003e {\n    if (!content) return 'No content to preview';\n    \n    return content\n      .split('\\n')\n      .map((line, index) =\u003e {\n        const trimmedLine = line.trim();\n        \n        // Character names (all caps, followed by colon or on their own line)\n        if (/^[A-Z][A-Z\\s\\-'\\.]+:/.test(trimmedLine)) {\n          return (\n            \u003cdiv key={index} className=\"font-bold text-primary mb-1\"\u003e\n              {trimmedLine}\n            \u003c/div\u003e\n          );\n        }\n        \n        // Regular dialogue/action\n        return (\n          \u003cdiv key={index} className=\"text-foreground mb-1 leading-relaxed\"\u003e\n            {trimmedLine}\n          \u003c/div\u003e\n        );\n        \n        // Parentheticals\n        if (/^\\(.*\\)$/.test(trimmedLine)) {\n          return (\n            \u003cdiv key={index} className=\"text-muted-foreground text-sm italic ml-4 mb-1\"\u003e\n              {trimmedLine}\n            \u003c/div\u003e\n          );\n        }\n        \n        // Empty lines\n        if (!trimmedLine) {\n          return \u003cdiv key={index} className=\"h-2\"\u003e\u003c/div\u003e;\n        }\n        \n        // Regular dialogue/action\n        return (\n          \u003cdiv key={index} className=\"text-foreground mb-1 leading-relaxed\"\u003e\n            {trimmedLine}\n          \u003c/div\u003e\n        );\n      });\n  };\n\n  const handleGeminiOcr = () =\u003e {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'application/pdf,image/jpeg,image/jpg,image/png';\n    \n    input.onchange = async (event) =\u003e {\n      const file = (event.target as HTMLInputElement).files?.[0];\n      if (!file) return;\n\n      setIsOcrProcessing(true);\n      try {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        const response = await fetch('https://cqlczzkyktktaajbfmli.supabase.co/functions/v1/ocr-script', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${(await supabase.auth.getSession()).data.session?.access_token}`,\n          },\n          body: formData,\n        });\n\n        if (!response.ok) {\n          throw new Error(`OCR failed: ${response.status} ${response.statusText}`);\n        }\n\n        const data = await response.json();\n\n        if (data?.text) {\n          setContent(data.text);\n          const characters = extractCharacters(data.text);\n          setDetectedCharacters(characters);\n          const cleanFileName = file.name.replace(/\\.[^/.]+$/, \"\") || \"OCR Script\";\n          if (!title) {\n            setTitle(cleanFileName);\n          }\n          \n          toast({\n            title: \"OCR Success\",\n            description: `Successfully extracted text from ${file.name}`,\n          });\n        } else {\n          throw new Error(data?.error || 'No text extracted from the document');\n        }\n      } catch (error: any) {\n        console.error('OCR error:', error);\n        toast({\n          variant: \"destructive\",\n          title: \"OCR Failed\",\n          description: error.message || \"Failed to extract text from the uploaded file\",\n        });\n      } finally {\n        setIsOcrProcessing(false);\n      }\n    };\n\n    input.click();\n  };\n\n  const uploadScript = async () =\u003e {\n    if (!user || !content) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide script content.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n\n    try {\n      // Save script to database with detected characters\n      const { data, error } = await supabase\n        .from('scripts')\n        .insert([\n          {\n            user_id: user.id,\n            title: title || 'Untitled Script',\n            content: content,\n            characters: detectedCharacters,\n          },\n        ])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Generate scene summary in the background\n      try {\n        const { data: summaryData, error: summaryError } = await supabase.functions.invoke('summarize-scene', {\n          body: {\n            scriptTitle: title || 'Untitled Script',\n            scriptContent: content\n          }\n        });\n\n        if (!summaryError \u0026\u0026 summaryData?.summary) {\n          // Update script with the generated summary\n          await supabase\n            .from('scripts')\n            .update({ scene_summary: summaryData.summary })\n            .eq('id', data.id);\n        }\n      } catch (summaryError) {\n        console.log('Scene summary generation failed, continuing without it:', summaryError);\n        // Don't block the main upload flow for summary generation failures\n      }\n\n      toast({\n        title: \"Success!\",\n        description: \"Your script has been uploaded successfully with character detection.\",\n      });\n\n      onScriptUploaded(data.id);\n      \n      // Reset form\n      setTitle('');\n      setContent('');\n      setDetectedCharacters([]);\n      setSelectedFile(null);\n      \n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n\n    setUploading(false);\n  };\n\n  const triggerFileInput = () =\u003e {\n    const fileInput = document.getElementById('file-input') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.click();\n    }\n  };\n\n  return (\n    \u003cdiv className=\"space-y-8\"\u003e\n      {/* Two-Panel Workspace */}\n      \u003cdiv className=\"space-y-8\"\u003e\n        \n        {/* Panel 1: Upload */}\n        \u003cCard className=\"bg-card border-border\"\u003e\n          \u003cCardHeader className=\"pb-6\"\u003e\n            \u003cCardTitle \n              className=\"text-foreground flex items-center gap-3 text-xl cursor-pointer hover:text-primary transition-colors\"\n              onClick={triggerFileInput}\n            \u003e\n              \u003cdiv className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center hover:bg-primary/20 transition-colors\"\u003e\n                \u003cUpload className=\"w-5 h-5 text-primary\" /\u003e\n              \u003c/div\u003e\n              Upload Script\n            \u003c/CardTitle\u003e\n            \u003cCardDescription className=\"text-muted-foreground text-base leading-relaxed\"\u003e\n              Start by uploading a file or entering your script details\n            \u003c/CardDescription\u003e\n          \u003c/CardHeader\u003e\n          \u003cCardContent className=\"space-y-6\"\u003e\n            \u003cdiv className=\"space-y-3\"\u003e\n              \u003cLabel htmlFor=\"title\" className=\"text-foreground text-base font-medium\"\u003eScript Title\u003c/Label\u003e\n              \u003cInput\n                id=\"title\"\n                value={title}\n                onChange={(e) =\u003e setTitle(e.target.value)}\n                placeholder=\"Enter script title...\"\n                className=\"bg-background border-border text-foreground text-base h-12\"\n              /\u003e\n            \u003c/div\u003e\n\n            {/* File Upload Section */}\n            \u003cdiv className=\"space-y-4\"\u003e\n              \u003cLabel className=\"text-foreground text-base font-medium\"\u003eUpload Script File\u003c/Label\u003e\n              \u003cDataUseDisclaimer size=\"sm\" className=\"mt-1\" /\u003e\n              \u003cdiv className=\"space-y-3\"\u003e\n                \u003cInput\n                  id=\"file-input\"\n                  type=\"file\"\n                  accept=\".pdf,.txt\"\n                  onChange={handleFileSelect}\n                  className=\"bg-background border-border text-foreground text-base h-12 file:bg-muted file:text-foreground file:border-0 file:rounded file:px-4 file:py-2 file:mr-4\"\n                /\u003e\n                {selectedFile \u0026\u0026 (\n                  \u003cdiv className=\"flex items-center justify-between bg-muted/50 p-4 rounded-lg border\"\u003e\n                    \u003cdiv className=\"flex items-center gap-3\"\u003e\n                      \u003cFileText className=\"w-5 h-5 text-primary\" /\u003e\n                      \u003cdiv\u003e\n                        \u003cp className=\"text-foreground font-medium\"\u003e{selectedFile.name}\u003c/p\u003e\n                        \u003cp className=\"text-muted-foreground text-sm\"\u003e\n                          {(selectedFile.size / 1024).toFixed(1)} KB\n                        \u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"flex items-center gap-2\"\u003e\n                      \u003cButton\n                        onClick={extractTextFromFile}\n                        disabled={extractingText}\n                        size=\"sm\"\n                        className=\"bg-primary hover:bg-primary/90\"\n                      \u003e\n                        {extractingText ? \"Extracting...\" : \"Extract Text\"}\n                      \u003c/Button\u003e\n                      \u003cButton\n                        onClick={clearFile}\n                        variant=\"outline\"\n                        size=\"sm\"\n                      \u003e\n                        \u003cX className=\"w-4 h-4\" /\u003e\n                      \u003c/Button\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                )}\n              \u003c/div\u003e\n\n              \u003cdiv className=\"text-center py-4 border-t border-border\"\u003e\n                \u003cp className=\"text-muted-foreground mb-3\"\u003e\n                  If the upload script does not give a good outcome use this advanced button to upload your scene.\n                \u003c/p\u003e\n                \u003cButton\n                  onClick={handleGeminiOcr}\n                  disabled={isOcrProcessing}\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"text-base\"\n                \u003e\n                  \u003cScan className=\"w-5 h-5 mr-2\" /\u003e\n                  {isOcrProcessing ? 'Processing...' : 'Advanced OCR'}\n                \u003c/Button\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n\n        {/* Panel 2: Edit Script */}\n        \u003cCard className=\"bg-card border-border\"\u003e\n          \u003cCardHeader className=\"pb-6\"\u003e\n            \u003cCardTitle className=\"text-foreground flex items-center gap-3 text-xl\"\u003e\n              \u003cdiv className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\"\u003e\n                \u003cEdit3 className=\"w-5 h-5 text-primary\" /\u003e\n              \u003c/div\u003e\n              Edit Script\n            \u003c/CardTitle\u003e\n            \u003cCardDescription className=\"text-muted-foreground text-base leading-relaxed\"\u003e\n              Write or paste your script content with larger, easier-to-read text\n            \u003c/CardDescription\u003e\n          \u003c/CardHeader\u003e\n          \u003cCardContent className=\"space-y-6\"\u003e\n            \u003cdiv className=\"space-y-3\"\u003e\n              \u003cdiv className=\"flex items-center justify-between\"\u003e\n                \u003cLabel htmlFor=\"content\" className=\"text-foreground text-base font-medium\"\u003eScript Content\u003c/Label\u003e\n                {content \u0026\u0026 !selectedFile \u0026\u0026 (\n                  \u003cButton\n                    onClick={scanContentForCharacters}\n                    variant=\"outline\"\n                    size=\"sm\"\n                  \u003e\n                    \u003cScan className=\"w-4 h-4 mr-2\" /\u003e\n                    Detect Characters\n                  \u003c/Button\u003e\n                )}\n              \u003c/div\u003e\n              \u003cTextarea\n                id=\"content\"\n                value={content}\n                onChange={(e) =\u003e handleContentChange(e.target.value)}\n                placeholder=\"Paste your script content here or upload a file from the first panel...\"\n                className=\"bg-background border-border text-foreground min-h-[400px] text-lg leading-relaxed font-mono resize-none\"\n                style={{ fontSize: '18px', lineHeight: '1.6' }}\n              /\u003e\n            \u003c/div\u003e\n\n            {detectedCharacters.length \u003e 0 \u0026\u0026 (\n              \u003cdiv className=\"bg-muted/50 p-6 rounded-lg border\"\u003e\n                \u003ch4 className=\"text-foreground font-semibold mb-4 flex items-center gap-2 text-lg\"\u003e\n                  \u003cFileText className=\"w-5 h-5 text-primary\" /\u003e\n                  Detected Characters ({detectedCharacters.length})\n                \u003c/h4\u003e\n                \u003cdiv className=\"flex flex-wrap gap-3\"\u003e\n                  {detectedCharacters.map((character, index) =\u003e (\n                    \u003cspan \n                      key={index}\n                      className=\"bg-primary/10 text-primary px-3 py-2 rounded-lg text-base font-medium\"\n                    \u003e\n                      {character}\n                    \u003c/span\u003e\n                  ))}\n                \u003c/div\u003e\n              \u003c/div\u003e\n            )}\n\n            \u003cButton\n              onClick={uploadScript}\n              disabled={uploading || !content.trim()}\n              className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground font-semibold text-lg h-14\"\n            \u003e\n              {uploading ? \"Saving Script...\" : \"Save \u0026 Continue to Analysis\"}\n            \u003c/Button\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default ScriptUpload;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/SmoothScrollStyles.css",
//     "contents": "\n/* Custom scrollbar styles for smooth teleprompter */\n.scrollbar-hide {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n\n.scrollbar-hide::-webkit-scrollbar {\n  display: none;\n}\n\n.smooth-scroll-container {\n  scroll-behavior: smooth;\n  -webkit-overflow-scrolling: touch;\n}\n\n.smooth-scroll-container::-webkit-scrollbar {\n  width: 0px;\n  background: transparent;\n}\n\n/* Enhanced transitions for dialogue lines */\n.dialogue-line {\n  transition: all 0.7s cubic-bezier(0.4, 0, 0.2, 1);\n  will-change: transform, opacity, color;\n}\n\n.dialogue-line.current {\n  transform: translateY(0) scale(1.05);\n  filter: brightness(1.2);\n}\n\n.dialogue-line.past {\n  transform: translateY(0) scale(0.95);\n  filter: brightness(0.6);\n}\n\n.dialogue-line.upcoming {\n  transform: translateY(0) scale(1);\n  filter: brightness(0.8);\n}\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/SpotlightCoachBanner.tsx",
//     "contents": "import { Link } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SpotlightCoachBannerProps {\n  onContactClick?: () =\u003e void;\n  linkToCoaches?: boolean;\n}\n\nconst SpotlightCoachBanner = ({ onContactClick, linkToCoaches = false }: SpotlightCoachBannerProps) =\u003e {\n  const content = (\n    \u003cimg \n      src=\"/lovable-uploads/79296991-7232-4da1-add6-3f97dc1f6a84.png\" \n      alt=\"Sean Kanan - Spotlight Acting Coach - Click to view coaches\"\n      className=\"w-full h-auto object-contain rounded-lg hover:opacity-90 transition-opacity cursor-pointer\"\n    /\u003e\n  );\n\n  if (linkToCoaches \u0026\u0026 !onContactClick) {\n    return (\n      \u003cLink to=\"/coaches\" className=\"block hover:opacity-90 transition-opacity\"\u003e\n        {content}\n      \u003c/Link\u003e\n    );\n  }\n\n  return content;\n};\n\nexport default SpotlightCoachBanner;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/SubscriptionCard.tsx",
//     "contents": "\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Check, Star, Sparkles, Crown } from 'lucide-react';\nimport { SubscriptionPlan, UserSubscription } from '@/types/subscription';\nimport PayPalButton from './PayPalButton';\n\ninterface SubscriptionCardProps {\n  plan: SubscriptionPlan;\n  currentSubscription?: UserSubscription | null;\n  onSubscribe?: () =\u003e void;\n  popular?: boolean;\n}\n\nconst SubscriptionCard: React.FC\u003cSubscriptionCardProps\u003e = ({ \n  plan, \n  currentSubscription, \n  onSubscribe,\n  popular = false \n}) =\u003e {\n  const isCurrentPlan = currentSubscription?.plan_id === plan.id;\n  const isDemo = plan.name === 'Demo';\n  const isExclusive = plan.name === 'Exclusive';\n  \n  const getFeaturesList = () =\u003e {\n    const features = [];\n    \n    if (plan.limits.script_analyses \u003e 0) {\n      features.push(\n        plan.limits.script_analyses === -1 \n          ? 'Unlimited script analyses' \n          : `${plan.limits.script_analyses} script analyses`\n      );\n    }\n    \n    if (plan.limits.ai_messages \u003e 0) {\n      features.push(\n        plan.limits.ai_messages === -1 \n          ? 'Unlimited AI coaching messages' \n          : `${plan.limits.ai_messages} AI coaching messages`\n      );\n    }\n    \n    if (plan.limits.video_verifications \u003e 0) {\n      features.push(\n        plan.limits.video_verifications === -1 \n          ? 'Unlimited video verifications' \n          : `${plan.limits.video_verifications} video verifications`\n      );\n    }\n\n    if (plan.features.script_analysis) features.push('Professional scene analysis');\n    if (plan.features.ai_coaching) features.push('AI acting coach');\n    if (plan.features.video_verification) features.push('Video performance feedback');\n    \n    // Add exclusive features\n    if (isExclusive) {\n      features.push('Priority support');\n      features.push('Advanced analytics');\n      features.push('Exclusive masterclasses');\n    }\n    \n    return features;\n  };\n\n  const getCardStyle = () =\u003e {\n    if (isCurrentPlan) {\n      return \"bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 border-green-500/50 shadow-xl shadow-green-500/20\";\n    }\n    if (isExclusive) {\n      return \"bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 border-purple-500/50 shadow-xl shadow-purple-500/20\";\n    }\n    if (popular) {\n      return \"bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 border-yellow-500/50 shadow-xl shadow-yellow-500/20\";\n    }\n    if (isDemo) {\n      return \"bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 border-blue-500/50 shadow-xl shadow-blue-500/20\";\n    }\n    return \"bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 border-gray-600/50 shadow-lg hover:shadow-xl hover:border-gray-500/70\";\n  };\n\n  return (\n    \u003cCard className={`relative backdrop-blur-sm transition-all duration-500 hover:scale-105 hover:-translate-y-2 ${getCardStyle()}`}\u003e\n      {popular \u0026\u0026 (\n        \u003cdiv className=\"absolute -top-4 left-1/2 transform -translate-x-1/2 z-10\"\u003e\n          \u003cBadge className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-black px-4 py-2 rounded-full font-bold flex items-center shadow-lg\"\u003e\n            \u003cStar className=\"w-4 h-4 mr-1 fill-current\" /\u003e\n            Most Popular\n          \u003c/Badge\u003e\n        \u003c/div\u003e\n      )}\n\n      {isExclusive \u0026\u0026 (\n        \u003cdiv className=\"absolute -top-4 left-1/2 transform -translate-x-1/2 z-10\"\u003e\n          \u003cBadge className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-2 rounded-full font-bold flex items-center shadow-lg\"\u003e\n            \u003cCrown className=\"w-4 h-4 mr-1 fill-current\" /\u003e\n            Exclusive\n          \u003c/Badge\u003e\n        \u003c/div\u003e\n      )}\n      \n      {isCurrentPlan \u0026\u0026 (\n        \u003cdiv className=\"absolute -top-4 right-4 z-10\"\u003e\n          \u003cBadge className=\"bg-green-500 text-white px-3 py-2 rounded-full shadow-lg\"\u003e\n            Current Plan\n          \u003c/Badge\u003e\n        \u003c/div\u003e\n      )}\n\n      {isDemo \u0026\u0026 (\n        \u003cdiv className=\"absolute -top-4 left-4 z-10\"\u003e\n          \u003cBadge className=\"bg-blue-500 text-white px-3 py-2 rounded-full shadow-lg flex items-center\"\u003e\n            \u003cSparkles className=\"w-3 h-3 mr-1\" /\u003e\n            Free Trial\n          \u003c/Badge\u003e\n        \u003c/div\u003e\n      )}\n      \n      \u003cCardHeader className=\"text-center pb-6 pt-8\"\u003e\n        \u003cCardTitle className=\"text-3xl font-bold text-white mb-3\"\u003e{plan.name}\u003c/CardTitle\u003e\n        \u003cdiv className=\"flex items-baseline justify-center mb-4\"\u003e\n          \u003cspan className={`text-6xl font-bold ${\n            isDemo ? 'text-blue-400' : \n            isExclusive ? 'text-purple-400' :\n            popular ? 'text-yellow-400' : \n            isCurrentPlan ? 'text-green-400' : 'text-white'\n          }`}\u003e\n            {isDemo ? 'FREE' : `$${plan.price}`}\n          \u003c/span\u003e\n          {!isDemo \u0026\u0026 \u003cspan className=\"text-gray-400 ml-2 text-lg\"\u003e/month\u003c/span\u003e}\n        \u003c/div\u003e\n        \u003cCardDescription className=\"text-gray-300 text-base leading-relaxed px-2\"\u003e\n          {isDemo \n            ? 'Perfect for trying out the platform and getting started' \n            : isExclusive\n            ? 'Ultimate package with unlimited access and exclusive features'\n            : popular \n            ? 'Everything you need for professional growth and unlimited access'\n            : 'Essential features for serious actors and professionals'\n          }\n        \u003c/CardDescription\u003e\n      \u003c/CardHeader\u003e\n      \n      \u003cCardContent className=\"space-y-6 px-6 pb-8\"\u003e\n        \u003cul className=\"space-y-4\"\u003e\n          {getFeaturesList().map((feature, index) =\u003e (\n            \u003cli key={index} className=\"flex items-start\"\u003e\n              \u003cCheck className={`w-5 h-5 mr-3 mt-1 flex-shrink-0 ${\n                isDemo ? 'text-blue-400' : \n                isExclusive ? 'text-purple-400' :\n                popular ? 'text-yellow-400' : \n                isCurrentPlan ? 'text-green-400' : 'text-gray-300'\n              }`} /\u003e\n              \u003cspan className=\"text-gray-200 text-base leading-relaxed\"\u003e{feature}\u003c/span\u003e\n            \u003c/li\u003e\n          ))}\n        \u003c/ul\u003e\n        \n        {!isCurrentPlan \u0026\u0026 (\n          \u003cdiv className=\"pt-6\"\u003e\n            {isDemo ? (\n              \u003cButton \n                className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white font-bold py-4 text-lg rounded-lg transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1\"\n                onClick={onSubscribe}\n              \u003e\n                Start Free Trial\n              \u003c/Button\u003e\n            ) : isExclusive ? (\n              \u003cdiv className=\"space-y-2\"\u003e\n                \u003cPayPalButton \n                  plan={plan} \n                  onSuccess={onSubscribe}\n                /\u003e\n              \u003c/div\u003e\n            ) : (\n              \u003cdiv className=\"space-y-2\"\u003e\n                \u003cPayPalButton \n                  plan={plan} \n                  onSuccess={onSubscribe}\n                /\u003e\n              \u003c/div\u003e\n            )}\n          \u003c/div\u003e\n        )}\n        \n        {isCurrentPlan \u0026\u0026 (\n          \u003cButton \n            className=\"w-full bg-green-600 hover:bg-green-700 text-white font-bold py-4 text-lg rounded-lg shadow-lg\" \n            disabled\n          \u003e\n            \u003cCheck className=\"w-5 h-5 mr-2\" /\u003e\n            Current Plan\n          \u003c/Button\u003e\n        )}\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n};\n\nexport default SubscriptionCard;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/TeleprompterModeSelection.tsx",
//     "contents": "import React, { useEffect, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Monitor, Gauge, Mic, Clock, Settings, Users, Volume2 } from 'lucide-react';\n\ntype TeleprompterMode = 'basic' | 'advanced' | 'pro';\n\ninterface TeleprompterModeSelectionProps {\n  onModeSelected: (mode: TeleprompterMode) =\u003e void;\n}\n\nconst TeleprompterModeSelection: React.FC\u003cTeleprompterModeSelectionProps\u003e = ({\n  onModeSelected\n}) =\u003e {\n  const [lastUsedMode, setLastUsedMode] = useState\u003cTeleprompterMode\u003e('basic');\n\n  useEffect(() =\u003e {\n    const saved = localStorage.getItem('teleprompter-last-mode') as TeleprompterMode;\n    if (saved) {\n      setLastUsedMode(saved);\n    }\n  }, []);\n\n  const handleModeSelection = (mode: TeleprompterMode) =\u003e {\n    localStorage.setItem('teleprompter-last-mode', mode);\n    onModeSelected(mode);\n  };\n\n  const modes = [\n    {\n      id: 'basic' as TeleprompterMode,\n      title: 'Basic Teleprompter',\n      description: 'Classic scrolling teleprompter with essential controls',\n      icon: Monitor,\n      features: [\n        'Smooth auto-scroll',\n        'Speed control (0.5x - 3x)',\n        'Font size \u0026 spacing',\n        'Color themes',\n        'Mirror flip',\n        'Countdown timer',\n        'Fullscreen mode',\n        'Keyboard shortcuts'\n      ],\n      recommended: false\n    },\n    {\n      id: 'advanced' as TeleprompterMode,\n      title: 'Advanced Teleprompter',\n      description: 'Dialogue-aware teleprompter with character features',\n      icon: Users,\n      features: [\n        'All Basic features',\n        'Character recognition',\n        'Actor line selection',\n        'Hide/show actor lines',\n        'Current line highlighting',\n        'Manual line navigation',\n        'Auto-advance options',\n        'Extended shortcuts (n/p)'\n      ],\n      recommended: true\n    },\n    {\n      id: 'pro' as TeleprompterMode,\n      title: 'Pro Teleprompter',\n      description: 'Professional mode with AI-powered partner audio',\n      icon: Volume2,\n      features: [\n        'All Advanced features',\n        'Pre-rendered partner audio',\n        'Per-character voice mapping',\n        'TTS caching system',\n        'Audio-sync playback',\n        'Real-time progress tracking',\n        'Professional workflow',\n        'Studio-grade precision'\n      ],\n      recommended: false\n    }\n  ];\n\n  return (\n    \u003cdiv className=\"space-y-6\"\u003e\n      \u003cdiv className=\"text-center\"\u003e\n        \u003cp className=\"text-muted-foreground\"\u003e\n          Choose the teleprompter mode that best fits your needs\n        \u003c/p\u003e\n        {lastUsedMode \u0026\u0026 (\n          \u003cBadge variant=\"outline\" className=\"mt-2\"\u003e\n            Last used: {modes.find(m =\u003e m.id === lastUsedMode)?.title}\n          \u003c/Badge\u003e\n        )}\n      \u003c/div\u003e\n\n      \u003cdiv className=\"grid gap-6 md:grid-cols-3\"\u003e\n        {modes.map((mode) =\u003e {\n          const IconComponent = mode.icon;\n          const isLastUsed = mode.id === lastUsedMode;\n\n          return (\n            \u003cCard \n              key={mode.id} \n              className={`relative transition-all duration-200 hover:shadow-lg ${\n                mode.recommended ? 'ring-2 ring-primary/20 bg-primary/5' : ''\n              } ${isLastUsed ? 'ring-2 ring-accent/50' : ''}`}\n            \u003e\n              \u003cCardHeader\u003e\n                \u003cdiv className=\"flex items-center justify-between\"\u003e\n                  \u003cdiv className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\"\u003e\n                    \u003cIconComponent className=\"w-6 h-6 text-primary\" /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"flex flex-col gap-1\"\u003e\n                    {mode.recommended \u0026\u0026 (\n                      \u003cBadge className=\"bg-primary text-primary-foreground\"\u003e\n                        Recommended\n                      \u003c/Badge\u003e\n                    )}\n                    {isLastUsed \u0026\u0026 (\n                      \u003cBadge variant=\"outline\" className=\"text-accent-foreground\"\u003e\n                        Last Used\n                      \u003c/Badge\u003e\n                    )}\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cCardTitle className=\"text-xl text-foreground\"\u003e\n                  {mode.title}\n                \u003c/CardTitle\u003e\n                \u003cCardDescription className=\"text-muted-foreground\"\u003e\n                  {mode.description}\n                \u003c/CardDescription\u003e\n              \u003c/CardHeader\u003e\n\n              \u003cCardContent className=\"space-y-4\"\u003e\n                \u003cdiv className=\"space-y-2\"\u003e\n                  \u003ch4 className=\"text-sm font-medium text-foreground\"\u003eFeatures:\u003c/h4\u003e\n                  \u003cul className=\"space-y-1\"\u003e\n                    {mode.features.map((feature, index) =\u003e (\n                      \u003cli \n                        key={index}\n                        className=\"text-sm text-muted-foreground flex items-center gap-2\"\n                      \u003e\n                        \u003cdiv className=\"w-1.5 h-1.5 bg-primary rounded-full flex-shrink-0\" /\u003e\n                        {feature}\n                      \u003c/li\u003e\n                    ))}\n                  \u003c/ul\u003e\n                \u003c/div\u003e\n\n                \u003cButton \n                  onClick={() =\u003e handleModeSelection(mode.id)}\n                  className={`w-full ${\n                    mode.recommended \n                      ? 'bg-primary hover:bg-primary/90' \n                      : isLastUsed\n                      ? 'bg-accent hover:bg-accent/90 text-accent-foreground'\n                      : 'bg-secondary hover:bg-secondary/90'\n                  }`}\n                  size=\"lg\"\n                \u003e\n                  {isLastUsed ? 'Continue with ' : 'Select '}\n                  {mode.title.replace(' Teleprompter', '')}\n                \u003c/Button\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          );\n        })}\n      \u003c/div\u003e\n\n      \u003cdiv className=\"text-center\"\u003e\n        \u003cp className=\"text-sm text-muted-foreground\"\u003e\n          You can always switch modes later from within the teleprompter\n        \u003c/p\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default TeleprompterModeSelection;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/TestimonialsMarquee.tsx",
//     "contents": "import React, { useEffect, useState } from 'react';\nimport { Star } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\n\ninterface Testimonial {\n  id: string;\n  name: string;\n  title?: string;\n  company?: string;\n  content: string;\n  avatar_url?: string;\n  rating: number;\n  display_order: number;\n}\n\ninterface TestimonialsMarqueeProps {\n  headline?: string;\n  description?: string;\n  variant?: 'default' | 'launchDark';\n}\n\nconst TestimonialsMarquee: React.FC\u003cTestimonialsMarqueeProps\u003e = ({\n  headline = \"What Our Actors Say\",\n  description = \"Join thousands of actors who have transformed their craft with our platform\",\n  variant = 'default'\n}) =\u003e {\n  const [testimonials, setTestimonials] = useState\u003cTestimonial[]\u003e([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =\u003e {\n    const fetchTestimonials = async () =\u003e {\n      try {\n        const { data, error } = await supabase\n          .from('testimonials')\n          .select('*')\n          .eq('is_active', true)\n          .order('display_order', { ascending: true });\n\n        if (error) throw error;\n        setTestimonials(data || []);\n      } catch (error) {\n        console.error('Error fetching testimonials:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTestimonials();\n  }, []);\n\n  const sectionBg = variant === 'launchDark' ? 'bg-[hsl(215_25%_4%)]' : 'bg-background';\n  const cardBg = variant === 'launchDark' ? 'bg-[hsl(215_20%_7%)]' : 'bg-card';\n  const textColor = variant === 'launchDark' ? 'text-slate-200' : 'text-foreground';\n  const mutedTextColor = variant === 'launchDark' ? 'text-slate-400' : 'text-muted-foreground';\n  const borderColor = variant === 'launchDark' ? 'border-slate-700/50' : 'border-border';\n\n  if (loading) {\n    return (\n      \u003csection className={`py-20 ${sectionBg}`}\u003e\n        \u003cdiv className=\"container max-w-7xl mx-auto px-4\"\u003e\n          \u003cdiv className=\"text-center mb-16\"\u003e\n            \u003cdiv className=\"h-8 bg-muted animate-pulse rounded mb-4\"\u003e\u003c/div\u003e\n            \u003cdiv className=\"h-4 bg-muted animate-pulse rounded max-w-2xl mx-auto\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"flex gap-6\"\u003e\n            {[1, 2, 3].map((i) =\u003e (\n              \u003cdiv key={i} className=\"min-w-80 h-40 bg-muted animate-pulse rounded-lg\"\u003e\u003c/div\u003e\n            ))}\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n    );\n  }\n\n  if (testimonials.length === 0) return null;\n\n  // Duplicate testimonials for seamless infinite scroll\n  const duplicatedTestimonials = [...testimonials, ...testimonials];\n\n  const TestimonialCard: React.FC\u003c{ testimonial: Testimonial }\u003e = ({ testimonial }) =\u003e (\n    \u003cdiv className={`min-w-80 ${cardBg} border ${borderColor} rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow`}\u003e\n      \u003cdiv className=\"flex items-center mb-4\"\u003e\n        {testimonial.avatar_url ? (\n          \u003cimg \n            src={testimonial.avatar_url} \n            alt={testimonial.name}\n            className=\"w-12 h-12 rounded-full object-cover mr-4\"\n          /\u003e\n        ) : (\n          \u003cdiv className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mr-4\"\u003e\n            \u003cspan className=\"text-primary font-semibold text-lg\"\u003e\n              {testimonial.name.charAt(0)}\n            \u003c/span\u003e\n          \u003c/div\u003e\n        )}\n        \u003cdiv className=\"flex-1\"\u003e\n          \u003ch4 className={`font-semibold ${textColor}`}\u003e{testimonial.name}\u003c/h4\u003e\n          {testimonial.title \u0026\u0026 (\n            \u003cp className={`text-sm ${mutedTextColor}`}\u003e\n              {testimonial.title}\n              {testimonial.company \u0026\u0026 ` at ${testimonial.company}`}\n            \u003c/p\u003e\n          )}\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv className=\"flex items-center mb-3\"\u003e\n        {[...Array(5)].map((_, i) =\u003e (\n          \u003cStar\n            key={i}\n            className={`w-4 h-4 ${\n              i \u003c testimonial.rating \n                ? 'text-yellow-400 fill-current' \n                : mutedTextColor\n            }`}\n          /\u003e\n        ))}\n      \u003c/div\u003e\n      \n      \u003cp className={`${mutedTextColor} leading-relaxed`}\u003e{testimonial.content}\u003c/p\u003e\n    \u003c/div\u003e\n  );\n\n  const gradientFrom = variant === 'launchDark' ? 'from-[hsl(215_25%_4%)]' : 'from-background';\n  const gradientTo = variant === 'launchDark' ? 'to-[hsl(215_25%_4%)]' : 'to-background';\n\n  return (\n    \u003csection className={`py-20 ${sectionBg} overflow-hidden`}\u003e\n      \u003cdiv className=\"container max-w-7xl mx-auto px-4\"\u003e\n        \u003cdiv className=\"text-center mb-16\"\u003e\n          \u003ch2 className={`text-3xl md:text-4xl font-bold ${textColor} mb-4`}\u003e\n            {headline}\n          \u003c/h2\u003e\n          \u003cp className={`text-lg ${mutedTextColor} max-w-2xl mx-auto`}\u003e\n            {description}\n          \u003c/p\u003e\n        \u003c/div\u003e\n\n        \u003cdiv className=\"relative\"\u003e\n          {/* Gradient fade edges */}\n          \u003cdiv className={`absolute left-0 top-0 bottom-0 w-20 bg-gradient-to-r ${gradientFrom} to-transparent z-10 pointer-events-none`}\u003e\u003c/div\u003e\n          \u003cdiv className={`absolute right-0 top-0 bottom-0 w-20 bg-gradient-to-l ${gradientTo} to-transparent z-10 pointer-events-none`}\u003e\u003c/div\u003e\n          \n          {/* Marquee container */}\n          \u003cdiv className=\"overflow-hidden\"\u003e\n            \u003cdiv \n              className=\"flex gap-6 hover:pause-marquee\"\n              style={{\n                width: `${duplicatedTestimonials.length * 20}rem`,\n                animation: 'marquee 60s linear infinite'\n              }}\n            \u003e\n              {duplicatedTestimonials.map((testimonial, index) =\u003e (\n                \u003cTestimonialCard \n                  key={`${testimonial.id}-${index}`} \n                  testimonial={testimonial}\n                /\u003e\n              ))}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \n      \u003cstyle\u003e\n        {`\n          @keyframes marquee {\n            0% { transform: translateX(0); }\n            100% { transform: translateX(-50%); }\n          }\n          \n          .hover\\\\:pause-marquee:hover {\n            animation-play-state: paused;\n          }\n        `}\n      \u003c/style\u003e\n    \u003c/section\u003e\n  );\n};\n\nexport default TestimonialsMarquee;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/TrialSignupForm.tsx",
//     "contents": "import React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { supabase } from '@/integrations/supabase/client';\n\ninterface TrialSignupFormProps {\n  open: boolean;\n  onClose: () =\u003e void;\n  onSuccess: () =\u003e void;\n}\n\nexport const TrialSignupForm: React.FC\u003cTrialSignupFormProps\u003e = ({\n  open,\n  onClose,\n  onSuccess,\n}) =\u003e {\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [selectedImage, setSelectedImage] = useState\u003cFile | null\u003e(null);\n  const [imagePreview, setImagePreview] = useState\u003cstring | null\u003e(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) =\u003e {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const { data, error } = await supabase.functions.invoke('handle-trial-signup', {\n        body: {\n          full_name: fullName,\n          email: email,\n          password: password,\n        },\n      });\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success!\",\n        description: \"Your free trial has been activated. Welcome aboard!\",\n      });\n\n      // Automatically sign in the user to complete setup\n      const { data: signInResult, error: signInError } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (signInError) {\n        console.error('Auto sign-in failed:', signInError);\n        toast({\n          title: \"Account created. Please sign in\",\n          description: \"Sign in with your email and password, then add a profile photo in Profile.\",\n          variant: \"destructive\",\n        });\n      } else if (signInResult?.user \u0026\u0026 selectedImage) {\n        try {\n          const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n          if (!allowedTypes.includes(selectedImage.type) || selectedImage.size \u003e 5 * 1024 * 1024) {\n            toast({\n              title: \"Invalid image\",\n              description: \"Please upload a JPEG, PNG, or WebP under 5MB.\",\n              variant: \"destructive\",\n            });\n          } else {\n            const ext = selectedImage.name.split('.').pop();\n            const fileName = `${signInResult.user.id}/avatar_${Date.now()}.${ext}`;\n\n            const { error: uploadError } = await supabase.storage\n              .from('actor-profiles')\n              .upload(fileName, selectedImage, { upsert: true });\n\n            if (!uploadError) {\n              const { data: publicData } = supabase.storage\n                .from('actor-profiles')\n                .getPublicUrl(fileName);\n              const avatarUrl = publicData.publicUrl;\n\n              const { error: profileError } = await supabase.from('profiles').upsert({\n                id: signInResult.user.id,\n                full_name: fullName,\n                avatar_url: avatarUrl,\n                updated_at: new Date().toISOString(),\n              });\n\n              if (profileError) {\n                console.error('Profile upsert error:', profileError);\n              }\n            } else {\n              console.error('Image upload error:', uploadError);\n            }\n          }\n        } catch (e) {\n          console.error('Error uploading avatar during signup:', e);\n        }\n      }\n\n      setFullName('');\n      setEmail('');\n      setPassword('');\n      setSelectedImage(null);\n      setImagePreview(null);\n      onSuccess();\n      onClose();\n    } catch (error: any) {\n      console.error('Trial signup error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start trial. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    \u003cDialog open={open} onOpenChange={onClose}\u003e\n      \u003cDialogContent className=\"sm:max-w-md\"\u003e\n        \u003cDialogHeader\u003e\n          \u003cDialogTitle\u003eStart Your Free Trial\u003c/DialogTitle\u003e\n        \u003c/DialogHeader\u003e\n        \u003cform onSubmit={handleSubmit} className=\"space-y-4\"\u003e\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"fullName\"\u003eFull Name\u003c/Label\u003e\n            \u003cInput\n              id=\"fullName\"\n              type=\"text\"\n              placeholder=\"Enter your full name\"\n              value={fullName}\n              onChange={(e) =\u003e setFullName(e.target.value)}\n              required\n            /\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"email\"\u003eEmail Address\u003c/Label\u003e\n            \u003cInput\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email address\"\n              value={email}\n              onChange={(e) =\u003e setEmail(e.target.value)}\n              required\n            /\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"password\"\u003ePassword\u003c/Label\u003e\n            \u003cInput\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Create a password (min 8 characters)\"\n              value={password}\n              onChange={(e) =\u003e setPassword(e.target.value)}\n              minLength={8}\n              required\n            /\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"avatar\"\u003eProfile Photo (optional)\u003c/Label\u003e\n            \u003cdiv className=\"flex items-center gap-3\"\u003e\n              {imagePreview ? (\n                \u003cimg\n                  src={imagePreview}\n                  alt=\"Profile preview\"\n                  className=\"h-12 w-12 rounded-full object-cover border border-gray-700\"\n                /\u003e\n              ) : (\n                \u003cdiv className=\"h-12 w-12 rounded-full bg-gray-800 border border-gray-700 flex items-center justify-center text-gray-400 text-sm\"\u003e\n                  IMG\n                \u003c/div\u003e\n              )}\n              \u003cInput\n                id=\"avatar\"\n                type=\"file\"\n                accept=\"image/jpeg,image/jpg,image/png,image/webp\"\n                onChange={(e) =\u003e {\n                  const file = e.target.files?.[0] || null;\n                  setSelectedImage(file);\n                  setImagePreview(file ? URL.createObjectURL(file) : null);\n                }}\n              /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"flex gap-3 pt-2\"\u003e\n            \u003cButton \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose}\n              disabled={isLoading}\n              className=\"flex-1\"\n            \u003e\n              Cancel\n            \u003c/Button\u003e\n            \u003cButton \n              type=\"submit\" \n              disabled={isLoading || !fullName || !email || !password || password.length \u003c 8}\n              className=\"flex-1\"\n            \u003e\n              {isLoading ? \"Starting Trial...\" : \"Start Free Trial\"}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n      \u003c/DialogContent\u003e\n    \u003c/Dialog\u003e\n  );\n};",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/UsageIndicator.tsx",
//     "contents": "import React from 'react';\nimport { Progress } from '@/components/ui/progress';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { SubscriptionPlan, UserUsage } from '@/types/subscription';\ninterface UsageIndicatorProps {\n  plan: SubscriptionPlan;\n  usage: UserUsage;\n}\nconst UsageIndicator: React.FC\u003cUsageIndicatorProps\u003e = ({\n  plan,\n  usage\n}) =\u003e {\n  const getUsageData = (type: 'script_analyses' | 'ai_messages' | 'video_verifications') =\u003e {\n    const limit = plan.limits[type];\n    const used = usage[`${type}_used`];\n    if (limit === -1) {\n      return {\n        used,\n        limit: 'Unlimited',\n        percentage: 0,\n        isUnlimited: true\n      };\n    }\n    return {\n      used,\n      limit,\n      percentage: used / limit * 100,\n      isUnlimited: false\n    };\n  };\n  const scriptData = getUsageData('script_analyses');\n  const messagesData = getUsageData('ai_messages');\n  const videoData = getUsageData('video_verifications');\n  return (\n    \u003cCard className=\"w-full\"\u003e\n      \u003cCardHeader\u003e\n        \u003cCardTitle\u003eUsage Overview\u003c/CardTitle\u003e\n      \u003c/CardHeader\u003e\n      \u003cCardContent className=\"space-y-4\"\u003e\n        \u003cdiv\u003e\n          \u003cdiv className=\"flex justify-between mb-2\"\u003e\n            \u003cspan className=\"text-sm font-medium\"\u003eScript Analyses\u003c/span\u003e\n            \u003cspan className=\"text-sm text-muted-foreground\"\u003e\n              {scriptData.used}/{scriptData.isUnlimited ? 'Unlimited' : scriptData.limit}\n            \u003c/span\u003e\n          \u003c/div\u003e\n          {!scriptData.isUnlimited \u0026\u0026 (\n            \u003cProgress value={scriptData.percentage} className=\"h-2\" /\u003e\n          )}\n        \u003c/div\u003e\n        \n        \u003cdiv\u003e\n          \u003cdiv className=\"flex justify-between mb-2\"\u003e\n            \u003cspan className=\"text-sm font-medium\"\u003eAI Messages\u003c/span\u003e\n            \u003cspan className=\"text-sm text-muted-foreground\"\u003e\n              {messagesData.used}/{messagesData.isUnlimited ? 'Unlimited' : messagesData.limit}\n            \u003c/span\u003e\n          \u003c/div\u003e\n          {!messagesData.isUnlimited \u0026\u0026 (\n            \u003cProgress value={messagesData.percentage} className=\"h-2\" /\u003e\n          )}\n        \u003c/div\u003e\n        \n        \u003cdiv\u003e\n          \u003cdiv className=\"flex justify-between mb-2\"\u003e\n            \u003cspan className=\"text-sm font-medium\"\u003eVideo Verifications\u003c/span\u003e\n            \u003cspan className=\"text-sm text-muted-foreground\"\u003e\n              {videoData.used}/{videoData.isUnlimited ? 'Unlimited' : videoData.limit}\n            \u003c/span\u003e\n          \u003c/div\u003e\n          {!videoData.isUnlimited \u0026\u0026 (\n            \u003cProgress value={videoData.percentage} className=\"h-2\" /\u003e\n          )}\n        \u003c/div\u003e\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n};\nexport default UsageIndicator;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/VideoAnalysisReport.tsx",
//     "contents": "\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle, X, Download, FileText, Eye, BookOpen } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { generateAnalysisPDF } from '@/utils/pdfGenerator';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface VideoAnalysisReportProps {\n  analysis: any;\n  videoSubmission: any;\n  onViewObjectives?: () =\u003e void;\n}\n\nconst VideoAnalysisReport: React.FC\u003cVideoAnalysisReportProps\u003e = ({\n  analysis,\n  videoSubmission,\n  onViewObjectives\n}) =\u003e {\n  const { toast } = useToast();\n  \n  const aiAnalysis = videoSubmission.ai_analysis;\n  const overallScore = videoSubmission.evaluation_score;\n  const technicalScore = aiAnalysis?.technical_score;\n  const performanceScore = aiAnalysis?.performance_score;\n\n  // Get feedback arrays safely\n  const sceneNotes = aiAnalysis?.performance_feedback || [];\n  const technicalNotes = aiAnalysis?.technical_feedback || [];\n  const keyInsights = aiAnalysis?.key_insights || [];\n\n  // Determine if objective was achieved based on performance score\n  const objectiveAchieved = performanceScore \u003e= 75;\n\n  const handleDownloadPDF = () =\u003e {\n    try {\n      generateAnalysisPDF({ analysis, videoSubmission });\n      toast({\n        title: \"PDF Generated\",\n        description: \"Your analysis report has been downloaded successfully!\",\n      });\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate PDF. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleViewObjectives = () =\u003e {\n    if (onViewObjectives) {\n      onViewObjectives();\n    } else {\n      toast({\n        title: \"Scene Objectives\",\n        description: `Objectives: ${analysis.objectives?.join(', ') || 'None specified'}`,\n      });\n    }\n  };\n\n  const handleViewGuidelines = () =\u003e {\n    toast({\n      title: \"Acting Style Guidelines\",\n      description: `Method: ${analysis.acting_method} - Focus on truthful reactions and authentic character choices.`,\n    });\n  };\n\n  return (\n    \u003cdiv className=\"max-w-4xl mx-auto bg-card text-foreground p-8 space-y-8 print:shadow-none\"\u003e\n      {/* Header */}\n      \u003cdiv className=\"text-center border-b border-border pb-6\"\u003e\n        \u003ch1 className=\"text-3xl font-bold text-foreground mb-2\"\u003e🎭 Actor App – Video Analysis Report\u003c/h1\u003e\n        \u003cp className=\"text-muted-foreground\"\u003eProfessional Self-Tape Evaluation\u003c/p\u003e\n      \u003c/div\u003e\n\n      {/* Key Insights - Now populated */}\n      {keyInsights.length \u003e 0 \u0026\u0026 (\n        \u003cCard className=\"border-brand-yellow/50 bg-brand-yellow/10\"\u003e\n          \u003cCardHeader className=\"bg-brand-yellow/20\"\u003e\n            \u003cCardTitle className=\"text-xl text-foreground flex items-center gap-2\"\u003e\n              💡 Key Insights\n            \u003c/CardTitle\u003e\n          \u003c/CardHeader\u003e\n          \u003cCardContent className=\"pt-6\"\u003e\n            \u003cul className=\"space-y-2\"\u003e\n              {keyInsights.map((insight: string, index: number) =\u003e (\n                \u003cli key={index} className=\"flex items-start gap-2 text-foreground\"\u003e\n                  \u003cspan className=\"text-brand-yellow mt-1\"\u003e•\u003c/span\u003e\n                  \u003cspan className=\"font-medium\"\u003e{insight}\u003c/span\u003e\n                \u003c/li\u003e\n              ))}\n            \u003c/ul\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      )}\n\n      {/* Scene Performance Summary */}\n      \u003cCard className=\"border-border\"\u003e\n        \u003cCardHeader className=\"bg-muted/50\"\u003e\n          \u003cCardTitle className=\"text-xl text-foreground flex items-center gap-2\"\u003e\n            🎬 Scene Performance Summary\n          \u003c/CardTitle\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent className=\"pt-6\"\u003e\n          \u003cdiv className=\"grid grid-cols-2 gap-6 mb-6\"\u003e\n            \u003cdiv className=\"space-y-3\"\u003e\n              \u003cdiv\u003e\n                \u003cspan className=\"font-medium text-muted-foreground\"\u003eActor Name:\u003c/span\u003e\n                \u003cspan className=\"ml-2 text-foreground\"\u003e[Auto-filled from profile]\u003c/span\u003e\n              \u003c/div\u003e\n              \u003cdiv\u003e\n                \u003cspan className=\"font-medium text-muted-foreground\"\u003eCharacter Name:\u003c/span\u003e\n                \u003cspan className=\"ml-2 text-foreground\"\u003e{analysis.selected_character}\u003c/span\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"space-y-3\"\u003e\n              \u003cdiv\u003e\n                \u003cspan className=\"font-medium text-muted-foreground\"\u003eActing Method:\u003c/span\u003e\n                \u003cspan className=\"ml-2 text-foreground\"\u003e{analysis.acting_method}\u003c/span\u003e\n              \u003c/div\u003e\n              \u003cdiv\u003e\n                \u003cspan className=\"font-medium text-muted-foreground\"\u003eOverall Score:\u003c/span\u003e\n                \u003cspan className=\"ml-2 font-bold text-foreground\"\u003e{overallScore}/100\u003c/span\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          {/* Script Match Analysis */}\n          {aiAnalysis?.script_match_analysis \u0026\u0026 (\n            \u003cdiv className=\"mb-6 p-4 bg-blue-500/10 rounded-lg\"\u003e\n              \u003ch4 className=\"font-medium text-muted-foreground mb-2\"\u003e📋 Script Match Analysis:\u003c/h4\u003e\n              \u003cp className=\"text-foreground\"\u003e{aiAnalysis.script_match_analysis}\u003c/p\u003e\n            \u003c/div\u003e\n          )}\n\n          {/* Scene Notes */}\n          \u003cdiv className=\"mb-6\"\u003e\n            \u003ch4 className=\"font-medium text-muted-foreground mb-3\"\u003e📝 Performance Notes:\u003c/h4\u003e\n            \u003cul className=\"space-y-2\"\u003e\n              {sceneNotes.length \u003e 0 ? sceneNotes.slice(0, 5).map((note: string, index: number) =\u003e (\n                \u003cli key={index} className=\"flex items-start gap-2 text-foreground\"\u003e\n                  \u003cspan className=\"text-brand-yellow mt-1\"\u003e•\u003c/span\u003e\n                  \u003cspan\u003e{note}\u003c/span\u003e\n                \u003c/li\u003e\n              )) : (\n                \u003cli className=\"text-muted-foreground italic\"\u003ePerformance feedback will appear here after evaluation\u003c/li\u003e\n              )}\n            \u003c/ul\u003e\n          \u003c/div\u003e\n\n          {/* Objective Status */}\n          \u003cdiv className=\"flex items-center gap-3 p-4 bg-muted/50 rounded-lg\"\u003e\n            \u003cspan className=\"font-medium text-muted-foreground\"\u003eObjective Status:\u003c/span\u003e\n            {objectiveAchieved ? (\n              \u003cBadge className=\"bg-green-500/20 text-green-400 border-green-500/30 flex items-center gap-1\"\u003e\n                \u003cCheckCircle className=\"w-4 h-4\" /\u003e\n                Achieved\n              \u003c/Badge\u003e\n            ) : (\n              \u003cBadge className=\"bg-red-500/20 text-red-400 border-red-500/30 flex items-center gap-1\"\u003e\n                \u003cX className=\"w-4 h-4\" /\u003e\n                Not Achieved\n              \u003c/Badge\u003e\n            )}\n            \u003cspan className=\"text-sm text-muted-foreground ml-2\"\u003e\n              (Based on scene analysis and performance match)\n            \u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n\n      {/* Technical Self-Tape Review */}\n      \u003cCard className=\"border-border\"\u003e\n        \u003cCardHeader className=\"bg-muted/50\"\u003e\n          \u003cCardTitle className=\"text-xl text-foreground flex items-center gap-2\"\u003e\n            🎥 Technical Self-Tape Review\n          \u003c/CardTitle\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent className=\"pt-6\"\u003e\n          \u003cdiv className=\"space-y-4\"\u003e\n            {technicalNotes.length \u003e 0 ? technicalNotes.map((note: string, index: number) =\u003e {\n              // Categorize notes based on content\n              let category = 'General';\n              let icon = '📋';\n              \n              if (note.toLowerCase().includes('lighting')) {\n                category = 'Lighting';\n                icon = '💡';\n              } else if (note.toLowerCase().includes('audio') || note.toLowerCase().includes('sound')) {\n                category = 'Audio';\n                icon = '🎤';\n              } else if (note.toLowerCase().includes('camera') || note.toLowerCase().includes('framing')) {\n                category = 'Framing';\n                icon = '📷';\n              } else if (note.toLowerCase().includes('background')) {\n                category = 'Background';\n                icon = '🖼️';\n              }\n\n              return (\n                \u003cdiv key={index} className=\"grid grid-cols-4 gap-4 py-3 border-b border-border last:border-b-0\"\u003e\n                  \u003cdiv className=\"font-medium text-muted-foreground flex items-center gap-2\"\u003e\n                    \u003cspan\u003e{icon}\u003c/span\u003e\n                    {category}\n                  \u003c/div\u003e\n                  \u003cdiv className=\"col-span-3 text-foreground\"\u003e\n                    {note}\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              );\n            }) : (\n              \u003cdiv className=\"text-center py-8 text-muted-foreground italic\"\u003e\n                Technical feedback will appear here after video evaluation\n              \u003c/div\u003e\n            )}\n          \u003c/div\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n\n      {/* Scores Summary */}\n      \u003cCard className=\"border-border\"\u003e\n        \u003cCardHeader className=\"bg-muted/50\"\u003e\n          \u003cCardTitle className=\"text-xl text-foreground\"\u003e📊 Performance Scores\u003c/CardTitle\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent className=\"pt-6\"\u003e\n          \u003cdiv className=\"grid grid-cols-3 gap-6 text-center\"\u003e\n            \u003cdiv className=\"p-4 bg-blue-500/10 rounded-lg\"\u003e\n              \u003cdiv className=\"text-3xl font-bold text-blue-600\"\u003e{overallScore || 'N/A'}\u003c/div\u003e\n              \u003cdiv className=\"text-sm text-muted-foreground mt-1\"\u003eOverall Performance\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"p-4 bg-green-500/10 rounded-lg\"\u003e\n              \u003cdiv className=\"text-3xl font-bold text-green-600\"\u003e{technicalScore || 'N/A'}\u003c/div\u003e\n              \u003cdiv className=\"text-sm text-muted-foreground mt-1\"\u003eTechnical Quality\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"p-4 bg-brand-yellow/10 rounded-lg\"\u003e\n              \u003cdiv className=\"text-3xl font-bold text-brand-yellow\"\u003e{performanceScore || 'N/A'}\u003c/div\u003e\n              \u003cdiv className=\"text-sm text-muted-foreground mt-1\"\u003eActing Performance\u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n\n      {/* Add-Ons Section */}\n      \u003cCard className=\"border-border\"\u003e\n        \u003cCardHeader className=\"bg-muted/50\"\u003e\n          \u003cCardTitle className=\"text-xl text-foreground flex items-center gap-2\"\u003e\n            📎 Additional Resources\n          \u003c/CardTitle\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent className=\"pt-6\"\u003e\n          \u003cdiv className=\"flex flex-wrap gap-4\"\u003e\n            \u003cButton \n              variant=\"outline\" \n              onClick={handleDownloadPDF}\n              className=\"flex items-center gap-2\"\n            \u003e\n              \u003cDownload className=\"w-4 h-4\" /\u003e\n              Download PDF Summary\n            \u003c/Button\u003e\n            \u003cButton \n              variant=\"outline\" \n              onClick={handleViewObjectives}\n              className=\"flex items-center gap-2\"\n            \u003e\n              \u003cEye className=\"w-4 h-4\" /\u003e\n              View Scene Objectives\n            \u003c/Button\u003e\n            \u003cButton \n              variant=\"outline\" \n              onClick={handleViewGuidelines}\n              className=\"flex items-center gap-2\"\n            \u003e\n              \u003cBookOpen className=\"w-4 h-4\" /\u003e\n              Acting Style Guidelines\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n\n      {/* Footer */}\n      \u003cdiv className=\"text-center text-sm text-muted-foreground border-t border-border pt-4\"\u003e\n        Generated by AI Actor • {new Date().toLocaleDateString()} • Professional Self-Tape Analysis\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default VideoAnalysisReport;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/VideoEvaluation.tsx",
//     "contents": "\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Video, Star, ArrowLeft, RotateCcw, AlertTriangle, CheckCircle, FileText, BarChart3, FileCheck } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAIUsageLimit } from '@/hooks/useAIUsageLimit';\nimport VideoAnalysisReport from './VideoAnalysisReport';\nimport { generateAnalysisPDF } from '@/utils/pdfGenerator';\nimport { DataUseDisclaimer } from '@/components/DataUseDisclaimer';\n\ninterface VideoEvaluationProps {\n  videoId: string;\n  analysis: any;\n  onBackToUpload: () =\u003e void;\n  onStartNewAnalysis: () =\u003e void;\n}\n\ninterface VideoSubmission {\n  id: string;\n  video_url: string;\n  video_title: string;\n  evaluation_status: string;\n  evaluation_score: number | null;\n  evaluation_notes: string | null;\n  created_at: string;\n  ai_analysis: any;\n  coaching_session_id: string;\n  storage_file_path?: string;\n}\n\ninterface ChatMessage {\n  role: string;\n  content: string;\n}\n\nconst VideoEvaluation: React.FC\u003cVideoEvaluationProps\u003e = ({ \n  videoId, \n  analysis, \n  onBackToUpload, \n  onStartNewAnalysis \n}) =\u003e {\n  const [videoSubmission, setVideoSubmission] = useState\u003cVideoSubmission | null\u003e(null);\n  const [loading, setLoading] = useState(true);\n  const [evaluating, setEvaluating] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { checkLimit, updateUsage, showLimitNotification, getRemainingUses } = useAIUsageLimit();\n\n  useEffect(() =\u003e {\n    fetchVideoSubmission();\n  }, [videoId]);\n\n  const fetchVideoSubmission = async () =\u003e {\n    try {\n      const { data, error } = await supabase\n        .from('video_submissions')\n        .select('*')\n        .eq('id', videoId)\n        .single();\n\n      if (error) throw error;\n      setVideoSubmission(data as VideoSubmission);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load video submission.\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setLoading(false);\n  };\n\n  const cleanupVideoFile = async (filePath: string) =\u003e {\n    try {\n      console.log('Cleaning up video file:', filePath);\n      const { error } = await supabase.storage\n        .from('videos')\n        .remove([filePath]);\n      \n      if (error) {\n        console.error('Error deleting video file:', error);\n      } else {\n        console.log('Video file deleted successfully');\n      }\n    } catch (error) {\n      console.error('Error during file cleanup:', error);\n    }\n  };\n\n  const startAIEvaluation = async (submission: VideoSubmission) =\u003e {\n    console.log('Starting AI evaluation for submission:', submission.id);\n    \n    if (!checkLimit('video_verifications')) {\n      console.log('Usage limit reached for video verifications');\n      showLimitNotification('Video Evaluations');\n      toast({\n        title: \"Usage Limit Reached\",\n        description: \"You've reached your daily video evaluation limit. Please upgrade your plan or try again tomorrow.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setEvaluating(true);\n\n    try {\n      console.log('Updating video status to in_progress');\n      await supabase\n        .from('video_submissions')\n        .update({ evaluation_status: 'in_progress' })\n        .eq('id', submission.id);\n\n      console.log('Fetching coaching session data for context');\n      const { data: coachingData } = await supabase\n        .from('coaching_sessions')\n        .select('chat_history')\n        .eq('id', submission.coaching_session_id)\n        .single();\n\n      let coachingNotes = 'Standard coaching session completed';\n      \n      if (coachingData?.chat_history \u0026\u0026 Array.isArray(coachingData.chat_history)) {\n        const chatHistory = coachingData.chat_history as unknown as ChatMessage[];\n        coachingNotes = chatHistory\n          .map((msg: ChatMessage) =\u003e `${msg.role}: ${msg.content}`)\n          .join('\\n')\n          .slice(0, 1000);\n      }\n\n      console.log('Calling evaluate-video edge function');\n      const { data: evaluationData, error: evalError } = await supabase.functions.invoke('evaluate-video', {\n        body: {\n          videoUrl: submission.video_url,\n          analysis: analysis,\n          coachingNotes: coachingNotes\n        }\n      });\n\n      if (evalError) {\n        console.error('Edge function error:', evalError);\n        throw evalError;\n      }\n\n      console.log('Evaluation data received:', evaluationData);\n\n      await updateUsage('video_verifications');\n\n      const { error: updateError } = await supabase\n        .from('video_submissions')\n        .update({\n          evaluation_status: 'completed',\n          evaluation_score: evaluationData.overall_score,\n          evaluation_notes: evaluationData.notes,\n          evaluated_at: new Date().toISOString(),\n          ai_analysis: {\n            ...evaluationData.analysis,\n            technical_score: evaluationData.technical_score,\n            performance_score: evaluationData.performance_score,\n            overall_score: evaluationData.overall_score\n          }\n        })\n        .eq('id', submission.id);\n\n      if (updateError) {\n        console.error('Database update error:', updateError);\n        throw updateError;\n      }\n\n      // Clean up the video file after successful analysis\n      if (submission.storage_file_path) {\n        await cleanupVideoFile(submission.storage_file_path);\n        \n        // Update the database to remove the video URL and file path since file is deleted\n        await supabase\n          .from('video_submissions')\n          .update({\n            video_url: null,\n            storage_file_path: null\n          })\n          .eq('id', submission.id);\n      }\n\n      console.log('Evaluation completed successfully');\n      await fetchVideoSubmission();\n\n      toast({\n        title: \"AI Evaluation Complete!\",\n        description: `Your performance as ${analysis.selected_character} has been analyzed. Video file has been removed to save space.`,\n      });\n\n    } catch (error: any) {\n      console.error('Evaluation error:', error);\n      toast({\n        title: \"Evaluation Failed\",\n        description: error.message || \"Failed to evaluate video. Please try again.\",\n        variant: \"destructive\",\n      });\n      \n      await supabase\n        .from('video_submissions')\n        .update({ evaluation_status: 'pending' })\n        .eq('id', submission.id);\n    }\n    \n    setEvaluating(false);\n  };\n\n  const handleDownloadPDF = () =\u003e {\n    if (videoSubmission) {\n      try {\n        generateAnalysisPDF({ analysis, videoSubmission });\n        toast({\n          title: \"PDF Generated\",\n          description: \"Your analysis report has been downloaded successfully!\",\n        });\n      } catch (error) {\n        console.error('Error generating PDF:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to generate PDF. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleViewObjectives = () =\u003e {\n    toast({\n      title: \"Scene Objectives\",\n      description: `Objectives: ${analysis.objectives?.join(', ') || 'None specified'}`,\n    });\n  };\n\n  if (loading) {\n    return (\n      \u003cdiv className=\"flex items-center justify-center min-h-[400px]\"\u003e\n        \u003cdiv className=\"text-foreground\"\u003eLoading video evaluation...\u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  if (!videoSubmission) {\n    return (\n      \u003cdiv className=\"flex items-center justify-center min-h-[400px]\"\u003e\n        \u003cdiv className=\"text-foreground\"\u003eVideo submission not found.\u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  const canEvaluate = checkLimit('video_verifications');\n  const remainingEvaluations = getRemainingUses('video_verifications');\n  const videoDeleted = !videoSubmission.video_url;\n\n  return (\n    \u003cdiv className=\"space-y-6 min-h-screen\"\u003e\n      \u003cdiv className=\"flex justify-between items-center\"\u003e\n        \u003ch2 className=\"text-2xl font-bold text-foreground\"\u003eAI Video Evaluation\u003c/h2\u003e\n        \u003cdiv className=\"flex gap-4\"\u003e\n          {videoSubmission.evaluation_status === 'completed' \u0026\u0026 (\n            \u003cButton\n              onClick={handleDownloadPDF}\n              className=\"bg-green-500 hover:bg-green-600 text-white\"\n            \u003e\n              \u003cFileText className=\"w-4 h-4 mr-2\" /\u003e\n              Download PDF\n            \u003c/Button\u003e\n          )}\n          \u003cButton\n            onClick={onStartNewAnalysis}\n            className=\"bg-green-500 hover:bg-green-600 text-white\"\n          \u003e\n            \u003cRotateCcw className=\"w-4 h-4 mr-2\" /\u003e\n            New Analysis\n          \u003c/Button\u003e\n          \u003cButton\n            variant=\"ghost\"\n            onClick={onBackToUpload}\n            className=\"text-muted-foreground hover:text-foreground hover:bg-muted\"\n          \u003e\n            \u003cArrowLeft className=\"w-4 h-4 mr-2\" /\u003e\n            Back to Upload\n          \u003c/Button\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      {/* Script Context Card */}\n      \u003cCard className=\"bg-card border-border\"\u003e\n        \u003cCardHeader\u003e\n          \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n            \u003cStar className=\"w-5 h-5 text-brand-yellow\" /\u003e\n            Performance Context\n          \u003c/CardTitle\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent\u003e\n          \u003cdiv className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"\u003e\n            \u003cdiv\u003e\n              \u003cBadge variant=\"secondary\" className=\"bg-brand-yellow/20 text-brand-yellow mb-2\"\u003e\n                Character: {analysis.selected_character}\n              \u003c/Badge\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n              \u003cBadge variant=\"secondary\" className=\"bg-blue-500/20 text-blue-400 mb-2\"\u003e\n                Method: {analysis.acting_method}\n              \u003c/Badge\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n              \u003cBadge variant=\"secondary\" className=\"bg-purple-500/20 text-purple-400 mb-2\"\u003e\n                Script-Based Analysis\n              \u003c/Badge\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n\n      {!canEvaluate \u0026\u0026 videoSubmission.evaluation_status === 'pending' \u0026\u0026 (\n        \u003cdiv className=\"bg-red-900/20 border border-red-700/50 rounded-lg p-4\"\u003e\n          \u003cdiv className=\"flex items-start gap-3\"\u003e\n            \u003cAlertTriangle className=\"w-5 h-5 text-red-400 mt-0.5\" /\u003e\n            \u003cdiv\u003e\n              \u003cp className=\"text-red-300 font-medium\"\u003eDaily Evaluation Limit Reached\u003c/p\u003e\n              \u003cp className=\"text-red-400 text-sm mt-1\"\u003e\n                AI Actor is now under high usage - please come back in 5 minutes or tomorrow for video evaluation.\n              \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      )}\n\n      \u003cdiv className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\"\u003e\n        {/* Video Player */}\n        \u003cCard className=\"bg-card border-border\"\u003e\n          \u003cCardHeader\u003e\n            \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n              \u003cVideo className=\"w-5 h-5\" /\u003e\n              Your Audition Video\n            \u003c/CardTitle\u003e\n            \u003cCardDescription className=\"text-muted-foreground\"\u003e\n              {videoSubmission.video_title}\n              {canEvaluate \u0026\u0026 remainingEvaluations \u003c= 1 \u0026\u0026 videoSubmission.evaluation_status === 'pending' \u0026\u0026 (\n                \u003cspan className=\"text-brand-yellow block mt-1\"\u003e\n                  ⚠️ {remainingEvaluations} evaluation remaining today\n                \u003c/span\u003e\n              )}\n              {videoDeleted \u0026\u0026 (\n                \u003cspan className=\"text-blue-400 block mt-1\"\u003e\n                  📁 Video removed after analysis to save storage space\n                \u003c/span\u003e\n              )}\n            \u003c/CardDescription\u003e\n          \u003c/CardHeader\u003e\n          \u003cCardContent\u003e\n            {videoDeleted ? (\n              \u003cdiv className=\"aspect-video bg-muted rounded-lg flex items-center justify-center border-2 border-dashed border-border\"\u003e\n                \u003cdiv className=\"text-center text-muted-foreground\"\u003e\n                  \u003cCheckCircle className=\"w-12 h-12 mx-auto mb-3\" /\u003e\n                  \u003cp className=\"font-medium\"\u003eVideo Analyzed \u0026 Removed\u003c/p\u003e\n                  \u003cp className=\"text-sm mt-1\"\u003eFile deleted to save storage space\u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            ) : (\n              \u003cdiv className=\"aspect-video bg-black rounded-lg overflow-hidden\"\u003e\n                \u003cvideo\n                  controls\n                  className=\"w-full h-full\"\n                  src={videoSubmission.video_url}\n                \u003e\n                  Your browser does not support the video tag.\n                \u003c/video\u003e\n              \u003c/div\u003e\n            )}\n            \u003cdiv className=\"mt-4 flex items-center justify-between\"\u003e\n              \u003cBadge \n                variant={\n                  videoSubmission.evaluation_status === 'completed' ? 'default' :\n                  videoSubmission.evaluation_status === 'in_progress' ? 'secondary' : 'outline'\n                }\n              \u003e\n                {videoSubmission.evaluation_status.replace('_', ' ')}\n              \u003c/Badge\u003e\n              \u003cspan className=\"text-muted-foreground text-sm\"\u003e\n                Uploaded {new Date(videoSubmission.created_at).toLocaleDateString()}\n              \u003c/span\u003e\n            \u003c/div\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n\n        {/* AI Evaluation - Shows button or progress */}\n        \u003cCard className=\"bg-card border-border\"\u003e\n          \u003cCardHeader\u003e\n            \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n              \u003cStar className=\"w-5 h-5\" /\u003e\n              AI Performance Evaluation\n            \u003c/CardTitle\u003e\n            \u003cCardDescription className=\"text-muted-foreground\"\u003e\n              Technical \u0026 Performance Analysis for {analysis.selected_character}\n            \u003c/CardDescription\u003e\n          \u003c/CardHeader\u003e\n          \u003cCardContent className=\"space-y-4\"\u003e\n            {videoSubmission.evaluation_status === 'pending' \u0026\u0026 (\n              \u003cdiv className=\"space-y-4\"\u003e\n                \u003cdiv className=\"text-center\"\u003e\n                  \u003cp className=\"text-foreground mb-4\"\u003eReady for comprehensive AI evaluation\u003c/p\u003e\n                  \u003cButton\n                    onClick={() =\u003e startAIEvaluation(videoSubmission)}\n                    disabled={!canEvaluate || evaluating}\n                    className=\"bg-purple-600 hover:bg-purple-700 text-white px-6 py-2\"\n                  \u003e\n                    {evaluating ? (\n                      \u003c\u003e\n                        \u003cdiv className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"\u003e\u003c/div\u003e\n                        Analyzing Performance...\n                      \u003c/\u003e\n                    ) : (\n                      \u003c\u003e\n                        \u003cStar className=\"w-4 h-4 mr-2\" /\u003e\n                        Evaluate Performance\n                      \u003c/\u003e\n                    )}\n                  \u003c/Button\u003e\n                  {!canEvaluate \u0026\u0026 (\n                    \u003cp className=\"text-red-400 text-sm mt-2\"\u003e\n                      Daily evaluation limit reached. Please upgrade or try again tomorrow.\n                    \u003c/p\u003e\n                  )}\n                \u003c/div\u003e\n              \u003c/div\u003e\n            )}\n\n            {(evaluating || videoSubmission.evaluation_status === 'in_progress') \u0026\u0026 (\n              \u003cdiv className=\"space-y-3\"\u003e\n                \u003cdiv className=\"flex items-center gap-2\"\u003e\n                  \u003cdiv className=\"animate-spin rounded-full h-4 w-4 border-2 border-purple-400 border-t-transparent\"\u003e\u003c/div\u003e\n                  \u003cspan className=\"text-foreground\"\u003eAnalyzing technical quality and performance...\u003c/span\u003e\n                \u003c/div\u003e\n                \u003cProgress value={75} className=\"w-full\" /\u003e\n                \u003cp className=\"text-muted-foreground text-sm\"\u003e\n                  Evaluating lighting, audio, camera work, and acting performance. Video will be removed after analysis.\n                \u003c/p\u003e\n              \u003c/div\u003e\n            )}\n\n            {videoSubmission.evaluation_status === 'completed' \u0026\u0026 (\n              \u003cdiv className=\"text-center space-y-4\"\u003e\n                \u003cdiv className=\"text-4xl font-bold text-brand-yellow\"\u003e\n                  {videoSubmission.evaluation_score}/100\n                \u003c/div\u003e\n                \u003cp className=\"text-foreground text-lg leading-relaxed\"\u003e\n                  {videoSubmission.ai_analysis?.overall_performance || 'Analysis completed'}\n                \u003c/p\u003e\n                \u003cp className=\"text-muted-foreground text-sm\"\u003e\n                  Comprehensive evaluation complete - view detailed analysis below\n                \u003c/p\u003e\n              \u003c/div\u003e\n            )}\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      \u003c/div\u003e\n\n      {/* Show analysis results with tabs when evaluation is completed */}\n      {videoSubmission.evaluation_status === 'completed' \u0026\u0026 videoSubmission.ai_analysis \u0026\u0026 (\n        \u003cdiv className=\"mt-8\"\u003e\n          \u003cTabs defaultValue=\"detailed\" className=\"w-full\"\u003e\n            \u003cTabsList className=\"grid w-full grid-cols-2 bg-muted border-border\"\u003e\n              \u003cTabsTrigger \n                value=\"detailed\" \n                className=\"flex items-center gap-2 data-[state=active]:bg-accent data-[state=active]:text-accent-foreground\"\n              \u003e\n                \u003cBarChart3 className=\"w-4 h-4\" /\u003e\n                Detailed Analysis\n              \u003c/TabsTrigger\u003e\n              \u003cTabsTrigger \n                value=\"report\" \n                className=\"flex items-center gap-2 data-[state=active]:bg-accent data-[state=active]:text-accent-foreground\"\n              \u003e\n                \u003cFileCheck className=\"w-4 h-4\" /\u003e\n                Professional Report\n              \u003c/TabsTrigger\u003e\n            \u003c/TabsList\u003e\n            \n            \u003cTabsContent value=\"detailed\" className=\"mt-6\"\u003e\n              \u003cdiv className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\"\u003e\n                {/* Technical Analysis */}\n                \u003cCard className=\"bg-card border-border\"\u003e\n                  \u003cCardHeader\u003e\n                    \u003cCardTitle className=\"text-foreground\"\u003eTechnical Analysis\u003c/CardTitle\u003e\n                    \u003cCardDescription className=\"text-muted-foreground\"\u003e\n                      Video quality and production assessment\n                    \u003c/CardDescription\u003e\n                  \u003c/CardHeader\u003e\n                  \u003cCardContent\u003e\n                    \u003cdiv className=\"space-y-4\"\u003e\n                      \u003cdiv className=\"flex justify-between items-center\"\u003e\n                        \u003cspan className=\"text-muted-foreground\"\u003eTechnical Score\u003c/span\u003e\n                        \u003cBadge variant=\"secondary\" className=\"bg-blue-500/20 text-blue-400\"\u003e\n                          {videoSubmission.ai_analysis?.technical_score || 'N/A'}/100\n                        \u003c/Badge\u003e\n                      \u003c/div\u003e\n                      \n                      {videoSubmission.ai_analysis?.technical_feedback \u0026\u0026 videoSubmission.ai_analysis.technical_feedback.length \u003e 0 \u0026\u0026 (\n                        \u003cdiv className=\"space-y-2\"\u003e\n                          \u003ch4 className=\"text-foreground font-medium\"\u003eFeedback:\u003c/h4\u003e\n                          \u003cul className=\"space-y-1\"\u003e\n                            {videoSubmission.ai_analysis.technical_feedback.map((feedback: string, index: number) =\u003e (\n                              \u003cli key={index} className=\"text-foreground text-sm flex items-start gap-2 leading-relaxed\"\u003e\n                                \u003cspan className=\"text-blue-400 mt-1\"\u003e•\u003c/span\u003e\n                                \u003cspan\u003e{feedback}\u003c/span\u003e\n                              \u003c/li\u003e\n                            ))}\n                          \u003c/ul\u003e\n                        \u003c/div\u003e\n                      )}\n                    \u003c/div\u003e\n                  \u003c/CardContent\u003e\n                \u003c/Card\u003e\n\n                {/* Performance Analysis */}\n                \u003cCard className=\"bg-card border-border\"\u003e\n                  \u003cCardHeader\u003e\n                    \u003cCardTitle className=\"text-foreground\"\u003ePerformance Analysis\u003c/CardTitle\u003e\n                    \u003cCardDescription className=\"text-muted-foreground\"\u003e\n                      Acting technique and character portrayal\n                    \u003c/CardDescription\u003e\n                  \u003c/CardHeader\u003e\n                  \u003cCardContent\u003e\n                    \u003cdiv className=\"space-y-4\"\u003e\n                      \u003cdiv className=\"flex justify-between items-center\"\u003e\n                        \u003cspan className=\"text-muted-foreground\"\u003ePerformance Score\u003c/span\u003e\n                        \u003cBadge variant=\"secondary\" className=\"bg-green-500/20 text-green-400\"\u003e\n                          {videoSubmission.ai_analysis?.performance_score || 'N/A'}/100\n                        \u003c/Badge\u003e\n                      \u003c/div\u003e\n                      \n                      {videoSubmission.ai_analysis?.performance_feedback \u0026\u0026 videoSubmission.ai_analysis.performance_feedback.length \u003e 0 \u0026\u0026 (\n                        \u003cdiv className=\"space-y-2\"\u003e\n                          \u003ch4 className=\"text-foreground font-medium\"\u003eFeedback:\u003c/h4\u003e\n                          \u003cul className=\"space-y-1\"\u003e\n                            {videoSubmission.ai_analysis.performance_feedback.map((feedback: string, index: number) =\u003e (\n                              \u003cli key={index} className=\"text-foreground text-sm flex items-start gap-2 leading-relaxed\"\u003e\n                                \u003cspan className=\"text-green-400 mt-1\"\u003e•\u003c/span\u003e\n                                \u003cspan\u003e{feedback}\u003c/span\u003e\n                              \u003c/li\u003e\n                            ))}\n                          \u003c/ul\u003e\n                        \u003c/div\u003e\n                      )}\n                    \u003c/div\u003e\n                  \u003c/CardContent\u003e\n                \u003c/Card\u003e\n              \u003c/div\u003e\n            \u003c/TabsContent\u003e\n            \n            \u003cTabsContent value=\"report\" className=\"mt-6\"\u003e\n              \u003cVideoAnalysisReport \n                analysis={analysis}\n                videoSubmission={videoSubmission}\n                onViewObjectives={handleViewObjectives}\n              /\u003e\n            \u003c/TabsContent\u003e\n          \u003c/Tabs\u003e\n        \u003c/div\u003e\n      )}\n      \n      \u003cDataUseDisclaimer className=\"mt-6\" /\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default VideoEvaluation;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/VideoUpload.tsx",
//     "contents": "\nimport { useState, useRef } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, ArrowLeft, Loader2 } from \"lucide-react\";\nimport { DataUseDisclaimer } from \"@/components/DataUseDisclaimer\";\n\ninterface VideoUploadProps {\n  analysis: any;\n  coachingSessionId: string;\n  onVideoUploaded: (videoId: string) =\u003e void;\n  onBackToCoaching: () =\u003e void;\n}\n\nconst VideoUpload = ({ analysis, coachingSessionId, onVideoUploaded, onBackToCoaching }: VideoUploadProps) =\u003e {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [uploading, setUploading] = useState(false);\n  const fileInputRef = useRef\u003cHTMLInputElement\u003e(null);\n\n  // Maximum file size: 1GB\n  const MAX_FILE_SIZE = 1024 * 1024 * 1024; // 1GB in bytes\n\n  const formatFileSize = (bytes: number) =\u003e {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent\u003cHTMLInputElement\u003e) =\u003e {\n    const file = event.target.files?.[0];\n    if (!file || !user) return;\n\n    // Validate file size\n    if (file.size \u003e MAX_FILE_SIZE) {\n      toast({\n        title: \"File too large\",\n        description: `File size (${formatFileSize(file.size)}) exceeds the maximum allowed size of ${formatFileSize(MAX_FILE_SIZE)}. Please compress your video or choose a smaller file.`,\n        variant: \"destructive\",\n      });\n      // Reset the file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n      return;\n    }\n\n    // Validate file type\n    if (!file.type.startsWith('video/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a valid video file (MP4, MOV, AVI, etc.)\",\n        variant: \"destructive\",\n      });\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n      return;\n    }\n\n    setUploading(true);\n\n    try {\n      // Upload to Supabase Storage\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${user.id}/${Date.now()}.${fileExt}`;\n      \n      const { error: uploadError } = await supabase.storage\n        .from('videos')\n        .upload(fileName, file);\n\n      if (uploadError) {\n        console.error('Upload error:', uploadError);\n        throw uploadError;\n      }\n\n      const { data } = supabase.storage\n        .from('videos')\n        .getPublicUrl(fileName);\n\n      // Save video submission to database with file path for later cleanup\n      const { data: submission, error: dbError } = await supabase\n        .from('video_submissions')\n        .insert({\n          user_id: user.id,\n          coaching_session_id: coachingSessionId,\n          video_url: data.publicUrl,\n          video_title: file.name,\n          storage_file_path: fileName // Store file path for cleanup\n        })\n        .select()\n        .single();\n\n      if (dbError) throw dbError;\n\n      toast({\n        title: \"Video uploaded successfully!\",\n        description: \"Your video is now being processed for evaluation.\",\n      });\n\n      onVideoUploaded(submission.id);\n    } catch (error: any) {\n      console.error('Error uploading video:', error);\n      \n      let errorMessage = \"There was an error uploading your video. Please try again.\";\n      \n      if (error.message?.includes('Payload too large') || error.statusCode === '413') {\n        errorMessage = `Your video file is too large. Please compress it to under ${formatFileSize(MAX_FILE_SIZE)} and try again.`;\n      } else if (error.message?.includes('Invalid file type')) {\n        errorMessage = \"Please select a valid video file format (MP4, MOV, AVI).\";\n      }\n      \n      toast({\n        title: \"Upload failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n      // Reset the file input to allow re-selecting the same file after error\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  return (\n    \u003cdiv className=\"max-w-4xl mx-auto space-y-6\"\u003e\n      \u003cdiv className=\"flex items-center space-x-4 mb-6\"\u003e\n        \u003cButton \n          variant=\"outline\" \n          onClick={onBackToCoaching}\n          className=\"bg-background text-foreground border-border hover:bg-muted hover:text-foreground\"\n        \u003e\n          \u003cArrowLeft className=\"w-4 h-4 mr-2\" /\u003e\n          Back to Coaching\n        \u003c/Button\u003e\n        \u003ch2 className=\"text-2xl font-bold text-foreground\"\u003eUpload Your Audition Video\u003c/h2\u003e\n      \u003c/div\u003e\n\n      \u003cCard className=\"bg-card border-border\"\u003e\n        \u003cCardHeader\u003e\n          \u003cCardTitle className=\"text-foreground\"\u003eVideo Upload\u003c/CardTitle\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent className=\"space-y-4\"\u003e\n          \u003cdiv className=\"text-muted-foreground space-y-2\"\u003e\n            \u003cp\u003eUpload your self-tape for analysis and feedback.\u003c/p\u003e\n            \u003cul className=\"list-disc list-inside space-y-1 text-sm\"\u003e\n              \u003cli\u003eSupported formats: MP4, MOV, AVI\u003c/li\u003e\n              \u003cli\u003eMaximum file size: {formatFileSize(MAX_FILE_SIZE)}\u003c/li\u003e\n              \u003cli\u003eRecommended: 1080p resolution, good lighting and audio\u003c/li\u003e\n              \u003cli className=\"text-blue-400\"\u003e💡 Videos are automatically deleted after analysis to save space\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"border-2 border-dashed border-border rounded-lg p-8 text-center\"\u003e\n            \u003cUpload className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" /\u003e\n            \u003cp className=\"text-foreground mb-4\"\u003e\n              Drag and drop your video file here, or click to browse\n            \u003c/p\u003e\n            \u003cinput\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"video/*\"\n              onChange={handleFileUpload}\n              className=\"hidden\"\n            /\u003e\n            \u003cButton \n              onClick={() =\u003e fileInputRef.current?.click()}\n              disabled={uploading}\n              className=\"bg-brand-yellow hover:bg-brand-yellow/90 text-brand-yellow-foreground\"\n            \u003e\n              {uploading ? (\n                \u003c\u003e\n                  \u003cLoader2 className=\"w-4 h-4 mr-2 animate-spin\" /\u003e\n                  Uploading...\n                \u003c/\u003e\n              ) : (\n                \"Choose Video File\"\n              )}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n      \n      \u003cDataUseDisclaimer className=\"mt-6\" /\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default VideoUpload;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/admin/AdminCoachesManager.tsx",
//     "contents": "\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Plus, Edit, Trash2, X } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\n\ninterface Coach {\n  id: string;\n  name: string;\n  slug: string;\n  bio: string | null;\n  highlights: string[];\n  photo_url: string | null;\n  email: string | null;\n  active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nconst AdminCoachesManager = () =\u003e {\n  const [isAddingCoach, setIsAddingCoach] = useState(false);\n  const [editingCoach, setEditingCoach] = useState\u003cCoach | null\u003e(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: coaches, isLoading } = useQuery({\n    queryKey: ['admin-coaches'],\n    queryFn: async () =\u003e {\n      const { data, error } = await supabase\n        .from('coaches')\n        .select('*')\n        .order('name');\n      \n      if (error) throw error;\n      return data as Coach[];\n    },\n  });\n\n  const deleteCoachMutation = useMutation({\n    mutationFn: async (coachId: string) =\u003e {\n      const { error } = await supabase\n        .from('coaches')\n        .delete()\n        .eq('id', coachId);\n      \n      if (error) throw error;\n    },\n    onSuccess: () =\u003e {\n      queryClient.invalidateQueries({ queryKey: ['admin-coaches'] });\n      toast({\n        title: \"Coach deleted\",\n        description: \"The coach has been successfully removed.\",\n      });\n    },\n    onError: (error: any) =\u003e {\n      toast({\n        title: \"Error deleting coach\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      \u003cdiv className=\"flex justify-center py-8\"\u003e\n        \u003cLoader2 className=\"h-8 w-8 animate-spin text-purple-400\" /\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  return (\n    \u003cdiv className=\"space-y-6\"\u003e\n      \u003cdiv className=\"flex justify-between items-center\"\u003e\n        \u003ch2 className=\"text-2xl font-bold\"\u003eManage Coaches\u003c/h2\u003e\n        \u003cDialog open={isAddingCoach} onOpenChange={setIsAddingCoach}\u003e\n          \u003cDialogTrigger asChild\u003e\n            \u003cButton className=\"bg-purple-600 hover:bg-purple-700\"\u003e\n              \u003cPlus className=\"h-4 w-4 mr-2\" /\u003e\n              Add New Coach\n            \u003c/Button\u003e\n          \u003c/DialogTrigger\u003e\n          \u003cDialogContent className=\"max-w-2xl bg-gray-900 border-gray-700 max-h-[80vh] overflow-y-auto\"\u003e\n            \u003cDialogHeader\u003e\n              \u003cDialogTitle className=\"text-white\"\u003eAdd New Coach\u003c/DialogTitle\u003e\n            \u003c/DialogHeader\u003e\n            \u003cCoachForm \n              onSuccess={() =\u003e setIsAddingCoach(false)} \n              onCancel={() =\u003e setIsAddingCoach(false)}\n            /\u003e\n          \u003c/DialogContent\u003e\n        \u003c/Dialog\u003e\n      \u003c/div\u003e\n\n      \u003cdiv className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\"\u003e\n        {coaches?.map((coach) =\u003e (\n          \u003cCard key={coach.id} className=\"bg-gray-900 border-gray-800\"\u003e\n            \u003cCardHeader className=\"pb-4\"\u003e\n              \u003cdiv className=\"flex items-start justify-between\"\u003e\n                \u003cdiv className=\"flex items-center space-x-3\"\u003e\n                  {coach.photo_url \u0026\u0026 (\n                    \u003cimg\n                      src={coach.photo_url}\n                      alt={coach.name}\n                      className=\"w-12 h-12 rounded-full object-cover border-2 border-purple-400\"\n                    /\u003e\n                  )}\n                  \u003cdiv\u003e\n                    \u003cCardTitle className=\"text-white text-lg\"\u003e{coach.name}\u003c/CardTitle\u003e\n                    \u003cp className=\"text-sm text-gray-400\"\u003e/{coach.slug}\u003c/p\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                  \u003cSwitch checked={coach.active} disabled /\u003e\n                  \u003cspan className=\"text-xs text-gray-400\"\u003e\n                    {coach.active ? 'Active' : 'Inactive'}\n                  \u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/CardHeader\u003e\n            \n            \u003cCardContent className=\"space-y-4\"\u003e\n              {coach.bio \u0026\u0026 (\n                \u003cp className=\"text-gray-300 text-sm line-clamp-2\"\u003e{coach.bio}\u003c/p\u003e\n              )}\n              \n              {coach.email \u0026\u0026 (\n                \u003cp className=\"text-purple-400 text-sm\"\u003e{coach.email}\u003c/p\u003e\n              )}\n              \n              {coach.highlights.length \u003e 0 \u0026\u0026 (\n                \u003cdiv\u003e\n                  \u003cp className=\"text-xs text-gray-500 mb-2\"\u003e\n                    {coach.highlights.length} highlight{coach.highlights.length !== 1 ? 's' : ''}\n                  \u003c/p\u003e\n                  \u003cdiv className=\"flex flex-wrap gap-1\"\u003e\n                    {coach.highlights.slice(0, 2).map((_, index) =\u003e (\n                      \u003cBadge key={index} variant=\"secondary\" className=\"text-xs\"\u003e\n                        Highlight {index + 1}\n                      \u003c/Badge\u003e\n                    ))}\n                    {coach.highlights.length \u003e 2 \u0026\u0026 (\n                      \u003cBadge variant=\"outline\" className=\"text-xs\"\u003e\n                        +{coach.highlights.length - 2}\n                      \u003c/Badge\u003e\n                    )}\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              )}\n\n              \u003cdiv className=\"flex space-x-2 pt-2\"\u003e\n                \u003cDialog open={editingCoach?.id === coach.id} onOpenChange={(open) =\u003e setEditingCoach(open ? coach : null)}\u003e\n                  \u003cDialogTrigger asChild\u003e\n                    \u003cButton variant=\"outline\" size=\"sm\" className=\"flex-1\"\u003e\n                      \u003cEdit className=\"h-4 w-4 mr-1\" /\u003e\n                      Edit\n                    \u003c/Button\u003e\n                  \u003c/DialogTrigger\u003e\n                  \u003cDialogContent className=\"max-w-2xl bg-gray-900 border-gray-700 max-h-[80vh] overflow-y-auto\"\u003e\n                    \u003cDialogHeader\u003e\n                      \u003cDialogTitle className=\"text-white\"\u003eEdit Coach\u003c/DialogTitle\u003e\n                    \u003c/DialogHeader\u003e\n                    \u003cCoachForm \n                      coach={coach}\n                      onSuccess={() =\u003e setEditingCoach(null)} \n                      onCancel={() =\u003e setEditingCoach(null)}\n                    /\u003e\n                  \u003c/DialogContent\u003e\n                \u003c/Dialog\u003e\n\n                \u003cAlertDialog\u003e\n                  \u003cAlertDialogTrigger asChild\u003e\n                    \u003cButton variant=\"destructive\" size=\"sm\"\u003e\n                      \u003cTrash2 className=\"h-4 w-4\" /\u003e\n                    \u003c/Button\u003e\n                  \u003c/AlertDialogTrigger\u003e\n                  \u003cAlertDialogContent className=\"bg-gray-900 border-gray-700\"\u003e\n                    \u003cAlertDialogHeader\u003e\n                      \u003cAlertDialogTitle className=\"text-white\"\u003eDelete Coach\u003c/AlertDialogTitle\u003e\n                      \u003cAlertDialogDescription className=\"text-gray-300\"\u003e\n                        Are you sure you want to delete {coach.name}? This action cannot be undone.\n                      \u003c/AlertDialogDescription\u003e\n                    \u003c/AlertDialogHeader\u003e\n                    \u003cAlertDialogFooter\u003e\n                      \u003cAlertDialogCancel className=\"bg-gray-800 text-white border-gray-700\"\u003e\n                        Cancel\n                      \u003c/AlertDialogCancel\u003e\n                      \u003cAlertDialogAction\n                        onClick={() =\u003e deleteCoachMutation.mutate(coach.id)}\n                        className=\"bg-red-600 hover:bg-red-700\"\n                      \u003e\n                        Delete\n                      \u003c/AlertDialogAction\u003e\n                    \u003c/AlertDialogFooter\u003e\n                  \u003c/AlertDialogContent\u003e\n                \u003c/AlertDialog\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        ))}\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\ninterface CoachFormProps {\n  coach?: Coach;\n  onSuccess: () =\u003e void;\n  onCancel: () =\u003e void;\n}\n\nconst CoachForm = ({ coach, onSuccess, onCancel }: CoachFormProps) =\u003e {\n  const [formData, setFormData] = useState({\n    name: coach?.name || '',\n    slug: coach?.slug || '',\n    bio: coach?.bio || '',\n    email: coach?.email || '',\n    photo_url: coach?.photo_url || '',\n    active: coach?.active ?? true,\n    highlights: coach?.highlights || ['']\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const generateSlug = (name: string) =\u003e {\n    return name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');\n  };\n\n  const handleNameChange = (name: string) =\u003e {\n    setFormData(prev =\u003e ({\n      ...prev,\n      name,\n      slug: prev.slug === generateSlug(prev.name) || !prev.slug ? generateSlug(name) : prev.slug\n    }));\n  };\n\n  const addHighlight = () =\u003e {\n    setFormData(prev =\u003e ({\n      ...prev,\n      highlights: [...prev.highlights, '']\n    }));\n  };\n\n  const removeHighlight = (index: number) =\u003e {\n    setFormData(prev =\u003e ({\n      ...prev,\n      highlights: prev.highlights.filter((_, i) =\u003e i !== index)\n    }));\n  };\n\n  const updateHighlight = (index: number, value: string) =\u003e {\n    setFormData(prev =\u003e ({\n      ...prev,\n      highlights: prev.highlights.map((h, i) =\u003e i === index ? value : h)\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) =\u003e {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      const cleanedHighlights = formData.highlights.filter(h =\u003e h.trim() !== '');\n      \n      const coachData = {\n        ...formData,\n        highlights: cleanedHighlights,\n        photo_url: formData.photo_url || null,\n        email: formData.email || null,\n        bio: formData.bio || null\n      };\n\n      if (coach) {\n        const { error } = await supabase\n          .from('coaches')\n          .update(coachData)\n          .eq('id', coach.id);\n        \n        if (error) throw error;\n        \n        toast({\n          title: \"Coach updated\",\n          description: \"The coach has been successfully updated.\",\n        });\n      } else {\n        const { error } = await supabase\n          .from('coaches')\n          .insert(coachData);\n        \n        if (error) throw error;\n        \n        toast({\n          title: \"Coach added\",\n          description: \"The new coach has been successfully added.\",\n        });\n      }\n\n      queryClient.invalidateQueries({ queryKey: ['admin-coaches'] });\n      queryClient.invalidateQueries({ queryKey: ['coaches'] });\n      onSuccess();\n    } catch (error: any) {\n      toast({\n        title: coach ? \"Error updating coach\" : \"Error adding coach\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    \u003cform onSubmit={handleSubmit} className=\"space-y-4\"\u003e\n      \u003cdiv className=\"grid grid-cols-2 gap-4\"\u003e\n        \u003cdiv\u003e\n          \u003cLabel htmlFor=\"name\" className=\"text-white\"\u003eName *\u003c/Label\u003e\n          \u003cInput\n            id=\"name\"\n            value={formData.name}\n            onChange={(e) =\u003e handleNameChange(e.target.value)}\n            required\n            className=\"bg-gray-800 border-gray-600 text-white\"\n          /\u003e\n        \u003c/div\u003e\n        \u003cdiv\u003e\n          \u003cLabel htmlFor=\"slug\" className=\"text-white\"\u003eSlug *\u003c/Label\u003e\n          \u003cInput\n            id=\"slug\"\n            value={formData.slug}\n            onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, slug: e.target.value }))}\n            required\n            className=\"bg-gray-800 border-gray-600 text-white\"\n          /\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      \u003cdiv\u003e\n        \u003cLabel htmlFor=\"email\" className=\"text-white\"\u003eEmail\u003c/Label\u003e\n        \u003cInput\n          id=\"email\"\n          type=\"email\"\n          value={formData.email}\n          onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, email: e.target.value }))}\n          className=\"bg-gray-800 border-gray-600 text-white\"\n        /\u003e\n      \u003c/div\u003e\n\n      \u003cdiv\u003e\n        \u003cLabel htmlFor=\"photo_url\" className=\"text-white\"\u003ePhoto URL\u003c/Label\u003e\n        \u003cInput\n          id=\"photo_url\"\n          value={formData.photo_url}\n          onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, photo_url: e.target.value }))}\n          className=\"bg-gray-800 border-gray-600 text-white\"\n          placeholder=\"https://example.com/photo.jpg or /lovable-uploads/...\"\n        /\u003e\n      \u003c/div\u003e\n\n      \u003cdiv\u003e\n        \u003cLabel htmlFor=\"bio\" className=\"text-white\"\u003eBio\u003c/Label\u003e\n        \u003cTextarea\n          id=\"bio\"\n          value={formData.bio}\n          onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, bio: e.target.value }))}\n          rows={3}\n          className=\"bg-gray-800 border-gray-600 text-white\"\n        /\u003e\n      \u003c/div\u003e\n\n      \u003cdiv\u003e\n        \u003cdiv className=\"flex items-center justify-between mb-2\"\u003e\n          \u003cLabel className=\"text-white\"\u003eHighlights\u003c/Label\u003e\n          \u003cButton type=\"button\" onClick={addHighlight} size=\"sm\" variant=\"outline\"\u003e\n            \u003cPlus className=\"h-4 w-4 mr-1\" /\u003e\n            Add\n          \u003c/Button\u003e\n        \u003c/div\u003e\n        \u003cdiv className=\"space-y-2\"\u003e\n          {formData.highlights.map((highlight, index) =\u003e (\n            \u003cdiv key={index} className=\"flex gap-2\"\u003e\n              \u003cInput\n                value={highlight}\n                onChange={(e) =\u003e updateHighlight(index, e.target.value)}\n                placeholder={`Highlight ${index + 1}`}\n                className=\"bg-gray-800 border-gray-600 text-white flex-1\"\n              /\u003e\n              {formData.highlights.length \u003e 1 \u0026\u0026 (\n                \u003cButton\n                  type=\"button\"\n                  onClick={() =\u003e removeHighlight(index)}\n                  size=\"sm\"\n                  variant=\"destructive\"\n                \u003e\n                  \u003cX className=\"h-4 w-4\" /\u003e\n                \u003c/Button\u003e\n              )}\n            \u003c/div\u003e\n          ))}\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      \u003cdiv className=\"flex items-center space-x-2\"\u003e\n        \u003cSwitch\n          checked={formData.active}\n          onCheckedChange={(checked) =\u003e setFormData(prev =\u003e ({ ...prev, active: checked }))}\n        /\u003e\n        \u003cLabel className=\"text-white\"\u003eActive\u003c/Label\u003e\n      \u003c/div\u003e\n\n      \u003cdiv className=\"flex gap-4 pt-4\"\u003e\n        \u003cButton type=\"button\" variant=\"outline\" onClick={onCancel} className=\"flex-1\"\u003e\n          Cancel\n        \u003c/Button\u003e\n        \u003cButton type=\"submit\" disabled={isSubmitting} className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\u003e\n          {isSubmitting ? (\n            \u003c\u003e\n              \u003cLoader2 className=\"h-4 w-4 mr-2 animate-spin\" /\u003e\n              {coach ? 'Updating...' : 'Adding...'}\n            \u003c/\u003e\n          ) : (\n            coach ? 'Update Coach' : 'Add Coach'\n          )}\n        \u003c/Button\u003e\n      \u003c/div\u003e\n    \u003c/form\u003e\n  );\n};\n\nexport default AdminCoachesManager;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/admin/AdminHeadshotKnowledge.tsx",
//     "contents": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst AdminHeadshotKnowledge = () =\u003e {\n  return (\n    \u003cdiv className=\"space-y-6\"\u003e\n      \u003cdiv className=\"flex justify-between items-center\"\u003e\n        \u003ch1 className=\"text-3xl font-bold\"\u003eHeadshot Knowledge Base\u003c/h1\u003e\n      \u003c/div\u003e\n      \n      \u003cCard\u003e\n        \u003cCardHeader\u003e\n          \u003cCardTitle\u003eKnowledge Management\u003c/CardTitle\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent\u003e\n          \u003cp className=\"text-muted-foreground\"\u003e\n            Admin interface for managing headshot evaluation knowledge base coming soon...\n          \u003c/p\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default AdminHeadshotKnowledge;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/admin/AdminScriptsManager.tsx",
//     "contents": "\nimport React, { useMemo, useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { formatDistanceToNow, subDays } from \"date-fns\";\nimport { Trash2, RotateCcw, Ban, Filter } from \"lucide-react\";\n\ntype AdminScript = {\n  id: string;\n  user_id: string;\n  title: string;\n  content: string;\n  created_at: string;\n  updated_at: string;\n  genre?: string | null;\n  deleted_at?: string | null;\n};\n\ntype StatusFilter = \"active\" | \"trashed\" | \"all\";\n\nconst AdminScriptsManager: React.FC = () =\u003e {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Admin detection\n  const { data: isAdmin } = useQuery({\n    queryKey: [\"is-admin\", user?.id],\n    enabled: !!user?.id,\n    queryFn: async () =\u003e {\n      const { data, error } = await supabase.rpc(\"has_role\", {\n        _user_id: user!.id,\n        _role: \"admin\",\n      });\n      if (error) throw error;\n      return Boolean(data);\n    },\n    meta: {\n      onError: (err: unknown) =\u003e {\n        console.error(\"Admin check failed:\", err);\n      },\n    },\n  });\n\n  // Filters\n  const [daysOld, setDaysOld] = useState\u003cnumber\u003e(90);\n  const [status, setStatus] = useState\u003cStatusFilter\u003e(\"active\");\n  const [search, setSearch] = useState\u003cstring\u003e(\"\");\n\n  const thresholdISO = useMemo(() =\u003e subDays(new Date(), daysOld).toISOString(), [daysOld]);\n\n  // Fetch scripts (admin scope)\n  const { data: scripts = [], isLoading } = useQuery({\n    queryKey: [\"admin-scripts\", { status, thresholdISO, search }],\n    enabled: !!isAdmin,\n    queryFn: async () =\u003e {\n      let query = supabase\n        .from(\"scripts\")\n        .select(\"id, user_id, title, content, created_at, updated_at, genre, deleted_at\")\n        .order(\"updated_at\", { ascending: false });\n\n      if (status === \"active\") {\n        query = query.is(\"deleted_at\", null);\n      } else if (status === \"trashed\") {\n        query = query.not(\"deleted_at\", \"is\", null);\n      }\n      if (search.trim()) {\n        query = query.ilike(\"title\", `%${search.trim()}%`);\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n      return (data || []) as AdminScript[];\n    },\n    meta: {\n      onError: (err: unknown) =\u003e {\n        console.error(\"Error fetching admin scripts:\", err);\n        toast({\n          variant: \"destructive\",\n          title: \"Failed to load scripts\",\n          description: \"Please try again.\",\n        });\n      },\n    },\n  });\n\n  // Selection\n  const [selected, setSelected] = useState\u003cRecord\u003cstring, boolean\u003e\u003e({});\n  const selectedIds = useMemo(() =\u003e Object.keys(selected).filter((id) =\u003e selected[id]), [selected]);\n\n  const clearSelection = () =\u003e setSelected({});\n\n  // Mutations\n  const trashSelectedMutation = useMutation({\n    mutationFn: async (ids: string[]) =\u003e {\n      const { error } = await supabase\n        .from(\"scripts\")\n        .update({ deleted_at: new Date().toISOString() })\n        .in(\"id\", ids);\n      if (error) throw error;\n    },\n    onSuccess: () =\u003e {\n      queryClient.invalidateQueries({ queryKey: [\"admin-scripts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"scripts\"] });\n      toast({ title: \"Moved to Trash\", description: \"Selected scripts were moved to trash.\" });\n      clearSelection();\n    },\n    onError: (error) =\u003e {\n      console.error(\"Trash selected error:\", error);\n      toast({ variant: \"destructive\", title: \"Error\", description: \"Could not trash selected scripts.\" });\n    },\n  });\n\n  const restoreSelectedMutation = useMutation({\n    mutationFn: async (ids: string[]) =\u003e {\n      const { error } = await supabase.from(\"scripts\").update({ deleted_at: null }).in(\"id\", ids);\n      if (error) throw error;\n    },\n    onSuccess: () =\u003e {\n      queryClient.invalidateQueries({ queryKey: [\"admin-scripts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"scripts\"] });\n      toast({ title: \"Restored\", description: \"Selected scripts were restored.\" });\n      clearSelection();\n    },\n    onError: (error) =\u003e {\n      console.error(\"Restore selected error:\", error);\n      toast({ variant: \"destructive\", title: \"Error\", description: \"Could not restore selected scripts.\" });\n    },\n  });\n\n  const deleteForeverMutation = useMutation({\n    mutationFn: async (ids: string[]) =\u003e {\n      const { error } = await supabase.from(\"scripts\").delete().in(\"id\", ids);\n      if (error) throw error;\n    },\n    onSuccess: () =\u003e {\n      queryClient.invalidateQueries({ queryKey: [\"admin-scripts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"scripts\"] });\n      toast({ title: \"Deleted Forever\", description: \"Selected scripts were permanently deleted.\" });\n      clearSelection();\n    },\n    onError: (error) =\u003e {\n      console.error(\"Delete forever error:\", error);\n      toast({ variant: \"destructive\", title: \"Error\", description: \"Could not delete selected scripts.\" });\n    },\n  });\n\n  const trashOlderThanMutation = useMutation({\n    mutationFn: async () =\u003e {\n      const { error } = await supabase\n        .from(\"scripts\")\n        .update({ deleted_at: new Date().toISOString() })\n        .lt(\"updated_at\", thresholdISO)\n        .is(\"deleted_at\", null);\n      if (error) throw error;\n    },\n    onSuccess: () =\u003e {\n      queryClient.invalidateQueries({ queryKey: [\"admin-scripts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"scripts\"] });\n      toast({ title: \"Old Scripts Trashed\", description: `All active scripts older than ${daysOld} days were moved to trash.` });\n      clearSelection();\n    },\n    onError: (error) =\u003e {\n      console.error(\"Trash older-than error:\", error);\n      toast({ variant: \"destructive\", title: \"Error\", description: \"Could not trash old scripts.\" });\n    },\n  });\n\n  if (!isAdmin) return null;\n\n  const allSelected = scripts.length \u003e 0 \u0026\u0026 selectedIds.length === scripts.length;\n  const toggleSelectAll = () =\u003e {\n    if (allSelected) {\n      clearSelection();\n    } else {\n      const next: Record\u003cstring, boolean\u003e = {};\n      scripts.forEach((s) =\u003e (next[s.id] = true));\n      setSelected(next);\n    }\n  };\n\n  return (\n    \u003cCard className=\"bg-card border-border mb-6\"\u003e\n      \u003cCardHeader className=\"pb-2\"\u003e\n        \u003cdiv className=\"flex items-center justify-between\"\u003e\n          \u003cdiv className=\"flex items-center gap-3\"\u003e\n            \u003cCardTitle className=\"text-xl\"\u003eAdmin: Scripts Manager\u003c/CardTitle\u003e\n            \u003cBadge variant={status === \"trashed\" ? \"destructive\" : \"secondary\"}\u003e\n              {status === \"active\" ? \"Active\" : status === \"trashed\" ? \"Trashed\" : \"All\"}\n            \u003c/Badge\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"flex items-center gap-2\"\u003e\n            \u003cButton\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() =\u003e setStatus((s) =\u003e (s === \"active\" ? \"trashed\" : s === \"trashed\" ? \"all\" : \"active\"))}\n              className=\"gap-2\"\n              title=\"Cycle status filter\"\n            \u003e\n              \u003cFilter className=\"w-4 h-4\" /\u003e\n              {status === \"active\" ? \"Show: Trashed\" : status === \"trashed\" ? \"Show: All\" : \"Show: Active\"}\n            \u003c/Button\u003e\n            \u003cdiv className=\"flex items-center gap-2\"\u003e\n              \u003cspan className=\"text-sm text-muted-foreground\"\u003eOlder than\u003c/span\u003e\n              \u003cInput\n                type=\"number\"\n                className=\"w-20\"\n                min={1}\n                value={daysOld}\n                onChange={(e) =\u003e setDaysOld(Math.max(1, Number(e.target.value) || 1))}\n              /\u003e\n              \u003cspan className=\"text-sm text-muted-foreground\"\u003edays\u003c/span\u003e\n              \u003cButton\n                size=\"sm\"\n                disabled={trashOlderThanMutation.isPending}\n                onClick={() =\u003e trashOlderThanMutation.mutate()}\n                className=\"ml-2\"\n              \u003e\n                \u003cTrash2 className=\"w-4 h-4 mr-1\" /\u003e\n                Trash older than {daysOld}d\n              \u003c/Button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv className=\"mt-3 flex items-center gap-2\"\u003e\n          \u003cInput\n            placeholder=\"Search by title...\"\n            value={search}\n            onChange={(e) =\u003e setSearch(e.target.value)}\n            className=\"max-w-sm\"\n          /\u003e\n          \u003cBadge variant=\"outline\"\u003eResults: {scripts.length}\u003c/Badge\u003e\n          {selectedIds.length \u003e 0 \u0026\u0026 (\n            \u003cBadge variant=\"secondary\" className=\"ml-auto\"\u003e\n              Selected: {selectedIds.length}\n            \u003c/Badge\u003e\n          )}\n        \u003c/div\u003e\n      \u003c/CardHeader\u003e\n      \u003cCardContent className=\"pt-2\"\u003e\n        \u003cdiv className=\"flex items-center gap-2 mb-3\"\u003e\n          \u003cButton\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={toggleSelectAll}\n            disabled={scripts.length === 0}\n          \u003e\n            {allSelected ? \"Deselect All\" : \"Select All\"}\n          \u003c/Button\u003e\n\n          \u003cButton\n            size=\"sm\"\n            variant=\"default\"\n            disabled={selectedIds.length === 0 || trashSelectedMutation.isPending}\n            onClick={() =\u003e trashSelectedMutation.mutate(selectedIds)}\n            className=\"gap-1\"\n          \u003e\n            \u003cTrash2 className=\"w-4 h-4\" /\u003e\n            Trash Selected\n          \u003c/Button\u003e\n\n          \u003cButton\n            size=\"sm\"\n            variant=\"secondary\"\n            disabled={selectedIds.length === 0 || restoreSelectedMutation.isPending}\n            onClick={() =\u003e restoreSelectedMutation.mutate(selectedIds)}\n            className=\"gap-1\"\n          \u003e\n            \u003cRotateCcw className=\"w-4 h-4\" /\u003e\n            Restore Selected\n          \u003c/Button\u003e\n\n          \u003cAlertDialog\u003e\n            \u003cAlertDialogTrigger asChild\u003e\n              \u003cButton\n                size=\"sm\"\n                variant=\"destructive\"\n                disabled={selectedIds.length === 0 || deleteForeverMutation.isPending}\n                className=\"gap-1\"\n              \u003e\n                \u003cBan className=\"w-4 h-4\" /\u003e\n                Delete Forever\n              \u003c/Button\u003e\n            \u003c/AlertDialogTrigger\u003e\n            \u003cAlertDialogContent\u003e\n              \u003cAlertDialogHeader\u003e\n                \u003cAlertDialogTitle\u003eDelete forever?\u003c/AlertDialogTitle\u003e\n                \u003cAlertDialogDescription\u003e\n                  This will permanently delete {selectedIds.length} script(s). This action cannot be undone.\n                \u003c/AlertDialogDescription\u003e\n              \u003c/AlertDialogHeader\u003e\n              \u003cAlertDialogFooter\u003e\n                \u003cAlertDialogCancel\u003eCancel\u003c/AlertDialogCancel\u003e\n                \u003cAlertDialogAction onClick={() =\u003e deleteForeverMutation.mutate(selectedIds)}\u003e\n                  Delete Forever\n                \u003c/AlertDialogAction\u003e\n              \u003c/AlertDialogFooter\u003e\n            \u003c/AlertDialogContent\u003e\n          \u003c/AlertDialog\u003e\n        \u003c/div\u003e\n\n        \u003cdiv className=\"border rounded-md\"\u003e\n          \u003cTable\u003e\n            \u003cTableHeader\u003e\n              \u003cTableRow\u003e\n                \u003cTableHead className=\"w-10\"\u003e\n                  \u003cinput\n                    type=\"checkbox\"\n                    aria-label=\"Select all\"\n                    checked={allSelected}\n                    onChange={toggleSelectAll}\n                  /\u003e\n                \u003c/TableHead\u003e\n                \u003cTableHead\u003eTitle\u003c/TableHead\u003e\n                \u003cTableHead\u003eStatus\u003c/TableHead\u003e\n                \u003cTableHead\u003eUpdated\u003c/TableHead\u003e\n                \u003cTableHead\u003eAge\u003c/TableHead\u003e\n                \u003cTableHead\u003eLength\u003c/TableHead\u003e\n              \u003c/TableRow\u003e\n            \u003c/TableHeader\u003e\n            \u003cTableBody\u003e\n              {isLoading ? (\n                \u003c\u003e\n                  {[...Array(5)].map((_, i) =\u003e (\n                    \u003cTableRow key={i} className=\"animate-pulse\"\u003e\n                      \u003cTableCell colSpan={6}\u003e\n                        \u003cdiv className=\"h-4 bg-muted rounded w-1/2\" /\u003e\n                      \u003c/TableCell\u003e\n                    \u003c/TableRow\u003e\n                  ))}\n                \u003c/\u003e\n              ) : scripts.length === 0 ? (\n                \u003cTableRow\u003e\n                  \u003cTableCell colSpan={6} className=\"text-center text-muted-foreground py-6\"\u003e\n                    No scripts found for the current filters.\n                  \u003c/TableCell\u003e\n                \u003c/TableRow\u003e\n              ) : (\n                scripts.map((s) =\u003e {\n                  const isTrashed = Boolean(s.deleted_at);\n                  const ageStr = formatDistanceToNow(new Date(s.updated_at), { addSuffix: true });\n                  return (\n                    \u003cTableRow key={s.id} className={isTrashed ? \"opacity-70\" : \"\"}\u003e\n                      \u003cTableCell\u003e\n                        \u003cinput\n                          type=\"checkbox\"\n                          checked={!!selected[s.id]}\n                          onChange={(e) =\u003e\n                            setSelected((prev) =\u003e ({ ...prev, [s.id]: e.target.checked }))\n                          }\n                          aria-label={`Select ${s.title}`}\n                        /\u003e\n                      \u003c/TableCell\u003e\n                      \u003cTableCell className=\"max-w-[340px]\"\u003e\n                        \u003cdiv className=\"font-medium truncate\"\u003e{s.title || \"Untitled\"}\u003c/div\u003e\n                        \u003cdiv className=\"text-xs text-muted-foreground truncate\"\u003e\n                          {s.genre ? `Genre: ${s.genre}` : \"\"}\n                        \u003c/div\u003e\n                      \u003c/TableCell\u003e\n                      \u003cTableCell\u003e\n                        {isTrashed ? (\n                          \u003cBadge variant=\"destructive\"\u003eTrashed\u003c/Badge\u003e\n                        ) : (\n                          \u003cBadge variant=\"secondary\"\u003eActive\u003c/Badge\u003e\n                        )}\n                      \u003c/TableCell\u003e\n                      \u003cTableCell className=\"whitespace-nowrap\"\u003e\n                        {new Date(s.updated_at).toLocaleString()}\n                      \u003c/TableCell\u003e\n                      \u003cTableCell className=\"whitespace-nowrap\"\u003e{ageStr}\u003c/TableCell\u003e\n                      \u003cTableCell\u003e{s.content?.length ?? 0}\u003c/TableCell\u003e\n                    \u003c/TableRow\u003e\n                  );\n                })\n              )}\n            \u003c/TableBody\u003e\n          \u003c/Table\u003e\n        \u003c/div\u003e\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n};\n\nexport default AdminScriptsManager;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/admin/AdminTestimonialsManager.tsx",
//     "contents": "import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Plus, Edit, Trash2, Star } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Testimonial {\n  id: string;\n  name: string;\n  title?: string;\n  company?: string;\n  content: string;\n  avatar_url?: string;\n  rating: number;\n  is_active: boolean;\n  display_order: number;\n  created_at: string;\n  updated_at: string;\n}\n\nconst AdminTestimonialsManager: React.FC = () =\u003e {\n  const [testimonials, setTestimonials] = useState\u003cTestimonial[]\u003e([]);\n  const [loading, setLoading] = useState(true);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingTestimonial, setEditingTestimonial] = useState\u003cTestimonial | null\u003e(null);\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    name: '',\n    title: '',\n    company: '',\n    content: '',\n    avatar_url: '',\n    rating: 5,\n    is_active: true,\n    display_order: 0\n  });\n\n  useEffect(() =\u003e {\n    fetchTestimonials();\n  }, []);\n\n  const fetchTestimonials = async () =\u003e {\n    try {\n      const { data, error } = await supabase\n        .from('testimonials')\n        .select('*')\n        .order('display_order', { ascending: true });\n\n      if (error) throw error;\n      setTestimonials(data || []);\n    } catch (error) {\n      console.error('Error fetching testimonials:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch testimonials\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetForm = () =\u003e {\n    setFormData({\n      name: '',\n      title: '',\n      company: '',\n      content: '',\n      avatar_url: '',\n      rating: 5,\n      is_active: true,\n      display_order: 0\n    });\n    setEditingTestimonial(null);\n  };\n\n  const handleEdit = (testimonial: Testimonial) =\u003e {\n    setEditingTestimonial(testimonial);\n    setFormData({\n      name: testimonial.name,\n      title: testimonial.title || '',\n      company: testimonial.company || '',\n      content: testimonial.content,\n      avatar_url: testimonial.avatar_url || '',\n      rating: testimonial.rating,\n      is_active: testimonial.is_active,\n      display_order: testimonial.display_order\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) =\u003e {\n    e.preventDefault();\n    \n    try {\n      if (editingTestimonial) {\n        const { error } = await supabase\n          .from('testimonials')\n          .update(formData)\n          .eq('id', editingTestimonial.id);\n\n        if (error) throw error;\n        \n        toast({\n          title: \"Success\",\n          description: \"Testimonial updated successfully\"\n        });\n      } else {\n        const { error } = await supabase\n          .from('testimonials')\n          .insert([formData]);\n\n        if (error) throw error;\n        \n        toast({\n          title: \"Success\",\n          description: \"Testimonial created successfully\"\n        });\n      }\n\n      fetchTestimonials();\n      setIsDialogOpen(false);\n      resetForm();\n    } catch (error) {\n      console.error('Error saving testimonial:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save testimonial\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleDelete = async (id: string) =\u003e {\n    if (!confirm('Are you sure you want to delete this testimonial?')) return;\n\n    try {\n      const { error } = await supabase\n        .from('testimonials')\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n      \n      toast({\n        title: \"Success\",\n        description: \"Testimonial deleted successfully\"\n      });\n      \n      fetchTestimonials();\n    } catch (error) {\n      console.error('Error deleting testimonial:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete testimonial\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const toggleActive = async (id: string, currentStatus: boolean) =\u003e {\n    try {\n      const { error } = await supabase\n        .from('testimonials')\n        .update({ is_active: !currentStatus })\n        .eq('id', id);\n\n      if (error) throw error;\n      \n      fetchTestimonials();\n      toast({\n        title: \"Success\",\n        description: `Testimonial ${!currentStatus ? 'activated' : 'deactivated'}`\n      });\n    } catch (error) {\n      console.error('Error toggling testimonial:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update testimonial\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  if (loading) {\n    return \u003cdiv className=\"text-center py-8\"\u003eLoading testimonials...\u003c/div\u003e;\n  }\n\n  return (\n    \u003cdiv className=\"space-y-6\"\u003e\n      \u003cdiv className=\"flex items-center justify-between\"\u003e\n        \u003cdiv\u003e\n          \u003ch2 className=\"text-2xl font-bold text-foreground\"\u003eManage Testimonials\u003c/h2\u003e\n          \u003cp className=\"text-muted-foreground\"\u003eManage the testimonials displayed in the marquee section\u003c/p\u003e\n        \u003c/div\u003e\n        \n        \u003cDialog open={isDialogOpen} onOpenChange={setIsDialogOpen}\u003e\n          \u003cDialogTrigger asChild\u003e\n            \u003cButton onClick={resetForm}\u003e\n              \u003cPlus className=\"w-4 h-4 mr-2\" /\u003e\n              Add Testimonial\n            \u003c/Button\u003e\n          \u003c/DialogTrigger\u003e\n          \n          \u003cDialogContent className=\"max-w-2xl\"\u003e\n            \u003cDialogHeader\u003e\n              \u003cDialogTitle\u003e\n                {editingTestimonial ? 'Edit Testimonial' : 'Add New Testimonial'}\n              \u003c/DialogTitle\u003e\n              \u003cDialogDescription\u003e\n                Create or edit a testimonial for the homepage marquee\n              \u003c/DialogDescription\u003e\n            \u003c/DialogHeader\u003e\n            \n            \u003cform onSubmit={handleSubmit} className=\"space-y-4\"\u003e\n              \u003cdiv className=\"grid grid-cols-2 gap-4\"\u003e\n                \u003cdiv className=\"space-y-2\"\u003e\n                  \u003cLabel htmlFor=\"name\"\u003eName *\u003c/Label\u003e\n                  \u003cInput\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) =\u003e setFormData({ ...formData, name: e.target.value })}\n                    required\n                  /\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv className=\"space-y-2\"\u003e\n                  \u003cLabel htmlFor=\"title\"\u003eTitle\u003c/Label\u003e\n                  \u003cInput\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) =\u003e setFormData({ ...formData, title: e.target.value })}\n                  /\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv className=\"grid grid-cols-2 gap-4\"\u003e\n                \u003cdiv className=\"space-y-2\"\u003e\n                  \u003cLabel htmlFor=\"company\"\u003eCompany\u003c/Label\u003e\n                  \u003cInput\n                    id=\"company\"\n                    value={formData.company}\n                    onChange={(e) =\u003e setFormData({ ...formData, company: e.target.value })}\n                  /\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv className=\"space-y-2\"\u003e\n                  \u003cLabel htmlFor=\"avatar_url\"\u003eAvatar URL\u003c/Label\u003e\n                  \u003cInput\n                    id=\"avatar_url\"\n                    value={formData.avatar_url}\n                    onChange={(e) =\u003e setFormData({ ...formData, avatar_url: e.target.value })}\n                    placeholder=\"https://...\"\n                  /\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv className=\"space-y-2\"\u003e\n                \u003cLabel htmlFor=\"content\"\u003eTestimonial Content *\u003c/Label\u003e\n                \u003cTextarea\n                  id=\"content\"\n                  value={formData.content}\n                  onChange={(e) =\u003e setFormData({ ...formData, content: e.target.value })}\n                  rows={4}\n                  required\n                /\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv className=\"grid grid-cols-3 gap-4\"\u003e\n                \u003cdiv className=\"space-y-2\"\u003e\n                  \u003cLabel htmlFor=\"rating\"\u003eRating\u003c/Label\u003e\n                  \u003cSelect\n                    value={formData.rating.toString()}\n                    onValueChange={(value) =\u003e setFormData({ ...formData, rating: parseInt(value) })}\n                  \u003e\n                    \u003cSelectTrigger\u003e\n                      \u003cSelectValue /\u003e\n                    \u003c/SelectTrigger\u003e\n                    \u003cSelectContent\u003e\n                      {[1, 2, 3, 4, 5].map((rating) =\u003e (\n                        \u003cSelectItem key={rating} value={rating.toString()}\u003e\n                          {rating} Star{rating !== 1 ? 's' : ''}\n                        \u003c/SelectItem\u003e\n                      ))}\n                    \u003c/SelectContent\u003e\n                  \u003c/Select\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv className=\"space-y-2\"\u003e\n                  \u003cLabel htmlFor=\"display_order\"\u003eDisplay Order\u003c/Label\u003e\n                  \u003cInput\n                    id=\"display_order\"\n                    type=\"number\"\n                    value={formData.display_order}\n                    onChange={(e) =\u003e setFormData({ ...formData, display_order: parseInt(e.target.value) || 0 })}\n                  /\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv className=\"space-y-2\"\u003e\n                  \u003cLabel htmlFor=\"is_active\"\u003eActive\u003c/Label\u003e\n                  \u003cdiv className=\"flex items-center mt-2\"\u003e\n                    \u003cSwitch\n                      id=\"is_active\"\n                      checked={formData.is_active}\n                      onCheckedChange={(checked) =\u003e setFormData({ ...formData, is_active: checked })}\n                    /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \n              \u003cDialogFooter\u003e\n                \u003cButton type=\"button\" variant=\"outline\" onClick={() =\u003e setIsDialogOpen(false)}\u003e\n                  Cancel\n                \u003c/Button\u003e\n                \u003cButton type=\"submit\"\u003e\n                  {editingTestimonial ? 'Update' : 'Create'} Testimonial\n                \u003c/Button\u003e\n              \u003c/DialogFooter\u003e\n            \u003c/form\u003e\n          \u003c/DialogContent\u003e\n        \u003c/Dialog\u003e\n      \u003c/div\u003e\n\n      \u003cdiv className=\"grid gap-4\"\u003e\n        {testimonials.map((testimonial) =\u003e (\n          \u003cCard key={testimonial.id}\u003e\n            \u003cCardHeader\u003e\n              \u003cdiv className=\"flex items-start justify-between\"\u003e\n                \u003cdiv\u003e\n                  \u003cCardTitle className=\"text-lg\"\u003e{testimonial.name}\u003c/CardTitle\u003e\n                  \u003cCardDescription\u003e\n                    {testimonial.title}\n                    {testimonial.company \u0026\u0026 ` at ${testimonial.company}`}\n                  \u003c/CardDescription\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv className=\"flex items-center gap-2\"\u003e\n                  \u003cdiv className=\"flex items-center\"\u003e\n                    {[...Array(5)].map((_, i) =\u003e (\n                      \u003cStar\n                        key={i}\n                        className={`w-4 h-4 ${\n                          i \u003c testimonial.rating \n                            ? 'text-yellow-400 fill-current' \n                            : 'text-muted-foreground'\n                        }`}\n                      /\u003e\n                    ))}\n                  \u003c/div\u003e\n                  \n                  \u003cSwitch\n                    checked={testimonial.is_active}\n                    onCheckedChange={() =\u003e toggleActive(testimonial.id, testimonial.is_active)}\n                  /\u003e\n                  \n                  \u003cButton\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() =\u003e handleEdit(testimonial)}\n                  \u003e\n                    \u003cEdit className=\"w-4 h-4\" /\u003e\n                  \u003c/Button\u003e\n                  \n                  \u003cButton\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() =\u003e handleDelete(testimonial.id)}\n                  \u003e\n                    \u003cTrash2 className=\"w-4 h-4\" /\u003e\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/CardHeader\u003e\n            \n            \u003cCardContent\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e{testimonial.content}\u003c/p\u003e\n              \u003cdiv className=\"mt-2 text-xs text-muted-foreground\"\u003e\n                Order: {testimonial.display_order} | \n                Created: {new Date(testimonial.created_at).toLocaleDateString()}\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        ))}\n        \n        {testimonials.length === 0 \u0026\u0026 (\n          \u003cCard\u003e\n            \u003cCardContent className=\"text-center py-8\"\u003e\n              \u003cp className=\"text-muted-foreground\"\u003eNo testimonials found. Create your first one!\u003c/p\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        )}\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default AdminTestimonialsManager;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/analysis/ScriptStepsNav.tsx",
//     "contents": "import React from 'react';\nimport { cn } from '@/lib/utils';\nimport { \n  FileText, \n  Settings, \n  Eye, \n  MessageSquare, \n  Video,\n  CheckCircle\n} from 'lucide-react';\n\ntype AnalysisStep = 'upload' | 'analyze' | 'results' | 'coaching' | 'video-upload' | 'video-evaluation';\n\ninterface ScriptStepsNavProps {\n  currentStep: AnalysisStep;\n  onStepClick?: (step: AnalysisStep) =\u003e void;\n  className?: string;\n}\n\nconst steps = [\n  {\n    id: 'upload' as AnalysisStep,\n    label: 'Upload Script',\n    icon: FileText,\n    description: 'Add your script'\n  },\n  {\n    id: 'analyze' as AnalysisStep,\n    label: 'Configure Analysis',\n    icon: Settings,\n    description: 'Set analysis options'\n  },\n  {\n    id: 'results' as AnalysisStep,\n    label: 'View Results',\n    icon: Eye,\n    description: 'See your analysis'\n  },\n  {\n    id: 'coaching' as AnalysisStep,\n    label: 'Coaching Session',\n    icon: MessageSquare,\n    description: 'Get personalized coaching'\n  },\n  {\n    id: 'video-upload' as AnalysisStep,\n    label: 'Upload Practice Video',\n    icon: Video,\n    description: 'Submit your audition'\n  },\n  {\n    id: 'video-evaluation' as AnalysisStep,\n    label: 'Video Analysis',\n    icon: CheckCircle,\n    description: 'Get feedback'\n  }\n];\n\nconst ScriptStepsNav: React.FC\u003cScriptStepsNavProps\u003e = ({\n  currentStep,\n  onStepClick,\n  className\n}) =\u003e {\n  // Get visible steps based on current step\n  const getVisibleSteps = () =\u003e {\n    const currentIndex = steps.findIndex(s =\u003e s.id === currentStep);\n    \n    if (currentIndex \u003c= 2) {\n      // Show first 3 steps\n      return steps.slice(0, 3);\n    } else if (currentIndex === 3) {\n      // Show results, coaching, video-upload\n      return steps.slice(2, 5);\n    } else {\n      // Show coaching, video-upload, video-evaluation\n      return steps.slice(3, 6);\n    }\n  };\n\n  const getStepStatus = (stepId: AnalysisStep) =\u003e {\n    const stepOrder = steps.map(s =\u003e s.id);\n    const currentIndex = stepOrder.indexOf(currentStep);\n    const stepIndex = stepOrder.indexOf(stepId);\n    \n    if (stepIndex \u003c currentIndex) return 'completed';\n    if (stepIndex === currentIndex) return 'current';\n    return 'upcoming';\n  };\n\n  const visibleSteps = getVisibleSteps();\n\n  return (\n    \u003cnav className={cn(\n      \"w-full bg-card border border-border rounded-lg p-6\",\n      className\n    )}\u003e\n      \u003cdiv className=\"mb-6 text-center\"\u003e\n        \u003ch2 className=\"text-lg font-semibold text-foreground mb-1\"\u003e\n          Scene Analysis Workflow\n        \u003c/h2\u003e\n        \u003cp className=\"text-sm text-muted-foreground\"\u003e\n          Follow these steps to complete your analysis\n        \u003c/p\u003e\n      \u003c/div\u003e\n\n      \u003cdiv className=\"flex items-center justify-between relative\"\u003e\n        {visibleSteps.map((step, index) =\u003e {\n          const status = getStepStatus(step.id);\n          const Icon = step.icon;\n          const isClickable = onStepClick \u0026\u0026 (status === 'completed' || status === 'current');\n\n          return (\n            \u003cReact.Fragment key={step.id}\u003e\n              {/* Step */}\n              \u003cdiv className=\"flex flex-col items-center flex-1 relative\"\u003e\n                \u003cbutton\n                  onClick={() =\u003e isClickable \u0026\u0026 onStepClick?.(step.id)}\n                  disabled={!isClickable}\n                  className={cn(\n                    \"flex flex-col items-center gap-3 p-4 rounded-lg transition-all min-w-0 w-full max-w-[200px]\",\n                    \"focus:outline-none focus:ring-2 focus:ring-primary/50\",\n                    status === 'current' \u0026\u0026 [\n                      \"bg-primary/10 border border-primary/20\",\n                      \"shadow-lg shadow-primary/10\"\n                    ],\n                    status === 'completed' \u0026\u0026 [\n                      \"bg-accent/30 hover:bg-accent/50\",\n                      isClickable \u0026\u0026 \"cursor-pointer\"\n                    ],\n                    status === 'upcoming' \u0026\u0026 [\n                      \"opacity-60\",\n                      \"cursor-not-allowed\"\n                    ]\n                  )}\n                \u003e\n                  {/* Step icon */}\n                  \u003cdiv className={cn(\n                    \"flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center text-sm font-semibold\",\n                    status === 'completed' \u0026\u0026 \"bg-primary text-primary-foreground\",\n                    status === 'current' \u0026\u0026 \"bg-primary text-primary-foreground ring-2 ring-primary/30\",\n                    status === 'upcoming' \u0026\u0026 \"bg-muted text-muted-foreground\"\n                  )}\u003e\n                    {status === 'completed' ? (\n                      \u003cCheckCircle className=\"w-6 h-6\" /\u003e\n                    ) : (\n                      \u003cIcon className=\"w-6 h-6\" /\u003e\n                    )}\n                  \u003c/div\u003e\n\n                  {/* Step content */}\n                  \u003cdiv className=\"text-center min-w-0 w-full\"\u003e\n                    \u003ch3 className={cn(\n                      \"font-medium text-sm mb-1 truncate\",\n                      status === 'current' \u0026\u0026 \"text-foreground\",\n                      status === 'completed' \u0026\u0026 \"text-foreground\",\n                      status === 'upcoming' \u0026\u0026 \"text-muted-foreground\"\n                    )}\u003e\n                      {step.label}\n                    \u003c/h3\u003e\n                    \u003cp className={cn(\n                      \"text-xs leading-relaxed line-clamp-2\",\n                      status === 'current' \u0026\u0026 \"text-muted-foreground\",\n                      status === 'completed' \u0026\u0026 \"text-muted-foreground\",\n                      status === 'upcoming' \u0026\u0026 \"text-muted-foreground/70\"\n                    )}\u003e\n                      {step.description}\n                    \u003c/p\u003e\n                  \u003c/div\u003e\n                \u003c/button\u003e\n              \u003c/div\u003e\n\n              {/* Connector line */}\n              {index \u003c visibleSteps.length - 1 \u0026\u0026 (\n                \u003cdiv \n                  className={cn(\n                    \"h-0.5 w-8 mx-2\",\n                    status === 'completed' \n                      ? \"bg-primary\" \n                      : \"bg-border\"\n                  )}\n                /\u003e\n              )}\n            \u003c/React.Fragment\u003e\n          );\n        })}\n      \u003c/div\u003e\n    \u003c/nav\u003e\n  );\n};\n\nexport default ScriptStepsNav;",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/blog/BlogPostCard.tsx",
//     "contents": "\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Link } from 'react-router-dom';\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  slug: string;\n  excerpt: string | null;\n  content: string;\n  cover_image_url: string | null;\n  youtube_url: string | null;\n  status: 'draft' | 'published';\n  author_id: string;\n  created_at: string;\n  updated_at: string;\n  profiles: {\n    full_name: string | null;\n  } | null;\n}\n\ninterface BlogPostCardProps {\n  post: BlogPost;\n}\n\nexport const BlogPostCard = ({ post }: BlogPostCardProps) =\u003e {\n  const getYouTubeEmbedId = (url: string) =\u003e {\n    // Enhanced regex to handle various YouTube URL formats\n    const patterns = [\n      /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/|youtube\\.com\\/v\\/)([a-zA-Z0-9_-]{11})/,\n      /youtube\\.com\\/watch\\?.*v=([a-zA-Z0-9_-]{11})/,\n    ];\n    \n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match \u0026\u0026 match[1]) {\n        return match[1];\n      }\n    }\n    return null;\n  };\n\n  const videoId = post.youtube_url ? getYouTubeEmbedId(post.youtube_url) : null;\n\n  return (\n    \u003cLink to={`/podcast/${post.slug}`} className=\"block\"\u003e\n      \u003cCard className=\"overflow-hidden bg-card border-border hover:border-primary/50 transition-colors cursor-pointer\"\u003e\n        \u003cCardContent className=\"p-0\"\u003e\n          \u003carticle className=\"grid md:grid-cols-2 gap-0\"\u003e\n          {/* Media Section */}\n          \u003cdiv className=\"relative\"\u003e\n            {videoId ? (\n              \u003cdiv className=\"aspect-video\"\u003e\n                \u003ciframe\n                  src={`https://www.youtube.com/embed/${videoId}`}\n                  title={post.title}\n                  className=\"w-full h-full rounded-l-lg\"\n                  allowFullScreen\n                /\u003e\n              \u003c/div\u003e\n            ) : post.cover_image_url ? (\n              \u003cdiv className=\"aspect-video\"\u003e\n                \u003cimg\n                  src={post.cover_image_url}\n                  alt={post.title}\n                  className=\"w-full h-full object-contain bg-black/5\"\n                /\u003e\n              \u003c/div\u003e\n            ) : (\n              \u003cdiv className=\"aspect-video bg-muted flex items-center justify-center\"\u003e\n                \u003cp className=\"text-muted-foreground\"\u003eNo media\u003c/p\u003e\n              \u003c/div\u003e\n            )}\n          \u003c/div\u003e\n\n          {/* Content Section */}\n          \u003cdiv className=\"p-8 flex flex-col justify-between\"\u003e\n            \u003cdiv className=\"space-y-4\"\u003e\n              \u003cdiv className=\"flex items-center gap-3\"\u003e\n                \u003cBadge variant=\"secondary\" className=\"bg-primary/10 text-primary border-primary/20\"\u003e\n                  Podcast\n                \u003c/Badge\u003e\n                \u003cspan className=\"text-sm text-muted-foreground\"\u003e\n                  {formatDistanceToNow(new Date(post.created_at), { addSuffix: true })}\n                \u003c/span\u003e\n              \u003c/div\u003e\n\n              \u003ch2 className=\"text-2xl font-bold leading-tight text-foreground\"\u003e\n                {post.title}\n              \u003c/h2\u003e\n\n              {post.excerpt \u0026\u0026 (\n                \u003cp className=\"text-lg text-muted-foreground leading-relaxed\"\u003e\n                  {post.excerpt}\n                \u003c/p\u003e\n              )}\n\n              \u003cdiv className=\"text-base text-muted-foreground leading-relaxed\"\u003e\n                \u003cp\u003e\n                  {post.content.replace(/\u003c[^\u003e]*\u003e/g, '').length \u003e 150 \n                    ? post.content.replace(/\u003c[^\u003e]*\u003e/g, '').substring(0, 150) + '...' \n                    : post.content.replace(/\u003c[^\u003e]*\u003e/g, '')}\n                \u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv className=\"pt-6 border-t border-border\"\u003e\n              \u003cp className=\"text-sm text-muted-foreground\"\u003e\n                By {post.profiles?.full_name || 'Admin'}\n              \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/article\u003e\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n    \u003c/Link\u003e\n  );\n};\n",
//     "binary": false,
//     "sizeExceeded": false
// },
// {
//     "name": "src/components/blog/CreateBlogPostDialog.tsx",
//     "contents": "\nimport React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from '@/hooks/use-toast';\nimport { Upload, X } from 'lucide-react';\n\ninterface CreateBlogPostDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) =\u003e void;\n  onSuccess: () =\u003e void;\n}\n\nconst CreateBlogPostDialog: React.FC\u003cCreateBlogPostDialogProps\u003e = ({ open, onOpenChange, onSuccess }) =\u003e {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [formData, setFormData] = useState({\n    title: '',\n    content: '',\n    excerpt: '',\n    youtube_url: '',\n    cover_image_url: '',\n    status: 'draft' as 'draft' | 'published'\n  });\n\n  const generateSlug = (title: string) =\u003e {\n    return title\n      .toLowerCase()\n      .replace(/[^\\w\\s-]/g, '')\n      .replace(/\\s+/g, '-')\n      .trim();\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent\u003cHTMLInputElement\u003e) =\u003e {\n    const file = event.target.files?.[0];\n    if (!file || !user) return;\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (5MB limit)\n    if (file.size \u003e 5 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select an image under 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n\n    try {\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n      const filePath = `${user.id}/${fileName}`;\n\n      const { error: uploadError } = await supabase.storage\n        .from('blog-images')\n        .upload(filePath, file);\n\n      if (uploadError) {\n        throw uploadError;\n      }\n\n      const { data: { publicUrl } } = supabase.storage\n        .from('blog-images')\n        .getPublicUrl(filePath);\n\n      setFormData(prev =\u003e ({ ...prev, cover_image_url: publicUrl }));\n\n      toast({\n        title: \"Upload successful\",\n        description: \"Cover image uploaded successfully\",\n      });\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload image. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleRemoveImage = () =\u003e {\n    setFormData(prev =\u003e ({ ...prev, cover_image_url: '' }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) =\u003e {\n    e.preventDefault();\n    if (!user) return;\n\n    if (!formData.title.trim() || !formData.content.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Title and content are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const slug = generateSlug(formData.title);\n\n      const { error } = await supabase\n        .from('blog_posts')\n        .insert({\n          title: formData.title.trim(),\n          content: formData.content.trim(),\n          excerpt: formData.excerpt.trim(),\n          slug,\n          author_id: user.id,\n          youtube_url: formData.youtube_url.trim() || null,\n          cover_image_url: formData.cover_image_url.trim() || null,\n          status: formData.status,\n        });\n\n      if (error) {\n        throw error;\n      }\n\n      toast({\n        title: \"Success\",\n        description: \"Blog post created successfully\",\n      });\n\n      setFormData({\n        title: '',\n        content: '',\n        excerpt: '',\n        youtube_url: '',\n        cover_image_url: '',\n        status: 'draft'\n      });\n      onSuccess();\n    } catch (error) {\n      console.error('Error creating blog post:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create blog post\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    \u003cDialog open={open} onOpenChange={onOpenChange}\u003e\n      \u003cDialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\"\u003e\n        \u003cDialogHeader\u003e\n          \u003cDialogTitle\u003eCreate New Blog Post\u003c/DialogTitle\u003e\n        \u003c/DialogHeader\u003e\n        \u003cform onSubmit={handleSubmit} className=\"space-y-4\"\u003e\n          \u003cdiv\u003e\n            \u003cLabel htmlFor=\"title\"\u003eTitle *\u003c/Label\u003e\n            \u003cInput\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, title: e.target.value }))}\n              placeholder=\"Enter post title\"\n              required\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv\u003e\n            \u003cLabel htmlFor=\"excerpt\"\u003eExcerpt\u003c/Label\u003e\n            \u003cTextarea\n              id=\"excerpt\"\n              value={formData.excerpt}\n              onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, excerpt: e.target.value }))}\n              placeholder=\"Brief description of the post\"\n              rows={2}\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv\u003e\n            \u003cLabel htmlFor=\"content\"\u003eContent *\u003c/Label\u003e\n            \u003cTextarea\n              id=\"content\"\n              value={formData.content}\n              onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, content: e.target.value }))}\n              placeholder=\"Write your blog post content here\"\n              rows={8}\n              required\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv\u003e\n            \u003cLabel htmlFor=\"youtube_url\"\u003eYouTube URL\u003c/Label\u003e\n            \u003cInput\n              id=\"youtube_url\"\n              type=\"url\"\n              value={formData.youtube_url}\n              onChange={(e) =\u003e {\n                const url = e.target.value;\n                if (url \u0026\u0026 !url.includes('youtube.com') \u0026\u0026 !url.includes('youtu.be')) {\n                  toast({\n                    title: \"Invalid URL\",\n                    description: \"Please enter a valid YouTube URL\",\n                    variant: \"destructive\",\n                  });\n                  return;\n                }\n                setFormData(prev =\u003e ({ ...prev, youtube_url: url }));\n              }}\n              placeholder=\"https://www.youtube.com/watch?v=...\"\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv\u003e\n            \u003cLabel htmlFor=\"cover_image\"\u003eCover Image\u003c/Label\u003e\n            \u003cdiv className=\"space-y-4\"\u003e\n              {formData.cover_image_url ? (\n                \u003cdiv className=\"relative\"\u003e\n                  \u003cimg \n                    src={formData.cover_image_url} \n                    alt=\"Cover preview\" \n                    className=\"w-full h-48 object-cover rounded-md border\"\n                  /\u003e\n                  \u003cButton\n                    type=\"button\"\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    className=\"absolute top-2 right-2\"\n                    onClick={handleRemoveImage}\n                  \u003e\n                    \u003cX className=\"h-4 w-4\" /\u003e\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              ) : (\n                \u003cdiv className=\"border-2 border-dashed border-muted-foreground/25 rounded-md p-6 text-center\"\u003e\n                  \u003cUpload className=\"mx-auto h-8 w-8 text-muted-foreground mb-2\" /\u003e\n                  \u003cp className=\"text-sm text-muted-foreground mb-2\"\u003eUpload a cover image\u003c/p\u003e\n                  \u003cButton\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"relative\"\n                    disabled={uploading}\n                  \u003e\n                    \u003cinput\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleFileUpload}\n                      className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                    /\u003e\n                    {uploading ? 'Uploading...' : 'Choose Image'}\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              )}\n              \u003cdiv className=\"text-center\"\u003e\n                \u003cp className=\"text-xs text-muted-foreground\"\u003eOr enter URL manually:\u003c/p\u003e\n                \u003cInput\n                  type=\"url\"\n                  value={formData.cover_image_url}\n                  onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, cover_image_url: e.target.value }))}\n                  placeholder=\"https://example.com/image.jpg\"\n                  className=\"mt-2\"\n                /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          \u003cdiv\u003e\n            \u003cLabel htmlFor=\"status\"\u003eStatus\u003c/Label\u003e\n            \u003cSelect value={formData.status} onValueChange={(value: 'draft' | 'published') =\u003e setFormData(prev =\u003e ({ ...prev, status: value }))}\u003e\n              \u003cSelectTrigger\u003e\n                \u003cSelectValue /\u003e\n              \u003c/SelectTrigger\u003e\n              \u003cSelectContent\u003e\n                \u003cSelectItem value=\"draft\"\u003eDraft\u003c/SelectItem\u003e\n                \u003cSelectItem value=\"published\"\u003ePublished\u003c/SelectItem\u003e\n              \u003c/SelectContent\u003e\n            \u003c/Select\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"flex justify-end space-x-2 pt-4\"\u003e\n            \u003cButton type=\"button\" variant=\"outline\" onClick={() =\u003e onOpenChange(false)}\u003e\n              Cancel\n            \u003c/Button\u003e\n            \u003cButton type=\"submit\" disabled={loading}\u003e\n              {loading ? 'Creating...' : 'Create Post'}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n      \u003c/DialogContent\u003e\n    \u003c/Dialog\u003e\n  );\n};\n\nexport default CreateBlogPostDialog;\n",
//     "binary": false,
//     "sizeExceeded": false
// },
//   {
//   "name": "src/components/coaches/CoachCard.tsx",
//   "contents": "\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Coach {\n  id: string;\n  name: string;\n  slug: string;\n  bio: string | null;\n  highlights: string[];\n  photo_url: string | null;\n  email: string | null;\n  active: boolean;\n}\n\ninterface CoachCardProps {\n  coach: Coach;\n}\n\nconst CoachCard = ({ coach }: CoachCardProps) =\u003e {\n  return (\n    \u003cCard className=\"bg-gray-900 border-gray-800 hover:border-purple-400 transition-colors\"\u003e\n      \u003cCardContent className=\"p-6\"\u003e\n        \u003cdiv className=\"flex flex-col items-center text-center\"\u003e\n            \u003cdiv className=\"relative mb-4\"\u003e\n            {coach.photo_url ? (\n              \u003cimg\n                src={coach.photo_url}\n                alt={coach.name}\n                className=\"w-24 h-24 rounded-lg object-cover border-2 border-purple-400\"\n                onError={(e) =\u003e {\n                  console.warn(`Failed to load coach photo: ${coach.photo_url}`);\n                  e.currentTarget.style.display = 'none';\n                  e.currentTarget.nextElementSibling?.classList.remove('hidden');\n                }}\n              /\u003e\n            ) : null}\n            \u003cdiv className={`w-24 h-24 rounded-lg bg-gray-800 border-2 border-purple-400 flex items-center justify-center text-purple-400 font-bold text-lg ${coach.photo_url ? 'hidden' : ''}`}\u003e\n              {coach.name.split(' ').map(n =\u003e n[0]).join('')}\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \n          \u003ch3 className=\"text-xl font-bold text-white mb-2\"\u003e{coach.name}\u003c/h3\u003e\n          \n          {coach.bio \u0026\u0026 (\n            \u003cp className=\"text-gray-300 text-sm mb-4 line-clamp-3\"\u003e\n              {coach.bio}\n            \u003c/p\u003e\n          )}\n\n          {coach.highlights.length \u003e 0 \u0026\u0026 (\n            \u003cdiv className=\"w-full mb-4\"\u003e\n              \u003ch4 className=\"text-sm font-semibold text-purple-400 mb-2\"\u003eHighlights:\u003c/h4\u003e\n              \u003cdiv className=\"space-y-1\"\u003e\n                {coach.highlights.slice(0, 3).map((highlight, index) =\u003e (\n                  \u003cBadge \n                    key={index} \n                    variant=\"secondary\" \n                    className=\"text-xs bg-gray-800 text-gray-300 block text-center\"\n                  \u003e\n                    {highlight.length \u003e 50 ? `${highlight.slice(0, 50)}...` : highlight}\n                  \u003c/Badge\u003e\n                ))}\n                {coach.highlights.length \u003e 3 \u0026\u0026 (\n                  \u003cBadge variant=\"outline\" className=\"text-xs text-purple-400\"\u003e\n                    +{coach.highlights.length - 3} more\n                  \u003c/Badge\u003e\n                )}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          )}\n        \u003c/div\u003e\n      \u003c/CardContent\u003e\n      \n      \u003cCardFooter className=\"p-6 pt-0\"\u003e\n        \u003cLink to={`/coaches/${coach.slug}`} className=\"w-full\"\u003e\n          \u003cButton className=\"w-full bg-purple-600 hover:bg-purple-700\"\u003e\n            Contact {coach.name.split(' ')[0]}\n          \u003c/Button\u003e\n        \u003c/Link\u003e\n      \u003c/CardFooter\u003e\n    \u003c/Card\u003e\n  );\n};\n\nexport default CoachCard;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/coaches/CoachContactForm.tsx",
//   "contents": "\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface Coach {\n  id: string;\n  name: string;\n  slug: string;\n  email: string | null;\n}\n\ninterface CoachContactFormProps {\n  coach: Coach;\n  onSuccess: () =\u003e void;\n  onCancel: () =\u003e void;\n}\n\nconst CoachContactForm = ({ coach, onSuccess, onCancel }: CoachContactFormProps) =\u003e {\n  const [formData, setFormData] = useState({\n    actorName: '',\n    email: '',\n    phone: '',\n    message: ''\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) =\u003e {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      const { error } = await supabase.functions.invoke('send-coach-inquiry', {\n        body: {\n          coachSlug: coach.slug,\n          actorName: formData.actorName,\n          actorEmail: formData.email,\n          actorPhone: formData.phone || null,\n          message: formData.message\n        }\n      });\n\n      if (error) throw error;\n\n      toast({\n        title: \"Message sent!\",\n        description: `Your inquiry has been sent to ${coach.name}. They will get back to you soon.`,\n      });\n\n      onSuccess();\n    } catch (error: any) {\n      console.error('Error sending inquiry:', error);\n      toast({\n        title: \"Error sending message\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    \u003cCard className=\"bg-gray-800 border-gray-700 max-w-2xl mx-auto\"\u003e\n      \u003cCardHeader\u003e\n        \u003cCardTitle className=\"text-2xl text-center text-purple-400\"\u003e\n          Contact {coach.name}\n        \u003c/CardTitle\u003e\n      \u003c/CardHeader\u003e\n      \u003cCardContent\u003e\n        \u003cform onSubmit={handleSubmit} className=\"space-y-4\"\u003e\n          \u003cdiv\u003e\n            \u003cLabel htmlFor=\"actorName\" className=\"text-white\"\u003eYour Name *\u003c/Label\u003e\n            \u003cInput\n              id=\"actorName\"\n              type=\"text\"\n              value={formData.actorName}\n              onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, actorName: e.target.value }))}\n              required\n              className=\"bg-gray-900 border-gray-600 text-white\"\n              placeholder=\"Enter your full name\"\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv\u003e\n            \u003cLabel htmlFor=\"email\" className=\"text-white\"\u003eEmail Address *\u003c/Label\u003e\n            \u003cInput\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, email: e.target.value }))}\n              required\n              className=\"bg-gray-900 border-gray-600 text-white\"\n              placeholder=\"your.email@example.com\"\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv\u003e\n            \u003cLabel htmlFor=\"phone\" className=\"text-white\"\u003ePhone Number (Optional)\u003c/Label\u003e\n            \u003cInput\n              id=\"phone\"\n              type=\"tel\"\n              value={formData.phone}\n              onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, phone: e.target.value }))}\n              className=\"bg-gray-900 border-gray-600 text-white\"\n              placeholder=\"(555) 123-4567\"\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv\u003e\n            \u003cLabel htmlFor=\"message\" className=\"text-white\"\u003eMessage *\u003c/Label\u003e\n            \u003cTextarea\n              id=\"message\"\n              value={formData.message}\n              onChange={(e) =\u003e setFormData(prev =\u003e ({ ...prev, message: e.target.value }))}\n              required\n              rows={5}\n              className=\"bg-gray-900 border-gray-600 text-white\"\n              placeholder=\"Tell the coach about your goals, experience level, and what you're looking to work on...\"\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"flex gap-4 pt-4\"\u003e\n            \u003cButton\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onCancel}\n              className=\"flex-1\"\n              disabled={isSubmitting}\n            \u003e\n              Cancel\n            \u003c/Button\u003e\n            \u003cButton\n              type=\"submit\"\n              className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n              disabled={isSubmitting}\n            \u003e\n              {isSubmitting ? (\n                \u003c\u003e\n                  \u003cLoader2 className=\"h-4 w-4 mr-2 animate-spin\" /\u003e\n                  Sending...\n                \u003c/\u003e\n              ) : (\n                'Send Message'\n              )}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n};\n\nexport default CoachContactForm;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/dashboard/AuditionReportCard.tsx",
//   "contents": "import React, { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface AuditionReportCardProps {\n  defaultEmail?: string;\n}\n\nconst AuditionReportCard: React.FC\u003cAuditionReportCardProps\u003e = ({ defaultEmail }) =\u003e {\n  const { toast } = useToast();\n  const [emails, setEmails] = useState\u003cstring\u003e(defaultEmail ?? \"\");\n  const [startDate, setStartDate] = useState\u003cstring\u003e(\"\");\n  const [endDate, setEndDate] = useState\u003cstring\u003e(\"\");\n  const [sending, setSending] = useState(false);\n\n  const parseEmails = (value: string): string[] =\u003e {\n    return value\n      .split(/[\\s,;]+/)\n      .map((e) =\u003e e.trim())\n      .filter((e) =\u003e !!e)\n      .filter((e) =\u003e /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(e));\n  };\n\n  const handleSend = async () =\u003e {\n    const recipients = parseEmails(emails);\n\n    if (recipients.length === 0) {\n      toast({\n        title: \"Add at least one valid email\",\n        description: \"Enter one or more emails separated by commas.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setSending(true);\n      const { error } = await supabase.functions.invoke(\"send-audition-report\", {\n        body: {\n          to: recipients,\n          startDate: startDate || undefined,\n          endDate: endDate || undefined,\n        },\n      });\n\n      if (error) throw error;\n\n      toast({\n        title: \"Report sent\",\n        description: \"Your audition report has been emailed successfully.\",\n      });\n    } catch (err: any) {\n      console.error(\"Error sending report:\", err);\n      toast({\n        title: \"Failed to send\",\n        description: err?.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSending(false);\n    }\n  };\n\n  return (\n    \u003csection aria-labelledby=\"audition-report-heading\"\u003e\n      \u003cCard className=\"bg-card border-border text-foreground\"\u003e\n        \u003cCardHeader\u003e\n          \u003cCardTitle id=\"audition-report-heading\" className=\"text-foreground\"\u003eSend Your Audition Report\u003c/CardTitle\u003e\n          \u003cCardDescription className=\"text-muted-foreground\"\u003e\n            Email a summary of your auditions to yourself, an agent, or a manager.\n          \u003c/CardDescription\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent\u003e\n          \u003cdiv className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-end\"\u003e\n            \u003cdiv className=\"md:col-span-2\"\u003e\n              \u003cLabel htmlFor=\"emails\" className=\"text-foreground\"\u003eRecipient emails\u003c/Label\u003e\n              \u003cInput\n                id=\"emails\"\n                placeholder=\"you@example.com, agent@agency.com\"\n                value={emails}\n                onChange={(e) =\u003e setEmails(e.target.value)}\n                className=\"bg-background border-input text-foreground placeholder:text-muted-foreground\"\n                aria-describedby=\"emails-help\"\n              /\u003e\n              \u003cp id=\"emails-help\" className=\"text-xs text-muted-foreground mt-1\"\u003e\n                Separate multiple emails with commas\n              \u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"flex gap-4\"\u003e\n              \u003cdiv className=\"flex-1\"\u003e\n                \u003cLabel htmlFor=\"startDate\" className=\"text-foreground\"\u003eStart date\u003c/Label\u003e\n                \u003cInput\n                  id=\"startDate\"\n                  type=\"date\"\n                  value={startDate}\n                  onChange={(e) =\u003e setStartDate(e.target.value)}\n                  className=\"bg-background border-input text-foreground placeholder:text-muted-foreground\"\n                /\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"flex-1\"\u003e\n                \u003cLabel htmlFor=\"endDate\" className=\"text-foreground\"\u003eEnd date\u003c/Label\u003e\n                \u003cInput\n                  id=\"endDate\"\n                  type=\"date\"\n                  value={endDate}\n                  onChange={(e) =\u003e setEndDate(e.target.value)}\n                  className=\"bg-background border-input text-foreground placeholder:text-muted-foreground\"\n                /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"mt-4\"\u003e\n            \u003cButton onClick={handleSend} disabled={sending} className=\"bg-purple-600 hover:bg-purple-700\"\u003e\n              {sending ? \"Sending...\" : \"Send Audition Report\"}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n    \u003c/section\u003e\n  );\n};\n\nexport default AuditionReportCard;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/dashboard/AuditionsList.tsx",
//   "contents": "import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Audition } from \"@/types/audition\";\nimport { Search, Calendar, Building, User, FileText, Play, Mail, Phone, Globe, Edit3, Trash2 } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface AuditionsListProps {\n  auditions: Audition[];\n  isLoading: boolean;\n  onRefetch: () =\u003e void;\n  onEditAudition: (audition: Audition) =\u003e void;\n}\n\nconst AuditionsList = ({ auditions, isLoading, onRefetch, onEditAudition }: AuditionsListProps) =\u003e {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [deletingAuditionId, setDeletingAuditionId] = useState\u003cstring | null\u003e(null);\n\n  const getStatusColor = (status: string) =\u003e {\n    switch (status) {\n      case 'preparation': return 'bg-yellow-600';\n      case 'submitted': return 'bg-blue-600';\n      case 'callback': return 'bg-orange-600';\n      case 'booked': return 'bg-green-600';\n      case 'rejected': return 'bg-red-600';\n      case 'expired': return 'bg-gray-600';\n      default: return 'bg-gray-600';\n    }\n  };\n\n  const deleteMutation = useMutation({\n    mutationFn: async (auditionId: string) =\u003e {\n      const { error } = await supabase\n        .from('auditions')\n        .delete()\n        .eq('id', auditionId);\n      \n      if (error) throw error;\n    },\n    onSuccess: () =\u003e {\n      queryClient.invalidateQueries({ queryKey: ['auditions', user?.id] });\n      onRefetch();\n      toast({\n        title: \"Audition deleted\",\n        description: \"Audition has been successfully deleted.\",\n      });\n    },\n    onError: (error) =\u003e {\n      console.error('Error deleting audition:', error);\n      toast({\n        title: \"Error deleting audition\",\n        description: \"Failed to delete audition. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () =\u003e {\n      setDeletingAuditionId(null);\n    },\n  });\n\n  const handleDeleteAudition = (auditionId: string) =\u003e {\n    setDeletingAuditionId(auditionId);\n    deleteMutation.mutate(auditionId);\n  };\n\n  const filteredAuditions = auditions.filter(audition =\u003e {\n    const matchesSearch = audition.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         audition.casting_director?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         audition.production_company?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || audition.status === statusFilter;\n    const matchesType = typeFilter === 'all' || audition.audition_type === typeFilter;\n    \n    return matchesSearch \u0026\u0026 matchesStatus \u0026\u0026 matchesType;\n  });\n\n  if (isLoading) {\n    return (\n      \u003cdiv className=\"space-y-4\"\u003e\n        \u003cdiv className=\"flex flex-col sm:flex-row gap-4 mb-6\"\u003e\n          \u003cSkeleton className=\"h-10 flex-1 bg-gray-700\" /\u003e\n          \u003cSkeleton className=\"h-10 w-40 bg-gray-700\" /\u003e\n          \u003cSkeleton className=\"h-10 w-40 bg-gray-700\" /\u003e\n        \u003c/div\u003e\n        {Array.from({ length: 3 }).map((_, i) =\u003e (\n          \u003cCard key={i} className=\"bg-gray-900 border-gray-800\"\u003e\n            \u003cCardHeader\u003e\n              \u003cSkeleton className=\"h-6 w-48 bg-gray-700\" /\u003e\n              \u003cSkeleton className=\"h-4 w-32 bg-gray-700\" /\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent\u003e\n              \u003cSkeleton className=\"h-20 w-full bg-gray-700\" /\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        ))}\n      \u003c/div\u003e\n    );\n  }\n\n  return (\n    \u003cdiv className=\"space-y-6\"\u003e\n      \u003cdiv className=\"flex flex-col sm:flex-row gap-4\"\u003e\n        \u003cdiv className=\"relative flex-1\"\u003e\n          \u003cSearch className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" /\u003e\n          \u003cInput\n            placeholder=\"Search auditions...\"\n            value={searchTerm}\n            onChange={(e) =\u003e setSearchTerm(e.target.value)}\n            className=\"pl-10 bg-gray-900 border-gray-700 text-white\"\n          /\u003e\n        \u003c/div\u003e\n        \n        \u003cSelect value={statusFilter} onValueChange={setStatusFilter}\u003e\n          \u003cSelectTrigger className=\"w-40 bg-gray-900 border-gray-700 text-white\"\u003e\n            \u003cSelectValue placeholder=\"Status\" /\u003e\n          \u003c/SelectTrigger\u003e\n          \u003cSelectContent className=\"bg-gray-900 border-gray-700\"\u003e\n            \u003cSelectItem value=\"all\"\u003eAll Status\u003c/SelectItem\u003e\n            \u003cSelectItem value=\"preparation\"\u003ePreparation\u003c/SelectItem\u003e\n            \u003cSelectItem value=\"submitted\"\u003eSubmitted\u003c/SelectItem\u003e\n            \u003cSelectItem value=\"callback\"\u003eCallback\u003c/SelectItem\u003e\n            \u003cSelectItem value=\"booked\"\u003eBooked\u003c/SelectItem\u003e\n            \u003cSelectItem value=\"rejected\"\u003eRejected\u003c/SelectItem\u003e\n            \u003cSelectItem value=\"expired\"\u003eExpired\u003c/SelectItem\u003e\n          \u003c/SelectContent\u003e\n        \u003c/Select\u003e\n\n        \u003cSelect value={typeFilter} onValueChange={setTypeFilter}\u003e\n          \u003cSelectTrigger className=\"w-40 bg-gray-900 border-gray-700 text-white\"\u003e\n            \u003cSelectValue placeholder=\"Type\" /\u003e\n          \u003c/SelectTrigger\u003e\n          \u003cSelectContent className=\"bg-gray-900 border-gray-700\"\u003e\n            \u003cSelectItem value=\"all\"\u003eAll Types\u003c/SelectItem\u003e\n            \u003cSelectItem value=\"self-tape\"\u003eSelf-tape\u003c/SelectItem\u003e\n            \u003cSelectItem value=\"in-person\"\u003eIn-person\u003c/SelectItem\u003e\n            \u003cSelectItem value=\"callback\"\u003eCallback\u003c/SelectItem\u003e\n            \u003cSelectItem value=\"chemistry-read\"\u003eChemistry Read\u003c/SelectItem\u003e\n          \u003c/SelectContent\u003e\n        \u003c/Select\u003e\n      \u003c/div\u003e\n\n      {filteredAuditions.length === 0 ? (\n        \u003cCard className=\"bg-gray-900 border-gray-800\"\u003e\n          \u003cCardContent className=\"flex flex-col items-center justify-center py-12\"\u003e\n            \u003cCalendar className=\"h-12 w-12 text-gray-600 mb-4\" /\u003e\n            \u003ch3 className=\"text-lg font-medium text-gray-400 mb-2\"\u003eNo auditions found\u003c/h3\u003e\n            \u003cp className=\"text-gray-500 text-center\"\u003e\n              {auditions.length === 0 \n                ? \"Start your journey by creating your first audition.\"\n                : \"Try adjusting your search filters to find what you're looking for.\"\n              }\n            \u003c/p\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      ) : (\n        \u003cdiv className=\"grid gap-4\"\u003e\n          {filteredAuditions.map((audition) =\u003e (\n            \u003cCard key={audition.id} className=\"bg-gray-900 border-gray-800 hover:bg-gray-800 transition-colors\"\u003e\n              \u003cCardHeader\u003e\n                \u003cdiv className=\"flex justify-between items-start\"\u003e\n                  \u003cdiv\u003e\n                    \u003cCardTitle className=\"text-white text-xl mb-2\"\u003e{audition.title}\u003c/CardTitle\u003e\n                    \u003cdiv className=\"flex flex-wrap gap-2 text-sm text-gray-400\"\u003e\n                      {audition.casting_director \u0026\u0026 (\n                        \u003cdiv className=\"flex items-center gap-1\"\u003e\n                          \u003cUser className=\"h-4 w-4\" /\u003e\n                          {audition.casting_director}\n                        \u003c/div\u003e\n                      )}\n                      {audition.production_company \u0026\u0026 (\n                        \u003cdiv className=\"flex items-center gap-1\"\u003e\n                          \u003cBuilding className=\"h-4 w-4\" /\u003e\n                          {audition.production_company}\n                        \u003c/div\u003e\n                      )}\n                      {audition.audition_date \u0026\u0026 (\n                        \u003cdiv className=\"flex items-center gap-1\"\u003e\n                          \u003cCalendar className=\"h-4 w-4\" /\u003e\n                          {format(new Date(audition.audition_date), 'MMM dd, yyyy')}\n                        \u003c/div\u003e\n                      )}\n                      {audition.submission_deadline \u0026\u0026 (\n                        \u003cdiv className=\"flex items-center gap-1\"\u003e\n                          \u003cCalendar className=\"h-4 w-4\" /\u003e\n                          Due: {format(new Date(audition.submission_deadline), 'MMM dd, yyyy p')}\n                        \u003c/div\u003e\n                      )}\n                      {audition.contact_email \u0026\u0026 (\n                        \u003cdiv className=\"flex items-center gap-1\"\u003e\n                          \u003cMail className=\"h-4 w-4\" /\u003e\n                          {audition.contact_email}\n                        \u003c/div\u003e\n                      )}\n                      {audition.contact_phone \u0026\u0026 (\n                        \u003cdiv className=\"flex items-center gap-1\"\u003e\n                          \u003cPhone className=\"h-4 w-4\" /\u003e\n                          {audition.contact_phone}\n                        \u003c/div\u003e\n                      )}\n                      {audition.contact_website \u0026\u0026 (\n                        \u003cdiv className=\"flex items-center gap-1\"\u003e\n                          \u003cGlobe className=\"h-4 w-4\" /\u003e\n                          \u003cspan className=\"truncate max-w-32\"\u003e{audition.contact_website}\u003c/span\u003e\n                        \u003c/div\u003e\n                      )}\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"flex gap-2\"\u003e\n                    \u003cBadge className={`${getStatusColor(audition.status)} text-white`}\u003e\n                      {audition.status}\n                    \u003c/Badge\u003e\n                    \u003cBadge variant=\"outline\" className=\"border-gray-600 text-gray-300\"\u003e\n                      {audition.audition_type}\n                    \u003c/Badge\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/CardHeader\u003e\n              \n              \u003cCardContent\u003e\n                \u003cdiv className=\"space-y-4\"\u003e\n                  {audition.notes \u0026\u0026 (\n                    \u003cp className=\"text-gray-300\"\u003e{audition.notes}\u003c/p\u003e\n                  )}\n                  \n                  \u003cdiv className=\"flex flex-wrap gap-4 text-sm\"\u003e\n                    {audition.scripts \u0026\u0026 (\n                      \u003cdiv className=\"flex items-center gap-1 text-purple-400\"\u003e\n                        \u003cFileText className=\"h-4 w-4\" /\u003e\n                        Script: {audition.scripts.title}\n                      \u003c/div\u003e\n                    )}\n                    {audition.script_analyses \u0026\u0026 audition.script_analyses.length \u003e 0 \u0026\u0026 (\n                      \u003cdiv className=\"flex items-center gap-1 text-blue-400\"\u003e\n                        \u003cPlay className=\"h-4 w-4\" /\u003e\n                        Character: {audition.script_analyses[0].selected_character}\n                      \u003c/div\u003e\n                    )}\n                    {audition.video_submissions \u0026\u0026 audition.video_submissions.length \u003e 0 \u0026\u0026 (\n                      \u003cdiv className=\"flex items-center gap-1 text-green-400\"\u003e\n                        \u003cPlay className=\"h-4 w-4\" /\u003e\n                        {audition.video_submissions.length} video{audition.video_submissions.length \u003e 1 ? 's' : ''}\n                      \u003c/div\u003e\n                    )}\n                  \u003c/div\u003e\n                  \n                  \u003cdiv className=\"flex justify-between items-center pt-2 border-t border-gray-700\"\u003e\n                    \u003cspan className=\"text-xs text-gray-500\"\u003e\n                      Created {format(new Date(audition.created_at), 'MMM dd, yyyy')}\n                    \u003c/span\u003e\n                    \u003cdiv className=\"flex gap-2\"\u003e\n                      \u003cAlertDialog\u003e\n                        \u003cAlertDialogTrigger asChild\u003e\n                          \u003cButton\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"border-red-600 text-red-400 hover:bg-red-600 hover:text-white\"\n                            disabled={deletingAuditionId === audition.id}\n                          \u003e\n                            \u003cTrash2 className=\"h-4 w-4\" /\u003e\n                          \u003c/Button\u003e\n                        \u003c/AlertDialogTrigger\u003e\n                        \u003cAlertDialogContent\u003e\n                          \u003cAlertDialogHeader\u003e\n                            \u003cAlertDialogTitle\u003eDelete Audition\u003c/AlertDialogTitle\u003e\n                            \u003cAlertDialogDescription\u003e\n                              Are you sure you want to delete \"{audition.title}\"? This action cannot be undone and will also delete any related video submissions and coaching sessions.\n                            \u003c/AlertDialogDescription\u003e\n                          \u003c/AlertDialogHeader\u003e\n                          \u003cAlertDialogFooter\u003e\n                            \u003cAlertDialogCancel\u003eCancel\u003c/AlertDialogCancel\u003e\n                            \u003cAlertDialogAction\n                              onClick={() =\u003e handleDeleteAudition(audition.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                            \u003e\n                              Delete Audition\n                            \u003c/AlertDialogAction\u003e\n                          \u003c/AlertDialogFooter\u003e\n                        \u003c/AlertDialogContent\u003e\n                      \u003c/AlertDialog\u003e\n                      \u003cButton \n                        variant=\"default\" \n                        size=\"sm\" \n                        onClick={() =\u003e onEditAudition(audition)}\n                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-2 transition-all duration-200 hover:scale-105 shadow-lg hover:shadow-xl\"\n                      \u003e\n                        \u003cEdit3 className=\"h-4 w-4 mr-2\" /\u003e\n                        Edit\n                      \u003c/Button\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          ))}\n        \u003c/div\u003e\n      )}\n    \u003c/div\u003e\n  );\n};\n\nexport default AuditionsList;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/dashboard/CreateAuditionDialog.tsx",
//   "contents": "\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { CreateAuditionData } from \"@/types/audition\";\n\ninterface CreateAuditionDialogProps {\n  isOpen: boolean;\n  onClose: () =\u003e void;\n  onCreateAudition: (audition: CreateAuditionData) =\u003e void;\n}\n\nconst CreateAuditionDialog = ({ isOpen, onClose, onCreateAudition }: CreateAuditionDialogProps) =\u003e {\n  const [formData, setFormData] = useState\u003cCreateAuditionData\u003e({\n    title: \"\",\n    casting_director: \"\",\n    production_company: \"\",\n    audition_date: \"\",\n    audition_type: \"self-tape\",\n    status: \"preparation\",\n    notes: \"\",\n    contact_email: \"\",\n    contact_phone: \"\",\n    contact_website: \"\",\n    casting_director_preferences: \"\",\n    casting_director_current_projects: \"\",\n    submission_deadline: \"\",\n    reminder_enabled: false,\n  });\n\n  const [reminderTiming, setReminderTiming] = useState\u003cstring\u003e(\"1hour\");\n  const [customReminderTime, setCustomReminderTime] = useState\u003cstring\u003e(\"\");\n\n  // Convert ISO to 'YYYY-MM-DDTHH:mm' for datetime-local inputs\n  const toDatetimeLocalValue = (isoString?: string) =\u003e {\n    if (!isoString) return \"\";\n    const d = new Date(isoString);\n    if (isNaN(d.getTime())) return \"\";\n    const tzOffset = d.getTimezoneOffset();\n    const local = new Date(d.getTime() - tzOffset * 60000);\n    return local.toISOString().slice(0, 16);\n  };\n\n  // Convert local 'YYYY-MM-DDTHH:mm' to ISO for storage\n  const toISOFromLocalInput = (localValue?: string) =\u003e {\n    if (!localValue) return undefined;\n    const d = new Date(localValue);\n    return isNaN(d.getTime()) ? undefined : d.toISOString();\n  };\n\n  const calculateReminderTime = () =\u003e {\n    if (!formData.submission_deadline || !formData.reminder_enabled) return undefined;\n    \n    const deadline = new Date(formData.submission_deadline);\n    let reminderTime: Date;\n    \n    switch (reminderTiming) {\n      case \"1hour\":\n        reminderTime = new Date(deadline.getTime() - 1 * 60 * 60 * 1000);\n        break;\n      case \"2hours\":\n        reminderTime = new Date(deadline.getTime() - 2 * 60 * 60 * 1000);\n        break;\n      case \"4hours\":\n        reminderTime = new Date(deadline.getTime() - 4 * 60 * 60 * 1000);\n        break;\n      case \"1day\":\n        reminderTime = new Date(deadline.getTime() - 24 * 60 * 60 * 1000);\n        break;\n      case \"2days\":\n        reminderTime = new Date(deadline.getTime() - 2 * 24 * 60 * 60 * 1000);\n        break;\n      case \"custom\":\n        if (!customReminderTime) return undefined;\n        reminderTime = new Date(customReminderTime);\n        break;\n      default:\n        return undefined;\n    }\n    \n    return reminderTime.toISOString();\n  };\n\n  const handleSubmit = (e: React.FormEvent) =\u003e {\n    e.preventDefault();\n    \n    // Validate reminder time if enabled\n    if (formData.reminder_enabled \u0026\u0026 formData.submission_deadline) {\n      const reminderTime = calculateReminderTime();\n      if (!reminderTime) {\n        alert(\"Please set a valid reminder time.\");\n        return;\n      }\n      \n      const now = new Date();\n      const reminderDate = new Date(reminderTime);\n      \n      if (reminderDate \u003c= now) {\n        alert(\"Reminder time must be in the future.\");\n        return;\n      }\n    }\n    \n    // Clean up empty strings to null for optional fields\n    const cleanedData: CreateAuditionData = {\n      ...formData,\n      casting_director: formData.casting_director || undefined,\n      production_company: formData.production_company || undefined,\n      audition_date: formData.audition_date || undefined,\n      notes: formData.notes || undefined,\n      contact_email: formData.contact_email || undefined,\n      contact_phone: formData.contact_phone || undefined,\n      contact_website: formData.contact_website || undefined,\n      casting_director_preferences: formData.casting_director_preferences || undefined,\n      casting_director_current_projects: formData.casting_director_current_projects || undefined,\n      submission_deadline: toISOFromLocalInput(formData.submission_deadline),\n      reminder_enabled: formData.reminder_enabled || undefined,\n      reminder_time: formData.reminder_enabled ? calculateReminderTime() : undefined,\n    };\n\n    console.log('Submitting audition data:', cleanedData);\n    onCreateAudition(cleanedData);\n    \n    // Reset form\n    setFormData({\n      title: \"\",\n      casting_director: \"\",\n      production_company: \"\",\n      audition_date: \"\",\n      audition_type: \"self-tape\",\n      status: \"preparation\",\n      notes: \"\",\n      contact_email: \"\",\n      contact_phone: \"\",\n      contact_website: \"\",\n      casting_director_preferences: \"\",\n      casting_director_current_projects: \"\",\n      submission_deadline: \"\",\n      reminder_enabled: false,\n    });\n    setReminderTiming(\"1hour\");\n    setCustomReminderTime(\"\");\n  };\n\n  const handleChange = (field: keyof CreateAuditionData, value: string | boolean) =\u003e {\n    setFormData(prev =\u003e ({ ...prev, [field]: value }));\n  };\n\n  return (\n    \u003cDialog open={isOpen} onOpenChange={onClose}\u003e\n      \u003cDialogContent className=\"bg-gray-900 border-gray-700 text-white max-w-2xl max-h-[90vh] overflow-y-auto\"\u003e\n        \u003cDialogHeader\u003e\n          \u003cDialogTitle className=\"text-2xl font-bold\"\u003eCreate New Audition\u003c/DialogTitle\u003e\n        \u003c/DialogHeader\u003e\n        \n        \u003cform onSubmit={handleSubmit} className=\"space-y-4\"\u003e\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"title\"\u003eAudition Title *\u003c/Label\u003e\n            \u003cInput\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) =\u003e handleChange(\"title\", e.target.value)}\n              placeholder=\"e.g., Lead Role - New Drama Series\"\n              className=\"bg-gray-800 border-gray-600 text-white\"\n              required\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"grid grid-cols-2 gap-4\"\u003e\n            \u003cdiv className=\"space-y-2\"\u003e\n              \u003cLabel htmlFor=\"audition_type\"\u003eType\u003c/Label\u003e\n              \u003cSelect value={formData.audition_type} onValueChange={(value) =\u003e handleChange(\"audition_type\", value)}\u003e\n                \u003cSelectTrigger className=\"bg-gray-800 border-gray-600 text-white\"\u003e\n                  \u003cSelectValue /\u003e\n                \u003c/SelectTrigger\u003e\n                \u003cSelectContent className=\"bg-gray-800 border-gray-600\"\u003e\n                  \u003cSelectItem value=\"self-tape\"\u003eSelf-tape\u003c/SelectItem\u003e\n                  \u003cSelectItem value=\"in-person\"\u003eIn-person\u003c/SelectItem\u003e\n                  \u003cSelectItem value=\"callback\"\u003eCallback\u003c/SelectItem\u003e\n                  \u003cSelectItem value=\"chemistry-read\"\u003eChemistry Read\u003c/SelectItem\u003e\n                \u003c/SelectContent\u003e\n              \u003c/Select\u003e\n            \u003c/div\u003e\n\n            \u003cdiv className=\"space-y-2\"\u003e\n              \u003cLabel htmlFor=\"status\"\u003eStatus\u003c/Label\u003e\n              \u003cSelect value={formData.status} onValueChange={(value) =\u003e handleChange(\"status\", value)}\u003e\n                \u003cSelectTrigger className=\"bg-gray-800 border-gray-600 text-white\"\u003e\n                  \u003cSelectValue /\u003e\n                \u003c/SelectTrigger\u003e\n                \u003cSelectContent className=\"bg-gray-800 border-gray-600\"\u003e\n                  \u003cSelectItem value=\"preparation\"\u003ePreparation\u003c/SelectItem\u003e\n                  \u003cSelectItem value=\"submitted\"\u003eSubmitted\u003c/SelectItem\u003e\n                  \u003cSelectItem value=\"callback\"\u003eCallback\u003c/SelectItem\u003e\n                  \u003cSelectItem value=\"booked\"\u003eBooked\u003c/SelectItem\u003e\n                  \u003cSelectItem value=\"rejected\"\u003eRejected\u003c/SelectItem\u003e\n                  \u003cSelectItem value=\"expired\"\u003eExpired\u003c/SelectItem\u003e\n                \u003c/SelectContent\u003e\n              \u003c/Select\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"casting_director\"\u003eCasting Director\u003c/Label\u003e\n            \u003cInput\n              id=\"casting_director\"\n              value={formData.casting_director}\n              onChange={(e) =\u003e handleChange(\"casting_director\", e.target.value)}\n              placeholder=\"e.g., Jane Smith\"\n              className=\"bg-gray-800 border-gray-600 text-white\"\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"production_company\"\u003eProduction Company\u003c/Label\u003e\n            \u003cInput\n              id=\"production_company\"\n              value={formData.production_company}\n              onChange={(e) =\u003e handleChange(\"production_company\", e.target.value)}\n              placeholder=\"e.g., ABC Studios\"\n              className=\"bg-gray-800 border-gray-600 text-white\"\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"contact_email\"\u003eContact Email\u003c/Label\u003e\n            \u003cInput\n              id=\"contact_email\"\n              type=\"email\"\n              value={formData.contact_email}\n              onChange={(e) =\u003e handleChange(\"contact_email\", e.target.value)}\n              placeholder=\"contact@example.com\"\n              className=\"bg-gray-800 border-gray-600 text-white\"\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"contact_phone\"\u003eContact Phone\u003c/Label\u003e\n            \u003cInput\n              id=\"contact_phone\"\n              type=\"tel\"\n              value={formData.contact_phone}\n              onChange={(e) =\u003e handleChange(\"contact_phone\", e.target.value)}\n              placeholder=\"(555) 123-4567\"\n              className=\"bg-gray-800 border-gray-600 text-white\"\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"contact_website\"\u003eContact Website\u003c/Label\u003e\n            \u003cInput\n              id=\"contact_website\"\n              type=\"url\"\n              value={formData.contact_website}\n              onChange={(e) =\u003e handleChange(\"contact_website\", e.target.value)}\n              placeholder=\"https://example.com\"\n              className=\"bg-gray-800 border-gray-600 text-white\"\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"audition_date\"\u003eAudition Date\u003c/Label\u003e\n            \u003cInput\n              id=\"audition_date\"\n              type=\"date\"\n              value={formData.audition_date}\n              onChange={(e) =\u003e handleChange(\"audition_date\", e.target.value)}\n              className=\"bg-gray-800 border-gray-600 text-white\"\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"casting_director_preferences\"\u003eCasting Director Preferences\u003c/Label\u003e\n            \u003cTextarea\n              id=\"casting_director_preferences\"\n              value={formData.casting_director_preferences}\n              onChange={(e) =\u003e handleChange(\"casting_director_preferences\", e.target.value)}\n              placeholder=\"What does this casting director like and dislike? Acting styles, character types, etc.\"\n              className=\"bg-gray-800 border-gray-600 text-white\"\n              rows={3}\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"casting_director_current_projects\"\u003eCurrent Projects\u003c/Label\u003e\n            \u003cTextarea\n              id=\"casting_director_current_projects\"\n              value={formData.casting_director_current_projects}\n              onChange={(e) =\u003e handleChange(\"casting_director_current_projects\", e.target.value)}\n              placeholder=\"What is this casting director currently working on? Shows, films, etc.\"\n              className=\"bg-gray-800 border-gray-600 text-white\"\n              rows={3}\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"submission_deadline\"\u003eSubmission Deadline\u003c/Label\u003e\n            \u003cInput\n              id=\"submission_deadline\"\n              type=\"datetime-local\"\n              value={formData.submission_deadline}\n              onChange={(e) =\u003e handleChange(\"submission_deadline\", e.target.value)}\n              className=\"bg-gray-800 border-gray-600 text-white\"\n            /\u003e\n          \u003c/div\u003e\n\n          {/* Reminder Section */}\n          \u003cdiv className=\"space-y-4 p-4 border border-gray-600 rounded-lg bg-gray-800/50\"\u003e\n            \u003cdiv className=\"space-y-3\"\u003e\n              \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                \u003cCheckbox\n                  id=\"reminder_enabled\"\n                  checked={formData.reminder_enabled}\n                  onCheckedChange={(checked) =\u003e handleChange(\"reminder_enabled\", Boolean(checked))}\n                  className=\"border-gray-600 data-[state=checked]:bg-purple-600\"\n                /\u003e\n                \u003cLabel htmlFor=\"reminder_enabled\" className=\"text-sm font-medium\"\u003e\n                  Enable Email Reminders\n                \u003c/Label\u003e\n              \u003c/div\u003e\n              \n              {formData.reminder_enabled \u0026\u0026 (\n                \u003cdiv className=\"space-y-3 pl-6\"\u003e\n                  \u003cLabel className=\"text-sm text-gray-300\"\u003eReminder Timing\u003c/Label\u003e\n                  \u003cRadioGroup value={reminderTiming} onValueChange={setReminderTiming} className=\"space-y-2\"\u003e\n                    \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                      \u003cRadioGroupItem value=\"1hour\" id=\"1hour\" className=\"border-gray-600 text-purple-600\" /\u003e\n                      \u003cLabel htmlFor=\"1hour\" className=\"text-sm\"\u003e1 hour before deadline\u003c/Label\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                      \u003cRadioGroupItem value=\"2hours\" id=\"2hours\" className=\"border-gray-600 text-purple-600\" /\u003e\n                      \u003cLabel htmlFor=\"2hours\" className=\"text-sm\"\u003e2 hours before deadline\u003c/Label\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                      \u003cRadioGroupItem value=\"4hours\" id=\"4hours\" className=\"border-gray-600 text-purple-600\" /\u003e\n                      \u003cLabel htmlFor=\"4hours\" className=\"text-sm\"\u003e4 hours before deadline\u003c/Label\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                      \u003cRadioGroupItem value=\"1day\" id=\"1day\" className=\"border-gray-600 text-purple-600\" /\u003e\n                      \u003cLabel htmlFor=\"1day\" className=\"text-sm\"\u003e1 day before deadline\u003c/Label\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                      \u003cRadioGroupItem value=\"2days\" id=\"2days\" className=\"border-gray-600 text-purple-600\" /\u003e\n                      \u003cLabel htmlFor=\"2days\" className=\"text-sm\"\u003e2 days before deadline\u003c/Label\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                      \u003cRadioGroupItem value=\"custom\" id=\"custom\" className=\"border-gray-600 text-purple-600\" /\u003e\n                      \u003cLabel htmlFor=\"custom\" className=\"text-sm\"\u003eCustom time\u003c/Label\u003e\n                    \u003c/div\u003e\n                  \u003c/RadioGroup\u003e\n                  \n                  {reminderTiming === \"custom\" \u0026\u0026 (\n                    \u003cdiv className=\"space-y-2\"\u003e\n                      \u003cLabel htmlFor=\"custom_reminder_time\" className=\"text-sm\"\u003eCustom Reminder Time\u003c/Label\u003e\n                      \u003cInput\n                        id=\"custom_reminder_time\"\n                        type=\"datetime-local\"\n                        value={customReminderTime}\n                        onChange={(e) =\u003e setCustomReminderTime(e.target.value)}\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                      /\u003e\n                    \u003c/div\u003e\n                  )}\n                  \n                  \u003cp className=\"text-xs text-gray-400\"\u003e\n                    We'll send you an email reminder at the specified time before your submission deadline.\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              )}\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"notes\"\u003eNotes\u003c/Label\u003e\n            \u003cTextarea\n              id=\"notes\"\n              value={formData.notes}\n              onChange={(e) =\u003e handleChange(\"notes\", e.target.value)}\n              placeholder=\"Additional notes about this audition...\"\n              className=\"bg-gray-800 border-gray-600 text-white\"\n              rows={3}\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"flex justify-end gap-3 pt-4\"\u003e\n            \u003cButton type=\"button\" variant=\"outline\" onClick={onClose} className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\u003e\n              Cancel\n            \u003c/Button\u003e\n            \u003cButton type=\"submit\" className=\"bg-purple-600 hover:bg-purple-700\"\u003e\n              Create Audition\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n      \u003c/DialogContent\u003e\n    \u003c/Dialog\u003e\n  );\n};\n\nexport default CreateAuditionDialog;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/dashboard/DashboardHeader.tsx",
//   "contents": "\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport { HelpTooltip } from \"@/components/ui/help-tooltip\";\n\ninterface DashboardHeaderProps {\n  userName: string;\n  onCreateAudition: () =\u003e void;\n}\n\nconst DashboardHeader = ({ userName, onCreateAudition }: DashboardHeaderProps) =\u003e {\n  return (\n    \u003cdiv className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\"\u003e\n      \u003cdiv\u003e\n        \u003ch1 className=\"text-4xl font-bold text-white mb-2\"\u003e\n          Welcome back, {userName}\n        \u003c/h1\u003e\n        \u003cp className=\"text-gray-400 text-lg\"\u003e\n          Manage your auditions and track your acting journey\n        \u003c/p\u003e\n      \u003c/div\u003e\n      \n      \u003cHelpTooltip\n        content=\"Create a new audition. Include role, project, and deadline; you can add reminders later.\"\n        side=\"left\"\n      \u003e\n        \u003cButton \n          onClick={onCreateAudition}\n          className=\"bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 text-lg\"\n        \u003e\n          \u003cPlus className=\"mr-2 h-5 w-5\" /\u003e\n          New Audition\n        \u003c/Button\u003e\n      \u003c/HelpTooltip\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default DashboardHeader;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/dashboard/DashboardStats.tsx",
//   "contents": "\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AuditionStats } from \"@/types/audition\";\nimport { \n  Calendar, \n  CheckCircle, \n  Clock, \n  TrendingUp, \n  Film, \n  Star \n} from \"lucide-react\";\n\ninterface DashboardStatsProps {\n  stats: AuditionStats | null;\n  isLoading: boolean;\n}\n\nconst DashboardStats = ({ stats, isLoading }: DashboardStatsProps) =\u003e {\n  if (isLoading) {\n    return (\n      \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4\"\u003e\n        {Array.from({ length: 6 }).map((_, i) =\u003e (\n          \u003cCard key={i} className=\"bg-gray-900 border-gray-800\"\u003e\n            \u003cCardHeader className=\"pb-2\"\u003e\n              \u003cSkeleton className=\"h-4 w-20 bg-gray-700\" /\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent\u003e\n              \u003cSkeleton className=\"h-8 w-12 bg-gray-700\" /\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        ))}\n      \u003c/div\u003e\n    );\n  }\n\n  if (!stats) return null;\n\n  const statCards = [\n    {\n      title: \"Total Auditions\",\n      value: stats.total_auditions,\n      icon: Calendar,\n      color: \"text-blue-400\",\n    },\n    {\n      title: \"In Preparation\",\n      value: stats.preparation,\n      icon: Clock,\n      color: \"text-yellow-400\",\n    },\n    {\n      title: \"Submitted\",\n      value: stats.submitted,\n      icon: Film,\n      color: \"text-purple-400\",\n    },\n    {\n      title: \"Callbacks\",\n      value: stats.callback,\n      icon: Star,\n      color: \"text-orange-400\",\n    },\n    {\n      title: \"Booked\",\n      value: stats.booked,\n      icon: CheckCircle,\n      color: \"text-green-400\",\n    },\n    {\n      title: \"Success Rate\",\n      value: `${stats.success_rate}%`,\n      icon: TrendingUp,\n      color: \"text-emerald-400\",\n    },\n  ];\n\n  return (\n    \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4\"\u003e\n      {statCards.map((stat, index) =\u003e {\n        const Icon = stat.icon;\n        return (\n          \u003cCard key={index} className=\"bg-gray-900 border-gray-800 hover:bg-gray-800 transition-colors\"\u003e\n            \u003cCardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\"\u003e\n              \u003cCardTitle className=\"text-sm font-medium text-gray-400\"\u003e\n                {stat.title}\n              \u003c/CardTitle\u003e\n              \u003cIcon className={`h-4 w-4 ${stat.color}`} /\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent\u003e\n              \u003cdiv className={`text-2xl font-bold ${stat.color}`}\u003e\n                {stat.value}\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        );\n      })}\n    \u003c/div\u003e\n  );\n};\n\nexport default DashboardStats;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/dashboard/EditAuditionDialog.tsx",
//   "contents": "\nimport React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Audition, CreateAuditionData } from \"@/types/audition\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { toast } from \"@/components/ui/use-toast\";\n\ninterface EditAuditionDialogProps {\n  isOpen: boolean;\n  onClose: () =\u003e void;\n  onUpdateAudition: (id: string, auditionData: CreateAuditionData) =\u003e Promise\u003cvoid\u003e;\n  audition: Audition | null;\n}\n\nconst EditAuditionDialog: React.FC\u003cEditAuditionDialogProps\u003e = ({\n  isOpen,\n  onClose,\n  onUpdateAudition,\n  audition,\n}) =\u003e {\n  const { user } = useAuth();\n  const [formData, setFormData] = useState\u003cCreateAuditionData\u003e({\n    title: \"\",\n    casting_director: \"\",\n    production_company: \"\",\n    audition_date: \"\",\n    audition_type: \"self-tape\",\n    status: \"preparation\",\n    notes: \"\",\n    contact_email: \"\",\n    contact_phone: \"\",\n    contact_website: \"\",\n    casting_director_preferences: \"\",\n    casting_director_current_projects: \"\",\n    submission_deadline: \"\",\n    actor_email: \"\",\n    reminder_enabled: false,\n  });\n\n  const [sendingTest, setSendingTest] = useState(false);\n  const [sendingEmail, setSendingEmail] = useState(false);\n\n  const [reminderTiming, setReminderTiming] = useState\u003cstring\u003e(\"1hour\");\n  const [customReminderTime, setCustomReminderTime] = useState\u003cstring\u003e(\"\");\n\n  // Normalize ISO timestamp to 'YYYY-MM-DDTHH:mm' for datetime-local inputs\n  const toDatetimeLocalValue = (isoString?: string) =\u003e {\n    if (!isoString) return \"\";\n    const d = new Date(isoString);\n    if (isNaN(d.getTime())) return \"\";\n    const tzOffset = d.getTimezoneOffset();\n    const local = new Date(d.getTime() - tzOffset * 60000);\n    return local.toISOString().slice(0, 16);\n  };\n\n  // Convert 'YYYY-MM-DDTHH:mm' local input back to ISO for storage\n  const toISOFromLocalInput = (localValue?: string) =\u003e {\n    if (!localValue) return undefined;\n    const d = new Date(localValue);\n    return isNaN(d.getTime()) ? undefined : d.toISOString();\n  };\n\n  const calculateReminderTime = () =\u003e {\n    if (!formData.submission_deadline || !formData.reminder_enabled) return undefined;\n    const deadline = new Date(formData.submission_deadline);\n    let reminderTime: Date;\n    switch (reminderTiming) {\n      case \"1hour\":\n        reminderTime = new Date(deadline.getTime() - 1 * 60 * 60 * 1000);\n        break;\n      case \"2hours\":\n        reminderTime = new Date(deadline.getTime() - 2 * 60 * 60 * 1000);\n        break;\n      case \"4hours\":\n        reminderTime = new Date(deadline.getTime() - 4 * 60 * 60 * 1000);\n        break;\n      case \"1day\":\n        reminderTime = new Date(deadline.getTime() - 24 * 60 * 60 * 1000);\n        break;\n      case \"2days\":\n        reminderTime = new Date(deadline.getTime() - 2 * 24 * 60 * 60 * 1000);\n        break;\n      case \"custom\":\n        if (!customReminderTime) return undefined;\n        reminderTime = new Date(customReminderTime);\n        break;\n      default:\n        return undefined;\n    }\n    return reminderTime.toISOString();\n  };\n\n  useEffect(() =\u003e {\n    if (audition) {\n      setFormData({\n        title: audition.title,\n        casting_director: audition.casting_director || \"\",\n        production_company: audition.production_company || \"\",\n        audition_date: audition.audition_date || \"\",\n        audition_type: audition.audition_type,\n        status: audition.status,\n        notes: audition.notes || \"\",\n        contact_email: audition.contact_email || \"\",\n        contact_phone: audition.contact_phone || \"\",\n        contact_website: audition.contact_website || \"\",\n        casting_director_preferences: audition.casting_director_preferences || \"\",\n        casting_director_current_projects: audition.casting_director_current_projects || \"\",\n        submission_deadline: toDatetimeLocalValue(audition.submission_deadline),\n        actor_email: audition.actor_email || \"\",\n        reminder_enabled: Boolean((audition as any).reminder_enabled),\n      });\n    }\n  }, [audition]);\n\n  const handleSubmit = async (e: React.FormEvent) =\u003e {\n    e.preventDefault();\n    if (!audition) return;\n\n    // Clean up empty strings to null for optional fields\n    const cleanedData: CreateAuditionData = {\n      ...formData,\n      casting_director: formData.casting_director || undefined,\n      production_company: formData.production_company || undefined,\n      audition_date: formData.audition_date || undefined,\n      notes: formData.notes || undefined,\n      contact_email: formData.contact_email || undefined,\n      contact_phone: formData.contact_phone || undefined,\n      contact_website: formData.contact_website || undefined,\n      casting_director_preferences: formData.casting_director_preferences || undefined,\n      casting_director_current_projects: formData.casting_director_current_projects || undefined,\n      submission_deadline: toISOFromLocalInput(formData.submission_deadline),\n      reminder_enabled: formData.reminder_enabled || undefined,\n      reminder_time: formData.reminder_enabled ? calculateReminderTime() : undefined,\n      actor_email: formData.actor_email || undefined,\n    };\n\n    try {\n      await onUpdateAudition(audition.id, cleanedData);\n      onClose();\n    } catch (error) {\n      console.error(\"Error updating audition:\", error);\n    }\n  };\n\n  const handleChange = (field: keyof CreateAuditionData, value: string | boolean) =\u003e {\n    setFormData((prev) =\u003e ({ ...prev, [field]: value }));\n  };\n\n  const sendTestEmail = async () =\u003e {\n    if (!audition) return;\n    try {\n      setSendingTest(true);\n      const to = user?.email;\n      const { error } = await supabase.functions.invoke('send-audition-email', {\n        body: {\n          auditionId: audition.id,\n          to,\n          test: true,\n        },\n      });\n      if (error) throw error as any;\n      toast({ title: 'Test email sent', description: `Sent to ${to}` });\n    } catch (err: any) {\n      toast({ title: 'Email failed', description: err.message, variant: 'destructive' });\n    } finally {\n      setSendingTest(false);\n    }\n  };\n\n  const sendManualEmail = async () =\u003e {\n    if (!audition) return;\n    try {\n      if (!formData.actor_email) {\n        toast({ title: 'Actor email required', description: 'Enter an actor email to send.', variant: 'destructive' });\n        return;\n      }\n      setSendingEmail(true);\n      const { error } = await supabase.functions.invoke('send-audition-email', {\n        body: {\n          auditionId: audition.id,\n          to: formData.actor_email,\n          test: false,\n        },\n      });\n      if (error) throw error as any;\n      toast({ title: 'Email sent', description: `Sent to ${formData.actor_email}` });\n    } catch (err: any) {\n      toast({ title: 'Email failed', description: err.message, variant: 'destructive' });\n    } finally {\n      setSendingEmail(false);\n    }\n  };\n\n  return (\n    \u003cDialog open={isOpen} onOpenChange={onClose}\u003e\n      \u003cDialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\"\u003e\n        \u003cDialogHeader\u003e\n          \u003cDialogTitle\u003eEdit Audition\u003c/DialogTitle\u003e\n        \u003c/DialogHeader\u003e\n\n        \u003cform onSubmit={handleSubmit} className=\"space-y-6\"\u003e\n          \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 gap-6\"\u003e\n            \u003cdiv className=\"space-y-4\"\u003e\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"title\"\u003eTitle *\u003c/Label\u003e\n                \u003cInput\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) =\u003e handleChange(\"title\", e.target.value)}\n                  required\n                  placeholder=\"Audition title\"\n                /\u003e\n              \u003c/div\u003e\n\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"casting_director\"\u003eCasting Director\u003c/Label\u003e\n                \u003cInput\n                  id=\"casting_director\"\n                  value={formData.casting_director}\n                  onChange={(e) =\u003e handleChange(\"casting_director\", e.target.value)}\n                  placeholder=\"Casting director name\"\n                /\u003e\n              \u003c/div\u003e\n\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"production_company\"\u003eProduction Company\u003c/Label\u003e\n                \u003cInput\n                  id=\"production_company\"\n                  value={formData.production_company}\n                  onChange={(e) =\u003e handleChange(\"production_company\", e.target.value)}\n                  placeholder=\"Production company name\"\n                /\u003e\n              \u003c/div\u003e\n\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"audition_date\"\u003eAudition Date\u003c/Label\u003e\n                \u003cInput\n                  id=\"audition_date\"\n                  type=\"date\"\n                  value={formData.audition_date}\n                  onChange={(e) =\u003e handleChange(\"audition_date\", e.target.value)}\n                /\u003e\n              \u003c/div\u003e\n\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"submission_deadline\"\u003eSubmission Deadline\u003c/Label\u003e\n                \u003cInput\n                  id=\"submission_deadline\"\n                  type=\"datetime-local\"\n                  value={formData.submission_deadline || \"\"}\n                  onChange={(e) =\u003e handleChange(\"submission_deadline\", e.target.value)}\n                /\u003e\n              \u003c/div\u003e\n\n              {/* Reminder Section */}\n              \u003cdiv className=\"space-y-3 p-4 border rounded-md\"\u003e\n                \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                  \u003cCheckbox\n                    id=\"reminder_enabled\"\n                    checked={Boolean(formData.reminder_enabled)}\n                    onCheckedChange={(checked) =\u003e handleChange(\"reminder_enabled\", Boolean(checked))}\n                  /\u003e\n                  \u003cLabel htmlFor=\"reminder_enabled\" className=\"text-sm font-medium\"\u003e\n                    Enable Email Reminders\n                  \u003c/Label\u003e\n                \u003c/div\u003e\n\n                {formData.reminder_enabled \u0026\u0026 (\n                  \u003cdiv className=\"space-y-3 pl-6\"\u003e\n                    \u003cLabel className=\"text-sm\"\u003eReminder Timing\u003c/Label\u003e\n                    \u003cRadioGroup value={reminderTiming} onValueChange={setReminderTiming} className=\"space-y-2\"\u003e\n                      \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                        \u003cRadioGroupItem value=\"1hour\" id=\"1hour\" /\u003e\n                        \u003cLabel htmlFor=\"1hour\" className=\"text-sm\"\u003e1 hour before deadline\u003c/Label\u003e\n                      \u003c/div\u003e\n                      \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                        \u003cRadioGroupItem value=\"2hours\" id=\"2hours\" /\u003e\n                        \u003cLabel htmlFor=\"2hours\" className=\"text-sm\"\u003e2 hours before deadline\u003c/Label\u003e\n                      \u003c/div\u003e\n                      \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                        \u003cRadioGroupItem value=\"4hours\" id=\"4hours\" /\u003e\n                        \u003cLabel htmlFor=\"4hours\" className=\"text-sm\"\u003e4 hours before deadline\u003c/Label\u003e\n                      \u003c/div\u003e\n                      \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                        \u003cRadioGroupItem value=\"1day\" id=\"1day\" /\u003e\n                        \u003cLabel htmlFor=\"1day\" className=\"text-sm\"\u003e1 day before deadline\u003c/Label\u003e\n                      \u003c/div\u003e\n                      \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                        \u003cRadioGroupItem value=\"2days\" id=\"2days\" /\u003e\n                        \u003cLabel htmlFor=\"2days\" className=\"text-sm\"\u003e2 days before deadline\u003c/Label\u003e\n                      \u003c/div\u003e\n                      \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                        \u003cRadioGroupItem value=\"custom\" id=\"custom\" /\u003e\n                        \u003cLabel htmlFor=\"custom\" className=\"text-sm\"\u003eCustom time\u003c/Label\u003e\n                      \u003c/div\u003e\n                    \u003c/RadioGroup\u003e\n\n                    {reminderTiming === \"custom\" \u0026\u0026 (\n                      \u003cdiv className=\"space-y-2\"\u003e\n                        \u003cLabel htmlFor=\"custom_reminder_time\" className=\"text-sm\"\u003eCustom Reminder Time\u003c/Label\u003e\n                        \u003cInput\n                          id=\"custom_reminder_time\"\n                          type=\"datetime-local\"\n                          value={customReminderTime}\n                          onChange={(e) =\u003e setCustomReminderTime(e.target.value)}\n                        /\u003e\n                      \u003c/div\u003e\n                    )}\n\n                    \u003cp className=\"text-xs text-muted-foreground\"\u003e\n                      We'll send you an email at the specified time before your submission deadline.\n                    \u003c/p\u003e\n                  \u003c/div\u003e\n                )}\n              \u003c/div\u003e\n\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"audition_type\"\u003eAudition Type\u003c/Label\u003e\n                \u003cSelect value={formData.audition_type} onValueChange={(value) =\u003e handleChange(\"audition_type\", value)}\u003e\n                  \u003cSelectTrigger\u003e\n                    \u003cSelectValue /\u003e\n                  \u003c/SelectTrigger\u003e\n                  \u003cSelectContent\u003e\n                    \u003cSelectItem value=\"self-tape\"\u003eSelf-Tape\u003c/SelectItem\u003e\n                    \u003cSelectItem value=\"in-person\"\u003eIn-Person\u003c/SelectItem\u003e\n                    \u003cSelectItem value=\"callback\"\u003eCallback\u003c/SelectItem\u003e\n                    \u003cSelectItem value=\"chemistry-read\"\u003eChemistry Read\u003c/SelectItem\u003e\n                  \u003c/SelectContent\u003e\n                \u003c/Select\u003e\n              \u003c/div\u003e\n\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"status\"\u003eStatus\u003c/Label\u003e\n                \u003cSelect value={formData.status} onValueChange={(value) =\u003e handleChange(\"status\", value)}\u003e\n                  \u003cSelectTrigger\u003e\n                    \u003cSelectValue /\u003e\n                  \u003c/SelectTrigger\u003e\n                  \u003cSelectContent\u003e\n                    \u003cSelectItem value=\"preparation\"\u003ePreparation\u003c/SelectItem\u003e\n                    \u003cSelectItem value=\"submitted\"\u003eSubmitted\u003c/SelectItem\u003e\n                    \u003cSelectItem value=\"callback\"\u003eCallback\u003c/SelectItem\u003e\n                    \u003cSelectItem value=\"booked\"\u003eBooked\u003c/SelectItem\u003e\n                    \u003cSelectItem value=\"rejected\"\u003eRejected\u003c/SelectItem\u003e\n                    \u003cSelectItem value=\"expired\"\u003eExpired\u003c/SelectItem\u003e\n                  \u003c/SelectContent\u003e\n                \u003c/Select\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv className=\"space-y-4\"\u003e\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"contact_email\"\u003eContact Email\u003c/Label\u003e\n                \u003cInput\n                  id=\"contact_email\"\n                  type=\"email\"\n                  value={formData.contact_email}\n                  onChange={(e) =\u003e handleChange(\"contact_email\", e.target.value)}\n                  placeholder=\"contact@example.com\"\n                /\u003e\n              \u003c/div\u003e\n\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"contact_phone\"\u003eContact Phone\u003c/Label\u003e\n                \u003cInput\n                  id=\"contact_phone\"\n                  type=\"tel\"\n                  value={formData.contact_phone}\n                  onChange={(e) =\u003e handleChange(\"contact_phone\", e.target.value)}\n                  placeholder=\"(555) 123-4567\"\n                /\u003e\n              \u003c/div\u003e\n\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"contact_website\"\u003eContact Website\u003c/Label\u003e\n                \u003cInput\n                  id=\"contact_website\"\n                  type=\"url\"\n                  value={formData.contact_website}\n                  onChange={(e) =\u003e handleChange(\"contact_website\", e.target.value)}\n                  placeholder=\"https://example.com\"\n                /\u003e\n              \u003c/div\u003e\n\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"actor_email\"\u003eActor Email (for manual send)\u003c/Label\u003e\n                \u003cInput\n                  id=\"actor_email\"\n                  type=\"email\"\n                  value={formData.actor_email || \"\"}\n                  onChange={(e) =\u003e handleChange(\"actor_email\", e.target.value)}\n                  placeholder=\"actor@example.com\"\n                /\u003e\n                \u003cp className=\"text-sm text-muted-foreground mt-1\"\u003eUse Send Test to email yourself, or Send Email to notify the actor.\u003c/p\u003e\n                \u003cdiv className=\"flex gap-2 mt-2\"\u003e\n                  \u003cButton type=\"button\" variant=\"secondary\" onClick={sendTestEmail} disabled={sendingTest}\u003e\n                    {sendingTest ? 'Sending…' : 'Send Test'}\n                  \u003c/Button\u003e\n                  \u003cButton type=\"button\" onClick={sendManualEmail} disabled={sendingEmail}\u003e\n                    {sendingEmail ? 'Sending…' : 'Send Email'}\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"casting_director_preferences\"\u003eCasting Director Preferences\u003c/Label\u003e\n                \u003cTextarea\n                  id=\"casting_director_preferences\"\n                  value={formData.casting_director_preferences}\n                  onChange={(e) =\u003e handleChange(\"casting_director_preferences\", e.target.value)}\n                  placeholder=\"What does this casting director like and dislike? Acting styles, character types, etc.\"\n                  rows={3}\n                /\u003e\n              \u003c/div\u003e\n\n              \u003cdiv\u003e\n                \u003cLabel htmlFor=\"casting_director_current_projects\"\u003eCurrent Projects\u003c/Label\u003e\n                \u003cTextarea\n                  id=\"casting_director_current_projects\"\n                  value={formData.casting_director_current_projects}\n                  onChange={(e) =\u003e handleChange(\"casting_director_current_projects\", e.target.value)}\n                  placeholder=\"What is this casting director currently working on? Shows, films, etc.\"\n                  rows={3}\n                /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          \u003cdiv\u003e\n            \u003cLabel htmlFor=\"notes\"\u003eNotes\u003c/Label\u003e\n            \u003cTextarea\n              id=\"notes\"\n              value={formData.notes}\n              onChange={(e) =\u003e handleChange(\"notes\", e.target.value)}\n              placeholder=\"Additional notes about this audition...\"\n              rows={3}\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"flex justify-end space-x-2 pt-4 border-t\"\u003e\n            \u003cButton type=\"button\" variant=\"outline\" onClick={onClose}\u003e\n              Cancel\n            \u003c/Button\u003e\n            \u003cButton type=\"submit\"\u003eUpdate Audition\u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n      \u003c/DialogContent\u003e\n    \u003c/Dialog\u003e\n  );\n};\n\nexport default EditAuditionDialog;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/dashboard/ScriptsList.tsx",
//   "contents": "\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { FileText, Calendar, Users, ArrowRight, Trash2 } from \"lucide-react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport AdminScriptsManager from \"@/components/admin/AdminScriptsManager\";\n\ninterface Script {\n  id: string;\n  title: string;\n  content: string;\n  characters: string[];\n  genre: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nconst ScriptsList = () =\u003e {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [deletingScriptId, setDeletingScriptId] = useState\u003cstring | null\u003e(null);\n\n  const { data: scripts = [], isLoading } = useQuery({\n    queryKey: ['scripts', user?.id],\n    queryFn: async () =\u003e {\n      if (!user) return [];\n      \n      const { data, error } = await supabase\n        .from('scripts')\n        .select(`\n          *,\n          script_analyses!inner(id, created_at)\n        `)\n        .eq('user_id', user.id)\n        .order('updated_at', { ascending: false });\n\n      if (error) throw error;\n      return data as (Script \u0026 { script_analyses: Array\u003c{ id: string; created_at: string }\u003e })[];\n    },\n    enabled: !!user,\n  });\n\n  const { data: isAdmin } = useQuery({\n    queryKey: ['is-admin', user?.id],\n    queryFn: async () =\u003e {\n      if (!user) return false;\n      const { data, error } = await supabase\n        .from('user_roles')\n        .select('role')\n        .eq('user_id', user.id);\n      if (error) return false;\n      return (data || []).some((r: { role: string }) =\u003e r.role === 'admin');\n    },\n    enabled: !!user,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (scriptId: string) =\u003e {\n      const { error } = await supabase\n        .from('scripts')\n        .delete()\n        .eq('id', scriptId);\n      \n      if (error) throw error;\n    },\n    onSuccess: () =\u003e {\n      queryClient.invalidateQueries({ queryKey: ['scripts', user?.id] });\n      toast({\n        title: \"Script deleted\",\n        description: \"Script has been successfully deleted.\",\n      });\n    },\n    onError: (error) =\u003e {\n      console.error('Error deleting script:', error);\n      toast({\n        title: \"Error deleting script\",\n        description: \"Failed to delete script. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () =\u003e {\n      setDeletingScriptId(null);\n    },\n  });\n\n  const handleAnalyzeScript = (scriptId: string) =\u003e {\n    navigate(`/analysis/${scriptId}`);\n  };\n\n  const handleDeleteScript = (scriptId: string) =\u003e {\n    setDeletingScriptId(scriptId);\n    deleteMutation.mutate(scriptId);\n  };\n\n  const formatDate = (dateString: string) =\u003e {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      \u003cdiv className=\"space-y-4\"\u003e\n        {/* Admin section (only visible for admins) */}\n        \u003cAdminScriptsManager /\u003e\n        {[...Array(3)].map((_, i) =\u003e (\n          \u003cCard key={i} className=\"bg-gray-900/50 border-gray-700 animate-pulse\"\u003e\n            \u003cCardContent className=\"p-6\"\u003e\n              \u003cdiv className=\"h-4 bg-gray-700 rounded w-1/3 mb-2\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"h-3 bg-gray-700 rounded w-1/2\"\u003e\u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        ))}\n      \u003c/div\u003e\n    );\n  }\n\n  if (scripts.length === 0) {\n    return (\n      \u003cdiv className=\"space-y-4\"\u003e\n        {/* Admin section (only visible for admins) */}\n        \u003cAdminScriptsManager /\u003e\n        \u003cCard className=\"bg-gray-900/50 border-gray-700\"\u003e\n          \u003cCardContent className=\"p-12 text-center\"\u003e\n            \u003cFileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" /\u003e\n            \u003ch3 className=\"text-xl font-semibold text-white mb-2\"\u003eNo scripts yet\u003c/h3\u003e\n            \u003cp className=\"text-gray-400 mb-6\"\u003eUpload your first script to get started with analysis and coaching.\u003c/p\u003e\n            \u003cButton \n              onClick={() =\u003e navigate('/analysis')}\n              className=\"bg-purple-600 hover:bg-purple-700\"\n            \u003e\n              \u003cFileText className=\"w-4 h-4 mr-2\" /\u003e\n              Upload Script\n            \u003c/Button\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  return (\n    \u003cdiv className=\"space-y-4\"\u003e\n      {/* Admin section (only visible for admins) */}\n      \u003cAdminScriptsManager /\u003e\n\n      \u003cdiv className=\"flex justify-between items-center\"\u003e\n        \u003cdiv\u003e\n          \u003ch2 className=\"text-2xl font-bold text-white\"\u003eYour Scripts\u003c/h2\u003e\n          \u003cp className=\"text-gray-400\"\u003eContinue working on your uploaded scripts\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv className=\"flex items-center gap-2\"\u003e\n          {isAdmin \u0026\u0026 (\n            \u003cButton variant=\"outline\" asChild className=\"border-gray-600 text-gray-200 hover:bg-gray-800/50\"\u003e\n              \u003cLink to=\"/admin/scripts\"\u003eAdmin Scripts\u003c/Link\u003e\n            \u003c/Button\u003e\n          )}\n          \u003cButton \n            onClick={() =\u003e navigate('/analysis')}\n            className=\"bg-purple-600 hover:bg-purple-700\"\n          \u003e\n            \u003cFileText className=\"w-4 h-4 mr-2\" /\u003e\n            Upload New Script\n          \u003c/Button\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      \u003cdiv className=\"grid gap-4\"\u003e\n        {scripts.map((script) =\u003e {\n          const hasAnalysis = script.script_analyses \u0026\u0026 script.script_analyses.length \u003e 0;\n          const buttonText = hasAnalysis ? \"Continue Work\" : \"Start Analysis\";\n          \n          return (\n            \u003cCard key={script.id} className=\"bg-gray-900/50 border-gray-700 hover:bg-gray-800/50 transition-colors\"\u003e\n              \u003cCardHeader\u003e\n                \u003cdiv className=\"flex justify-between items-start\"\u003e\n                  \u003cdiv className=\"flex-1\"\u003e\n                    \u003cCardTitle className=\"text-white flex items-center gap-2\"\u003e\n                      \u003cFileText className=\"w-5 h-5\" /\u003e\n                      {script.title}\n                      {hasAnalysis \u0026\u0026 (\n                        \u003cBadge variant=\"secondary\" className=\"bg-green-900/30 text-green-300 border-green-700 ml-2\"\u003e\n                          Analyzed\n                        \u003c/Badge\u003e\n                      )}\n                    \u003c/CardTitle\u003e\n                    \u003cCardDescription className=\"text-gray-400 mt-2\"\u003e\n                      {script.content.length \u003e 150 \n                        ? `${script.content.substring(0, 150)}...` \n                        : script.content}\n                    \u003c/CardDescription\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"flex items-center gap-2 ml-4\"\u003e\n                    \u003cAlertDialog\u003e\n                      \u003cAlertDialogTrigger asChild\u003e\n                        \u003cButton\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"border-red-600 text-red-400 hover:bg-red-600 hover:text-white\"\n                          disabled={deletingScriptId === script.id}\n                        \u003e\n                          \u003cTrash2 className=\"w-4 h-4\" /\u003e\n                        \u003c/Button\u003e\n                      \u003c/AlertDialogTrigger\u003e\n                      \u003cAlertDialogContent\u003e\n                        \u003cAlertDialogHeader\u003e\n                          \u003cAlertDialogTitle\u003eDelete Script\u003c/AlertDialogTitle\u003e\n                          \u003cAlertDialogDescription\u003e\n                            Are you sure you want to delete \"{script.title}\"? This action cannot be undone and will also delete any related script analyses.\n                          \u003c/AlertDialogDescription\u003e\n                        \u003c/AlertDialogHeader\u003e\n                        \u003cAlertDialogFooter\u003e\n                          \u003cAlertDialogCancel\u003eCancel\u003c/AlertDialogCancel\u003e\n                          \u003cAlertDialogAction\n                            onClick={() =\u003e handleDeleteScript(script.id)}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                          \u003e\n                            Delete Script\n                          \u003c/AlertDialogAction\u003e\n                        \u003c/AlertDialogFooter\u003e\n                      \u003c/AlertDialogContent\u003e\n                    \u003c/AlertDialog\u003e\n                    \u003cButton\n                      onClick={() =\u003e handleAnalyzeScript(script.id)}\n                      size=\"sm\"\n                      className=\"bg-purple-600 hover:bg-purple-700 font-medium px-4 py-2 transition-all duration-200 hover:scale-105 shadow-lg hover:shadow-xl\"\n                    \u003e\n                      {buttonText}\n                      \u003cArrowRight className=\"w-4 h-4 ml-1\" /\u003e\n                    \u003c/Button\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent\u003e\n                \u003cdiv className=\"flex flex-wrap gap-2 mb-4\"\u003e\n                  {script.genre \u0026\u0026 (\n                    \u003cBadge variant=\"secondary\" className=\"bg-blue-900/30 text-blue-300 border-blue-700\"\u003e\n                      {script.genre}\n                    \u003c/Badge\u003e\n                  )}\n                  {script.characters \u0026\u0026 script.characters.length \u003e 0 \u0026\u0026 (\n                    \u003cBadge variant=\"secondary\" className=\"bg-green-900/30 text-green-300 border-green-700\"\u003e\n                      \u003cUsers className=\"w-3 h-3 mr-1\" /\u003e\n                      {script.characters.length} character{script.characters.length !== 1 ? 's' : ''}\n                    \u003c/Badge\u003e\n                  )}\n                  \u003cBadge variant=\"outline\" className=\"text-gray-300 border-gray-600\"\u003e\n                    \u003cCalendar className=\"w-3 h-3 mr-1\" /\u003e\n                    {formatDate(script.updated_at)}\n                  \u003c/Badge\u003e\n                \u003c/div\u003e\n\n                {script.characters \u0026\u0026 script.characters.length \u003e 0 \u0026\u0026 (\n                  \u003cdiv\u003e\n                    \u003cp className=\"text-sm text-gray-400 mb-2\"\u003eCharacters:\u003c/p\u003e\n                    \u003cdiv className=\"flex flex-wrap gap-1\"\u003e\n                      {script.characters.slice(0, 5).map((character, index) =\u003e (\n                        \u003cBadge key={index} variant=\"outline\" className=\"text-xs text-gray-300 border-gray-600\"\u003e\n                          {character}\n                        \u003c/Badge\u003e\n                      ))}\n                      {script.characters.length \u003e 5 \u0026\u0026 (\n                        \u003cBadge variant=\"outline\" className=\"text-xs text-gray-400 border-gray-600\"\u003e\n                          +{script.characters.length - 5} more\n                        \u003c/Badge\u003e\n                      )}\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                )}\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          );\n        })}\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default ScriptsList;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/profile/DocumentTile.tsx",
//   "contents": "import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Download, FileText } from \"lucide-react\";\n\ninterface DocumentTileProps {\n  href: string;\n  label?: string;\n}\n\nexport function DocumentTile({ href, label = \"Resume\" }: DocumentTileProps) {\n  if (!href) return null;\n  return (\n    \u003ca href={href} target=\"_blank\" rel=\"noopener noreferrer\" download\u003e\n      \u003cCard className=\"hover:shadow-lg transition-shadow\"\u003e\n        \u003cCardContent className=\"p-4 flex items-center gap-3\"\u003e\n          \u003cdiv className=\"w-10 h-10 rounded-md bg-secondary text-secondary-foreground flex items-center justify-center\"\u003e\n            \u003cFileText className=\"w-5 h-5\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"flex-1\"\u003e\n            \u003cp className=\"text-sm font-medium\"\u003e{label}\u003c/p\u003e\n            \u003cp className=\"text-xs text-muted-foreground\"\u003ePDF Document\u003c/p\u003e\n          \u003c/div\u003e\n          \u003cDownload className=\"w-4 h-4 text-muted-foreground\" /\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n    \u003c/a\u003e\n  );\n}\n\nexport default DocumentTile;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/profile/InfoList.tsx",
//   "contents": "import React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport type InfoItem = {\n  label: string;\n  value?: React.ReactNode;\n  href?: string;\n};\n\ninterface InfoListProps extends React.HTMLAttributes\u003cHTMLDListElement\u003e {\n  items: InfoItem[];\n}\n\nexport function InfoList({ className, items, ...props }: InfoListProps) {\n  if (!items.length) return null;\n  return (\n    \u003cdl className={cn(\"space-y-2\", className)} {...props}\u003e\n      {items.map((item, idx) =\u003e {\n        if (!item.value) return null;\n        const content = item.href ? (\n          \u003ca\n            href={item.href}\n            target={item.href.startsWith(\"http\") ? \"_blank\" : undefined}\n            rel={item.href.startsWith(\"http\") ? \"noopener noreferrer\" : undefined}\n            className=\"text-primary hover:underline break-all\"\n          \u003e\n            {item.value}\n          \u003c/a\u003e\n        ) : (\n          \u003cspan className=\"text-foreground\"\u003e{item.value}\u003c/span\u003e\n        );\n        return (\n          \u003cdiv key={idx} className=\"grid grid-cols-3 gap-3\"\u003e\n            \u003cdt className=\"col-span-1 text-sm text-muted-foreground\"\u003e{item.label}\u003c/dt\u003e\n            \u003cdd className=\"col-span-2 text-sm\"\u003e{content}\u003c/dd\u003e\n          \u003c/div\u003e\n        );\n      })}\n    \u003c/dl\u003e\n  );\n}\n\nexport default InfoList;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/profile/Pill.tsx",
//   "contents": "import React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PillProps extends React.HTMLAttributes\u003cHTMLSpanElement\u003e {\n  children: React.ReactNode;\n}\n\nexport function Pill({ className, children, ...props }: PillProps) {\n  return (\n    \u003cspan\n      className={cn(\n        \"inline-flex items-center rounded-full border border-border bg-secondary text-secondary-foreground\",\n        \"px-3 py-1 text-sm\",\n        className\n      )}\n      {...props}\n    \u003e\n      {children}\n    \u003c/span\u003e\n  );\n}\n\nexport default Pill;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/profile/SectionHeading.tsx",
//   "contents": "import React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SectionHeadingProps extends React.HTMLAttributes\u003cHTMLHeadingElement\u003e {\n  children: React.ReactNode;\n}\n\nexport function SectionHeading({ className, children, ...props }: SectionHeadingProps) {\n  return (\n    \u003ch2\n      className={cn(\n        \"text-xl font-semibold tracking-tight text-foreground flex items-center gap-3\",\n        \"border-b-2 border-border pb-2\",\n        className\n      )}\n      {...props}\n    \u003e\n      \u003cspan className=\"inline-block w-2 h-6 rounded-sm bg-[hsl(var(--brand-yellow))]\" aria-hidden=\"true\" /\u003e\n      {children}\n    \u003c/h2\u003e\n  );\n}\n\nexport default SectionHeading;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/profile/VideoCard.tsx",
//   "contents": "import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface VideoCardProps {\n  url: string;\n  title?: string | null;\n}\n\nexport function VideoCard({ url, title }: VideoCardProps) {\n  if (!url) return null;\n  return (\n    \u003cCard className=\"overflow-hidden\"\u003e\n      {title ? (\n        \u003cdiv className=\"px-4 pt-4\"\u003e\n          \u003ch3 className=\"text-base font-medium\"\u003e{title}\u003c/h3\u003e\n        \u003c/div\u003e\n      ) : null}\n      \u003cCardContent className=\"pt-4\"\u003e\n        \u003cdiv className=\"aspect-video bg-black rounded-md overflow-hidden\"\u003e\n          \u003cvideo controls className=\"w-full h-full\"\u003e\n            \u003csource src={url} type=\"video/mp4\" /\u003e\n            Your browser does not support the video tag.\n          \u003c/video\u003e\n        \u003c/div\u003e\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n}\n\nexport default VideoCard;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/AdvancedTeleprompter.tsx",
//   "contents": "import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Users, ChevronUp, ChevronDown } from 'lucide-react';\nimport TopBarControls from './TopBarControls';\nimport SettingsPanel, { TeleprompterSettings } from './SettingsPanel';\nimport { parseScript } from '@/utils/scriptParser';\nimport '../SmoothScrollStyles.css';\n\ninterface Script {\n  id: string;\n  title: string;\n  content: string;\n  characters?: string[];\n}\n\ninterface AdvancedTeleprompterProps {\n  script: Script;\n  onBack: () =\u003e void;\n}\n\nconst defaultSettings: TeleprompterSettings = {\n  fontSize: 48,\n  lineHeight: 1.6,\n  marginTop: 25,\n  marginBottom: 25,\n  backgroundColor: 'hsl(var(--teleprompter-black))',\n  textColor: 'hsl(var(--teleprompter-text-white))',\n  mirrorMode: false,\n  countdownTime: 5,\n};\n\nconst AdvancedTeleprompter: React.FC\u003cAdvancedTeleprompterProps\u003e = ({\n  script,\n  onBack\n}) =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState(1.0);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [settings, setSettings] = useState\u003cTeleprompterSettings\u003e(defaultSettings);\n  const [isCountingDown, setIsCountingDown] = useState(false);\n  const [countdownValue, setCountdownValue] = useState(0);\n\n  // Advanced mode specific state\n  const [selectedActor, setSelectedActor] = useState\u003cstring\u003e('none');\n  const [hideActorLines, setHideActorLines] = useState(false);\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n  const [autoAdvance, setAutoAdvance] = useState(true);\n  const [highlightColor, setHighlightColor] = useState('#ffff00');\n\n  const scrollContainerRef = useRef\u003cHTMLDivElement\u003e(null);\n  const animationIdRef = useRef\u003cnumber\u003e(0);\n  const lastTimeRef = useRef\u003cnumber\u003e(0);\n  const lineRefs = useRef\u003c{ [key: number]: HTMLDivElement | null }\u003e({});\n\n  // Parse script into dialogue lines\n  const parsedScript = parseScript(script.content);\n  const dialogues = parsedScript.dialogues;\n  const characters = parsedScript.characters;\n\n  // Load settings from localStorage\n  useEffect(() =\u003e {\n    const saved = localStorage.getItem('teleprompter-advanced-settings');\n    if (saved) {\n      try {\n        const parsedSettings = JSON.parse(saved);\n        setSettings({ ...defaultSettings, ...parsedSettings });\n      } catch (error) {\n        console.error('Failed to parse saved settings:', error);\n      }\n    }\n\n    // Load advanced-specific settings\n    const actorSaved = localStorage.getItem('teleprompter-selected-actor');\n    if (actorSaved) setSelectedActor(actorSaved);\n    \n    const hideLinesSaved = localStorage.getItem('teleprompter-hide-actor-lines');\n    if (hideLinesSaved) setHideActorLines(JSON.parse(hideLinesSaved));\n  }, []);\n\n  // Save settings\n  const handleSettingsChange = (newSettings: Partial\u003cTeleprompterSettings\u003e) =\u003e {\n    const updatedSettings = { ...settings, ...newSettings };\n    setSettings(updatedSettings);\n    localStorage.setItem('teleprompter-advanced-settings', JSON.stringify(updatedSettings));\n  };\n\n  const handleActorChange = (actor: string) =\u003e {\n    setSelectedActor(actor);\n    localStorage.setItem('teleprompter-selected-actor', actor);\n    setCurrentLineIndex(0); // Reset to first line when actor changes\n  };\n\n  const handleHideActorLinesChange = (hide: boolean) =\u003e {\n    setHideActorLines(hide);\n    localStorage.setItem('teleprompter-hide-actor-lines', JSON.stringify(hide));\n  };\n\n  const resetSettings = () =\u003e {\n    setSettings(defaultSettings);\n    localStorage.removeItem('teleprompter-advanced-settings');\n  };\n\n  // Get filtered dialogues based on settings\n  const getFilteredDialogues = () =\u003e {\n    if (!hideActorLines || selectedActor === 'none') {\n      return dialogues;\n    }\n    return dialogues.filter(dialogue =\u003e dialogue.character !== selectedActor);\n  };\n\n  const filteredDialogues = getFilteredDialogues();\n\n  // Auto-scroll to current line\n  const scrollToCurrentLine = useCallback(() =\u003e {\n    if (!autoAdvance || !scrollContainerRef.current) return;\n\n    const currentLineRef = lineRefs.current[currentLineIndex];\n    if (currentLineRef) {\n      const container = scrollContainerRef.current;\n      const lineRect = currentLineRef.getBoundingClientRect();\n      const containerRect = container.getBoundingClientRect();\n      \n      // Scroll to center the current line\n      const targetScroll = container.scrollTop + lineRect.top - containerRect.top - containerRect.height / 2;\n      container.scrollTo({ top: targetScroll, behavior: 'smooth' });\n    }\n  }, [currentLineIndex, autoAdvance]);\n\n  // Auto-advance logic\n  const autoAdvanceLines = useCallback((currentTime: number) =\u003e {\n    if (!lastTimeRef.current) {\n      lastTimeRef.current = currentTime;\n    }\n\n    const deltaTime = currentTime - lastTimeRef.current;\n    const advanceInterval = 3000 / speed; // 3 seconds per line, adjusted by speed\n\n    if (deltaTime \u003e= advanceInterval) {\n      setCurrentLineIndex((prevIndex) =\u003e {\n        const nextIndex = prevIndex + 1;\n        if (nextIndex \u003e= filteredDialogues.length) {\n          setIsPlaying(false); // Stop at end\n          return prevIndex;\n        }\n        return nextIndex;\n      });\n      lastTimeRef.current = currentTime;\n    }\n\n    animationIdRef.current = requestAnimationFrame(autoAdvanceLines);\n  }, [speed, filteredDialogues.length]);\n\n  // Manual navigation\n  const goToPreviousLine = () =\u003e {\n    setCurrentLineIndex((prev) =\u003e Math.max(0, prev - 1));\n  };\n\n  const goToNextLine = () =\u003e {\n    setCurrentLineIndex((prev) =\u003e Math.min(filteredDialogues.length - 1, prev + 1));\n  };\n\n  // Start countdown\n  const startCountdown = useCallback(() =\u003e {\n    if (settings.countdownTime === 0) {\n      setIsPlaying(true);\n      return;\n    }\n\n    setIsCountingDown(true);\n    setCountdownValue(settings.countdownTime);\n\n    const countdownInterval = setInterval(() =\u003e {\n      setCountdownValue((prev) =\u003e {\n        if (prev \u003c= 1) {\n          clearInterval(countdownInterval);\n          setIsCountingDown(false);\n          setIsPlaying(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  }, [settings.countdownTime]);\n\n  // Control functions\n  const handlePlayPause = () =\u003e {\n    if (isCountingDown) return;\n\n    if (!isPlaying) {\n      startCountdown();\n    } else {\n      setIsPlaying(false);\n      setIsCountingDown(false);\n      setCountdownValue(0);\n    }\n  };\n\n  const handleStop = () =\u003e {\n    setIsPlaying(false);\n    setIsCountingDown(false);\n    setCountdownValue(0);\n    setCurrentLineIndex(0);\n    lastTimeRef.current = 0;\n  };\n\n  const toggleFullscreen = () =\u003e {\n    if (!isFullscreen) {\n      document.documentElement.requestFullscreen?.();\n    } else {\n      document.exitFullscreen?.();\n    }\n  };\n\n  // Effects\n  useEffect(() =\u003e {\n    const handleFullscreenChange = () =\u003e {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () =\u003e {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n\n  // Animation loop for auto-advance\n  useEffect(() =\u003e {\n    if (isPlaying \u0026\u0026 autoAdvance) {\n      lastTimeRef.current = 0;\n      animationIdRef.current = requestAnimationFrame(autoAdvanceLines);\n    } else {\n      cancelAnimationFrame(animationIdRef.current);\n    }\n\n    return () =\u003e {\n      cancelAnimationFrame(animationIdRef.current);\n    };\n  }, [isPlaying, autoAdvance, autoAdvanceLines]);\n\n  // Scroll to current line when it changes\n  useEffect(() =\u003e {\n    if (isPlaying) {\n      scrollToCurrentLine();\n    }\n  }, [currentLineIndex, scrollToCurrentLine, isPlaying]);\n\n  // Keyboard shortcuts\n  useEffect(() =\u003e {\n    const handleKeyPress = (event: KeyboardEvent) =\u003e {\n      switch (event.code) {\n        case 'Space':\n          event.preventDefault();\n          handlePlayPause();\n          break;\n        case 'KeyN':\n          event.preventDefault();\n          goToNextLine();\n          break;\n        case 'KeyP':\n          event.preventDefault();\n          goToPreviousLine();\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          setSpeed((prev) =\u003e Math.min(3, prev + 0.1));\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          setSpeed((prev) =\u003e Math.max(0.5, prev - 0.1));\n          break;\n        case 'Equal':\n        case 'NumpadAdd':\n          event.preventDefault();\n          handleSettingsChange({ fontSize: Math.min(120, settings.fontSize + 2) });\n          break;\n        case 'Minus':\n        case 'NumpadSubtract':\n          event.preventDefault();\n          handleSettingsChange({ fontSize: Math.max(16, settings.fontSize - 2) });\n          break;\n        case 'KeyF':\n          if (event.ctrlKey || event.metaKey) return;\n          event.preventDefault();\n          toggleFullscreen();\n          break;\n        case 'Escape':\n          if (isFullscreen) {\n            document.exitFullscreen?.();\n          }\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    return () =\u003e {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [isPlaying, isCountingDown, isFullscreen, settings.fontSize]);\n\n  // Format dialogue lines\n  const formatDialogueLines = () =\u003e {\n    return filteredDialogues.map((dialogue, index) =\u003e {\n      const isCurrent = index === currentLineIndex;\n      const isActor = selectedActor !== 'none' \u0026\u0026 dialogue.character === selectedActor;\n      \n      return (\n        \u003cdiv\n          key={index}\n          ref={(el) =\u003e { lineRefs.current[index] = el; }}\n          className={`dialogue-line mb-6 px-4 transition-all duration-300 ${\n            isCurrent ? 'current' : index \u003c currentLineIndex ? 'past' : 'upcoming'\n          }`}\n          style={{\n            fontSize: `${settings.fontSize}px`,\n            lineHeight: settings.lineHeight,\n            color: isCurrent ? highlightColor : settings.textColor,\n            backgroundColor: isCurrent ? 'rgba(255, 255, 255, 0.1)' : 'transparent',\n            padding: isCurrent ? '12px' : '8px',\n            borderRadius: '8px',\n            transform: isCurrent ? 'scale(1.02)' : 'scale(1)',\n            opacity: isActor ? 0.6 : 1,\n          }}\n        \u003e\n          \u003cdiv className=\"font-bold mb-2 text-primary\"\u003e\n            {dialogue.character}:\n          \u003c/div\u003e\n          \u003cdiv\u003e\n            {dialogue.text}\n          \u003c/div\u003e\n        \u003c/div\u003e\n      );\n    });\n  };\n\n  return (\n    \u003cdiv className=\"h-screen flex flex-col\"\u003e\n      {/* Top Controls */}\n      {!isFullscreen \u0026\u0026 (\n        \u003cTopBarControls\n          isPlaying={isPlaying}\n          speed={speed}\n          isFullscreen={isFullscreen}\n          isCountingDown={isCountingDown}\n          countdownValue={countdownValue}\n          showSettings={showSettings}\n          onPlayPause={handlePlayPause}\n          onStop={handleStop}\n          onSpeedChange={setSpeed}\n          onToggleFullscreen={toggleFullscreen}\n          onToggleSettings={() =\u003e setShowSettings(!showSettings)}\n          onBack={onBack}\n          title={`Advanced Mode - ${script.title}`}\n          status={`Line ${currentLineIndex + 1} of ${filteredDialogues.length} • Actor: ${selectedActor === 'none' ? 'All' : selectedActor}`}\n        /\u003e\n      )}\n\n      \u003cdiv className=\"flex-1 flex\"\u003e\n        {/* Settings Panel */}\n        {showSettings \u0026\u0026 !isFullscreen \u0026\u0026 (\n          \u003cdiv className=\"w-80 border-r border-border overflow-y-auto\"\u003e\n            \u003cSettingsPanel\n              settings={settings}\n              onSettingsChange={handleSettingsChange}\n              onResetSettings={resetSettings}\n            /\u003e\n            \n            {/* Advanced Settings */}\n            \u003cCard className=\"m-4 bg-card border-border\"\u003e\n              \u003cCardHeader\u003e\n                \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n                  \u003cUsers className=\"w-5 h-5\" /\u003e\n                  Character Settings\n                \u003c/CardTitle\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent className=\"space-y-4\"\u003e\n                \u003cdiv\u003e\n                  \u003clabel className=\"text-sm font-medium text-foreground mb-2 block\"\u003e\n                    Your Role\n                  \u003c/label\u003e\n                  \u003cSelect value={selectedActor} onValueChange={handleActorChange}\u003e\n                    \u003cSelectTrigger\u003e\n                      \u003cSelectValue /\u003e\n                    \u003c/SelectTrigger\u003e\n                    \u003cSelectContent\u003e\n                      \u003cSelectItem value=\"none\"\u003eAll Characters\u003c/SelectItem\u003e\n                      {characters.map((character) =\u003e (\n                        \u003cSelectItem key={character} value={character}\u003e\n                          {character}\n                        \u003c/SelectItem\u003e\n                      ))}\n                    \u003c/SelectContent\u003e\n                  \u003c/Select\u003e\n                \u003c/div\u003e\n\n                \u003cdiv className=\"flex items-center justify-between\"\u003e\n                  \u003clabel className=\"text-sm font-medium text-foreground\"\u003e\n                    Hide Your Lines\n                  \u003c/label\u003e\n                  \u003cSwitch\n                    checked={hideActorLines \u0026\u0026 selectedActor !== 'none'}\n                    onCheckedChange={handleHideActorLinesChange}\n                    disabled={selectedActor === 'none'}\n                  /\u003e\n                \u003c/div\u003e\n\n                \u003cdiv className=\"flex items-center justify-between\"\u003e\n                  \u003clabel className=\"text-sm font-medium text-foreground\"\u003e\n                    Auto Advance\n                  \u003c/label\u003e\n                  \u003cSwitch\n                    checked={autoAdvance}\n                    onCheckedChange={setAutoAdvance}\n                  /\u003e\n                \u003c/div\u003e\n\n                \u003cdiv\u003e\n                  \u003clabel className=\"text-sm font-medium text-foreground mb-2 block\"\u003e\n                    Highlight Color\n                  \u003c/label\u003e\n                  \u003cinput\n                    type=\"color\"\n                    value={highlightColor}\n                    onChange={(e) =\u003e setHighlightColor(e.target.value)}\n                    className=\"w-full h-8 rounded border border-border\"\n                  /\u003e\n                \u003c/div\u003e\n\n                \u003cdiv className=\"text-center pt-4 border-t border-border\"\u003e\n                  \u003cBadge variant=\"outline\" className=\"mb-2\"\u003e\n                    Line {currentLineIndex + 1} of {filteredDialogues.length}\n                  \u003c/Badge\u003e\n                  \u003cdiv className=\"flex gap-2\"\u003e\n                    \u003cButton\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={goToPreviousLine}\n                      disabled={currentLineIndex === 0}\n                    \u003e\n                      \u003cChevronUp className=\"w-4 h-4\" /\u003e\n                    \u003c/Button\u003e\n                    \u003cButton\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={goToNextLine}\n                      disabled={currentLineIndex \u003e= filteredDialogues.length - 1}\n                    \u003e\n                      \u003cChevronDown className=\"w-4 h-4\" /\u003e\n                    \u003c/Button\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          \u003c/div\u003e\n        )}\n\n        {/* Main Teleprompter Display */}\n        \u003cdiv \n          className=\"flex-1 relative overflow-hidden\"\n          style={{ \n            backgroundColor: settings.backgroundColor,\n            transform: settings.mirrorMode ? 'scaleX(-1)' : 'none',\n          }}\n        \u003e\n          {/* Countdown Overlay */}\n          {isCountingDown \u0026\u0026 (\n            \u003cdiv className=\"absolute inset-0 flex items-center justify-center z-20\"\u003e\n              \u003cdiv className=\"text-8xl font-bold text-white bg-black/70 rounded-full w-32 h-32 flex items-center justify-center animate-pulse\"\u003e\n                {countdownValue}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          )}\n\n          {/* Scroll Container */}\n          \u003cdiv\n            ref={scrollContainerRef}\n            className=\"h-full overflow-y-auto scrollbar-hide smooth-scroll-container\"\n            style={{\n              paddingTop: `${settings.marginTop}vh`,\n              paddingBottom: `${settings.marginBottom}vh`,\n            }}\n          \u003e\n            \u003cdiv className=\"min-h-full\"\u003e\n              {formatDialogueLines()}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      {/* Keyboard shortcuts help */}\n      {!isFullscreen \u0026\u0026 (\n        \u003cdiv className=\"bg-muted/50 border-t border-border px-4 py-2\"\u003e\n          \u003cp className=\"text-xs text-muted-foreground text-center\"\u003e\n            \u003ckbd className=\"bg-background border border-border px-1 rounded\"\u003eSpace\u003c/kbd\u003e Play/Pause • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003eN/P\u003c/kbd\u003e Next/Prev Line • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003e↑/↓\u003c/kbd\u003e Speed • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003e+/-\u003c/kbd\u003e Font Size • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003eF\u003c/kbd\u003e Fullscreen\n          \u003c/p\u003e\n        \u003c/div\u003e\n      )}\n    \u003c/div\u003e\n  );\n};\n\nexport default AdvancedTeleprompter;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/BasicTeleprompter.tsx",
//   "contents": "import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport TopBarControls from './TopBarControls';\nimport SettingsPanel, { TeleprompterSettings } from './SettingsPanel';\nimport '../SmoothScrollStyles.css';\n\ninterface Script {\n  id: string;\n  title: string;\n  content: string;\n}\n\ninterface BasicTeleprompterProps {\n  script: Script;\n  onBack: () =\u003e void;\n}\n\nconst defaultSettings: TeleprompterSettings = {\n  fontSize: 48,\n  lineHeight: 1.6,\n  marginTop: 25,\n  marginBottom: 25,\n  backgroundColor: 'hsl(var(--teleprompter-black))',\n  textColor: 'hsl(var(--teleprompter-text-white))',\n  mirrorMode: false,\n  countdownTime: 5,\n};\n\nconst BasicTeleprompter: React.FC\u003cBasicTeleprompterProps\u003e = ({\n  script,\n  onBack\n}) =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState(1.0);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [settings, setSettings] = useState\u003cTeleprompterSettings\u003e(defaultSettings);\n  const [isCountingDown, setIsCountingDown] = useState(false);\n  const [countdownValue, setCountdownValue] = useState(0);\n\n  const scrollContainerRef = useRef\u003cHTMLDivElement\u003e(null);\n  const animationIdRef = useRef\u003cnumber\u003e(0);\n  const lastTimeRef = useRef\u003cnumber\u003e(0);\n\n  // Load settings from localStorage\n  useEffect(() =\u003e {\n    const saved = localStorage.getItem('teleprompter-basic-settings');\n    if (saved) {\n      try {\n        const parsedSettings = JSON.parse(saved);\n        setSettings({ ...defaultSettings, ...parsedSettings });\n      } catch (error) {\n        console.error('Failed to parse saved settings:', error);\n      }\n    }\n  }, []);\n\n  // Save settings to localStorage\n  const handleSettingsChange = (newSettings: Partial\u003cTeleprompterSettings\u003e) =\u003e {\n    const updatedSettings = { ...settings, ...newSettings };\n    setSettings(updatedSettings);\n    localStorage.setItem('teleprompter-basic-settings', JSON.stringify(updatedSettings));\n  };\n\n  const resetSettings = () =\u003e {\n    setSettings(defaultSettings);\n    localStorage.removeItem('teleprompter-basic-settings');\n  };\n\n  // Smooth scrolling animation\n  const scroll = useCallback((currentTime: number) =\u003e {\n    if (!lastTimeRef.current) {\n      lastTimeRef.current = currentTime;\n    }\n\n    const deltaTime = currentTime - lastTimeRef.current;\n    const scrollAmount = (deltaTime * speed * 0.5); // Adjust multiplier for scroll speed\n\n    if (scrollContainerRef.current \u0026\u0026 isPlaying) {\n      scrollContainerRef.current.scrollTop += scrollAmount;\n    }\n\n    lastTimeRef.current = currentTime;\n    animationIdRef.current = requestAnimationFrame(scroll);\n  }, [speed, isPlaying]);\n\n  // Start countdown\n  const startCountdown = useCallback(() =\u003e {\n    if (settings.countdownTime === 0) {\n      setIsPlaying(true);\n      return;\n    }\n\n    setIsCountingDown(true);\n    setCountdownValue(settings.countdownTime);\n\n    const countdownInterval = setInterval(() =\u003e {\n      setCountdownValue((prev) =\u003e {\n        if (prev \u003c= 1) {\n          clearInterval(countdownInterval);\n          setIsCountingDown(false);\n          setIsPlaying(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  }, [settings.countdownTime]);\n\n  // Control functions\n  const handlePlayPause = () =\u003e {\n    if (isCountingDown) return;\n\n    if (!isPlaying) {\n      startCountdown();\n    } else {\n      setIsPlaying(false);\n      setIsCountingDown(false);\n      setCountdownValue(0);\n    }\n  };\n\n  const handleStop = () =\u003e {\n    setIsPlaying(false);\n    setIsCountingDown(false);\n    setCountdownValue(0);\n    if (scrollContainerRef.current) {\n      scrollContainerRef.current.scrollTop = 0;\n    }\n    lastTimeRef.current = 0;\n  };\n\n  const handleSpeedChange = (newSpeed: number) =\u003e {\n    setSpeed(newSpeed);\n  };\n\n  const toggleFullscreen = () =\u003e {\n    if (!isFullscreen) {\n      document.documentElement.requestFullscreen?.();\n    } else {\n      document.exitFullscreen?.();\n    }\n  };\n\n  // Fullscreen event listeners\n  useEffect(() =\u003e {\n    const handleFullscreenChange = () =\u003e {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () =\u003e {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n\n  // Animation loop\n  useEffect(() =\u003e {\n    if (isPlaying) {\n      lastTimeRef.current = 0;\n      animationIdRef.current = requestAnimationFrame(scroll);\n    } else {\n      cancelAnimationFrame(animationIdRef.current);\n    }\n\n    return () =\u003e {\n      cancelAnimationFrame(animationIdRef.current);\n    };\n  }, [isPlaying, scroll]);\n\n  // Keyboard shortcuts\n  useEffect(() =\u003e {\n    const handleKeyPress = (event: KeyboardEvent) =\u003e {\n      switch (event.code) {\n        case 'Space':\n          event.preventDefault();\n          handlePlayPause();\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          setSpeed((prev) =\u003e Math.min(3, prev + 0.1));\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          setSpeed((prev) =\u003e Math.max(0.5, prev - 0.1));\n          break;\n        case 'Equal':\n        case 'NumpadAdd':\n          event.preventDefault();\n          handleSettingsChange({ fontSize: Math.min(120, settings.fontSize + 2) });\n          break;\n        case 'Minus':\n        case 'NumpadSubtract':\n          event.preventDefault();\n          handleSettingsChange({ fontSize: Math.max(16, settings.fontSize - 2) });\n          break;\n        case 'KeyF':\n          if (event.ctrlKey || event.metaKey) return; // Allow Ctrl+F\n          event.preventDefault();\n          toggleFullscreen();\n          break;\n        case 'Escape':\n          if (isFullscreen) {\n            document.exitFullscreen?.();\n          }\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    return () =\u003e {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [isPlaying, isCountingDown, isFullscreen, settings.fontSize]);\n\n  // Format script content\n  const formatScriptLines = (content: string) =\u003e {\n    return content.split('\\n').map((line, index) =\u003e (\n      \u003cdiv\n        key={index}\n        className=\"dialogue-line mb-4 px-4\"\n        style={{\n          fontSize: `${settings.fontSize}px`,\n          lineHeight: settings.lineHeight,\n          color: settings.textColor,\n        }}\n      \u003e\n        {line || '\\u00A0'} {/* Non-breaking space for empty lines */}\n      \u003c/div\u003e\n    ));\n  };\n\n  return (\n    \u003cdiv className=\"h-screen flex flex-col\"\u003e\n      {/* Top Controls */}\n      {!isFullscreen \u0026\u0026 (\n        \u003cTopBarControls\n          isPlaying={isPlaying}\n          speed={speed}\n          isFullscreen={isFullscreen}\n          isCountingDown={isCountingDown}\n          countdownValue={countdownValue}\n          showSettings={showSettings}\n          onPlayPause={handlePlayPause}\n          onStop={handleStop}\n          onSpeedChange={handleSpeedChange}\n          onToggleFullscreen={toggleFullscreen}\n          onToggleSettings={() =\u003e setShowSettings(!showSettings)}\n          onBack={onBack}\n          title={`Basic Mode - ${script.title}`}\n          status={isPlaying ? `Playing at ${speed.toFixed(1)}x` : 'Paused'}\n        /\u003e\n      )}\n\n      \u003cdiv className=\"flex-1 flex\"\u003e\n        {/* Settings Panel */}\n        {showSettings \u0026\u0026 !isFullscreen \u0026\u0026 (\n          \u003cdiv className=\"w-80 border-r border-border\"\u003e\n            \u003cSettingsPanel\n              settings={settings}\n              onSettingsChange={handleSettingsChange}\n              onResetSettings={resetSettings}\n            /\u003e\n          \u003c/div\u003e\n        )}\n\n        {/* Main Teleprompter Display */}\n        \u003cdiv \n          className=\"flex-1 relative overflow-hidden\"\n          style={{ \n            backgroundColor: settings.backgroundColor,\n            transform: settings.mirrorMode ? 'scaleX(-1)' : 'none',\n          }}\n        \u003e\n          {/* Fullscreen controls overlay */}\n          {isFullscreen \u0026\u0026 (\n            \u003cdiv className=\"absolute top-4 left-4 right-4 z-10 flex justify-between items-center\"\u003e\n              \u003cdiv className=\"text-white bg-black/50 px-3 py-1 rounded\"\u003e\n                {script.title} - {speed.toFixed(1)}x\n              \u003c/div\u003e\n              \u003cdiv className=\"flex gap-2\"\u003e\n                \u003cButton\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handlePlayPause}\n                  className=\"bg-black/50 border-white/20 text-white\"\n                \u003e\n                  {isPlaying ? 'Pause' : 'Play'}\n                \u003c/Button\u003e\n                \u003cButton\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() =\u003e document.exitFullscreen?.()}\n                  className=\"bg-black/50 border-white/20 text-white\"\n                \u003e\n                  Exit Fullscreen\n                \u003c/Button\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          )}\n\n          {/* Countdown Overlay */}\n          {isCountingDown \u0026\u0026 (\n            \u003cdiv className=\"absolute inset-0 flex items-center justify-center z-20\"\u003e\n              \u003cdiv className=\"text-8xl font-bold text-white bg-black/70 rounded-full w-32 h-32 flex items-center justify-center animate-pulse\"\u003e\n                {countdownValue}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          )}\n\n          {/* Scroll Container */}\n          \u003cdiv\n            ref={scrollContainerRef}\n            className=\"h-full overflow-y-auto scrollbar-hide smooth-scroll-container\"\n            style={{\n              paddingTop: `${settings.marginTop}vh`,\n              paddingBottom: `${settings.marginBottom}vh`,\n            }}\n          \u003e\n            \u003cdiv className=\"min-h-full\"\u003e\n              {formatScriptLines(script.content)}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      {/* Keyboard shortcuts help */}\n      {!isFullscreen \u0026\u0026 (\n        \u003cdiv className=\"bg-muted/50 border-t border-border px-4 py-2\"\u003e\n          \u003cp className=\"text-xs text-muted-foreground text-center\"\u003e\n            \u003ckbd className=\"bg-background border border-border px-1 rounded\"\u003eSpace\u003c/kbd\u003e Play/Pause • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003e↑/↓\u003c/kbd\u003e Speed • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003e+/-\u003c/kbd\u003e Font Size • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003eF\u003c/kbd\u003e Fullscreen\n          \u003c/p\u003e\n        \u003c/div\u003e\n      )}\n    \u003c/div\u003e\n  );\n};\n\nexport default BasicTeleprompter;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/BottomSettingsPanel.tsx",
//   "contents": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Settings, Palette, Type, RotateCcw, ChevronUp, ChevronDown } from 'lucide-react';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\n\nexport interface TeleprompterSettings {\n  fontSize: number;\n  lineHeight: number;\n  marginTop: number;\n  marginBottom: number;\n  backgroundColor: string;\n  textColor: string;\n  mirrorMode: boolean;\n  countdownTime: number;\n}\n\ninterface BottomSettingsPanelProps {\n  settings: TeleprompterSettings;\n  onSettingsChange: (settings: Partial\u003cTeleprompterSettings\u003e) =\u003e void;\n  onResetSettings?: () =\u003e void;\n  isExpanded: boolean;\n  onToggle: () =\u003e void;\n  children?: React.ReactNode; // For mode-specific settings\n}\n\nconst colorPresets = [\n  { id: 'black-white', bg: 'hsl(var(--teleprompter-black))', text: 'hsl(var(--teleprompter-text-white))', label: 'Black \u0026 White' },\n  { id: 'white-black', bg: 'hsl(var(--teleprompter-white))', text: 'hsl(var(--teleprompter-text-black))', label: 'White \u0026 Black' },\n  { id: 'green-yellow', bg: 'hsl(var(--teleprompter-green))', text: 'hsl(var(--teleprompter-text-yellow))', label: 'Green \u0026 Yellow' },\n  { id: 'blue-white', bg: 'hsl(var(--teleprompter-blue))', text: 'hsl(var(--teleprompter-text-white))', label: 'Blue \u0026 White' },\n];\n\nconst BottomSettingsPanel: React.FC\u003cBottomSettingsPanelProps\u003e = ({\n  settings,\n  onSettingsChange,\n  onResetSettings,\n  isExpanded,\n  onToggle,\n  children\n}) =\u003e {\n  const handleColorPresetChange = (presetId: string) =\u003e {\n    const preset = colorPresets.find(p =\u003e p.id === presetId);\n    if (preset) {\n      onSettingsChange({\n        backgroundColor: preset.bg,\n        textColor: preset.text\n      });\n    }\n  };\n\n  const getCurrentPreset = () =\u003e {\n    return colorPresets.find(preset =\u003e \n      preset.bg === settings.backgroundColor \u0026\u0026 \n      preset.text === settings.textColor\n    )?.id || 'custom';\n  };\n\n  return (\n    \u003cdiv className=\"fixed bottom-0 left-0 right-0 z-50 bg-background border-t border-border\"\u003e\n      \u003cCollapsible open={isExpanded} onOpenChange={onToggle}\u003e\n        \u003cCollapsibleTrigger asChild\u003e\n          \u003cButton\n            variant=\"ghost\"\n            className=\"w-full h-12 rounded-none border-0 justify-center gap-2 hover:bg-accent\"\n          \u003e\n            \u003cSettings className=\"w-4 h-4\" /\u003e\n            Settings\n            {isExpanded ? \u003cChevronDown className=\"w-4 h-4\" /\u003e : \u003cChevronUp className=\"w-4 h-4\" /\u003e}\n          \u003c/Button\u003e\n        \u003c/CollapsibleTrigger\u003e\n        \n        \u003cCollapsibleContent\u003e\n          \u003cdiv className=\"max-h-96 overflow-y-auto bg-background\"\u003e\n            \u003cdiv className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 p-6\"\u003e\n              {/* Basic Settings */}\n              \u003cCard className=\"bg-card border-border\"\u003e\n                \u003cCardHeader className=\"pb-4\"\u003e\n                  \u003cCardTitle className=\"text-sm text-foreground flex items-center gap-2\"\u003e\n                    \u003cType className=\"w-4 h-4\" /\u003e\n                    Text \u0026 Layout\n                  \u003c/CardTitle\u003e\n                \u003c/CardHeader\u003e\n                \u003cCardContent className=\"space-y-4\"\u003e\n                  \u003cdiv\u003e\n                    \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n                      Font Size: {settings.fontSize}px\n                    \u003c/label\u003e\n                    \u003cSlider\n                      value={[settings.fontSize]}\n                      onValueChange={(value) =\u003e onSettingsChange({ fontSize: value[0] })}\n                      min={16}\n                      max={120}\n                      step={2}\n                      className=\"w-full\"\n                    /\u003e\n                  \u003c/div\u003e\n\n                  \u003cdiv\u003e\n                    \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n                      Line Height: {settings.lineHeight}\n                    \u003c/label\u003e\n                    \u003cSlider\n                      value={[settings.lineHeight]}\n                      onValueChange={(value) =\u003e onSettingsChange({ lineHeight: value[0] })}\n                      min={1}\n                      max={3}\n                      step={0.1}\n                      className=\"w-full\"\n                    /\u003e\n                  \u003c/div\u003e\n\n                  \u003cdiv className=\"grid grid-cols-2 gap-2\"\u003e\n                    \u003cdiv\u003e\n                      \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n                        Top: {settings.marginTop}%\n                      \u003c/label\u003e\n                      \u003cSlider\n                        value={[settings.marginTop]}\n                        onValueChange={(value) =\u003e onSettingsChange({ marginTop: value[0] })}\n                        min={0}\n                        max={40}\n                        step={5}\n                        className=\"w-full\"\n                      /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                      \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n                        Bottom: {settings.marginBottom}%\n                      \u003c/label\u003e\n                      \u003cSlider\n                        value={[settings.marginBottom]}\n                        onValueChange={(value) =\u003e onSettingsChange({ marginBottom: value[0] })}\n                        min={0}\n                        max={40}\n                        step={5}\n                        className=\"w-full\"\n                      /\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/CardContent\u003e\n              \u003c/Card\u003e\n\n              {/* Color Settings */}\n              \u003cCard className=\"bg-card border-border\"\u003e\n                \u003cCardHeader className=\"pb-4\"\u003e\n                  \u003cCardTitle className=\"text-sm text-foreground flex items-center gap-2\"\u003e\n                    \u003cPalette className=\"w-4 h-4\" /\u003e\n                    Colors \u0026 Options\n                  \u003c/CardTitle\u003e\n                \u003c/CardHeader\u003e\n                \u003cCardContent className=\"space-y-4\"\u003e\n                  \u003cdiv\u003e\n                    \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n                      Color Theme\n                    \u003c/label\u003e\n                    \u003cSelect value={getCurrentPreset()} onValueChange={handleColorPresetChange}\u003e\n                      \u003cSelectTrigger className=\"h-8\"\u003e\n                        \u003cSelectValue /\u003e\n                      \u003c/SelectTrigger\u003e\n                      \u003cSelectContent\u003e\n                        {colorPresets.map((preset) =\u003e (\n                          \u003cSelectItem key={preset.id} value={preset.id}\u003e\n                            \u003cdiv className=\"flex items-center gap-2\"\u003e\n                              \u003cdiv \n                                className=\"w-3 h-3 rounded border border-border\"\n                                style={{ backgroundColor: preset.bg }}\n                              /\u003e\n                              \u003cdiv \n                                className=\"w-3 h-3 rounded border border-border\"\n                                style={{ backgroundColor: preset.text }}\n                              /\u003e\n                              {preset.label}\n                            \u003c/div\u003e\n                          \u003c/SelectItem\u003e\n                        ))}\n                      \u003c/SelectContent\u003e\n                    \u003c/Select\u003e\n                  \u003c/div\u003e\n\n                  \u003cdiv className=\"flex items-center justify-between\"\u003e\n                    \u003clabel className=\"text-xs text-foreground\"\u003eMirror Mode\u003c/label\u003e\n                    \u003cSwitch\n                      checked={settings.mirrorMode}\n                      onCheckedChange={(checked) =\u003e onSettingsChange({ mirrorMode: checked })}\n                    /\u003e\n                  \u003c/div\u003e\n\n                  \u003cdiv\u003e\n                    \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n                      Countdown: {settings.countdownTime}s\n                    \u003c/label\u003e\n                    \u003cSelect \n                      value={settings.countdownTime.toString()} \n                      onValueChange={(value) =\u003e onSettingsChange({ countdownTime: parseInt(value) })}\n                    \u003e\n                      \u003cSelectTrigger className=\"h-8\"\u003e\n                        \u003cSelectValue /\u003e\n                      \u003c/SelectTrigger\u003e\n                      \u003cSelectContent\u003e\n                        \u003cSelectItem value=\"0\"\u003eNo Countdown\u003c/SelectItem\u003e\n                        \u003cSelectItem value=\"3\"\u003e3 seconds\u003c/SelectItem\u003e\n                        \u003cSelectItem value=\"5\"\u003e5 seconds\u003c/SelectItem\u003e\n                        \u003cSelectItem value=\"10\"\u003e10 seconds\u003c/SelectItem\u003e\n                      \u003c/SelectContent\u003e\n                    \u003c/Select\u003e\n                  \u003c/div\u003e\n\n                  {onResetSettings \u0026\u0026 (\n                    \u003cButton \n                      variant=\"outline\" \n                      onClick={onResetSettings}\n                      className=\"w-full h-8 text-xs\"\n                    \u003e\n                      \u003cRotateCcw className=\"w-3 h-3 mr-1\" /\u003e\n                      Reset\n                    \u003c/Button\u003e\n                  )}\n                \u003c/CardContent\u003e\n              \u003c/Card\u003e\n\n              {/* Mode-specific Settings */}\n              {children \u0026\u0026 (\n                \u003cdiv className=\"lg:col-span-1\"\u003e\n                  {children}\n                \u003c/div\u003e\n              )}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/CollapsibleContent\u003e\n      \u003c/Collapsible\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default BottomSettingsPanel;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/EnhancedAdvancedTeleprompter.tsx",
//   "contents": "import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Slider } from '@/components/ui/slider';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Progress } from '@/components/ui/progress';\nimport { Users, Volume2, ChevronUp, ChevronDown, SkipForward } from 'lucide-react';\nimport TopBarControls from './TopBarControls';\nimport RightSideSettings, { TeleprompterSettings } from './RightSideSettings';\nimport MobileControls from './MobileControls';\nimport { useIsMobile } from '@/hooks/use-mobile';\nimport { useSimpleTTS } from '@/hooks/useSimpleTTS';\nimport { parseScript } from '@/utils/scriptParser';\nimport { formatDialogueForTeleprompter, renderFormattedText } from '@/utils/textFormatter';\nimport type { DialogueLine } from '@/utils/scriptParser';\nimport { PrivacyInfo } from './PrivacyInfo';\nimport ScriptEditor from './ScriptEditor';\n\ninterface Script {\n  id: string;\n  title: string;\n  content: string;\n}\n\ninterface EnhancedAdvancedTeleprompterProps {\n  script: Script;\n  onBack: () =\u003e void;\n  onScriptUpdated?: (updatedScript: Script) =\u003e void;\n}\n\nconst defaultSettings: TeleprompterSettings = {\n  fontSize: 48,\n  lineHeight: 1.6,\n  marginTop: 25,\n  marginBottom: 25,\n  backgroundColor: 'hsl(var(--teleprompter-black))',\n  textColor: 'hsl(var(--teleprompter-text-white))',\n  mirrorMode: false,\n  countdownTime: 5,\n};\n\n// Voice options for Google TTS (mixed male/female)\nconst voiceOptions = [\n  { id: 'en-US-Journey-F', name: 'Journey F (Female)', gender: 'female' },\n  { id: 'en-US-Studio-O', name: 'Studio O (Female)', gender: 'female' },\n  { id: 'en-US-Standard-C', name: 'Standard C (Female)', gender: 'female' },\n  { id: 'en-US-Standard-E', name: 'Standard E (Female)', gender: 'female' },\n  { id: 'en-US-Standard-F', name: 'Standard F (Female)', gender: 'female' },\n  { id: 'en-US-Wavenet-A', name: 'Wavenet A (Female)', gender: 'female' },\n  { id: 'en-US-Wavenet-C', name: 'Wavenet C (Female)', gender: 'female' },\n  { id: 'en-US-Journey-D', name: 'Journey D (Male)', gender: 'male' },\n  { id: 'en-US-Studio-M', name: 'Studio M (Male)', gender: 'male' },\n  { id: 'en-US-Standard-A', name: 'Standard A (Male)', gender: 'male' },\n  { id: 'en-US-Standard-B', name: 'Standard B (Male)', gender: 'male' },\n  { id: 'en-US-Standard-D', name: 'Standard D (Male)', gender: 'male' },\n  { id: 'en-US-Wavenet-B', name: 'Wavenet B (Male)', gender: 'male' },\n  { id: 'en-US-Wavenet-D', name: 'Wavenet D (Male)', gender: 'male' },\n];\n\nconst EnhancedAdvancedTeleprompter: React.FC\u003cEnhancedAdvancedTeleprompterProps\u003e = ({\n  script,\n  onBack,\n  onScriptUpdated\n}) =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState(1.0);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [settings, setSettings] = useState\u003cTeleprompterSettings\u003e(defaultSettings);\n  const [isCountingDown, setIsCountingDown] = useState(false);\n  const [countdownValue, setCountdownValue] = useState(0);\n  const [isEditingScript, setIsEditingScript] = useState(false);\n  const [currentScript, setCurrentScript] = useState(script);\n  const isMobile = useIsMobile();\n\n  // Advanced mode specific state\n  const [selectedActor, setSelectedActor] = useState\u003cstring\u003e('none');\n  const [hideActorLines, setHideActorLines] = useState(false);\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n  const [skipMode, setSkipMode] = useState\u003c'automatic' | 'manual'\u003e('automatic');\n  const [highlightColor, setHighlightColor] = useState('#ffff00');\n  const [characterVoices, setCharacterVoices] = useState\u003cRecord\u003cstring, string\u003e\u003e({});\n  const [ttsVolume, setTtsVolume] = useState(0.7);\n  const [timePerWord, setTimePerWord] = useState(0.3); // seconds per word\n  const [timePerNewLine, setTimePerNewLine] = useState(1.0); // additional seconds for new line\n  \n  // Voice activation state\n  const [voiceActivationEnabled, setVoiceActivationEnabled] = useState(false);\n  const [micPermission, setMicPermission] = useState\u003c'granted' | 'denied' | 'pending'\u003e('pending');\n  const [vadSensitivity, setVadSensitivity] = useState(0.5);\n  const [isListening, setIsListening] = useState(false);\n  \n  // Playback session management\n  const [sessionId, setSessionId] = useState\u003cstring\u003e(Date.now().toString());\n  const playingLineRef = useRef\u003cnumber\u003e(-1);\n  const timersRef = useRef\u003cSet\u003cNodeJS.Timeout\u003e\u003e(new Set());\n  \n  // Voice activation refs\n  const audioContextRef = useRef\u003cAudioContext | null\u003e(null);\n  const analyserRef = useRef\u003cAnalyserNode | null\u003e(null);\n  const microphoneRef = useRef\u003cMediaStreamAudioSourceNode | null\u003e(null);\n  const streamRef = useRef\u003cMediaStream | null\u003e(null);\n  const vadIntervalRef = useRef\u003cNodeJS.Timeout | null\u003e(null);\n\n  const scrollContainerRef = useRef\u003cHTMLDivElement\u003e(null);\n  const animationIdRef = useRef\u003cnumber\u003e(0);\n  const lastTimeRef = useRef\u003cnumber\u003e(0);\n  const lineRefs = useRef\u003c{ [key: number]: HTMLDivElement | null }\u003e({});\n  const preAudioRef = useRef\u003cHTMLAudioElement | null\u003e(null);\n\n  // TTS hooks\n  const { speak, stop: stopTTS, isPlaying: isTTSPlaying } = useSimpleTTS();\n\n  // Parse script into dialogue lines - memoized to prevent re-parsing\n  const parsedScript = React.useMemo(() =\u003e parseScript(currentScript.content), [currentScript.content]);\n  const dialogues = parsedScript.dialogues;\n  const characters = parsedScript.characters;\n\n  // Update currentScript when script prop changes\n  useEffect(() =\u003e {\n    setCurrentScript(script);\n  }, [script]);\n\n  const handleScriptUpdated = (updatedScript: Script) =\u003e {\n    setCurrentScript(updatedScript);\n    if (onScriptUpdated) {\n      onScriptUpdated(updatedScript);\n    }\n  };\n\n  // Get character color based on name hash\n  const getCharacterColor = (character: string) =\u003e {\n    const colors = [\n      '#f59e0b', // amber-500\n      '#ec4899', // pink-500  \n      '#3b82f6', // blue-500\n      '#10b981', // emerald-500\n      '#8b5cf6', // violet-500\n      '#f97316', // orange-500\n      '#ef4444', // red-500\n      '#6366f1', // indigo-500\n    ];\n    let hash = 0;\n    for (let i = 0; i \u003c character.length; i++) {\n      hash = character.charCodeAt(i) + ((hash \u003c\u003c 5) - hash);\n    }\n    return colors[Math.abs(hash) % colors.length];\n  };\n\n  // Load settings from localStorage\n  useEffect(() =\u003e {\n    const saved = localStorage.getItem('teleprompter-advanced-enhanced-settings');\n    if (saved) {\n      try {\n        const parsedSettings = JSON.parse(saved);\n        setSettings({ ...defaultSettings, ...parsedSettings });\n      } catch (error) {\n        console.error('Failed to parse saved settings:', error);\n      }\n    }\n\n    // Load advanced-specific settings\n    const actorSaved = localStorage.getItem('teleprompter-advanced-selected-actor');\n    if (actorSaved) setSelectedActor(actorSaved);\n    \n    const voicesSaved = localStorage.getItem('teleprompter-advanced-character-voices');\n    if (voicesSaved) {\n      try {\n        setCharacterVoices(JSON.parse(voicesSaved));\n      } catch (error) {\n        console.error('Failed to parse character voices:', error);\n      }\n    }\n\n    const skipModeSaved = localStorage.getItem('teleprompter-advanced-skip-mode');\n    if (skipModeSaved) setSkipMode(skipModeSaved as 'automatic' | 'manual');\n\n    const volumeSaved = localStorage.getItem('teleprompter-advanced-tts-volume');\n    if (volumeSaved) setTtsVolume(parseFloat(volumeSaved));\n    \n    const voiceActivationSaved = localStorage.getItem('teleprompter-advanced-voice-activation');\n    if (voiceActivationSaved) setVoiceActivationEnabled(JSON.parse(voiceActivationSaved));\n    \n    const vadSensitivitySaved = localStorage.getItem('teleprompter-advanced-vad-sensitivity');\n    if (vadSensitivitySaved) setVadSensitivity(parseFloat(vadSensitivitySaved));\n  }, []);\n\n  // Auto-assign voices to characters based on typical naming patterns\n  useEffect(() =\u003e {\n    if (characters.length \u003e 0 \u0026\u0026 Object.keys(characterVoices).length === 0) {\n      const newVoices: Record\u003cstring, string\u003e = {};\n      \n      characters.forEach((character, index) =\u003e {\n        const lowerName = character.toLowerCase();\n        \n        // Enhanced gender detection\n        const femaleKeywords = ['woman', 'girl', 'lady', 'mom', 'mother', 'sister', 'daughter', 'wife', 'girlfriend', 'aunt', 'grandma', 'grandmother', 'ms.', 'mrs.', 'miss'];\n        const maleKeywords = ['man', 'boy', 'guy', 'dad', 'father', 'brother', 'son', 'husband', 'boyfriend', 'uncle', 'grandpa', 'grandfather', 'mr.', 'sir'];\n        \n        // Common female names\n        const femaleNames = ['anna', 'mary', 'sarah', 'lisa', 'emma', 'olivia', 'sophia', 'emily', 'jessica', 'ashley', 'amanda', 'michelle', 'jennifer', 'stephanie', 'rachel', 'samantha', 'nicole', 'elizabeth', 'christina', 'amy', 'angela', 'melissa', 'brenda', 'marie', 'janet', 'catherine', 'frances', 'christine', 'dorothy', 'deborah', 'carolyn', 'janet', 'virginia', 'maria', 'heather', 'diane', 'ruth', 'julie', 'joyce', 'victoria', 'kelly', 'christina', 'joan', 'evelyn', 'judith', 'andrea', 'hannah', 'jacqueline', 'martha', 'gloria', 'sara', 'janice', 'julia', 'marie', 'madison', 'mackenzie', 'brooke', 'paige', 'lauren', 'chloe', 'grace', 'natalie'];\n        \n        // Common male names  \n        const maleNames = ['james', 'john', 'robert', 'michael', 'william', 'david', 'richard', 'joseph', 'thomas', 'christopher', 'charles', 'daniel', 'matthew', 'anthony', 'mark', 'donald', 'steven', 'paul', 'andrew', 'joshua', 'kenneth', 'kevin', 'brian', 'george', 'timothy', 'ronald', 'jason', 'edward', 'jeffrey', 'ryan', 'jacob', 'gary', 'nicholas', 'eric', 'jonathan', 'stephen', 'larry', 'justin', 'scott', 'brandon', 'benjamin', 'samuel', 'frank', 'gregory', 'raymond', 'alexander', 'patrick', 'jack', 'dennis', 'jerry', 'tyler', 'aaron', 'jose', 'henry', 'adam', 'douglas', 'nathan', 'zachary', 'noah', 'carl', 'arthur', 'harold', 'jordan', 'lawrence', 'roger', 'keith', 'jeremy', 'sean', 'luke', 'wayne', 'phillip'];\n        \n        let isFemale = false;\n        \n        // Check for explicit keywords\n        if (femaleKeywords.some(keyword =\u003e lowerName.includes(keyword))) {\n          isFemale = true;\n        } else if (maleKeywords.some(keyword =\u003e lowerName.includes(keyword))) {\n          isFemale = false;\n        } else {\n          // Check for common names\n          if (femaleNames.some(name =\u003e lowerName.includes(name))) {\n            isFemale = true;\n          } else if (maleNames.some(name =\u003e lowerName.includes(name))) {\n            isFemale = false;\n          } else {\n            // Default fallback - alternate between genders\n            isFemale = index % 2 === 0;\n          }\n        }\n        \n        const availableVoices = voiceOptions.filter(v =\u003e v.gender === (isFemale ? 'female' : 'male'));\n        const voiceIndex = index % availableVoices.length;\n        newVoices[character] = availableVoices[voiceIndex].id;\n      });\n      \n      setCharacterVoices(newVoices);\n      localStorage.setItem('teleprompter-advanced-character-voices', JSON.stringify(newVoices));\n    }\n  }, [characters]);\n\n  // Save settings\n  const handleSettingsChange = (newSettings: Partial\u003cTeleprompterSettings\u003e) =\u003e {\n    const updatedSettings = { ...settings, ...newSettings };\n    setSettings(updatedSettings);\n    localStorage.setItem('teleprompter-advanced-enhanced-settings', JSON.stringify(updatedSettings));\n  };\n\n  const handleActorChange = (actor: string) =\u003e {\n    setSelectedActor(actor);\n    localStorage.setItem('teleprompter-advanced-selected-actor', actor);\n    setCurrentLineIndex(0);\n  };\n\n  const handleCharacterVoiceChange = (character: string, voiceId: string) =\u003e {\n    const updated = { ...characterVoices, [character]: voiceId };\n    setCharacterVoices(updated);\n    localStorage.setItem('teleprompter-advanced-character-voices', JSON.stringify(updated));\n  };\n\n  const resetSettings = () =\u003e {\n    setSettings(defaultSettings);\n    localStorage.removeItem('teleprompter-advanced-enhanced-settings');\n  };\n\n  // Get filtered dialogues based on settings - memoized to prevent recalculation\n  const filteredDialogues = React.useMemo(() =\u003e {\n    if (!hideActorLines || selectedActor === 'none') {\n      return dialogues;\n    }\n    return dialogues.filter(dialogue =\u003e dialogue.character !== selectedActor);\n  }, [dialogues, hideActorLines, selectedActor]);\n\n  // Auto-scroll to current line - enhanced for better visibility\n  const scrollToCurrentLine = useCallback(() =\u003e {\n    if (!scrollContainerRef.current) return;\n\n    const currentLineRef = lineRefs.current[currentLineIndex];\n    if (currentLineRef) {\n      const container = scrollContainerRef.current;\n      const lineRect = currentLineRef.getBoundingClientRect();\n      const containerRect = container.getBoundingClientRect();\n      \n      // Check if current line is visible\n      const isVisible = lineRect.top \u003e= containerRect.top \u0026\u0026 \n                       lineRect.bottom \u003c= containerRect.bottom;\n      \n      if (!isVisible) {\n        // Center the current line in the viewport\n        const targetScroll = container.scrollTop + lineRect.top - containerRect.top - containerRect.height / 3;\n        container.scrollTo({ top: Math.max(0, targetScroll), behavior: 'smooth' });\n      }\n    }\n  }, [currentLineIndex]);\n\n  // Clear all timers\n  const clearAllTimers = useCallback(() =\u003e {\n    timersRef.current.forEach(timer =\u003e clearTimeout(timer));\n    timersRef.current.clear();\n  }, []);\n\n  // Play current line audio and advance\n  const playCurrentLineAudio = useCallback(async () =\u003e {\n    const currentSession = sessionId;\n    const lineIndex = currentLineIndex;\n    \n    // Prevent duplicate calls for the same line\n    if (playingLineRef.current === lineIndex) {\n      return;\n    }\n    \n    if (lineIndex \u003e= filteredDialogues.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    playingLineRef.current = lineIndex;\n    const currentDialogue = filteredDialogues[lineIndex];\n    \n    // If it's the actor's line, skip TTS and wait for manual advance or timing\n    if (selectedActor !== 'none' \u0026\u0026 currentDialogue.character === selectedActor) {\n      if (skipMode === 'automatic') {\n        // Calculate time based on word count\n        const wordCount = currentDialogue.text.split(' ').length;\n        const waitTime = (wordCount * timePerWord + timePerNewLine) * 1000;\n        \n        const timer = setTimeout(() =\u003e {\n          // Only advance if session is still active and we're still on the same line\n          if (currentSession === sessionId \u0026\u0026 isPlaying \u0026\u0026 currentLineIndex === lineIndex) {\n            setCurrentLineIndex(prev =\u003e prev + 1);\n          }\n          timersRef.current.delete(timer);\n        }, waitTime);\n        \n        timersRef.current.add(timer);\n      }\n      return;\n    }\n\n    // Play TTS for other characters\n    const voiceId = characterVoices[currentDialogue.character] || voiceOptions[0].id;\n    \n    try {\n      await speak(currentDialogue.text, {\n        voice: voiceId,\n        speed: speed,\n        volume: ttsVolume,\n        onComplete: () =\u003e {\n          // Only advance if session is still active and we're still on the same line\n          if (currentSession === sessionId \u0026\u0026 isPlaying \u0026\u0026 currentLineIndex === lineIndex) {\n            setCurrentLineIndex(prev =\u003e prev + 1);\n          }\n        },\n        onError: (error) =\u003e {\n          console.error('TTS Error:', error);\n          // Continue to next line even on error\n          if (currentSession === sessionId \u0026\u0026 isPlaying \u0026\u0026 currentLineIndex === lineIndex) {\n            setCurrentLineIndex(prev =\u003e prev + 1);\n          }\n        }\n      });\n    } catch (error) {\n      console.error('TTS Error:', error);\n      // Continue to next line on error\n      if (currentSession === sessionId \u0026\u0026 isPlaying \u0026\u0026 currentLineIndex === lineIndex) {\n        setCurrentLineIndex(prev =\u003e prev + 1);\n      }\n    }\n  }, [currentLineIndex, filteredDialogues, selectedActor, skipMode, timePerWord, timePerNewLine, characterVoices, speed, ttsVolume, sessionId, isPlaying, speak]);\n\n  // Manual navigation\n  const goToPreviousLine = () =\u003e {\n    stopTTS();\n    clearAllTimers();\n    playingLineRef.current = -1;\n    setCurrentLineIndex((prev) =\u003e Math.max(0, prev - 1));\n  };\n\n  const goToNextLine = () =\u003e {\n    stopTTS();\n    clearAllTimers();\n    playingLineRef.current = -1;\n    setCurrentLineIndex((prev) =\u003e Math.min(filteredDialogues.length - 1, prev + 1));\n  };\n\n  // Manual skip for any mode\n  const handleSkip = () =\u003e {\n    stopTTS();\n    clearAllTimers();\n    playingLineRef.current = -1;\n    setCurrentLineIndex(prev =\u003e Math.min(filteredDialogues.length - 1, prev + 1));\n  };\n\n  // Voice activation functions\n  const initializeVoiceActivation = useCallback(async () =\u003e {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: { \n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        } \n      });\n      \n      streamRef.current = stream;\n      setMicPermission('granted');\n      \n      audioContextRef.current = new AudioContext();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 256;\n      \n      microphoneRef.current = audioContextRef.current.createMediaStreamSource(stream);\n      microphoneRef.current.connect(analyserRef.current);\n      \n      return true;\n    } catch (error) {\n      console.error('Voice activation initialization failed:', error);\n      setMicPermission('denied');\n      return false;\n    }\n  }, []);\n\n  const startVoiceActivationDetection = useCallback(() =\u003e {\n    if (!analyserRef.current) return;\n    \n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    \n    const detectVoice = () =\u003e {\n      if (!analyserRef.current) return;\n      \n      analyserRef.current.getByteFrequencyData(dataArray);\n      const average = dataArray.reduce((a, b) =\u003e a + b) / bufferLength;\n      const normalizedLevel = average / 255;\n      \n      // Voice detected above threshold\n      if (normalizedLevel \u003e vadSensitivity \u0026\u0026 selectedActor !== 'none') {\n        const currentDialogue = filteredDialogues[currentLineIndex];\n        if (currentDialogue \u0026\u0026 currentDialogue.character === selectedActor) {\n          handleSkip();\n        }\n      }\n    };\n    \n    vadIntervalRef.current = setInterval(detectVoice, 100);\n    setIsListening(true);\n  }, [vadSensitivity, selectedActor, filteredDialogues, currentLineIndex, handleSkip]);\n\n  const stopVoiceActivationDetection = useCallback(() =\u003e {\n    if (vadIntervalRef.current) {\n      clearInterval(vadIntervalRef.current);\n      vadIntervalRef.current = null;\n    }\n    setIsListening(false);\n  }, []);\n\n  const toggleVoiceActivation = useCallback(async () =\u003e {\n    if (!voiceActivationEnabled) {\n      const success = await initializeVoiceActivation();\n      if (success) {\n        setVoiceActivationEnabled(true);\n        localStorage.setItem('teleprompter-advanced-voice-activation', 'true');\n      }\n    } else {\n      setVoiceActivationEnabled(false);\n      stopVoiceActivationDetection();\n      localStorage.setItem('teleprompter-advanced-voice-activation', 'false');\n    }\n  }, [voiceActivationEnabled, initializeVoiceActivation, stopVoiceActivationDetection]);\n\n  // Start without countdown for advanced mode\n  const startCountdown = useCallback(() =\u003e {\n    setIsPlaying(true);\n  }, []);\n\n  // Control functions\n  const handlePlayPause = () =\u003e {\n    if (isCountingDown) return;\n\n    if (!isPlaying) {\n      setSessionId(Date.now().toString()); // Create new session\n      startCountdown();\n    } else {\n      setIsPlaying(false);\n      setIsCountingDown(false);\n      setCountdownValue(0);\n      clearAllTimers();\n      playingLineRef.current = -1;\n      stopTTS();\n    }\n  };\n\n  const handleStop = () =\u003e {\n    setIsPlaying(false);\n    setIsCountingDown(false);\n    setCountdownValue(0);\n    setCurrentLineIndex(0);\n    clearAllTimers();\n    playingLineRef.current = -1;\n    stopTTS();\n    setSessionId(Date.now().toString()); // Reset session\n  };\n\n  const toggleFullscreen = () =\u003e {\n    if (!isFullscreen) {\n      document.documentElement.requestFullscreen?.();\n    } else {\n      document.exitFullscreen?.();\n    }\n  };\n\n  // Effects\n  useEffect(() =\u003e {\n    const handleFullscreenChange = () =\u003e {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () =\u003e {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n\n  // Play audio when line changes - with stable dependencies\n  useEffect(() =\u003e {\n    if (isPlaying \u0026\u0026 currentLineIndex \u003c filteredDialogues.length) {\n      scrollToCurrentLine();\n      // Reset playing line ref when moving to new line\n      if (playingLineRef.current !== currentLineIndex) {\n        playingLineRef.current = -1;\n      }\n      playCurrentLineAudio();\n      \n      // Start voice activation for actor lines if enabled\n      if (voiceActivationEnabled \u0026\u0026 selectedActor !== 'none') {\n        const currentDialogue = filteredDialogues[currentLineIndex];\n        if (currentDialogue \u0026\u0026 currentDialogue.character === selectedActor) {\n          startVoiceActivationDetection();\n        } else {\n          stopVoiceActivationDetection();\n        }\n      }\n    } else if (currentLineIndex \u003e= filteredDialogues.length) {\n      setIsPlaying(false);\n      stopVoiceActivationDetection();\n    }\n  }, [currentLineIndex, isPlaying, filteredDialogues.length, scrollToCurrentLine, playCurrentLineAudio, voiceActivationEnabled, selectedActor, startVoiceActivationDetection, stopVoiceActivationDetection]);\n\n  // Keyboard shortcuts\n  useEffect(() =\u003e {\n    const handleKeyPress = (event: KeyboardEvent) =\u003e {\n      switch (event.code) {\n        case 'Space':\n          event.preventDefault();\n          handlePlayPause();\n          break;\n        case 'KeyN':\n          event.preventDefault();\n          goToNextLine();\n          break;\n        case 'KeyP':\n          event.preventDefault();\n          goToPreviousLine();\n          break;\n        case 'KeyS':\n          event.preventDefault();\n          handleSkip();\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          setSpeed((prev) =\u003e Math.min(3, prev + 0.1));\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          setSpeed((prev) =\u003e Math.max(0.5, prev - 0.1));\n          break;\n        case 'KeyF':\n          if (event.ctrlKey || event.metaKey) return;\n          event.preventDefault();\n          toggleFullscreen();\n          break;\n        case 'Escape':\n          if (isFullscreen) {\n            document.exitFullscreen?.();\n          }\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    return () =\u003e {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [isPlaying, isCountingDown, isFullscreen, skipMode]);\n\n  // Cleanup on unmount\n  useEffect(() =\u003e {\n    return () =\u003e {\n      clearAllTimers();\n      stopTTS();\n      stopVoiceActivationDetection();\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track =\u003e track.stop());\n      }\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, [clearAllTimers, stopTTS, stopVoiceActivationDetection]);\n\n\n  return (\n    \u003cdiv className=\"h-screen bg-background flex flex-col overflow-hidden\"\u003e\n      {/* Top Bar Controls - Hidden on mobile when playing */}\n      {!isFullscreen \u0026\u0026 !isMobile \u0026\u0026 (\n        \u003cTopBarControls\n          onBack={onBack}\n          onEdit={() =\u003e setIsEditingScript(true)}\n          title={currentScript.title}\n          status={`Line ${currentLineIndex + 1} of ${filteredDialogues.length}`}\n          isPlaying={isPlaying}\n          onPlayPause={handlePlayPause}\n          onStop={handleStop}\n          speed={speed}\n          onSpeedChange={setSpeed}\n          isFullscreen={isFullscreen}\n          onToggleFullscreen={toggleFullscreen}\n          showSettings={showSettings}\n          onToggleSettings={() =\u003e setShowSettings(!showSettings)}\n          isCountingDown={isCountingDown}\n          countdownValue={countdownValue}\n          rightExtra={\u003cPrivacyInfo /\u003e}\n        /\u003e\n      )}\n\n      {/* Desktop top controls for character and AI volume */}\n      {!isFullscreen \u0026\u0026 !isMobile \u0026\u0026 (\n        \u003cdiv className=\"border-b bg-background/95 backdrop-blur-sm p-2\"\u003e\n          \u003cdiv className=\"flex items-center gap-4 max-w-md\"\u003e\n            \u003cdiv className=\"flex items-center gap-2\"\u003e\n              \u003cUsers className=\"w-4 h-4 text-muted-foreground\" /\u003e\n              \u003cSelect value={selectedActor} onValueChange={handleActorChange}\u003e\n                \u003cSelectTrigger className=\"h-8 w-32\"\u003e\n                  \u003cSelectValue placeholder=\"Character\" /\u003e\n                \u003c/SelectTrigger\u003e\n                \u003cSelectContent\u003e\n                  \u003cSelectItem value=\"none\"\u003eNone\u003c/SelectItem\u003e\n                  {characters.map((character) =\u003e (\n                    \u003cSelectItem key={character} value={character}\u003e\n                      {character}\n                    \u003c/SelectItem\u003e\n                  ))}\n                \u003c/SelectContent\u003e\n              \u003c/Select\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv className=\"flex items-center gap-2\"\u003e\n              \u003cVolume2 className=\"w-4 h-4 text-muted-foreground\" /\u003e\n              \u003cdiv className=\"flex items-center gap-2 min-w-20\"\u003e\n                \u003cSlider\n                  value={[ttsVolume]}\n                  onValueChange={([value]) =\u003e setTtsVolume(value)}\n                  min={0}\n                  max={1}\n                  step={0.1}\n                  className=\"w-16\"\n                /\u003e\n                \u003cspan className=\"text-xs text-muted-foreground min-w-8\"\u003e\n                  {Math.round(ttsVolume * 100)}%\n                \u003c/span\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cButton\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleSkip}\n              disabled={!isPlaying}\n              className=\"flex items-center gap-1\"\n            \u003e\n              \u003cSkipForward className=\"w-4 h-4\" /\u003e\n              Skip\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      )}\n\n      \u003cdiv className=\"flex-1 flex overflow-hidden\"\u003e\n        {/* Main teleprompter display */}\n        \u003cdiv \n          className={`flex-1 relative ${isMobile ? 'pb-32' : ''}`}\n          style={{ \n            backgroundColor: settings.backgroundColor,\n            transform: settings.mirrorMode ? 'scaleX(-1)' : 'none'\n          }}\n        \u003e\n          {/* Fullscreen controls overlay */}\n          {isFullscreen \u0026\u0026 (\n            \u003cdiv className=\"absolute top-4 left-4 right-4 z-10 flex justify-between items-center\"\u003e\n              \u003cdiv className=\"text-white bg-black/50 px-3 py-1 rounded\"\u003e\n                {currentScript.title} - {speed.toFixed(1)}x\n              \u003c/div\u003e\n              \u003cdiv className=\"flex gap-2\"\u003e\n                \u003cButton\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handlePlayPause}\n                  className=\"bg-black/50 border-white/20 text-white\"\n                \u003e\n                  {isPlaying ? 'Pause' : 'Play'}\n                \u003c/Button\u003e\n                \u003cButton\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleSkip}\n                  className=\"bg-black/50 border-white/20 text-white\"\n                \u003e\n                  Skip\n                \u003c/Button\u003e\n                \u003cButton\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() =\u003e document.exitFullscreen?.()}\n                  className=\"bg-black/50 border-white/20 text-white\"\n                \u003e\n                  Exit Fullscreen\n                \u003c/Button\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          )}\n\n          {/* Skip Button at Bottom in Fullscreen */}\n          {isFullscreen \u0026\u0026 (\n            \u003cdiv className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 z-10\"\u003e\n              \u003cButton\n                variant=\"outline\"\n                size=\"default\"\n                onClick={handleSkip}\n                className=\"bg-black/50 border-white/20 text-white\"\n              \u003e\n                Skip Section\n              \u003c/Button\u003e\n            \u003c/div\u003e\n          )}\n\n          {/* Sequential teleprompter display */}\n          \u003cdiv\n            ref={scrollContainerRef}\n            className=\"absolute inset-0 overflow-y-auto smooth-scroll\"\n            style={{\n              paddingTop: `${settings.marginTop}px`,\n              paddingBottom: `${settings.marginBottom}px`,\n            }}\n          \u003e\n            \u003cdiv className=\"min-h-full flex justify-center\"\u003e\n              \u003cdiv className=\"w-full px-4 sm:px-6 lg:px-8\"\u003e\n                \u003cdiv className=\"space-y-8\"\u003e\n                  {filteredDialogues.map((dialogue, index) =\u003e {\n                    const isCurrentLine = index === currentLineIndex;\n                    const characterColor = getCharacterColor(dialogue.character);\n                    \n                    // Split long dialogues into readable chunks if needed\n                    const shouldSplit = dialogue.text.length \u003e 400;\n                    const textChunks = shouldSplit ? \n                      dialogue.text.match(/.{1,400}(\\s|$)/g) || [dialogue.text] : \n                      [dialogue.text];\n                    \n                    return (\n                      \u003cdiv\n                        key={index}\n                        ref={(el) =\u003e { lineRefs.current[index] = el; }}\n                        className={`transition-all duration-300 p-6 rounded-lg ${\n                          isCurrentLine \n                            ? 'ring-4 ring-yellow-400 bg-yellow-400/10 scale-105' \n                            : 'hover:bg-white/5'\n                        }`}\n                        style={{\n                          minHeight: '120px',\n                          display: 'flex',\n                          flexDirection: 'column',\n                          justifyContent: 'center'\n                        }}\n                      \u003e\n                        {/* Character name */}\n                        \u003cdiv className=\"mb-4 flex justify-center\"\u003e\n                          \u003cBadge \n                            className=\"text-lg font-bold px-4 py-2\"\n                            style={{ \n                              backgroundColor: characterColor,\n                              color: '#ffffff',\n                              border: `2px solid ${characterColor}`\n                            }}\n                          \u003e\n                            {dialogue.character}\n                          \u003c/Badge\u003e\n                        \u003c/div\u003e\n                        \n                        {/* Dialogue text */}\n                        \u003cdiv \n                          className=\"text-center leading-relaxed\"\n                          style={{\n                            fontSize: `${settings.fontSize}px`,\n                            lineHeight: settings.lineHeight,\n                            color: settings.textColor,\n                            wordWrap: 'break-word',\n                            overflowWrap: 'break-word',\n                            whiteSpace: 'pre-wrap',\n                            maxWidth: '100%'\n                          }}\n                        \u003e\n                          {textChunks.map((chunk, chunkIndex) =\u003e (\n                            \u003cdiv key={chunkIndex} className={chunkIndex \u003e 0 ? 'mt-4' : ''}\u003e\n                              {chunk.trim()}\n                            \u003c/div\u003e\n                          ))}\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    );\n                  })}\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      {/* Script Editor */}\n      \u003cScriptEditor\n        script={isEditingScript ? currentScript : null}\n        isOpen={isEditingScript}\n        onClose={() =\u003e setIsEditingScript(false)}\n        onScriptUpdated={handleScriptUpdated}\n      /\u003e\n\n      {/* Mobile Controls */}\n      {isMobile \u0026\u0026 (\n        \u003cMobileControls\n          isPlaying={isPlaying}\n          onPlayPause={handlePlayPause}\n          onStop={handleStop}\n          onSkip={handleSkip}\n          onBack={onBack}\n          characters={characters}\n          selectedActor={selectedActor}\n          onActorChange={handleActorChange}\n          ttsVolume={ttsVolume}\n          onTtsVolumeChange={setTtsVolume}\n          onOpenSettings={() =\u003e setShowSettings(true)}\n          currentLineIndex={currentLineIndex}\n          totalLines={filteredDialogues.length}\n          isCountingDown={isCountingDown}\n          countdownValue={countdownValue}\n        /\u003e\n      )}\n\n      {/* Right Side Settings Panel */}\n      \u003cRightSideSettings\n        settings={settings}\n        onSettingsChange={handleSettingsChange}\n        onResetSettings={resetSettings}\n        isOpen={showSettings}\n        onOpenChange={setShowSettings}\n        characters={characters}\n        selectedActor={selectedActor}\n        onActorChange={handleActorChange}\n        characterVoices={characterVoices}\n        onCharacterVoiceChange={handleCharacterVoiceChange}\n        ttsVolume={ttsVolume}\n        onTtsVolumeChange={setTtsVolume}\n        ttsSpeed={speed}\n        onTtsSpeedChange={setSpeed}\n        voiceOptions={voiceOptions}\n      /\u003e\n\n      {/* Keyboard shortcuts overlay - Desktop only */}\n      {!isFullscreen \u0026\u0026 !isMobile \u0026\u0026 (\n        \u003cdiv className=\"fixed bottom-4 left-4 bg-background/90 backdrop-blur-sm rounded-lg p-3 text-xs text-muted-foreground border\"\u003e\n          \u003cdiv className=\"space-y-1\"\u003e\n            \u003cdiv\u003e\u003ckbd className=\"bg-muted px-1 rounded\"\u003eSpace\u003c/kbd\u003e Play/Pause\u003c/div\u003e\n            \u003cdiv\u003e\u003ckbd className=\"bg-muted px-1 rounded\"\u003eS\u003c/kbd\u003e Skip\u003c/div\u003e\n            \u003cdiv\u003e\u003ckbd className=\"bg-muted px-1 rounded\"\u003eF\u003c/kbd\u003e Fullscreen\u003c/div\u003e\n            \u003cdiv\u003e\u003ckbd className=\"bg-muted px-1 rounded\"\u003eN/P\u003c/kbd\u003e Navigate Lines\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      )}\n      \n      \n    \u003c/div\u003e\n  );\n};\n\nexport default EnhancedAdvancedTeleprompter;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/EnhancedBasicTeleprompter.tsx",
//   "contents": "import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Slider } from '@/components/ui/slider';\nimport { Users } from 'lucide-react';\nimport TopBarControls from './TopBarControls';\nimport BottomSettingsPanel, { TeleprompterSettings } from './BottomSettingsPanel';\nimport { parseScript } from '@/utils/scriptParser';\nimport { formatDialogueForTeleprompter, renderFormattedText } from '@/utils/textFormatter';\nimport '../SmoothScrollStyles.css';\nimport { PrivacyInfo } from './PrivacyInfo';\nimport ScriptEditor from './ScriptEditor';\n\ninterface Script {\n  id: string;\n  title: string;\n  content: string;\n}\n\ninterface EnhancedBasicTeleprompterProps {\n  script: Script;\n  onBack: () =\u003e void;\n  onScriptUpdated?: (updatedScript: Script) =\u003e void;\n}\n\nconst defaultSettings: TeleprompterSettings = {\n  fontSize: 48,\n  lineHeight: 1.6,\n  marginTop: 25,\n  marginBottom: 25,\n  backgroundColor: 'hsl(var(--teleprompter-black))',\n  textColor: 'hsl(var(--teleprompter-text-white))',\n  mirrorMode: false,\n  countdownTime: 5,\n};\n\nconst EnhancedBasicTeleprompter: React.FC\u003cEnhancedBasicTeleprompterProps\u003e = ({\n  script,\n  onBack,\n  onScriptUpdated\n}) =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState(1.0);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showSettings, setShowSettings] = useState(true);\n  const [settings, setSettings] = useState\u003cTeleprompterSettings\u003e(defaultSettings);\n  const [isCountingDown, setIsCountingDown] = useState(false);\n  const [countdownValue, setCountdownValue] = useState(0);\n  const [selectedCharacter, setSelectedCharacter] = useState\u003cstring\u003e('none');\n  const [highlightColor, setHighlightColor] = useState('#ffff00');\n  const [isEditingScript, setIsEditingScript] = useState(false);\n  const [currentScript, setCurrentScript] = useState(script);\n\n  const scrollContainerRef = useRef\u003cHTMLDivElement\u003e(null);\n  const animationIdRef = useRef\u003cnumber\u003e(0);\n  const lastTimeRef = useRef\u003cnumber\u003e(0);\n\n  // Parse script into dialogue lines\n  const parsedScript = parseScript(currentScript.content);\n  const dialogues = parsedScript.dialogues;\n  const characters = parsedScript.characters;\n\n  // Update currentScript when script prop changes\n  useEffect(() =\u003e {\n    setCurrentScript(script);\n  }, [script]);\n\n  const handleScriptUpdated = (updatedScript: Script) =\u003e {\n    setCurrentScript(updatedScript);\n    if (onScriptUpdated) {\n      onScriptUpdated(updatedScript);\n    }\n  };\n\n  // Load settings from localStorage\n  useEffect(() =\u003e {\n    const saved = localStorage.getItem('teleprompter-basic-enhanced-settings');\n    if (saved) {\n      try {\n        const parsedSettings = JSON.parse(saved);\n        setSettings({ ...defaultSettings, ...parsedSettings });\n      } catch (error) {\n        console.error('Failed to parse saved settings:', error);\n      }\n    }\n\n    const characterSaved = localStorage.getItem('teleprompter-basic-selected-character');\n    if (characterSaved) setSelectedCharacter(characterSaved);\n\n    const colorSaved = localStorage.getItem('teleprompter-basic-highlight-color');\n    if (colorSaved) setHighlightColor(colorSaved);\n  }, []);\n\n  // Save settings to localStorage\n  const handleSettingsChange = (newSettings: Partial\u003cTeleprompterSettings\u003e) =\u003e {\n    const updatedSettings = { ...settings, ...newSettings };\n    setSettings(updatedSettings);\n    localStorage.setItem('teleprompter-basic-enhanced-settings', JSON.stringify(updatedSettings));\n  };\n\n  const handleCharacterChange = (character: string) =\u003e {\n    setSelectedCharacter(character);\n    localStorage.setItem('teleprompter-basic-selected-character', character);\n  };\n\n  const handleHighlightColorChange = (color: string) =\u003e {\n    setHighlightColor(color);\n    localStorage.setItem('teleprompter-basic-highlight-color', color);\n  };\n\n  const resetSettings = () =\u003e {\n    setSettings(defaultSettings);\n    localStorage.removeItem('teleprompter-basic-enhanced-settings');\n    localStorage.removeItem('teleprompter-basic-selected-character');\n    localStorage.removeItem('teleprompter-basic-highlight-color');\n    setSelectedCharacter('none');\n    setHighlightColor('#ffff00');\n  };\n\n  // Smooth scrolling animation\n  const scroll = useCallback((currentTime: number) =\u003e {\n    if (!lastTimeRef.current) {\n      lastTimeRef.current = currentTime;\n    }\n\n    const deltaTime = currentTime - lastTimeRef.current;\n    const scrollAmount = (deltaTime * speed * 0.5);\n\n    if (scrollContainerRef.current \u0026\u0026 isPlaying) {\n      scrollContainerRef.current.scrollTop += scrollAmount;\n    }\n\n    lastTimeRef.current = currentTime;\n    animationIdRef.current = requestAnimationFrame(scroll);\n  }, [speed, isPlaying]);\n\n  // Start countdown\n  const startCountdown = useCallback(() =\u003e {\n    if (settings.countdownTime === 0) {\n      setIsPlaying(true);\n      return;\n    }\n\n    setIsCountingDown(true);\n    setCountdownValue(settings.countdownTime);\n\n    const countdownInterval = setInterval(() =\u003e {\n      setCountdownValue((prev) =\u003e {\n        if (prev \u003c= 1) {\n          clearInterval(countdownInterval);\n          setIsCountingDown(false);\n          setIsPlaying(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  }, [settings.countdownTime]);\n\n  // Control functions\n  const handlePlayPause = () =\u003e {\n    if (isCountingDown) return;\n\n    if (!isPlaying) {\n      startCountdown();\n    } else {\n      setIsPlaying(false);\n      setIsCountingDown(false);\n      setCountdownValue(0);\n    }\n  };\n\n  const handleStop = () =\u003e {\n    setIsPlaying(false);\n    setIsCountingDown(false);\n    setCountdownValue(0);\n    if (scrollContainerRef.current) {\n      scrollContainerRef.current.scrollTop = 0;\n    }\n    lastTimeRef.current = 0;\n  };\n\n  const handleSkip = () =\u003e {\n    if (scrollContainerRef.current) {\n      scrollContainerRef.current.scrollTop += window.innerHeight * 0.5;\n    }\n  };\n\n  const handleSpeedChange = (newSpeed: number) =\u003e {\n    setSpeed(newSpeed);\n  };\n\n  const toggleFullscreen = () =\u003e {\n    if (!isFullscreen) {\n      document.documentElement.requestFullscreen?.();\n    } else {\n      document.exitFullscreen?.();\n    }\n  };\n\n  // Fullscreen event listeners\n  useEffect(() =\u003e {\n    const handleFullscreenChange = () =\u003e {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () =\u003e {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n\n  // Animation loop\n  useEffect(() =\u003e {\n    if (isPlaying) {\n      lastTimeRef.current = 0;\n      animationIdRef.current = requestAnimationFrame(scroll);\n    } else {\n      cancelAnimationFrame(animationIdRef.current);\n    }\n\n    return () =\u003e {\n      cancelAnimationFrame(animationIdRef.current);\n    };\n  }, [isPlaying, scroll]);\n\n  // Keyboard shortcuts\n  useEffect(() =\u003e {\n    const handleKeyPress = (event: KeyboardEvent) =\u003e {\n      switch (event.code) {\n        case 'Space':\n          event.preventDefault();\n          handlePlayPause();\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          setSpeed((prev) =\u003e Math.min(3, prev + 0.1));\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          setSpeed((prev) =\u003e Math.max(0.5, prev - 0.1));\n          break;\n        case 'Equal':\n        case 'NumpadAdd':\n          event.preventDefault();\n          handleSettingsChange({ fontSize: Math.min(120, settings.fontSize + 2) });\n          break;\n        case 'Minus':\n        case 'NumpadSubtract':\n          event.preventDefault();\n          handleSettingsChange({ fontSize: Math.max(16, settings.fontSize - 2) });\n          break;\n        case 'KeyF':\n          if (event.ctrlKey || event.metaKey) return;\n          event.preventDefault();\n          toggleFullscreen();\n          break;\n        case 'KeyS':\n          event.preventDefault();\n          handleSkip();\n          break;\n        case 'Escape':\n          if (isFullscreen) {\n            document.exitFullscreen?.();\n          }\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    return () =\u003e {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [isPlaying, isCountingDown, isFullscreen, settings.fontSize]);\n\n  // Format script content with character highlighting\n  const formatScriptLines = (content: string) =\u003e {\n    if (dialogues.length \u003e 0) {\n      // Use parsed dialogues for character highlighting\n      return dialogues.map((dialogue, index) =\u003e {\n        const isHighlighted = selectedCharacter !== 'none' \u0026\u0026 dialogue.character === selectedCharacter;\n        \n        return (\n          \u003cdiv\n            key={index}\n            className=\"mb-4 p-4 rounded-lg transition-all duration-300\"\n            style={{\n              fontSize: `${settings.fontSize}px`,\n              lineHeight: settings.lineHeight,\n              backgroundColor: 'transparent',\n              padding: '12px',\n              borderRadius: '8px',\n              transform: isHighlighted ? 'scale(1.01)' : 'scale(1)',\n              transition: 'all 0.3s ease',\n              border: isHighlighted ? '2px solid #ef4444' : '1px solid transparent',\n            }}\n          \u003e\n            \u003cdiv \n              className=\"font-bold mb-2\" \n              style={{ color: 'hsl(var(--teleprompter-text-yellow))' }}\n            \u003e\n              {dialogue.character}:\n            \u003c/div\u003e\n            \u003cdiv style={{ color: 'hsl(var(--teleprompter-text-white))' }}\u003e\n              {renderFormattedText(\n                formatDialogueForTeleprompter(dialogue.text),\n                settings.fontSize,\n                settings.lineHeight,\n                'hsl(var(--teleprompter-text-white))'\n              )}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      });\n    } else {\n      // Fallback to simple line-by-line rendering\n      return content.split('\\n').map((line, index) =\u003e (\n        \u003cdiv\n          key={index}\n          className=\"dialogue-line mb-4\"\n          style={{\n            fontSize: `${settings.fontSize}px`,\n            lineHeight: settings.lineHeight,\n            color: settings.textColor,\n          }}\n        \u003e\n          {line || '\\u00A0'}\n        \u003c/div\u003e\n      ));\n    }\n  };\n\n  const characterSettings = (\n    \u003cCard className=\"bg-card border-border h-fit\"\u003e\n      \u003cCardHeader className=\"pb-4\"\u003e\n        \u003cCardTitle className=\"text-sm text-foreground flex items-center gap-2\"\u003e\n          \u003cUsers className=\"w-4 h-4\" /\u003e\n          Character Highlighting\n        \u003c/CardTitle\u003e\n      \u003c/CardHeader\u003e\n      \u003cCardContent className=\"space-y-4\"\u003e\n        \u003cdiv\u003e\n          \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n            Highlight Character\n          \u003c/label\u003e\n          \u003cSelect value={selectedCharacter} onValueChange={handleCharacterChange}\u003e\n            \u003cSelectTrigger className=\"h-8\"\u003e\n              \u003cSelectValue /\u003e\n            \u003c/SelectTrigger\u003e\n            \u003cSelectContent\u003e\n              \u003cSelectItem value=\"none\"\u003eNo Highlighting\u003c/SelectItem\u003e\n              {characters.map((character) =\u003e (\n                \u003cSelectItem key={character} value={character}\u003e\n                  {character}\n                \u003c/SelectItem\u003e\n              ))}\n            \u003c/SelectContent\u003e\n          \u003c/Select\u003e\n        \u003c/div\u003e\n\n        {selectedCharacter !== 'none' \u0026\u0026 (\n          \u003cdiv\u003e\n            \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n              Highlight Color\n            \u003c/label\u003e\n            \u003cinput\n              type=\"color\"\n              value={highlightColor}\n              onChange={(e) =\u003e handleHighlightColorChange(e.target.value)}\n              className=\"w-full h-8 rounded border border-border\"\n            /\u003e\n          \u003c/div\u003e\n        )}\n\n        \u003cdiv\u003e\n          \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n            Scroll Speed: {speed.toFixed(1)}x\n          \u003c/label\u003e\n          \u003cSlider\n            value={[speed]}\n            onValueChange={(value) =\u003e setSpeed(value[0])}\n            min={0.1}\n            max={3.0}\n            step={0.1}\n            className=\"w-full\"\n          /\u003e\n        \u003c/div\u003e\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n\n  return (\n    \u003cdiv className=\"h-screen flex flex-col\"\u003e\n      {/* Top Controls */}\n      {!isFullscreen \u0026\u0026 (\n        \u003cdiv className=\"sticky top-0 z-50 bg-background/80 backdrop-blur border-b border-border\"\u003e\n          \u003cTopBarControls\n            isPlaying={isPlaying}\n            speed={speed}\n            isFullscreen={isFullscreen}\n            isCountingDown={isCountingDown}\n            countdownValue={countdownValue}\n            showSettings={showSettings}\n            onPlayPause={handlePlayPause}\n            onStop={handleStop}\n            onSpeedChange={handleSpeedChange}\n            onToggleFullscreen={toggleFullscreen}\n            onToggleSettings={() =\u003e setShowSettings(!showSettings)}\n            onBack={onBack}\n            onEdit={() =\u003e setIsEditingScript(true)}\n            title={`Basic Mode - ${currentScript.title}`}\n            status={isPlaying ? `Playing at ${speed.toFixed(1)}x` : 'Paused'}\n            rightExtra={\u003cPrivacyInfo /\u003e}\n          /\u003e\n        \u003c/div\u003e\n      )}\n\n      {/* Main teleprompter area with padding */}\n      \u003cdiv \n        className=\"relative flex-1 overflow-hidden px-4 sm:px-8 lg:px-12\"\n        style={{ \n          backgroundColor: settings.backgroundColor,\n          color: settings.textColor,\n          transform: settings.mirrorMode ? 'scaleX(-1)' : 'none'\n        }}\n      \u003e\n        {/* Fullscreen controls overlay */}\n        {isFullscreen \u0026\u0026 (\n          \u003cdiv className=\"absolute top-4 left-4 right-4 z-10 flex justify-between items-center\"\u003e\n            \u003cdiv className=\"text-white bg-black/50 px-3 py-1 rounded\"\u003e\n              {currentScript.title} - {speed.toFixed(1)}x\n            \u003c/div\u003e\n            \u003cdiv className=\"flex gap-2\"\u003e\n              \u003cButton\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handlePlayPause}\n                className=\"bg-black/50 border-white/20 text-white\"\n              \u003e\n                {isPlaying ? 'Pause' : 'Play'}\n              \u003c/Button\u003e\n              \u003cButton\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleSkip}\n                className=\"bg-black/50 border-white/20 text-white\"\n              \u003e\n                Skip\n              \u003c/Button\u003e\n              \u003cButton\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() =\u003e document.exitFullscreen?.()}\n                className=\"bg-black/50 border-white/20 text-white\"\n              \u003e\n                Exit Fullscreen\n              \u003c/Button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        )}\n\n        {/* Skip Button at Bottom in Fullscreen */}\n        {isFullscreen \u0026\u0026 (\n          \u003cdiv className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 z-10\"\u003e\n            \u003cButton\n              variant=\"outline\"\n              size=\"default\"\n              onClick={handleSkip}\n              className=\"bg-black/50 border-white/20 text-white\"\n            \u003e\n              Skip Section\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        )}\n\n        {/* Countdown Overlay */}\n        {isCountingDown \u0026\u0026 (\n          \u003cdiv className=\"absolute inset-0 flex items-center justify-center z-20\"\u003e\n            \u003cdiv className=\"text-8xl font-bold text-white bg-black/70 rounded-full w-32 h-32 flex items-center justify-center animate-pulse\"\u003e\n              {countdownValue}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        )}\n\n        \u003cdiv\n          ref={scrollContainerRef}\n          className=\"h-full overflow-y-auto scrollbar-hide smooth-scroll-container\"\n          style={{\n            paddingTop: `${settings.marginTop}vh`,\n            paddingBottom: `${settings.marginBottom}vh`,\n          }}\n        \u003e\n          \u003cdiv className=\"min-h-full\"\u003e\n            {formatScriptLines(currentScript.content)}\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      {/* Script Editor */}\n      \u003cScriptEditor\n        script={isEditingScript ? currentScript : null}\n        isOpen={isEditingScript}\n        onClose={() =\u003e setIsEditingScript(false)}\n        onScriptUpdated={handleScriptUpdated}\n      /\u003e\n\n      {/* Bottom Settings Panel */}\n      {!isFullscreen \u0026\u0026 (\n        \u003cBottomSettingsPanel\n          settings={settings}\n          onSettingsChange={handleSettingsChange}\n          onResetSettings={resetSettings}\n          isExpanded={showSettings}\n          onToggle={() =\u003e setShowSettings(!showSettings)}\n        \u003e\n          {characterSettings}\n        \u003c/BottomSettingsPanel\u003e\n      )}\n\n      {/* Keyboard shortcuts help */}\n      {!isFullscreen \u0026\u0026 !showSettings \u0026\u0026 (\n        \u003cdiv className=\"bg-muted/50 border-t border-border px-4 py-2 absolute bottom-0 left-0 right-0\"\u003e\n          \u003cp className=\"text-xs text-muted-foreground text-center\"\u003e\n            \u003ckbd className=\"bg-background border border-border px-1 rounded\"\u003eSpace\u003c/kbd\u003e Play/Pause • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003eS\u003c/kbd\u003e Skip • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003e↑/↓\u003c/kbd\u003e Speed • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003e+/-\u003c/kbd\u003e Font Size • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003eF\u003c/kbd\u003e Fullscreen\n          \u003c/p\u003e\n        \u003c/div\u003e\n      )}\n      \n      \n    \u003c/div\u003e\n  );\n};\n\nexport default EnhancedBasicTeleprompter;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/EnhancedProTeleprompter.tsx",
//   "contents": "import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Slider } from '@/components/ui/slider';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Users, Volume2, Mic, MicOff, Headphones } from 'lucide-react';\nimport TopBarControls from './TopBarControls';\nimport BottomSettingsPanel, { TeleprompterSettings } from './BottomSettingsPanel';\nimport { parseScript } from '@/utils/scriptParser';\nimport { formatDialogueForTeleprompter, renderFormattedText } from '@/utils/textFormatter';\nimport { useGoogleTTS } from '@/hooks/useGoogleTTS';\nimport '../SmoothScrollStyles.css';\nimport { PrivacyInfo } from './PrivacyInfo';\nimport ScriptEditor from './ScriptEditor';\n\ninterface Script {\n  id: string;\n  title: string;\n  content: string;\n}\n\ninterface EnhancedProTeleprompterProps {\n  script: Script;\n  onBack: () =\u003e void;\n  onScriptUpdated?: (updatedScript: Script) =\u003e void;\n}\n\nconst defaultSettings: TeleprompterSettings = {\n  fontSize: 48,\n  lineHeight: 1.6,\n  marginTop: 25,\n  marginBottom: 25,\n  backgroundColor: 'hsl(var(--teleprompter-black))',\n  textColor: 'hsl(var(--teleprompter-text-white))',\n  mirrorMode: false,\n  countdownTime: 5,\n};\n\n// Voice options for Google TTS (mixed male/female)\nconst voiceOptions = [\n  { id: 'en-US-Journey-F', name: 'Journey F (Female)', gender: 'female' },\n  { id: 'en-US-Studio-O', name: 'Studio O (Female)', gender: 'female' },\n  { id: 'en-US-Standard-C', name: 'Standard C (Female)', gender: 'female' },\n  { id: 'en-US-Standard-E', name: 'Standard E (Female)', gender: 'female' },\n  { id: 'en-US-Standard-F', name: 'Standard F (Female)', gender: 'female' },\n  { id: 'en-US-Wavenet-A', name: 'Wavenet A (Female)', gender: 'female' },\n  { id: 'en-US-Wavenet-C', name: 'Wavenet C (Female)', gender: 'female' },\n  { id: 'en-US-Journey-D', name: 'Journey D (Male)', gender: 'male' },\n  { id: 'en-US-Studio-M', name: 'Studio M (Male)', gender: 'male' },\n  { id: 'en-US-Standard-A', name: 'Standard A (Male)', gender: 'male' },\n  { id: 'en-US-Standard-B', name: 'Standard B (Male)', gender: 'male' },\n  { id: 'en-US-Standard-D', name: 'Standard D (Male)', gender: 'male' },\n  { id: 'en-US-Wavenet-B', name: 'Wavenet B (Male)', gender: 'male' },\n  { id: 'en-US-Wavenet-D', name: 'Wavenet D (Male)', gender: 'male' },\n];\n\nconst EnhancedProTeleprompter: React.FC\u003cEnhancedProTeleprompterProps\u003e = ({\n  script,\n  onBack,\n  onScriptUpdated\n}) =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState(1.0);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showSettings, setShowSettings] = useState(true);\n  const [settings, setSettings] = useState\u003cTeleprompterSettings\u003e(defaultSettings);\n  const [isCountingDown, setIsCountingDown] = useState(false);\n  const [countdownValue, setCountdownValue] = useState(0);\n  const [isEditingScript, setIsEditingScript] = useState(false);\n  const [currentScript, setCurrentScript] = useState(script);\n\n  // Pro mode specific state\n  const [selectedActor, setSelectedActor] = useState\u003cstring\u003e('none');\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n  const [highlightColor, setHighlightColor] = useState('#ffff00');\n  const [characterVoices, setCharacterVoices] = useState\u003cRecord\u003cstring, string\u003e\u003e({});\n  const [ttsVolume, setTtsVolume] = useState(0.7);\n  \n  // Playback session management\n  const [sessionId, setSessionId] = useState\u003cstring\u003e(Date.now().toString());\n  const playingLineRef = useRef\u003cnumber\u003e(-1);\n  const timersRef = useRef\u003cSet\u003cNodeJS.Timeout\u003e\u003e(new Set());\n  \n  // Speech recognition state\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState\u003cSpeechRecognition | null\u003e(null);\n  const [microphoneDeviceId, setMicrophoneDeviceId] = useState\u003cstring\u003e('default');\n  const [microphoneDevices, setMicrophoneDevices] = useState\u003cMediaDeviceInfo[]\u003e([]);\n  const [vadThreshold, setVadThreshold] = useState(0.3); // Voice activity detection threshold\n  const [isVoiceDetected, setIsVoiceDetected] = useState(false);\n  const [speechError, setSpeechError] = useState\u003cstring\u003e('');\n\n  const scrollContainerRef = useRef\u003cHTMLDivElement\u003e(null);\n  const lineRefs = useRef\u003c{ [key: number]: HTMLDivElement | null }\u003e({});\n  const audioContextRef = useRef\u003cAudioContext | null\u003e(null);\n  const analyserRef = useRef\u003cAnalyserNode | null\u003e(null);\n  const micStreamRef = useRef\u003cMediaStream | null\u003e(null);\n  const vadCheckIntervalRef = useRef\u003cNodeJS.Timeout | null\u003e(null);\n\n  // TTS hook\n  const { speak, stop: stopTTS, isPlaying: isTTSPlaying } = useGoogleTTS();\n\n  // Parse script into dialogue lines - memoized to prevent re-parsing\n  const parsedScript = React.useMemo(() =\u003e parseScript(currentScript.content), [currentScript.content]);\n  const dialogues = parsedScript.dialogues;\n  const characters = parsedScript.characters;\n\n  // Update currentScript when script prop changes\n  useEffect(() =\u003e {\n    setCurrentScript(script);\n  }, [script]);\n\n  const handleScriptUpdated = (updatedScript: Script) =\u003e {\n    setCurrentScript(updatedScript);\n    if (onScriptUpdated) {\n      onScriptUpdated(updatedScript);\n    }\n  };\n\n  // Initialize speech recognition and microphone devices\n  useEffect(() =\u003e {\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      \n      recognition.continuous = true;\n      recognition.interimResults = true;\n      recognition.lang = 'en-US';\n      \n      recognition.onresult = (event) =\u003e {\n        const lastResult = event.results[event.results.length - 1];\n        if (lastResult.isFinal) {\n          // User finished speaking, advance to next line\n          handleSpeechComplete();\n        }\n      };\n      \n      recognition.onerror = (event) =\u003e {\n        console.error('Speech recognition error:', event.error);\n        setSpeechError(`Speech recognition error: ${event.error}`);\n        setIsListening(false);\n      };\n      \n      recognition.onend = () =\u003e {\n        if (isPlaying \u0026\u0026 isListening) {\n          // Restart recognition if still playing\n          recognition.start();\n        }\n      };\n      \n      setRecognition(recognition);\n    }\n\n    // Get microphone devices\n    navigator.mediaDevices.enumerateDevices()\n      .then(devices =\u003e {\n        const mics = devices.filter(device =\u003e device.kind === 'audioinput');\n        setMicrophoneDevices(mics);\n      })\n      .catch(console.error);\n\n    return () =\u003e {\n      if (vadCheckIntervalRef.current) {\n        clearInterval(vadCheckIntervalRef.current);\n      }\n      if (micStreamRef.current) {\n        micStreamRef.current.getTracks().forEach(track =\u003e track.stop());\n      }\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n\n  // Load settings from localStorage\n  useEffect(() =\u003e {\n    const saved = localStorage.getItem('teleprompter-pro-enhanced-settings');\n    if (saved) {\n      try {\n        const parsedSettings = JSON.parse(saved);\n        setSettings({ ...defaultSettings, ...parsedSettings });\n      } catch (error) {\n        console.error('Failed to parse saved settings:', error);\n      }\n    }\n\n    const actorSaved = localStorage.getItem('teleprompter-pro-selected-actor');\n    if (actorSaved) setSelectedActor(actorSaved);\n    \n    const voicesSaved = localStorage.getItem('teleprompter-pro-character-voices');\n    if (voicesSaved) {\n      try {\n        setCharacterVoices(JSON.parse(voicesSaved));\n      } catch (error) {\n        console.error('Failed to parse character voices:', error);\n      }\n    }\n\n    const micSaved = localStorage.getItem('teleprompter-pro-microphone-device');\n    if (micSaved) setMicrophoneDeviceId(micSaved);\n\n    const vadSaved = localStorage.getItem('teleprompter-pro-vad-threshold');\n    if (vadSaved) setVadThreshold(parseFloat(vadSaved));\n  }, []);\n\n  // Auto-assign voices to characters\n  useEffect(() =\u003e {\n    if (characters.length \u003e 0 \u0026\u0026 Object.keys(characterVoices).length === 0) {\n      const newVoices: Record\u003cstring, string\u003e = {};\n      \n      characters.forEach((character, index) =\u003e {\n        const lowerName = character.toLowerCase();\n        \n        // Enhanced gender detection\n        const femaleKeywords = ['woman', 'girl', 'lady', 'mom', 'mother', 'sister', 'daughter', 'wife', 'girlfriend', 'aunt', 'grandma', 'grandmother', 'ms.', 'mrs.', 'miss'];\n        const maleKeywords = ['man', 'boy', 'guy', 'dad', 'father', 'brother', 'son', 'husband', 'boyfriend', 'uncle', 'grandpa', 'grandfather', 'mr.', 'sir'];\n        \n        // Common female names\n        const femaleNames = ['anna', 'mary', 'sarah', 'lisa', 'emma', 'olivia', 'sophia', 'emily', 'jessica', 'ashley', 'amanda', 'michelle', 'jennifer', 'stephanie', 'rachel', 'samantha', 'nicole', 'elizabeth', 'christina', 'amy', 'angela', 'melissa', 'brenda', 'marie', 'janet', 'catherine', 'frances', 'christine', 'dorothy', 'deborah', 'carolyn', 'janet', 'virginia', 'maria', 'heather', 'diane', 'ruth', 'julie', 'joyce', 'victoria', 'kelly', 'christina', 'joan', 'evelyn', 'judith', 'andrea', 'hannah', 'jacqueline', 'martha', 'gloria', 'sara', 'janice', 'julia', 'marie', 'madison', 'mackenzie', 'brooke', 'paige', 'lauren', 'chloe', 'grace', 'natalie'];\n        \n        // Common male names  \n        const maleNames = ['james', 'john', 'robert', 'michael', 'william', 'david', 'richard', 'joseph', 'thomas', 'christopher', 'charles', 'daniel', 'matthew', 'anthony', 'mark', 'donald', 'steven', 'paul', 'andrew', 'joshua', 'kenneth', 'kevin', 'brian', 'george', 'timothy', 'ronald', 'jason', 'edward', 'jeffrey', 'ryan', 'jacob', 'gary', 'nicholas', 'eric', 'jonathan', 'stephen', 'larry', 'justin', 'scott', 'brandon', 'benjamin', 'samuel', 'frank', 'gregory', 'raymond', 'alexander', 'patrick', 'jack', 'dennis', 'jerry', 'tyler', 'aaron', 'jose', 'henry', 'adam', 'douglas', 'nathan', 'zachary', 'noah', 'carl', 'arthur', 'harold', 'jordan', 'lawrence', 'roger', 'keith', 'jeremy', 'sean', 'luke', 'wayne', 'phillip'];\n        \n        let isFemale = false;\n        \n        // Check for explicit keywords\n        if (femaleKeywords.some(keyword =\u003e lowerName.includes(keyword))) {\n          isFemale = true;\n        } else if (maleKeywords.some(keyword =\u003e lowerName.includes(keyword))) {\n          isFemale = false;\n        } else {\n          // Check for common names\n          if (femaleNames.some(name =\u003e lowerName.includes(name))) {\n            isFemale = true;\n          } else if (maleNames.some(name =\u003e lowerName.includes(name))) {\n            isFemale = false;\n          } else {\n            // Default fallback - alternate between genders\n            isFemale = index % 2 === 0;\n          }\n        }\n        \n        const availableVoices = voiceOptions.filter(v =\u003e v.gender === (isFemale ? 'female' : 'male'));\n        const voiceIndex = index % availableVoices.length;\n        newVoices[character] = availableVoices[voiceIndex].id;\n      });\n      \n      setCharacterVoices(newVoices);\n      localStorage.setItem('teleprompter-pro-character-voices', JSON.stringify(newVoices));\n    }\n  }, [characters]);\n\n  // Setup microphone for VAD when playing\n  useEffect(() =\u003e {\n    if (isPlaying \u0026\u0026 selectedActor !== 'none') {\n      setupMicrophone();\n    } else {\n      cleanupMicrophone();\n    }\n  }, [isPlaying, selectedActor, microphoneDeviceId]);\n\n  const setupMicrophone = async () =\u003e {\n    try {\n      const constraints = {\n        audio: {\n          deviceId: microphoneDeviceId === 'default' ? undefined : { exact: microphoneDeviceId }\n        }\n      };\n      \n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      micStreamRef.current = stream;\n      \n      audioContextRef.current = new AudioContext();\n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      \n      analyserRef.current.fftSize = 2048;\n      source.connect(analyserRef.current);\n      \n      startVAD();\n      \n    } catch (error) {\n      console.error('Microphone setup error:', error);\n      setSpeechError('Microphone access denied or not available');\n    }\n  };\n\n  const cleanupMicrophone = () =\u003e {\n    if (vadCheckIntervalRef.current) {\n      clearInterval(vadCheckIntervalRef.current);\n      vadCheckIntervalRef.current = null;\n    }\n    \n    if (micStreamRef.current) {\n      micStreamRef.current.getTracks().forEach(track =\u003e track.stop());\n      micStreamRef.current = null;\n    }\n    \n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n      audioContextRef.current = null;\n    }\n    \n    setIsVoiceDetected(false);\n  };\n\n  const startVAD = () =\u003e {\n    if (!analyserRef.current) return;\n    \n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    \n    vadCheckIntervalRef.current = setInterval(() =\u003e {\n      if (!analyserRef.current) return;\n      \n      analyserRef.current.getByteFrequencyData(dataArray);\n      \n      // Calculate average volume\n      const average = dataArray.reduce((sum, value) =\u003e sum + value, 0) / bufferLength;\n      const normalizedVolume = average / 255;\n      \n      const wasDetected = isVoiceDetected;\n      const isDetected = normalizedVolume \u003e vadThreshold;\n      \n      setIsVoiceDetected(isDetected);\n      \n      // If voice was detected and now stopped, consider speech complete\n      if (wasDetected \u0026\u0026 !isDetected \u0026\u0026 isListening) {\n        setTimeout(() =\u003e {\n          if (!isVoiceDetected) {\n            handleSpeechComplete();\n          }\n        }, 1000); // 1 second delay to avoid false positives\n      }\n    }, 100);\n  };\n\n  const handleSpeechComplete = () =\u003e {\n    if (selectedActor !== 'none' \u0026\u0026 currentLineIndex \u003c dialogues.length) {\n      const currentDialogue = dialogues[currentLineIndex];\n      if (currentDialogue.character === selectedActor) {\n        setCurrentLineIndex(prev =\u003e prev + 1);\n        setIsListening(false);\n        \n        // Start listening for next actor line\n        setTimeout(() =\u003e {\n          if (isPlaying) {\n            const nextDialogue = dialogues[currentLineIndex + 1];\n            if (nextDialogue \u0026\u0026 nextDialogue.character === selectedActor) {\n              setIsListening(true);\n              if (recognition) {\n                recognition.start();\n              }\n            }\n          }\n        }, 500);\n      }\n    }\n  };\n\n  // Save settings\n  const handleSettingsChange = (newSettings: Partial\u003cTeleprompterSettings\u003e) =\u003e {\n    const updatedSettings = { ...settings, ...newSettings };\n    setSettings(updatedSettings);\n    localStorage.setItem('teleprompter-pro-enhanced-settings', JSON.stringify(updatedSettings));\n  };\n\n  const handleActorChange = (actor: string) =\u003e {\n    setSelectedActor(actor);\n    localStorage.setItem('teleprompter-pro-selected-actor', actor);\n    setCurrentLineIndex(0);\n  };\n\n  const handleCharacterVoiceChange = (character: string, voiceId: string) =\u003e {\n    const updated = { ...characterVoices, [character]: voiceId };\n    setCharacterVoices(updated);\n    localStorage.setItem('teleprompter-pro-character-voices', JSON.stringify(updated));\n  };\n\n  const handleMicrophoneChange = (deviceId: string) =\u003e {\n    setMicrophoneDeviceId(deviceId);\n    localStorage.setItem('teleprompter-pro-microphone-device', deviceId);\n  };\n\n  const handleVADThresholdChange = (threshold: number) =\u003e {\n    setVadThreshold(threshold);\n    localStorage.setItem('teleprompter-pro-vad-threshold', threshold.toString());\n  };\n\n  const resetSettings = () =\u003e {\n    setSettings(defaultSettings);\n    localStorage.removeItem('teleprompter-pro-enhanced-settings');\n  };\n\n  // Clear all timers\n  const clearAllTimers = useCallback(() =\u003e {\n    timersRef.current.forEach(timer =\u003e clearTimeout(timer));\n    timersRef.current.clear();\n  }, []);\n\n  // Auto-scroll to current line\n  const scrollToCurrentLine = useCallback(() =\u003e {\n    if (!scrollContainerRef.current) return;\n\n    const currentLineRef = lineRefs.current[currentLineIndex];\n    if (currentLineRef) {\n      const container = scrollContainerRef.current;\n      const lineRect = currentLineRef.getBoundingClientRect();\n      const containerRect = container.getBoundingClientRect();\n      \n      const targetScroll = container.scrollTop + lineRect.top - containerRect.top - containerRect.height / 2;\n      container.scrollTo({ top: targetScroll, behavior: 'smooth' });\n    }\n  }, [currentLineIndex]);\n\n  // Play current line audio and handle speech recognition\n  const playCurrentLineAudio = useCallback(async () =\u003e {\n    const currentSession = sessionId;\n    const lineIndex = currentLineIndex;\n    \n    // Prevent duplicate calls for the same line\n    if (playingLineRef.current === lineIndex) {\n      return;\n    }\n    \n    if (lineIndex \u003e= dialogues.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    playingLineRef.current = lineIndex;\n    const currentDialogue = dialogues[lineIndex];\n    \n    // If it's the actor's line, start speech recognition\n    if (selectedActor !== 'none' \u0026\u0026 currentDialogue.character === selectedActor) {\n      setIsListening(true);\n      if (recognition) {\n        try {\n          recognition.start();\n        } catch (error) {\n          console.warn('Speech recognition already started or failed to start');\n        }\n      }\n      return;\n    }\n\n    // Play TTS for other characters\n    const voiceId = characterVoices[currentDialogue.character] || voiceOptions[0].id;\n    \n    try {\n      await speak(currentDialogue.text, {\n        voice: voiceId,\n        speed: speed,\n        volume: ttsVolume,\n        onComplete: () =\u003e {\n          // Only advance if session is still active and we're still on the same line\n          if (currentSession === sessionId \u0026\u0026 isPlaying \u0026\u0026 currentLineIndex === lineIndex) {\n            setCurrentLineIndex(prev =\u003e prev + 1);\n          }\n        },\n        onError: (error) =\u003e {\n          console.error('TTS Error:', error);\n          // Continue to next line even on error\n          if (currentSession === sessionId \u0026\u0026 isPlaying \u0026\u0026 currentLineIndex === lineIndex) {\n            setCurrentLineIndex(prev =\u003e prev + 1);\n          }\n        }\n      });\n    } catch (error) {\n      console.error('TTS Error:', error);\n      // Continue to next line on error\n      if (currentSession === sessionId \u0026\u0026 isPlaying \u0026\u0026 currentLineIndex === lineIndex) {\n        setCurrentLineIndex(prev =\u003e prev + 1);\n      }\n    }\n  }, [currentLineIndex, dialogues, selectedActor, characterVoices, speed, ttsVolume, sessionId, isPlaying, recognition, speak]);\n\n  // Manual navigation\n  const goToNextLine = () =\u003e {\n    stopTTS();\n    clearAllTimers();\n    playingLineRef.current = -1;\n    setIsListening(false);\n    if (recognition) {\n      recognition.stop();\n    }\n    setCurrentLineIndex((prev) =\u003e Math.min(dialogues.length - 1, prev + 1));\n  };\n\n  // Start countdown\n  const startCountdown = useCallback(() =\u003e {\n    if (settings.countdownTime === 0) {\n      setIsPlaying(true);\n      return;\n    }\n\n    setIsCountingDown(true);\n    setCountdownValue(settings.countdownTime);\n\n    const countdownInterval = setInterval(() =\u003e {\n      setCountdownValue((prev) =\u003e {\n        if (prev \u003c= 1) {\n          clearInterval(countdownInterval);\n          setIsCountingDown(false);\n          setIsPlaying(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  }, [settings.countdownTime]);\n\n  // Control functions\n  const handlePlayPause = () =\u003e {\n    if (isCountingDown) return;\n\n    if (!isPlaying) {\n      setSpeechError('');\n      setSessionId(Date.now().toString()); // Create new session\n      startCountdown();\n    } else {\n      setIsPlaying(false);\n      setIsCountingDown(false);\n      setCountdownValue(0);\n      setIsListening(false);\n      clearAllTimers();\n      playingLineRef.current = -1;\n      stopTTS();\n      if (recognition) {\n        recognition.stop();\n      }\n    }\n  };\n\n  const handleStop = () =\u003e {\n    setIsPlaying(false);\n    setIsCountingDown(false);\n    setCountdownValue(0);\n    setCurrentLineIndex(0);\n    setIsListening(false);\n    clearAllTimers();\n    playingLineRef.current = -1;\n    stopTTS();\n    if (recognition) {\n      recognition.stop();\n    }\n    setSessionId(Date.now().toString()); // Reset session\n  };\n\n  const toggleFullscreen = () =\u003e {\n    if (!isFullscreen) {\n      document.documentElement.requestFullscreen?.();\n    } else {\n      document.exitFullscreen?.();\n    }\n  };\n\n  // Effects\n  useEffect(() =\u003e {\n    const handleFullscreenChange = () =\u003e {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () =\u003e {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n\n  // Play audio/start recognition when line changes - with stable dependencies\n  useEffect(() =\u003e {\n    if (isPlaying \u0026\u0026 currentLineIndex \u003c dialogues.length) {\n      scrollToCurrentLine();\n      // Reset playing line ref when moving to new line\n      if (playingLineRef.current !== currentLineIndex) {\n        playingLineRef.current = -1;\n      }\n      playCurrentLineAudio();\n    } else if (currentLineIndex \u003e= dialogues.length) {\n      setIsPlaying(false);\n    }\n  }, [currentLineIndex, isPlaying, dialogues.length, scrollToCurrentLine, playCurrentLineAudio]);\n\n  // Cleanup on unmount\n  useEffect(() =\u003e {\n    return () =\u003e {\n      clearAllTimers();\n      stopTTS();\n      if (recognition) {\n        recognition.stop();\n      }\n    };\n  }, [clearAllTimers, stopTTS, recognition]);\n\n  // Keyboard shortcuts\n  useEffect(() =\u003e {\n    const handleKeyPress = (event: KeyboardEvent) =\u003e {\n      switch (event.code) {\n        case 'Space':\n          event.preventDefault();\n          handlePlayPause();\n          break;\n        case 'KeyN':\n          event.preventDefault();\n          goToNextLine();\n          break;\n        case 'KeyS':\n          event.preventDefault();\n          goToNextLine();\n          break;\n        case 'KeyF':\n          if (event.ctrlKey || event.metaKey) return;\n          event.preventDefault();\n          toggleFullscreen();\n          break;\n        case 'Escape':\n          if (isFullscreen) {\n            document.exitFullscreen?.();\n          }\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    return () =\u003e {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [isPlaying, isCountingDown, isFullscreen]);\n\n  // Format dialogue lines\n  const formatDialogueLines = () =\u003e {\n    return dialogues.map((dialogue, index) =\u003e {\n      const isCurrent = index === currentLineIndex;\n      const isActor = selectedActor !== 'none' \u0026\u0026 dialogue.character === selectedActor;\n      const hasVoice = characterVoices[dialogue.character];\n      \n      return (\n        \u003cdiv\n          key={index}\n          ref={(el) =\u003e { lineRefs.current[index] = el; }}\n          className={`dialogue-line mb-6 px-4 transition-all duration-300 ${\n            isCurrent ? 'current' : index \u003c currentLineIndex ? 'past' : 'upcoming'\n          }`}\n          style={{\n            fontSize: `${settings.fontSize}px`,\n            lineHeight: settings.lineHeight,\n            color: isCurrent ? highlightColor : settings.textColor,\n            backgroundColor: isCurrent ? 'rgba(255, 255, 255, 0.1)' : 'transparent',\n            padding: isCurrent ? '12px' : '8px',\n            borderRadius: '8px',\n            transform: isCurrent ? 'scale(1.02)' : 'scale(1)',\n            opacity: index \u003c currentLineIndex ? 0.5 : 1,\n            border: (isCurrent \u0026\u0026 isListening) ? '2px solid #ff6b6b' : 'none',\n          }}\n        \u003e\n          \u003cdiv className=\"font-bold mb-2 text-primary flex items-center gap-2\"\u003e\n            {dialogue.character}:\n            {hasVoice \u0026\u0026 !isActor \u0026\u0026 (\n              \u003cVolume2 className=\"w-4 h-4 text-green-500\" /\u003e\n            )}\n            {isActor \u0026\u0026 (\n              \u003cBadge variant=\"secondary\" className=\"text-xs flex items-center gap-1\"\u003e\n                {isListening ? \u003cMic className=\"w-3 h-3\" /\u003e : \u003cMicOff className=\"w-3 h-3\" /\u003e}\n                You\n              \u003c/Badge\u003e\n            )}\n            {isActor \u0026\u0026 isCurrent \u0026\u0026 isVoiceDetected \u0026\u0026 (\n              \u003cdiv className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" /\u003e\n            )}\n          \u003c/div\u003e\n          \u003cdiv\u003e\n            {renderFormattedText(\n              formatDialogueForTeleprompter(dialogue.text),\n              settings.fontSize,\n              settings.lineHeight,\n              'hsl(var(--teleprompter-text-white))'\n            )}\n          \u003c/div\u003e\n        \u003c/div\u003e\n      );\n    });\n  };\n\n  const proSettings = (\n    \u003cCard className=\"bg-card border-border h-fit\"\u003e\n      \u003cCardHeader className=\"pb-4\"\u003e\n        \u003cCardTitle className=\"text-sm text-foreground flex items-center gap-2\"\u003e\n          \u003cHeadphones className=\"w-4 h-4\" /\u003e\n          Pro Settings\n        \u003c/CardTitle\u003e\n      \u003c/CardHeader\u003e\n      \u003cCardContent className=\"space-y-4\"\u003e\n        {speechError \u0026\u0026 (\n          \u003cAlert className=\"mb-4\"\u003e\n            \u003cAlertDescription className=\"text-xs\"\u003e\n              {speechError}\n            \u003c/AlertDescription\u003e\n          \u003c/Alert\u003e\n        )}\n\n        \u003cdiv\u003e\n          \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n            Your Character\n          \u003c/label\u003e\n          \u003cSelect value={selectedActor} onValueChange={handleActorChange}\u003e\n            \u003cSelectTrigger className=\"h-8\"\u003e\n              \u003cSelectValue /\u003e\n            \u003c/SelectTrigger\u003e\n            \u003cSelectContent\u003e\n              \u003cSelectItem value=\"none\"\u003eAll Characters\u003c/SelectItem\u003e\n              {characters.map((character) =\u003e (\n                \u003cSelectItem key={character} value={character}\u003e\n                  {character}\n                \u003c/SelectItem\u003e\n              ))}\n            \u003c/SelectContent\u003e\n          \u003c/Select\u003e\n        \u003c/div\u003e\n\n        \u003cdiv\u003e\n          \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n            Microphone Device\n          \u003c/label\u003e\n          \u003cSelect value={microphoneDeviceId} onValueChange={handleMicrophoneChange}\u003e\n            \u003cSelectTrigger className=\"h-8\"\u003e\n              \u003cSelectValue /\u003e\n            \u003c/SelectTrigger\u003e\n            \u003cSelectContent\u003e\n              \u003cSelectItem value=\"default\"\u003eDefault Microphone\u003c/SelectItem\u003e\n              {microphoneDevices.map((device) =\u003e (\n                \u003cSelectItem key={device.deviceId} value={device.deviceId}\u003e\n                  {device.label || `Microphone ${device.deviceId.slice(0, 8)}...`}\n                \u003c/SelectItem\u003e\n              ))}\n            \u003c/SelectContent\u003e\n          \u003c/Select\u003e\n        \u003c/div\u003e\n\n        \u003cdiv\u003e\n          \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n            Voice Detection Sensitivity: {Math.round(vadThreshold * 100)}%\n          \u003c/label\u003e\n          \u003cSlider\n            value={[vadThreshold]}\n            onValueChange={(value) =\u003e handleVADThresholdChange(value[0])}\n            min={0.1}\n            max={0.8}\n            step={0.1}\n            className=\"w-full\"\n          /\u003e\n        \u003c/div\u003e\n\n        \u003cdiv\u003e\n          \u003clabel className=\"text-xs font-medium text-foreground mb-2 block\"\u003e\n            AI Voice Volume: {Math.round(ttsVolume * 100)}%\n          \u003c/label\u003e\n          \u003cSlider\n            value={[ttsVolume]}\n            onValueChange={(value) =\u003e {\n              setTtsVolume(value[0]);\n              localStorage.setItem('teleprompter-pro-tts-volume', value[0].toString());\n            }}\n            min={0}\n            max={1}\n            step={0.1}\n            className=\"w-full\"\n          /\u003e\n        \u003c/div\u003e\n\n        \u003cdiv className=\"text-center pt-2 border-t border-border\"\u003e\n          \u003cBadge variant=\"outline\" className=\"mb-2 flex items-center gap-2 w-fit mx-auto\"\u003e\n            Line {currentLineIndex + 1} of {dialogues.length}\n            {isListening \u0026\u0026 \u003cMic className=\"w-3 h-3 text-red-500\" /\u003e}\n            {isVoiceDetected \u0026\u0026 \u003cdiv className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" /\u003e}\n          \u003c/Badge\u003e\n          \u003cButton\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={goToNextLine}\n            disabled={!isPlaying}\n            className=\"w-full h-8\"\n          \u003e\n            Skip Line\n          \u003c/Button\u003e\n        \u003c/div\u003e\n\n        {/* Character Voice Settings */}\n        {characters.length \u003e 0 \u0026\u0026 (\n          \u003cdiv className=\"pt-2 border-t border-border\"\u003e\n            \u003ch4 className=\"text-xs font-medium text-foreground mb-2\"\u003eCharacter Voices\u003c/h4\u003e\n            \u003cdiv className=\"space-y-2 max-h-32 overflow-y-auto\"\u003e\n              {characters.slice(0, 4).map((character) =\u003e (\n                \u003cdiv key={character}\u003e\n                  \u003clabel className=\"text-xs text-foreground block mb-1\"\u003e{character}\u003c/label\u003e\n                  \u003cSelect \n                    value={characterVoices[character] || voiceOptions[0].id} \n                    onValueChange={(value) =\u003e handleCharacterVoiceChange(character, value)}\n                  \u003e\n                    \u003cSelectTrigger className=\"h-6 text-xs\"\u003e\n                      \u003cSelectValue /\u003e\n                    \u003c/SelectTrigger\u003e\n                    \u003cSelectContent\u003e\n                      {voiceOptions.map((voice) =\u003e (\n                        \u003cSelectItem key={voice.id} value={voice.id} className=\"text-xs\"\u003e\n                          {voice.name}\n                        \u003c/SelectItem\u003e\n                      ))}\n                    \u003c/SelectContent\u003e\n                  \u003c/Select\u003e\n                \u003c/div\u003e\n              ))}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        )}\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n\n  return (\n    \u003cdiv className=\"h-screen flex flex-col\"\u003e\n      {/* Top Controls */}\n      {!isFullscreen \u0026\u0026 (\n        \u003cTopBarControls\n          isPlaying={isPlaying}\n          speed={speed}\n          isFullscreen={isFullscreen}\n          isCountingDown={isCountingDown}\n          countdownValue={countdownValue}\n          showSettings={showSettings}\n          onPlayPause={handlePlayPause}\n          onStop={handleStop}\n          onSpeedChange={setSpeed}\n          onToggleFullscreen={toggleFullscreen}\n          onToggleSettings={() =\u003e setShowSettings(!showSettings)}\n          onBack={onBack}\n          onEdit={() =\u003e setIsEditingScript(true)}\n          title={`Pro Mode - ${currentScript.title}`}\n          status={`Line ${currentLineIndex + 1} of ${dialogues.length} • ${\n            isListening ? 'Listening...' : isTTSPlaying ? 'Playing Audio' : 'Ready'\n          }`}\n          rightExtra={\u003cPrivacyInfo /\u003e}\n        /\u003e\n      )}\n\n      {/* Main Teleprompter Display */}\n      \u003cdiv \n        className=\"flex-1 relative overflow-hidden\"\n        style={{ \n          backgroundColor: settings.backgroundColor,\n          transform: settings.mirrorMode ? 'scaleX(-1)' : 'none',\n          paddingBottom: showSettings ? '0' : '60px',\n        }}\n      \u003e\n        {/* Fullscreen controls overlay */}\n        {isFullscreen \u0026\u0026 (\n          \u003cdiv className=\"absolute top-4 left-4 right-4 z-10 flex justify-between items-center\"\u003e\n            \u003cdiv className=\"text-white bg-black/50 px-3 py-1 rounded\"\u003e\n              {currentScript.title} - {speed.toFixed(1)}x\n            \u003c/div\u003e\n            \u003cdiv className=\"flex gap-2\"\u003e\n              \u003cButton\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handlePlayPause}\n                className=\"bg-black/50 border-white/20 text-white\"\n              \u003e\n                {isPlaying ? 'Pause' : 'Play'}\n              \u003c/Button\u003e\n              \u003cButton\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToNextLine}\n                className=\"bg-black/50 border-white/20 text-white\"\n              \u003e\n                Skip\n              \u003c/Button\u003e\n              \u003cButton\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() =\u003e document.exitFullscreen?.()}\n                className=\"bg-black/50 border-white/20 text-white\"\n              \u003e\n                Exit Fullscreen\n              \u003c/Button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        )}\n\n        {/* Skip Button at Bottom in Fullscreen */}\n        {isFullscreen \u0026\u0026 (\n          \u003cdiv className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 z-10\"\u003e\n            \u003cButton\n              variant=\"outline\"\n              size=\"default\"\n              onClick={goToNextLine}\n              className=\"bg-black/50 border-white/20 text-white\"\n            \u003e\n              Skip Line\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        )}\n\n        {/* Countdown Overlay */}\n        {isCountingDown \u0026\u0026 (\n          \u003cdiv className=\"absolute inset-0 flex items-center justify-center z-20\"\u003e\n            \u003cdiv className=\"text-8xl font-bold text-white bg-black/70 rounded-full w-32 h-32 flex items-center justify-center animate-pulse\"\u003e\n              {countdownValue}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        )}\n\n        {/* Scroll Container */}\n        \u003cdiv\n          ref={scrollContainerRef}\n          className=\"h-full overflow-y-auto scrollbar-hide smooth-scroll-container\"\n          style={{\n            paddingTop: `${settings.marginTop}vh`,\n            paddingBottom: `${settings.marginBottom}vh`,\n          }}\n        \u003e\n          \u003cdiv className=\"min-h-full\"\u003e\n            {formatDialogueLines()}\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      {/* Bottom Settings Panel */}\n      {!isFullscreen \u0026\u0026 (\n        \u003cBottomSettingsPanel\n          settings={settings}\n          onSettingsChange={handleSettingsChange}\n          onResetSettings={resetSettings}\n          isExpanded={showSettings}\n          onToggle={() =\u003e setShowSettings(!showSettings)}\n        \u003e\n          {proSettings}\n        \u003c/BottomSettingsPanel\u003e\n      )}\n\n      {/* Keyboard shortcuts help */}\n      {!isFullscreen \u0026\u0026 !showSettings \u0026\u0026 (\n        \u003cdiv className=\"bg-muted/50 border-t border-border px-4 py-2 absolute bottom-0 left-0 right-0\"\u003e\n          \u003cp className=\"text-xs text-muted-foreground text-center\"\u003e\n            \u003ckbd className=\"bg-background border border-border px-1 rounded\"\u003eSpace\u003c/kbd\u003e Play/Pause • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003eS\u003c/kbd\u003e Skip Line • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003eF\u003c/kbd\u003e Fullscreen • \n            \u003cspan className=\"text-green-500\"\u003e🎤 Auto-Skip on Speech\u003c/span\u003e\n          \u003c/p\u003e\n        \u003c/div\u003e\n      )}\n      \n      {/* Script Editor */}\n      \u003cScriptEditor\n        script={isEditingScript ? currentScript : null}\n        isOpen={isEditingScript}\n        onClose={() =\u003e setIsEditingScript(false)}\n        onScriptUpdated={handleScriptUpdated}\n      /\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default EnhancedProTeleprompter;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/MobileControls.tsx",
//   "contents": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Label } from '@/components/ui/label';\nimport { \n  Play, \n  Pause, \n  Square, \n  SkipForward,\n  Volume2,\n  Users,\n  Settings,\n  ArrowLeft\n} from 'lucide-react';\nimport { Drawer, DrawerContent, DrawerHeader, DrawerTitle, DrawerTrigger } from '@/components/ui/drawer';\n\ninterface MobileControlsProps {\n  isPlaying: boolean;\n  onPlayPause: () =\u003e void;\n  onStop: () =\u003e void;\n  onSkip: () =\u003e void;\n  onBack: () =\u003e void;\n  // Character settings\n  characters: string[];\n  selectedActor: string;\n  onActorChange: (actor: string) =\u003e void;\n  // Volume settings\n  ttsVolume: number;\n  onTtsVolumeChange: (volume: number) =\u003e void;\n  // Settings\n  onOpenSettings: () =\u003e void;\n  // Status\n  currentLineIndex: number;\n  totalLines: number;\n  isCountingDown: boolean;\n  countdownValue: number;\n}\n\nconst MobileControls: React.FC\u003cMobileControlsProps\u003e = ({\n  isPlaying,\n  onPlayPause,\n  onStop,\n  onSkip,\n  onBack,\n  characters,\n  selectedActor,\n  onActorChange,\n  ttsVolume,\n  onTtsVolumeChange,\n  onOpenSettings,\n  currentLineIndex,\n  totalLines,\n  isCountingDown,\n  countdownValue,\n}) =\u003e {\n  return (\n    \u003cdiv className=\"fixed bottom-0 left-0 right-0 bg-background border-t p-4 space-y-4 md:hidden\"\u003e\n      {/* Top row - character and volume controls */}\n      \u003cdiv className=\"grid grid-cols-2 gap-4\"\u003e\n        \u003cdiv\u003e\n          \u003cLabel className=\"text-xs\"\u003eYour Character\u003c/Label\u003e\n          \u003cSelect value={selectedActor} onValueChange={onActorChange}\u003e\n            \u003cSelectTrigger className=\"h-8 text-xs\"\u003e\n              \u003cSelectValue placeholder=\"Select\" /\u003e\n            \u003c/SelectTrigger\u003e\n            \u003cSelectContent\u003e\n              \u003cSelectItem value=\"none\"\u003eNone\u003c/SelectItem\u003e\n              {characters.map((character) =\u003e (\n                \u003cSelectItem key={character} value={character}\u003e\n                  {character}\n                \u003c/SelectItem\u003e\n              ))}\n            \u003c/SelectContent\u003e\n          \u003c/Select\u003e\n        \u003c/div\u003e\n\n        \u003cDrawer\u003e\n          \u003cDrawerTrigger asChild\u003e\n            \u003cButton variant=\"outline\" size=\"sm\" className=\"h-8 flex items-center gap-2\"\u003e\n              \u003cVolume2 className=\"w-4 h-4\" /\u003e\n              \u003cspan className=\"text-xs\"\u003e{Math.round(ttsVolume * 100)}%\u003c/span\u003e\n            \u003c/Button\u003e\n          \u003c/DrawerTrigger\u003e\n          \u003cDrawerContent\u003e\n            \u003cDrawerHeader\u003e\n              \u003cDrawerTitle\u003eAI Voice Volume\u003c/DrawerTitle\u003e\n            \u003c/DrawerHeader\u003e\n            \u003cdiv className=\"p-4\"\u003e\n              \u003cSlider\n                value={[ttsVolume]}\n                onValueChange={(value) =\u003e onTtsVolumeChange(value[0])}\n                min={0}\n                max={1}\n                step={0.1}\n                className=\"w-full\"\n              /\u003e\n              \u003cdiv className=\"text-center mt-2 text-sm text-muted-foreground\"\u003e\n                {Math.round(ttsVolume * 100)}%\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/DrawerContent\u003e\n        \u003c/Drawer\u003e\n      \u003c/div\u003e\n\n      {/* Status bar */}\n      \u003cdiv className=\"flex items-center justify-between text-xs text-muted-foreground\"\u003e\n        \u003cdiv\u003e\n          Line {currentLineIndex + 1} of {totalLines}\n        \u003c/div\u003e\n        {isCountingDown \u0026\u0026 (\n          \u003cBadge variant=\"secondary\"\u003e\n            Starting in {countdownValue}s\n          \u003c/Badge\u003e\n        )}\n      \u003c/div\u003e\n\n      {/* Control buttons */}\n      \u003cdiv className=\"flex items-center justify-between\"\u003e\n        \u003cButton variant=\"ghost\" size=\"sm\" onClick={onBack}\u003e\n          \u003cArrowLeft className=\"w-4 h-4\" /\u003e\n        \u003c/Button\u003e\n\n        \u003cdiv className=\"flex items-center gap-2\"\u003e\n          \u003cButton variant=\"ghost\" size=\"sm\" onClick={onStop}\u003e\n            \u003cSquare className=\"w-4 h-4\" /\u003e\n          \u003c/Button\u003e\n          \n          \u003cButton \n            size=\"lg\"\n            onClick={onPlayPause}\n            disabled={isCountingDown}\n            className=\"rounded-full h-12 w-12\"\n          \u003e\n            {isPlaying ? (\n              \u003cPause className=\"w-5 h-5\" /\u003e\n            ) : (\n              \u003cPlay className=\"w-5 h-5\" /\u003e\n            )}\n          \u003c/Button\u003e\n          \n          \u003cButton variant=\"ghost\" size=\"sm\" onClick={onSkip}\u003e\n            \u003cSkipForward className=\"w-4 h-4\" /\u003e\n          \u003c/Button\u003e\n        \u003c/div\u003e\n\n        \u003cButton variant=\"ghost\" size=\"sm\" onClick={onOpenSettings}\u003e\n          \u003cSettings className=\"w-4 h-4\" /\u003e\n        \u003c/Button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default MobileControls;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/PrivacyInfo.tsx",
//   "contents": "import React from 'react';\nimport { Info } from 'lucide-react';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Button } from '@/components/ui/button';\n\nexport function PrivacyInfo() {\n  return (\n    \u003cPopover\u003e\n      \u003cPopoverTrigger asChild\u003e\n        \u003cButton \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"text-muted-foreground hover:text-foreground p-1 h-auto\"\n        \u003e\n          \u003cInfo className=\"w-4 h-4 mr-1\" /\u003e\n          \u003cspan className=\"text-xs\"\u003ePrivacy\u003c/span\u003e\n        \u003c/Button\u003e\n      \u003c/PopoverTrigger\u003e\n      \u003cPopoverContent \n        className=\"w-80 text-xs text-muted-foreground\" \n        align=\"end\" \n        side=\"bottom\"\n      \u003e\n        \u003cp\u003e\n          * We will never use your scripts, voice, video, likeness, or info outside of this app. \n          As a member, you can delete all scenes you've uploaded anytime from your Dashboard.\n        \u003c/p\u003e\n      \u003c/PopoverContent\u003e\n    \u003c/Popover\u003e\n  );\n}",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/ProTeleprompter.tsx",
//   "contents": "import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Users, Volume2, ChevronUp, ChevronDown, Download, X, Loader2 } from 'lucide-react';\nimport TopBarControls from './TopBarControls';\nimport SettingsPanel, { TeleprompterSettings } from './SettingsPanel';\nimport { parseScript } from '@/utils/scriptParser';\nimport { usePreRenderedTTS } from '@/hooks/usePreRenderedTTS';\nimport '../SmoothScrollStyles.css';\n\ninterface Script {\n  id: string;\n  title: string;\n  content: string;\n  characters?: string[];\n}\n\ninterface ProTeleprompterProps {\n  script: Script;\n  onBack: () =\u003e void;\n}\n\nconst defaultSettings: TeleprompterSettings = {\n  fontSize: 48,\n  lineHeight: 1.6,\n  marginTop: 25,\n  marginBottom: 25,\n  backgroundColor: 'hsl(var(--teleprompter-black))',\n  textColor: 'hsl(var(--teleprompter-text-white))',\n  mirrorMode: false,\n  countdownTime: 5,\n};\n\n// Available voices for TTS\nconst voices = [\n  { id: '9BWtsMINqrJLrRacOk9x', name: 'Aria' },\n  { id: 'CwhRBWXzGAHq8TQ4Fs17', name: 'Roger' },\n  { id: 'EXAVITQu4vr4xnSDxMaL', name: 'Sarah' },\n  { id: 'FGY2WhTYpPnrIDTdsKH5', name: 'Laura' },\n  { id: 'IKne3meq5aSn9XLyUdCD', name: 'Charlie' },\n  { id: 'JBFqnCBsd6RMkjVDRZzb', name: 'George' },\n  { id: 'N2lVS1w4EtoT3dr4eOWO', name: 'Callum' },\n  { id: 'SAz9YHcvj6GT2YYXdXww', name: 'River' },\n];\n\nconst ProTeleprompter: React.FC\u003cProTeleprompterProps\u003e = ({\n  script,\n  onBack\n}) =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState(1.0);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [settings, setSettings] = useState\u003cTeleprompterSettings\u003e(defaultSettings);\n  const [isCountingDown, setIsCountingDown] = useState(false);\n  const [countdownValue, setCountdownValue] = useState(0);\n\n  // Advanced mode specific state\n  const [selectedActor, setSelectedActor] = useState\u003cstring\u003e('none');\n  const [hideActorLines, setHideActorLines] = useState(false);\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n  const [autoAdvance, setAutoAdvance] = useState(true);\n  const [highlightColor, setHighlightColor] = useState('#ffff00');\n\n  // Pro mode specific state\n  const [defaultVoice, setDefaultVoice] = useState('9BWtsMINqrJLrRacOk9x');\n  const [characterVoices, setCharacterVoices] = useState\u003cRecord\u003cstring, string\u003e\u003e({});\n  const [speechRate, setSpeechRate] = useState(1.0);\n  const [isPlayingAudio, setIsPlayingAudio] = useState(false);\n  const [currentAudio, setCurrentAudio] = useState\u003cHTMLAudioElement | null\u003e(null);\n\n  const scrollContainerRef = useRef\u003cHTMLDivElement\u003e(null);\n  const animationIdRef = useRef\u003cnumber\u003e(0);\n  const lastTimeRef = useRef\u003cnumber\u003e(0);\n  const lineRefs = useRef\u003c{ [key: number]: HTMLDivElement | null }\u003e({});\n\n  // Parse script into dialogue lines\n  const parsedScript = parseScript(script.content);\n  const dialogues = parsedScript.dialogues;\n  const characters = parsedScript.characters;\n\n  // Initialize TTS hook\n  const {\n    status: ttsStatus,\n    progress: ttsProgress,\n    total: ttsTotal,\n    failures: ttsFailures,\n    lastError: ttsError,\n    audioMap,\n    cacheStats,\n    isRunning: isTTSRunning,\n    startPreRender,\n    cancelPreRender,\n    reset: resetTTS\n  } = usePreRenderedTTS();\n\n  // Load settings from localStorage\n  useEffect(() =\u003e {\n    const saved = localStorage.getItem('teleprompter-pro-settings');\n    if (saved) {\n      try {\n        const parsedSettings = JSON.parse(saved);\n        setSettings({ ...defaultSettings, ...parsedSettings });\n      } catch (error) {\n        console.error('Failed to parse saved settings:', error);\n      }\n    }\n\n    // Load pro-specific settings\n    const actorSaved = localStorage.getItem('teleprompter-selected-actor');\n    if (actorSaved) setSelectedActor(actorSaved);\n    \n    const voiceSaved = localStorage.getItem('teleprompter-default-voice');\n    if (voiceSaved) setDefaultVoice(voiceSaved);\n    \n    const characterVoicesSaved = localStorage.getItem('teleprompter-character-voices');\n    if (characterVoicesSaved) {\n      try {\n        setCharacterVoices(JSON.parse(characterVoicesSaved));\n      } catch (error) {\n        console.error('Failed to parse character voices:', error);\n      }\n    }\n  }, []);\n\n  // Save settings\n  const handleSettingsChange = (newSettings: Partial\u003cTeleprompterSettings\u003e) =\u003e {\n    const updatedSettings = { ...settings, ...newSettings };\n    setSettings(updatedSettings);\n    localStorage.setItem('teleprompter-pro-settings', JSON.stringify(updatedSettings));\n  };\n\n  const handleActorChange = (actor: string) =\u003e {\n    setSelectedActor(actor);\n    localStorage.setItem('teleprompter-selected-actor', actor);\n    setCurrentLineIndex(0);\n  };\n\n  const handleDefaultVoiceChange = (voice: string) =\u003e {\n    setDefaultVoice(voice);\n    localStorage.setItem('teleprompter-default-voice', voice);\n  };\n\n  const handleCharacterVoiceChange = (character: string, voice: string) =\u003e {\n    const updated = { ...characterVoices, [character]: voice };\n    setCharacterVoices(updated);\n    localStorage.setItem('teleprompter-character-voices', JSON.stringify(updated));\n  };\n\n  const resetSettings = () =\u003e {\n    setSettings(defaultSettings);\n    localStorage.removeItem('teleprompter-pro-settings');\n  };\n\n  // Get filtered dialogues\n  const getFilteredDialogues = () =\u003e {\n    if (!hideActorLines || selectedActor === 'none') {\n      return dialogues;\n    }\n    return dialogues.filter(dialogue =\u003e dialogue.character !== selectedActor);\n  };\n\n  const filteredDialogues = getFilteredDialogues();\n\n  // Pre-render TTS\n  const handlePreRenderTTS = async () =\u003e {\n    if (isTTSRunning) {\n      cancelPreRender();\n      return;\n    }\n\n    await startPreRender({\n      dialogues: dialogues,\n      actorCharacter: selectedActor,\n      voiceId: defaultVoice,\n      speed: speechRate,\n      characterVoiceMap: characterVoices,\n      scriptId: script.id\n    });\n  };\n\n  // Play audio for current line\n  const playCurrentLineAudio = useCallback(() =\u003e {\n    if (!isPlaying || selectedActor === 'none') return;\n    \n    const currentDialogue = filteredDialogues[currentLineIndex];\n    if (!currentDialogue || currentDialogue.character === selectedActor) return;\n\n    // Find the original dialogue index in the full dialogues array\n    const originalIndex = dialogues.findIndex(d =\u003e \n      d.character === currentDialogue.character \u0026\u0026 \n      d.text === currentDialogue.text\n    );\n\n    if (originalIndex === -1 || !audioMap[originalIndex]) return;\n\n    // Stop current audio if playing\n    if (currentAudio) {\n      currentAudio.pause();\n      currentAudio.currentTime = 0;\n    }\n\n    // Create and play new audio\n    const audio = new Audio(audioMap[originalIndex]);\n    audio.playbackRate = speechRate;\n    \n    setCurrentAudio(audio);\n    setIsPlayingAudio(true);\n\n    audio.onended = () =\u003e {\n      setIsPlayingAudio(false);\n      setCurrentAudio(null);\n      \n      // Auto-advance to next line after audio completes\n      if (autoAdvance) {\n        setCurrentLineIndex((prevIndex) =\u003e {\n          const nextIndex = prevIndex + 1;\n          if (nextIndex \u003e= filteredDialogues.length) {\n            setIsPlaying(false);\n            return prevIndex;\n          }\n          return nextIndex;\n        });\n      }\n    };\n\n    audio.onerror = () =\u003e {\n      setIsPlayingAudio(false);\n      setCurrentAudio(null);\n    };\n\n    audio.play().catch(console.error);\n  }, [currentLineIndex, filteredDialogues, dialogues, audioMap, currentAudio, speechRate, autoAdvance, selectedActor, isPlaying]);\n\n  // Auto-advance logic (when not using audio sync)\n  const autoAdvanceLines = useCallback((currentTime: number) =\u003e {\n    if (!lastTimeRef.current) {\n      lastTimeRef.current = currentTime;\n    }\n\n    const deltaTime = currentTime - lastTimeRef.current;\n    const advanceInterval = 3000 / speed;\n\n    if (deltaTime \u003e= advanceInterval) {\n      setCurrentLineIndex((prevIndex) =\u003e {\n        const nextIndex = prevIndex + 1;\n        if (nextIndex \u003e= filteredDialogues.length) {\n          setIsPlaying(false);\n          return prevIndex;\n        }\n        return nextIndex;\n      });\n      lastTimeRef.current = currentTime;\n    }\n\n    animationIdRef.current = requestAnimationFrame(autoAdvanceLines);\n  }, [speed, filteredDialogues.length]);\n\n  // Manual navigation\n  const goToPreviousLine = () =\u003e {\n    if (currentAudio) {\n      currentAudio.pause();\n      setCurrentAudio(null);\n      setIsPlayingAudio(false);\n    }\n    setCurrentLineIndex((prev) =\u003e Math.max(0, prev - 1));\n  };\n\n  const goToNextLine = () =\u003e {\n    if (currentAudio) {\n      currentAudio.pause();\n      setCurrentAudio(null);\n      setIsPlayingAudio(false);\n    }\n    setCurrentLineIndex((prev) =\u003e Math.min(filteredDialogues.length - 1, prev + 1));\n  };\n\n  // Start countdown\n  const startCountdown = useCallback(() =\u003e {\n    if (settings.countdownTime === 0) {\n      setIsPlaying(true);\n      return;\n    }\n\n    setIsCountingDown(true);\n    setCountdownValue(settings.countdownTime);\n\n    const countdownInterval = setInterval(() =\u003e {\n      setCountdownValue((prev) =\u003e {\n        if (prev \u003c= 1) {\n          clearInterval(countdownInterval);\n          setIsCountingDown(false);\n          setIsPlaying(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  }, [settings.countdownTime]);\n\n  // Control functions\n  const handlePlayPause = () =\u003e {\n    if (isCountingDown) return;\n\n    if (!isPlaying) {\n      startCountdown();\n    } else {\n      setIsPlaying(false);\n      setIsCountingDown(false);\n      setCountdownValue(0);\n      if (currentAudio) {\n        currentAudio.pause();\n        setCurrentAudio(null);\n        setIsPlayingAudio(false);\n      }\n    }\n  };\n\n  const handleStop = () =\u003e {\n    setIsPlaying(false);\n    setIsCountingDown(false);\n    setCountdownValue(0);\n    setCurrentLineIndex(0);\n    lastTimeRef.current = 0;\n    if (currentAudio) {\n      currentAudio.pause();\n      setCurrentAudio(null);\n      setIsPlayingAudio(false);\n    }\n  };\n\n  const toggleFullscreen = () =\u003e {\n    if (!isFullscreen) {\n      document.documentElement.requestFullscreen?.();\n    } else {\n      document.exitFullscreen?.();\n    }\n  };\n\n  // Effects\n  useEffect(() =\u003e {\n    const handleFullscreenChange = () =\u003e {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () =\u003e {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n\n  // Play audio when line changes (Pro mode feature)\n  useEffect(() =\u003e {\n    if (isPlaying \u0026\u0026 Object.keys(audioMap).length \u003e 0) {\n      playCurrentLineAudio();\n    }\n  }, [currentLineIndex, isPlaying, playCurrentLineAudio]);\n\n  // Animation loop for non-audio auto-advance\n  useEffect(() =\u003e {\n    if (isPlaying \u0026\u0026 autoAdvance \u0026\u0026 Object.keys(audioMap).length === 0) {\n      lastTimeRef.current = 0;\n      animationIdRef.current = requestAnimationFrame(autoAdvanceLines);\n    } else {\n      cancelAnimationFrame(animationIdRef.current);\n    }\n\n    return () =\u003e {\n      cancelAnimationFrame(animationIdRef.current);\n    };\n  }, [isPlaying, autoAdvance, autoAdvanceLines, audioMap]);\n\n  // Keyboard shortcuts\n  useEffect(() =\u003e {\n    const handleKeyPress = (event: KeyboardEvent) =\u003e {\n      switch (event.code) {\n        case 'Space':\n          event.preventDefault();\n          handlePlayPause();\n          break;\n        case 'KeyN':\n          event.preventDefault();\n          goToNextLine();\n          break;\n        case 'KeyP':\n          event.preventDefault();\n          goToPreviousLine();\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          setSpeed((prev) =\u003e Math.min(3, prev + 0.1));\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          setSpeed((prev) =\u003e Math.max(0.5, prev - 0.1));\n          break;\n        case 'KeyF':\n          if (event.ctrlKey || event.metaKey) return;\n          event.preventDefault();\n          toggleFullscreen();\n          break;\n        case 'Escape':\n          if (isFullscreen) {\n            document.exitFullscreen?.();\n          }\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    return () =\u003e {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [isPlaying, isCountingDown, isFullscreen]);\n\n  // Format dialogue lines\n  const formatDialogueLines = () =\u003e {\n    return filteredDialogues.map((dialogue, index) =\u003e {\n      const isCurrent = index === currentLineIndex;\n      const isActor = selectedActor !== 'none' \u0026\u0026 dialogue.character === selectedActor;\n      const hasAudio = Object.keys(audioMap).length \u003e 0;\n      \n      return (\n        \u003cdiv\n          key={index}\n          ref={(el) =\u003e { lineRefs.current[index] = el; }}\n          className={`dialogue-line mb-6 px-4 transition-all duration-300 ${\n            isCurrent ? 'current' : index \u003c currentLineIndex ? 'past' : 'upcoming'\n          }`}\n          style={{\n            fontSize: `${settings.fontSize}px`,\n            lineHeight: settings.lineHeight,\n            color: isCurrent ? highlightColor : settings.textColor,\n            backgroundColor: isCurrent ? 'rgba(255, 255, 255, 0.1)' : 'transparent',\n            padding: isCurrent ? '12px' : '8px',\n            borderRadius: '8px',\n            transform: isCurrent ? 'scale(1.02)' : 'scale(1)',\n            opacity: isActor ? 0.6 : 1,\n            border: (isCurrent \u0026\u0026 isPlayingAudio) ? '2px solid #00ff00' : 'none',\n          }}\n        \u003e\n          \u003cdiv className=\"font-bold mb-2 text-primary flex items-center gap-2\"\u003e\n            {dialogue.character}:\n            {hasAudio \u0026\u0026 !isActor \u0026\u0026 (\n              \u003cVolume2 className=\"w-4 h-4 text-green-500\" /\u003e\n            )}\n          \u003c/div\u003e\n          \u003cdiv\u003e\n            {dialogue.text}\n          \u003c/div\u003e\n        \u003c/div\u003e\n      );\n    });\n  };\n\n  return (\n    \u003cdiv className=\"h-screen flex flex-col\"\u003e\n      {/* Top Controls */}\n      {!isFullscreen \u0026\u0026 (\n        \u003cTopBarControls\n          isPlaying={isPlaying}\n          speed={speed}\n          isFullscreen={isFullscreen}\n          isCountingDown={isCountingDown}\n          countdownValue={countdownValue}\n          showSettings={showSettings}\n          onPlayPause={handlePlayPause}\n          onStop={handleStop}\n          onSpeedChange={setSpeed}\n          onToggleFullscreen={toggleFullscreen}\n          onToggleSettings={() =\u003e setShowSettings(!showSettings)}\n          onBack={onBack}\n          title={`Pro Mode - ${script.title}`}\n          status={`Line ${currentLineIndex + 1} of ${filteredDialogues.length} • ${isPlayingAudio ? 'Playing Audio' : 'Ready'}`}\n        /\u003e\n      )}\n\n      \u003cdiv className=\"flex-1 flex\"\u003e\n        {/* Settings Panel */}\n        {showSettings \u0026\u0026 !isFullscreen \u0026\u0026 (\n          \u003cdiv className=\"w-96 border-r border-border overflow-y-auto\"\u003e\n            \u003cSettingsPanel\n              settings={settings}\n              onSettingsChange={handleSettingsChange}\n              onResetSettings={resetSettings}\n            /\u003e\n            \n            {/* Character Settings */}\n            \u003cCard className=\"m-4 bg-card border-border\"\u003e\n              \u003cCardHeader\u003e\n                \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n                  \u003cUsers className=\"w-5 h-5\" /\u003e\n                  Character Settings\n                \u003c/CardTitle\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent className=\"space-y-4\"\u003e\n                \u003cdiv\u003e\n                  \u003clabel className=\"text-sm font-medium text-foreground mb-2 block\"\u003e\n                    Your Role\n                  \u003c/label\u003e\n                  \u003cSelect value={selectedActor} onValueChange={handleActorChange}\u003e\n                    \u003cSelectTrigger\u003e\n                      \u003cSelectValue /\u003e\n                    \u003c/SelectTrigger\u003e\n                    \u003cSelectContent\u003e\n                      \u003cSelectItem value=\"none\"\u003eAll Characters\u003c/SelectItem\u003e\n                      {characters.map((character) =\u003e (\n                        \u003cSelectItem key={character} value={character}\u003e\n                          {character}\n                        \u003c/SelectItem\u003e\n                      ))}\n                    \u003c/SelectContent\u003e\n                  \u003c/Select\u003e\n                \u003c/div\u003e\n\n                \u003cdiv className=\"flex items-center justify-between\"\u003e\n                  \u003clabel className=\"text-sm font-medium text-foreground\"\u003e\n                    Hide Your Lines\n                  \u003c/label\u003e\n                  \u003cSwitch\n                    checked={hideActorLines \u0026\u0026 selectedActor !== 'none'}\n                    onCheckedChange={setHideActorLines}\n                    disabled={selectedActor === 'none'}\n                  /\u003e\n                \u003c/div\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n\n            {/* TTS Settings */}\n            \u003cCard className=\"m-4 bg-card border-border\"\u003e\n              \u003cCardHeader\u003e\n                \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n                  \u003cVolume2 className=\"w-5 h-5\" /\u003e\n                  Voice Settings\n                \u003c/CardTitle\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent className=\"space-y-4\"\u003e\n                \u003cdiv\u003e\n                  \u003clabel className=\"text-sm font-medium text-foreground mb-2 block\"\u003e\n                    Default Voice\n                  \u003c/label\u003e\n                  \u003cSelect value={defaultVoice} onValueChange={handleDefaultVoiceChange}\u003e\n                    \u003cSelectTrigger\u003e\n                      \u003cSelectValue /\u003e\n                    \u003c/SelectTrigger\u003e\n                    \u003cSelectContent\u003e\n                      {voices.map((voice) =\u003e (\n                        \u003cSelectItem key={voice.id} value={voice.id}\u003e\n                          {voice.name}\n                        \u003c/SelectItem\u003e\n                      ))}\n                    \u003c/SelectContent\u003e\n                  \u003c/Select\u003e\n                \u003c/div\u003e\n\n                \u003cdiv\u003e\n                  \u003clabel className=\"text-sm font-medium text-foreground mb-2 block\"\u003e\n                    Speech Rate: {speechRate.toFixed(1)}x\n                  \u003c/label\u003e\n                  \u003cinput\n                    type=\"range\"\n                    min={0.5}\n                    max={2}\n                    step={0.1}\n                    value={speechRate}\n                    onChange={(e) =\u003e setSpeechRate(parseFloat(e.target.value))}\n                    className=\"w-full\"\n                  /\u003e\n                \u003c/div\u003e\n\n                {/* Character Voice Mapping */}\n                \u003cdiv className=\"space-y-2\"\u003e\n                  \u003clabel className=\"text-sm font-medium text-foreground\"\u003e\n                    Character Voices\n                  \u003c/label\u003e\n                  {characters.filter(char =\u003e char !== selectedActor).map((character) =\u003e (\n                    \u003cdiv key={character} className=\"flex items-center gap-2\"\u003e\n                      \u003cspan className=\"text-xs text-muted-foreground w-20 truncate\"\u003e\n                        {character}:\n                      \u003c/span\u003e\n                      \u003cSelect \n                        value={characterVoices[character] || defaultVoice} \n                        onValueChange={(voice) =\u003e handleCharacterVoiceChange(character, voice)}\n                      \u003e\n                        \u003cSelectTrigger className=\"h-8 text-xs\"\u003e\n                          \u003cSelectValue /\u003e\n                        \u003c/SelectTrigger\u003e\n                        \u003cSelectContent\u003e\n                          {voices.map((voice) =\u003e (\n                            \u003cSelectItem key={voice.id} value={voice.id}\u003e\n                              {voice.name}\n                            \u003c/SelectItem\u003e\n                          ))}\n                        \u003c/SelectContent\u003e\n                      \u003c/Select\u003e\n                    \u003c/div\u003e\n                  ))}\n                \u003c/div\u003e\n\n                {/* Pre-render Controls */}\n                \u003cdiv className=\"pt-4 border-t border-border\"\u003e\n                  \u003cButton \n                    onClick={handlePreRenderTTS}\n                    disabled={isTTSRunning}\n                    className=\"w-full mb-3\"\n                    variant={Object.keys(audioMap).length \u003e 0 ? \"default\" : \"outline\"}\n                  \u003e\n                    {isTTSRunning ? (\n                      \u003c\u003e\n                        \u003cLoader2 className=\"w-4 h-4 mr-2 animate-spin\" /\u003e\n                        Cancel Pre-render\n                      \u003c/\u003e\n                    ) : Object.keys(audioMap).length \u003e 0 ? (\n                      \u003c\u003e\n                        \u003cVolume2 className=\"w-4 h-4 mr-2\" /\u003e\n                        Re-generate Audio\n                      \u003c/\u003e\n                    ) : (\n                      \u003c\u003e\n                        \u003cDownload className=\"w-4 h-4 mr-2\" /\u003e\n                        Pre-render Partner Audio\n                      \u003c/\u003e\n                    )}\n                  \u003c/Button\u003e\n\n                  {/* TTS Progress */}\n                  {(isTTSRunning || ttsStatus === 'completed') \u0026\u0026 (\n                    \u003cdiv className=\"space-y-2\"\u003e\n                      \u003cdiv className=\"flex justify-between text-xs\"\u003e\n                        \u003cspan\u003eProgress: {ttsProgress}/{ttsTotal}\u003c/span\u003e\n                        \u003cspan\u003eStatus: {ttsStatus}\u003c/span\u003e\n                      \u003c/div\u003e\n                      \u003cProgress value={(ttsProgress / ttsTotal) * 100} /\u003e\n                      \n                      {cacheStats.fromCache \u003e 0 || cacheStats.generated \u003e 0 ? (\n                        \u003cdiv className=\"flex gap-2 text-xs\"\u003e\n                          \u003cBadge variant=\"outline\"\u003e\n                            Cached: {cacheStats.fromCache}\n                          \u003c/Badge\u003e\n                          \u003cBadge variant=\"outline\"\u003e\n                            New: {cacheStats.generated}\n                          \u003c/Badge\u003e\n                        \u003c/div\u003e\n                      ) : null}\n                      \n                      {ttsFailures \u003e 0 \u0026\u0026 (\n                        \u003cAlert\u003e\n                          \u003cAlertDescription className=\"text-xs\"\u003e\n                            {ttsFailures} lines failed. Last error: {ttsError}\n                          \u003c/AlertDescription\u003e\n                        \u003c/Alert\u003e\n                      )}\n                    \u003c/div\u003e\n                  )}\n                \u003c/div\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n\n            {/* Navigation Controls */}\n            \u003cCard className=\"m-4 bg-card border-border\"\u003e\n              \u003cCardContent className=\"p-4 text-center\"\u003e\n                \u003cBadge variant=\"outline\" className=\"mb-3\"\u003e\n                  Line {currentLineIndex + 1} of {filteredDialogues.length}\n                \u003c/Badge\u003e\n                \u003cdiv className=\"flex gap-2\"\u003e\n                  \u003cButton\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={goToPreviousLine}\n                    disabled={currentLineIndex === 0}\n                    className=\"flex-1\"\n                  \u003e\n                    \u003cChevronUp className=\"w-4 h-4\" /\u003e\n                    Previous\n                  \u003c/Button\u003e\n                  \u003cButton\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={goToNextLine}\n                    disabled={currentLineIndex \u003e= filteredDialogues.length - 1}\n                    className=\"flex-1\"\n                  \u003e\n                    \u003cChevronDown className=\"w-4 h-4\" /\u003e\n                    Next\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          \u003c/div\u003e\n        )}\n\n        {/* Main Teleprompter Display */}\n        \u003cdiv \n          className=\"flex-1 relative overflow-hidden\"\n          style={{ \n            backgroundColor: settings.backgroundColor,\n            transform: settings.mirrorMode ? 'scaleX(-1)' : 'none',\n          }}\n        \u003e\n          {/* Countdown Overlay */}\n          {isCountingDown \u0026\u0026 (\n            \u003cdiv className=\"absolute inset-0 flex items-center justify-center z-20\"\u003e\n              \u003cdiv className=\"text-8xl font-bold text-white bg-black/70 rounded-full w-32 h-32 flex items-center justify-center animate-pulse\"\u003e\n                {countdownValue}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          )}\n\n          {/* Scroll Container */}\n          \u003cdiv\n            ref={scrollContainerRef}\n            className=\"h-full overflow-y-auto scrollbar-hide smooth-scroll-container\"\n            style={{\n              paddingTop: `${settings.marginTop}vh`,\n              paddingBottom: `${settings.marginBottom}vh`,\n            }}\n          \u003e\n            \u003cdiv className=\"min-h-full\"\u003e\n              {formatDialogueLines()}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      {/* Keyboard shortcuts help */}\n      {!isFullscreen \u0026\u0026 (\n        \u003cdiv className=\"bg-muted/50 border-t border-border px-4 py-2\"\u003e\n          \u003cp className=\"text-xs text-muted-foreground text-center\"\u003e\n            \u003ckbd className=\"bg-background border border-border px-1 rounded\"\u003eSpace\u003c/kbd\u003e Play/Pause • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003eN/P\u003c/kbd\u003e Next/Prev Line • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003e↑/↓\u003c/kbd\u003e Speed • \n            \u003ckbd className=\"bg-background border border-border px-1 rounded ml-1\"\u003eF\u003c/kbd\u003e Fullscreen •\n            \u003cspan className=\"ml-1 text-green-600\"\u003e🔊 AI Partner Audio Enabled\u003c/span\u003e\n          \u003c/p\u003e\n        \u003c/div\u003e\n      )}\n    \u003c/div\u003e\n  );\n};\n\nexport default ProTeleprompter;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/RightSideSettings.tsx",
//   "contents": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { X, Palette, Type, Settings } from 'lucide-react';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';\n\nexport interface TeleprompterSettings {\n  fontSize: number;\n  lineHeight: number;\n  marginTop: number;\n  marginBottom: number;\n  backgroundColor: string;\n  textColor: string;\n  mirrorMode: boolean;\n  countdownTime: number;\n}\n\ninterface RightSideSettingsProps {\n  settings: TeleprompterSettings;\n  onSettingsChange: (settings: Partial\u003cTeleprompterSettings\u003e) =\u003e void;\n  onResetSettings?: () =\u003e void;\n  isOpen: boolean;\n  onOpenChange: (open: boolean) =\u003e void;\n  // Character and TTS settings\n  characters: string[];\n  selectedActor: string;\n  onActorChange: (actor: string) =\u003e void;\n  characterVoices: Record\u003cstring, string\u003e;\n  onCharacterVoiceChange: (character: string, voiceId: string) =\u003e void;\n  ttsVolume: number;\n  onTtsVolumeChange: (volume: number) =\u003e void;\n  ttsSpeed: number;\n  onTtsSpeedChange: (speed: number) =\u003e void;\n  voiceOptions: Array\u003c{ id: string; name: string; gender: string }\u003e;\n}\n\nconst backgroundPresets = [\n  { id: 'green', name: 'Green Screen', color: 'hsl(120, 100%, 25%)' },\n  { id: 'yellow', name: 'Yellow', color: 'hsl(51, 100%, 50%)' },\n  { id: 'white', name: 'White', color: 'hsl(0, 0%, 100%)' },\n  { id: 'black', name: 'Black', color: 'hsl(0, 0%, 0%)' },\n];\n\nconst textColors = [\n  { id: 'white', name: 'White', color: 'hsl(0, 0%, 100%)' },\n  { id: 'black', name: 'Black', color: 'hsl(0, 0%, 0%)' },\n  { id: 'yellow', name: 'Yellow', color: 'hsl(51, 100%, 50%)' },\n  { id: 'blue', name: 'Blue', color: 'hsl(210, 100%, 50%)' },\n];\n\nconst RightSideSettings: React.FC\u003cRightSideSettingsProps\u003e = ({\n  settings,\n  onSettingsChange,\n  onResetSettings,\n  isOpen,\n  onOpenChange,\n  characters,\n  selectedActor,\n  onActorChange,\n  characterVoices,\n  onCharacterVoiceChange,\n  ttsVolume,\n  onTtsVolumeChange,\n  ttsSpeed,\n  onTtsSpeedChange,\n  voiceOptions,\n}) =\u003e {\n  return (\n    \u003cSheet open={isOpen} onOpenChange={onOpenChange}\u003e\n      \u003cSheetContent side=\"right\" className=\"w-[400px] sm:w-[540px] overflow-y-auto\"\u003e\n        \u003cSheetHeader\u003e\n          \u003cSheetTitle className=\"flex items-center gap-2\"\u003e\n            \u003cSettings className=\"w-5 h-5\" /\u003e\n            Teleprompter Settings\n          \u003c/SheetTitle\u003e\n        \u003c/SheetHeader\u003e\n\n        \u003cdiv className=\"space-y-6 mt-6\"\u003e\n          {/* Text Settings */}\n          \u003cCard\u003e\n            \u003cCardHeader className=\"pb-3\"\u003e\n              \u003cCardTitle className=\"flex items-center gap-2 text-base\"\u003e\n                \u003cType className=\"w-4 h-4\" /\u003e\n                Text Settings\n              \u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent className=\"space-y-4\"\u003e\n              \u003cdiv\u003e\n                \u003cLabel className=\"text-sm\"\u003eFont Size: {settings.fontSize}px\u003c/Label\u003e\n                \u003cSlider\n                  value={[settings.fontSize]}\n                  onValueChange={(value) =\u003e onSettingsChange({ fontSize: value[0] })}\n                  min={20}\n                  max={120}\n                  step={2}\n                  className=\"mt-2\"\n                /\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv\u003e\n                \u003cLabel className=\"text-sm\"\u003eText Color\u003c/Label\u003e\n                \u003cdiv className=\"grid grid-cols-2 gap-2 mt-2\"\u003e\n                  {textColors.map((color) =\u003e (\n                    \u003cButton\n                      key={color.id}\n                      variant={settings.textColor === color.color ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() =\u003e onSettingsChange({ textColor: color.color })}\n                      className=\"justify-start\"\n                    \u003e\n                      \u003cdiv\n                        className=\"w-4 h-4 rounded border mr-2\"\n                        style={{ backgroundColor: color.color }}\n                      /\u003e\n                      {color.name}\n                    \u003c/Button\u003e\n                  ))}\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Background Settings */}\n          \u003cCard\u003e\n            \u003cCardHeader className=\"pb-3\"\u003e\n              \u003cCardTitle className=\"flex items-center gap-2 text-base\"\u003e\n                \u003cPalette className=\"w-4 h-4\" /\u003e\n                Background Settings\n              \u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent className=\"space-y-4\"\u003e\n              \u003cdiv className=\"grid grid-cols-2 gap-2\"\u003e\n                {backgroundPresets.map((preset) =\u003e (\n                  \u003cButton\n                    key={preset.id}\n                    variant={settings.backgroundColor === preset.color ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() =\u003e onSettingsChange({ backgroundColor: preset.color })}\n                    className=\"justify-start\"\n                  \u003e\n                    \u003cdiv\n                      className=\"w-4 h-4 rounded border mr-2\"\n                      style={{ backgroundColor: preset.color }}\n                    /\u003e\n                    {preset.name}\n                  \u003c/Button\u003e\n                ))}\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Advanced Settings */}\n          \u003cCard\u003e\n            \u003cCardHeader className=\"pb-3\"\u003e\n              \u003cCardTitle className=\"flex items-center gap-2 text-base\"\u003e\n                \u003cSettings className=\"w-4 h-4\" /\u003e\n                Advanced Settings\n              \u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent className=\"space-y-6\"\u003e\n              {/* Character Selection */}\n              \u003cdiv\u003e\n                \u003cLabel className=\"text-sm\"\u003eYour Character\u003c/Label\u003e\n                \u003cSelect value={selectedActor} onValueChange={onActorChange}\u003e\n                  \u003cSelectTrigger className=\"mt-2\"\u003e\n                    \u003cSelectValue placeholder=\"Select your character\" /\u003e\n                  \u003c/SelectTrigger\u003e\n                  \u003cSelectContent\u003e\n                    \u003cSelectItem value=\"none\"\u003eNone (View All)\u003c/SelectItem\u003e\n                    {characters.map((character) =\u003e (\n                      \u003cSelectItem key={character} value={character}\u003e\n                        {character}\n                      \u003c/SelectItem\u003e\n                    ))}\n                  \u003c/SelectContent\u003e\n                \u003c/Select\u003e\n              \u003c/div\u003e\n\n              {/* AI Volume */}\n              \u003cdiv\u003e\n                \u003cLabel className=\"text-sm\"\u003eAI Voice Volume: {Math.round(ttsVolume * 100)}%\u003c/Label\u003e\n                \u003cSlider\n                  value={[ttsVolume]}\n                  onValueChange={(value) =\u003e onTtsVolumeChange(value[0])}\n                  min={0}\n                  max={1}\n                  step={0.1}\n                  className=\"mt-2\"\n                /\u003e\n              \u003c/div\u003e\n\n              {/* AI Speed */}\n              \u003cdiv\u003e\n                \u003cLabel className=\"text-sm\"\u003eAI Voice Speed: {ttsSpeed.toFixed(1)}x\u003c/Label\u003e\n                \u003cSlider\n                  value={[ttsSpeed]}\n                  onValueChange={(value) =\u003e onTtsSpeedChange(value[0])}\n                  min={0.5}\n                  max={2.0}\n                  step={0.1}\n                  className=\"mt-2\"\n                /\u003e\n              \u003c/div\u003e\n\n              {/* Character Voices */}\n              \u003cdiv className=\"space-y-3\"\u003e\n                \u003cLabel className=\"text-sm\"\u003eCharacter Voices\u003c/Label\u003e\n                {characters.map((character) =\u003e (\n                  \u003cdiv key={character}\u003e\n                    \u003cLabel className=\"text-xs text-muted-foreground\"\u003e{character}\u003c/Label\u003e\n                    \u003cSelect\n                      value={characterVoices[character] || voiceOptions[0]?.id}\n                      onValueChange={(voiceId) =\u003e onCharacterVoiceChange(character, voiceId)}\n                    \u003e\n                      \u003cSelectTrigger className=\"mt-1\"\u003e\n                        \u003cSelectValue /\u003e\n                      \u003c/SelectTrigger\u003e\n                      \u003cSelectContent\u003e\n                        {voiceOptions.map((voice) =\u003e (\n                          \u003cSelectItem key={voice.id} value={voice.id}\u003e\n                            {voice.name}\n                          \u003c/SelectItem\u003e\n                        ))}\n                      \u003c/SelectContent\u003e\n                    \u003c/Select\u003e\n                  \u003c/div\u003e\n                ))}\n              \u003c/div\u003e\n\n              {/* Mirror Mode */}\n              \u003cdiv className=\"flex items-center justify-between\"\u003e\n                \u003cLabel className=\"text-sm\"\u003eMirror Mode\u003c/Label\u003e\n                \u003cSwitch\n                  checked={settings.mirrorMode}\n                  onCheckedChange={(checked) =\u003e onSettingsChange({ mirrorMode: checked })}\n                /\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Reset Button */}\n          {onResetSettings \u0026\u0026 (\n            \u003cButton \n              variant=\"outline\" \n              onClick={onResetSettings}\n              className=\"w-full\"\n            \u003e\n              Reset to Defaults\n            \u003c/Button\u003e\n          )}\n        \u003c/div\u003e\n      \u003c/SheetContent\u003e\n    \u003c/Sheet\u003e\n  );\n};\n\nexport default RightSideSettings;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/ScriptEditor.tsx",
//   "contents": "import React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { supabase } from '@/integrations/supabase/client';\nimport { Save, X } from 'lucide-react';\n\ninterface Script {\n  id: string;\n  title: string;\n  content: string;\n}\n\ninterface ScriptEditorProps {\n  script: Script | null;\n  isOpen: boolean;\n  onClose: () =\u003e void;\n  onScriptUpdated?: (updatedScript: Script) =\u003e void;\n}\n\nconst ScriptEditor: React.FC\u003cScriptEditorProps\u003e = ({\n  script,\n  isOpen,\n  onClose,\n  onScriptUpdated\n}) =\u003e {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [isSaving, setIsSaving] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() =\u003e {\n    if (script) {\n      setTitle(script.title);\n      setContent(script.content);\n    }\n  }, [script]);\n\n  const handleSave = async () =\u003e {\n    if (!script || !title.trim() || !content.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in both title and content.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSaving(true);\n    \n    try {\n      const { data, error } = await supabase\n        .from('scripts')\n        .update({\n          title: title.trim(),\n          content: content.trim(),\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', script.id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      toast({\n        title: \"Script Updated\",\n        description: `\"${title}\" has been successfully updated.`,\n      });\n\n      // Call the callback with updated script\n      if (onScriptUpdated \u0026\u0026 data) {\n        onScriptUpdated(data);\n      }\n\n      onClose();\n    } catch (error: any) {\n      console.error('Error updating script:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update script. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleCancel = () =\u003e {\n    if (script) {\n      setTitle(script.title);\n      setContent(script.content);\n    }\n    onClose();\n  };\n\n  return (\n    \u003cDialog open={isOpen} onOpenChange={handleCancel}\u003e\n      \u003cDialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden flex flex-col\"\u003e\n        \u003cDialogHeader\u003e\n          \u003cDialogTitle className=\"flex items-center gap-2\"\u003e\n            Edit Script\n          \u003c/DialogTitle\u003e\n          \u003cDialogDescription\u003e\n            Make changes to your script. Your changes will be saved and reflected in the teleprompter.\n          \u003c/DialogDescription\u003e\n        \u003c/DialogHeader\u003e\n\n        \u003cdiv className=\"flex-1 space-y-4 overflow-y-auto\"\u003e\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"script-title\"\u003eScript Title\u003c/Label\u003e\n            \u003cInput\n              id=\"script-title\"\n              value={title}\n              onChange={(e) =\u003e setTitle(e.target.value)}\n              placeholder=\"Enter script title...\"\n              disabled={isSaving}\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2 flex-1\"\u003e\n            \u003cLabel htmlFor=\"script-content\"\u003eScript Content\u003c/Label\u003e\n            \u003cTextarea\n              id=\"script-content\"\n              value={content}\n              onChange={(e) =\u003e setContent(e.target.value)}\n              placeholder=\"Enter your script content here...\"\n              className=\"min-h-[400px] font-mono text-sm resize-none\"\n              disabled={isSaving}\n            /\u003e\n            \u003cp className=\"text-xs text-muted-foreground\"\u003e\n              Character count: {content.length}\n            \u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cDialogFooter className=\"flex gap-2\"\u003e\n          \u003cButton\n            variant=\"outline\"\n            onClick={handleCancel}\n            disabled={isSaving}\n            className=\"flex items-center gap-2\"\n          \u003e\n            \u003cX className=\"w-4 h-4\" /\u003e\n            Cancel\n          \u003c/Button\u003e\n          \u003cButton\n            onClick={handleSave}\n            disabled={isSaving || !title.trim() || !content.trim()}\n            className=\"flex items-center gap-2\"\n          \u003e\n            \u003cSave className=\"w-4 h-4\" /\u003e\n            {isSaving ? 'Saving...' : 'Save Changes'}\n          \u003c/Button\u003e\n        \u003c/DialogFooter\u003e\n      \u003c/DialogContent\u003e\n    \u003c/Dialog\u003e\n  );\n};\n\nexport default ScriptEditor;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/SettingsPanel.tsx",
//   "contents": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Settings, Palette, Type, RotateCcw } from 'lucide-react';\n\nexport interface TeleprompterSettings {\n  fontSize: number;\n  lineHeight: number;\n  marginTop: number;\n  marginBottom: number;\n  backgroundColor: string;\n  textColor: string;\n  mirrorMode: boolean;\n  countdownTime: number;\n}\n\ninterface SettingsPanelProps {\n  settings: TeleprompterSettings;\n  onSettingsChange: (settings: Partial\u003cTeleprompterSettings\u003e) =\u003e void;\n  onResetSettings?: () =\u003e void;\n}\n\nconst colorPresets = [\n  { id: 'black-white', bg: 'hsl(var(--teleprompter-black))', text: 'hsl(var(--teleprompter-text-white))', label: 'Black \u0026 White' },\n  { id: 'white-black', bg: 'hsl(var(--teleprompter-white))', text: 'hsl(var(--teleprompter-text-black))', label: 'White \u0026 Black' },\n  { id: 'green-yellow', bg: 'hsl(var(--teleprompter-green))', text: 'hsl(var(--teleprompter-text-yellow))', label: 'Green \u0026 Yellow' },\n  { id: 'blue-white', bg: 'hsl(var(--teleprompter-blue))', text: 'hsl(var(--teleprompter-text-white))', label: 'Blue \u0026 White' },\n];\n\nconst SettingsPanel: React.FC\u003cSettingsPanelProps\u003e = ({\n  settings,\n  onSettingsChange,\n  onResetSettings\n}) =\u003e {\n  const handleColorPresetChange = (presetId: string) =\u003e {\n    const preset = colorPresets.find(p =\u003e p.id === presetId);\n    if (preset) {\n      onSettingsChange({\n        backgroundColor: preset.bg,\n        textColor: preset.text\n      });\n    }\n  };\n\n  const getCurrentPreset = () =\u003e {\n    return colorPresets.find(preset =\u003e \n      preset.bg === settings.backgroundColor \u0026\u0026 \n      preset.text === settings.textColor\n    )?.id || 'custom';\n  };\n\n  return (\n    \u003cCard className=\"bg-card border-border\"\u003e\n      \u003cCardHeader className=\"pb-4\"\u003e\n        \u003cCardTitle className=\"text-foreground flex items-center gap-2\"\u003e\n          \u003cSettings className=\"w-5 h-5\" /\u003e\n          Teleprompter Settings\n        \u003c/CardTitle\u003e\n      \u003c/CardHeader\u003e\n      \u003cCardContent className=\"space-y-6\"\u003e\n        {/* Text Settings */}\n        \u003cdiv className=\"space-y-4\"\u003e\n          \u003cdiv className=\"flex items-center gap-2 mb-3\"\u003e\n            \u003cType className=\"w-4 h-4 text-primary\" /\u003e\n            \u003ch4 className=\"font-medium text-foreground\"\u003eText Settings\u003c/h4\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-3\"\u003e\n            \u003cdiv\u003e\n              \u003clabel className=\"text-sm font-medium text-foreground mb-2 block\"\u003e\n                Font Size: {settings.fontSize}px\n              \u003c/label\u003e\n              \u003cSlider\n                value={[settings.fontSize]}\n                onValueChange={(value) =\u003e onSettingsChange({ fontSize: value[0] })}\n                min={16}\n                max={120}\n                step={2}\n                className=\"w-full\"\n              /\u003e\n            \u003c/div\u003e\n\n            \u003cdiv\u003e\n              \u003clabel className=\"text-sm font-medium text-foreground mb-2 block\"\u003e\n                Line Height: {settings.lineHeight}\n              \u003c/label\u003e\n              \u003cSlider\n                value={[settings.lineHeight]}\n                onValueChange={(value) =\u003e onSettingsChange({ lineHeight: value[0] })}\n                min={1}\n                max={3}\n                step={0.1}\n                className=\"w-full\"\n              /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        {/* Layout Settings */}\n        \u003cdiv className=\"space-y-4\"\u003e\n          \u003ch4 className=\"font-medium text-foreground\"\u003eLayout\u003c/h4\u003e\n          \n          \u003cdiv className=\"grid grid-cols-2 gap-3\"\u003e\n            \u003cdiv\u003e\n              \u003clabel className=\"text-sm font-medium text-foreground mb-2 block\"\u003e\n                Top Margin: {settings.marginTop}%\n              \u003c/label\u003e\n              \u003cSlider\n                value={[settings.marginTop]}\n                onValueChange={(value) =\u003e onSettingsChange({ marginTop: value[0] })}\n                min={0}\n                max={40}\n                step={5}\n                className=\"w-full\"\n              /\u003e\n            \u003c/div\u003e\n\n            \u003cdiv\u003e\n              \u003clabel className=\"text-sm font-medium text-foreground mb-2 block\"\u003e\n                Bottom Margin: {settings.marginBottom}%\n              \u003c/label\u003e\n              \u003cSlider\n                value={[settings.marginBottom]}\n                onValueChange={(value) =\u003e onSettingsChange({ marginBottom: value[0] })}\n                min={0}\n                max={40}\n                step={5}\n                className=\"w-full\"\n              /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        {/* Color Settings */}\n        \u003cdiv className=\"space-y-4\"\u003e\n          \u003cdiv className=\"flex items-center gap-2 mb-3\"\u003e\n            \u003cPalette className=\"w-4 h-4 text-primary\" /\u003e\n            \u003ch4 className=\"font-medium text-foreground\"\u003eColors\u003c/h4\u003e\n          \u003c/div\u003e\n\n          \u003cdiv\u003e\n            \u003clabel className=\"text-sm font-medium text-foreground mb-2 block\"\u003e\n              Color Theme\n            \u003c/label\u003e\n            \u003cSelect value={getCurrentPreset()} onValueChange={handleColorPresetChange}\u003e\n              \u003cSelectTrigger\u003e\n                \u003cSelectValue /\u003e\n              \u003c/SelectTrigger\u003e\n              \u003cSelectContent\u003e\n                {colorPresets.map((preset) =\u003e (\n                  \u003cSelectItem key={preset.id} value={preset.id}\u003e\n                    \u003cdiv className=\"flex items-center gap-2\"\u003e\n                      \u003cdiv \n                        className=\"w-4 h-4 rounded border border-border\"\n                        style={{ backgroundColor: preset.bg }}\n                      /\u003e\n                      \u003cdiv \n                        className=\"w-4 h-4 rounded border border-border\"\n                        style={{ backgroundColor: preset.text }}\n                      /\u003e\n                      {preset.label}\n                    \u003c/div\u003e\n                  \u003c/SelectItem\u003e\n                ))}\n              \u003c/SelectContent\u003e\n            \u003c/Select\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        {/* Additional Settings */}\n        \u003cdiv className=\"space-y-4\"\u003e\n          \u003ch4 className=\"font-medium text-foreground\"\u003eOptions\u003c/h4\u003e\n\n          \u003cdiv className=\"flex items-center justify-between\"\u003e\n            \u003clabel className=\"text-sm text-foreground\"\u003eMirror Mode\u003c/label\u003e\n            \u003cButton\n              variant={settings.mirrorMode ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() =\u003e onSettingsChange({ mirrorMode: !settings.mirrorMode })}\n            \u003e\n              {settings.mirrorMode ? 'On' : 'Off'}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n\n          \u003cdiv\u003e\n            \u003clabel className=\"text-sm font-medium text-foreground mb-2 block\"\u003e\n              Countdown Time: {settings.countdownTime}s\n            \u003c/label\u003e\n            \u003cSelect \n              value={settings.countdownTime.toString()} \n              onValueChange={(value) =\u003e onSettingsChange({ countdownTime: parseInt(value) })}\n            \u003e\n              \u003cSelectTrigger\u003e\n                \u003cSelectValue /\u003e\n              \u003c/SelectTrigger\u003e\n              \u003cSelectContent\u003e\n                \u003cSelectItem value=\"0\"\u003eNo Countdown\u003c/SelectItem\u003e\n                \u003cSelectItem value=\"3\"\u003e3 seconds\u003c/SelectItem\u003e\n                \u003cSelectItem value=\"5\"\u003e5 seconds\u003c/SelectItem\u003e\n                \u003cSelectItem value=\"10\"\u003e10 seconds\u003c/SelectItem\u003e\n              \u003c/SelectContent\u003e\n            \u003c/Select\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        {/* Reset Button */}\n        {onResetSettings \u0026\u0026 (\n          \u003cdiv className=\"pt-4 border-t border-border\"\u003e\n            \u003cButton \n              variant=\"outline\" \n              onClick={onResetSettings}\n              className=\"w-full\"\n            \u003e\n              \u003cRotateCcw className=\"w-4 h-4 mr-2\" /\u003e\n              Reset to Defaults\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        )}\n      \u003c/CardContent\u003e\n    \u003c/Card\u003e\n  );\n};\n\nexport default SettingsPanel;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/TeleprompterHistory.tsx",
//   "contents": "import React, { useState } from 'react';\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { FileText, Calendar, Users, Play, Trash2, Edit } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ScriptEditor from './ScriptEditor';\n\ninterface Script {\n  id: string;\n  title: string;\n  content: string;\n  characters: string[];\n  created_at: string;\n  updated_at: string;\n}\n\ninterface TeleprompterHistoryProps {\n  onScriptSelected: (scriptId: string) =\u003e void;\n}\n\nconst TeleprompterHistory: React.FC\u003cTeleprompterHistoryProps\u003e = ({ \n  onScriptSelected \n}) =\u003e {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingScript, setEditingScript] = useState\u003cScript | null\u003e(null);\n\n  const { data: scripts = [], isLoading } = useQuery({\n    queryKey: ['teleprompter-scripts', user?.id],\n    queryFn: async () =\u003e {\n      if (!user) return [];\n      \n      const { data, error } = await supabase\n        .from('scripts')\n        .select('id, title, content, characters, created_at, updated_at')\n        .eq('user_id', user.id)\n        .is('deleted_at', null)\n        .order('updated_at', { ascending: false })\n        .limit(15);\n\n      if (error) throw error;\n      return data as Script[];\n    },\n    enabled: !!user,\n  });\n\n  const formatDate = (dateString: string) =\u003e {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const handleScriptSelect = (scriptId: string) =\u003e {\n    onScriptSelected(scriptId);\n  };\n\n  const handleDeleteScript = async (scriptId: string, scriptTitle: string) =\u003e {\n    try {\n      // Use the database function to safely soft-delete the script\n      const { data, error } = await supabase.rpc('soft_delete_script', {\n        p_script_id: scriptId\n      });\n\n      if (error) throw error;\n\n      if (!data) {\n        throw new Error('Script not found or you do not have permission to delete it');\n      }\n\n      // Invalidate and refetch the scripts query\n      queryClient.invalidateQueries({ queryKey: ['teleprompter-scripts', user?.id] });\n\n      toast({\n        title: \"Script Deleted\",\n        description: `\"${scriptTitle}\" has been removed from your scripts.`,\n      });\n    } catch (error: any) {\n      console.error('Error deleting script:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete script. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEditScript = (script: Script) =\u003e {\n    setEditingScript(script);\n  };\n\n  const handleScriptUpdated = (updatedScript: Script) =\u003e {\n    // Invalidate and refetch the scripts query to reflect changes\n    queryClient.invalidateQueries({ queryKey: ['teleprompter-scripts', user?.id] });\n    setEditingScript(null);\n  };\n\n  if (isLoading) {\n    return (\n      \u003cdiv className=\"space-y-3\"\u003e\n        {[...Array(3)].map((_, i) =\u003e (\n          \u003cCard key={i} className=\"animate-pulse\"\u003e\n            \u003cCardContent className=\"p-4\"\u003e\n              \u003cdiv className=\"h-4 bg-muted rounded w-2/3 mb-2\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"h-3 bg-muted rounded w-1/2\"\u003e\u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        ))}\n      \u003c/div\u003e\n    );\n  }\n\n  if (scripts.length === 0) {\n    return (\n      \u003cCard\u003e\n        \u003cCardContent className=\"p-8 text-center\"\u003e\n          \u003cFileText className=\"w-8 h-8 text-muted-foreground mx-auto mb-3\" /\u003e\n          \u003ch3 className=\"text-lg font-semibold text-foreground mb-2\"\u003eNo Scripts Yet\u003c/h3\u003e\n          \u003cp className=\"text-sm text-muted-foreground\"\u003e\n            Upload your first script to get started with the teleprompter.\n          \u003c/p\u003e\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n    );\n  }\n\n  return (\n    \u003c\u003e\n      \u003cdiv className=\"space-y-3\"\u003e\n        \u003cdiv className=\"flex items-center justify-between mb-4\"\u003e\n          \u003ch3 className=\"text-lg font-semibold text-foreground\"\u003eYour Scripts\u003c/h3\u003e\n          \u003cBadge variant=\"outline\" className=\"text-muted-foreground\"\u003e\n            {scripts.length} / 15\n          \u003c/Badge\u003e\n        \u003c/div\u003e\n\n      \u003cdiv className=\"space-y-3 max-h-96 overflow-y-auto\"\u003e\n        {scripts.map((script) =\u003e (\n          \u003cCard \n            key={script.id} \n            className=\"hover:bg-accent/50 transition-colors cursor-pointer\"\n            onClick={() =\u003e handleScriptSelect(script.id)}\n          \u003e\n            \u003cCardContent className=\"p-4\"\u003e\n              \u003cdiv className=\"flex items-start justify-between\"\u003e\n                \u003cdiv className=\"flex-1 min-w-0\"\u003e\n                  \u003cdiv className=\"flex items-center gap-2 mb-2\"\u003e\n                    \u003cFileText className=\"w-4 h-4 text-primary flex-shrink-0\" /\u003e\n                    \u003ch4 className=\"font-medium text-foreground truncate\"\u003e\n                      {script.title}\n                    \u003c/h4\u003e\n                  \u003c/div\u003e\n                  \n                  \u003cp className=\"text-sm text-muted-foreground mb-3 line-clamp-2\"\u003e\n                    {script.content.length \u003e 100 \n                      ? `${script.content.substring(0, 100)}...` \n                      : script.content}\n                  \u003c/p\u003e\n\n                  \u003cdiv className=\"flex flex-wrap gap-2 mb-2\"\u003e\n                    {script.characters \u0026\u0026 script.characters.length \u003e 0 \u0026\u0026 (\n                      \u003cBadge variant=\"secondary\" className=\"text-xs\"\u003e\n                        \u003cUsers className=\"w-3 h-3 mr-1\" /\u003e\n                        {script.characters.length} character{script.characters.length !== 1 ? 's' : ''}\n                      \u003c/Badge\u003e\n                    )}\n                    \u003cBadge variant=\"outline\" className=\"text-xs\"\u003e\n                      \u003cCalendar className=\"w-3 h-3 mr-1\" /\u003e\n                      {formatDate(script.updated_at)}\n                    \u003c/Badge\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv className=\"ml-3 flex-shrink-0 flex gap-2\" onClick={(e) =\u003e e.stopPropagation()} onPointerDown={(e) =\u003e e.stopPropagation()}\u003e\n                  \u003cButton\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={(e) =\u003e {\n                      e.stopPropagation();\n                      handleEditScript(script);\n                    }}\n                    onPointerDown={(e) =\u003e e.stopPropagation()}\n                    className=\"text-primary hover:text-primary hover:bg-primary/10\"\n                  \u003e\n                    \u003cEdit className=\"w-4 h-4\" /\u003e\n                  \u003c/Button\u003e\n\n                  \u003cAlertDialog\u003e\n                    \u003cAlertDialogTrigger asChild\u003e\n                      \u003cButton\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={(e) =\u003e e.stopPropagation()}\n                        onPointerDown={(e) =\u003e e.stopPropagation()}\n                        className=\"text-destructive hover:text-destructive hover:bg-destructive/10\"\n                      \u003e\n                        \u003cTrash2 className=\"w-4 h-4\" /\u003e\n                      \u003c/Button\u003e\n                    \u003c/AlertDialogTrigger\u003e\n                    \u003cAlertDialogContent\u003e\n                      \u003cAlertDialogHeader\u003e\n                        \u003cAlertDialogTitle\u003eDelete Script\u003c/AlertDialogTitle\u003e\n                        \u003cAlertDialogDescription\u003e\n                          Are you sure you want to delete \"{script.title}\"? This action cannot be undone.\n                        \u003c/AlertDialogDescription\u003e\n                      \u003c/AlertDialogHeader\u003e\n                      \u003cAlertDialogFooter\u003e\n                        \u003cAlertDialogCancel\u003eCancel\u003c/AlertDialogCancel\u003e\n                        \u003cAlertDialogAction\n                          onClick={() =\u003e handleDeleteScript(script.id, script.title)}\n                          className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                        \u003e\n                          Delete\n                        \u003c/AlertDialogAction\u003e\n                      \u003c/AlertDialogFooter\u003e\n                    \u003c/AlertDialogContent\u003e\n                  \u003c/AlertDialog\u003e\n\n                  \u003cButton\n                    size=\"sm\"\n                    onClick={(e) =\u003e {\n                      e.stopPropagation();\n                      handleScriptSelect(script.id);\n                    }}\n                    onPointerDown={(e) =\u003e e.stopPropagation()}\n                  \u003e\n                    \u003cPlay className=\"w-4 h-4 mr-1\" /\u003e\n                    Use\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        ))}\n      \u003c/div\u003e\n\n        \u003cdiv className=\"text-center pt-2\"\u003e\n          \u003cp className=\"text-xs text-muted-foreground\"\u003e\n            Maximum 15 scripts saved. Oldest scripts are automatically removed.\n          \u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      \u003cScriptEditor\n        script={editingScript}\n        isOpen={!!editingScript}\n        onClose={() =\u003e setEditingScript(null)}\n        onScriptUpdated={handleScriptUpdated}\n      /\u003e\n    \u003c/\u003e\n  );\n};\n\nexport default TeleprompterHistory;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/teleprompter/TopBarControls.tsx",
//   "contents": "import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Badge } from '@/components/ui/badge';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Play, \n  Pause, \n  Square, \n  Maximize, \n  Minimize, \n  ArrowLeft,\n  Settings,\n  Clock,\n  Home,\n  Edit\n} from 'lucide-react';\n\ninterface TopBarControlsProps {\n  isPlaying: boolean;\n  speed: number;\n  isFullscreen: boolean;\n  isCountingDown?: boolean;\n  countdownValue?: number;\n  showSettings?: boolean;\n  onPlayPause: () =\u003e void;\n  onStop: () =\u003e void;\n  onSpeedChange: (speed: number) =\u003e void;\n  onToggleFullscreen: () =\u003e void;\n  onToggleSettings?: () =\u003e void;\n  onBack?: () =\u003e void;\n  onEdit?: () =\u003e void;\n  title?: string;\n  status?: string;\n  rightExtra?: React.ReactNode;\n}\n\nconst TopBarControls: React.FC\u003cTopBarControlsProps\u003e = ({\n  isPlaying,\n  speed,\n  isFullscreen,\n  isCountingDown = false,\n  countdownValue,\n  showSettings = false,\n  onPlayPause,\n  onStop,\n  onSpeedChange,\n  onToggleFullscreen,\n  onToggleSettings,\n  onBack,\n  onEdit,\n  title = \"Teleprompter\",\n  status,\n  rightExtra\n}) =\u003e {\n  const navigate = useNavigate();\n\n  return (\n    \u003cdiv className=\"bg-card border-b border-border p-4\"\u003e\n      \u003cdiv className=\"flex items-center justify-between\"\u003e\n        {/* Left side - Back button, Home button, Edit button, and title */}\n        \u003cdiv className=\"flex items-center gap-4\"\u003e\n          {onBack \u0026\u0026 (\n            \u003cButton\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onBack}\n              className=\"flex items-center gap-2\"\n            \u003e\n              \u003cArrowLeft className=\"w-4 h-4\" /\u003e\n              Back\n            \u003c/Button\u003e\n          )}\n\n          \u003cButton\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() =\u003e navigate('/')}\n            className=\"flex items-center gap-2\"\n            aria-label=\"Go to homepage\"\n          \u003e\n            \u003cHome className=\"w-4 h-4\" /\u003e\n            Home\n          \u003c/Button\u003e\n\n          {onEdit \u0026\u0026 (\n            \u003cButton\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onEdit}\n              className=\"flex items-center gap-2\"\n              aria-label=\"Edit script\"\n            \u003e\n              \u003cEdit className=\"w-4 h-4\" /\u003e\n              Edit\n            \u003c/Button\u003e\n          )}\n          \n          \u003cdiv\u003e\n            \u003ch2 className=\"font-semibold text-foreground\"\u003e{title}\u003c/h2\u003e\n            {status \u0026\u0026 (\n              \u003cp className=\"text-sm text-muted-foreground\"\u003e{status}\u003c/p\u003e\n            )}\n          \u003c/div\u003e\n\n          {/* Countdown indicator */}\n          {isCountingDown \u0026\u0026 countdownValue !== undefined \u0026\u0026 (\n            \u003cBadge variant=\"default\" className=\"bg-primary text-primary-foreground animate-pulse\"\u003e\n              \u003cClock className=\"w-3 h-3 mr-1\" /\u003e\n              {countdownValue}\n            \u003c/Badge\u003e\n          )}\n        \u003c/div\u003e\n\n        {/* Center - Playback controls */}\n        \u003cdiv className=\"flex items-center gap-3\"\u003e\n          \u003cButton\n            variant={isPlaying ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={onPlayPause}\n            className=\"min-w-[80px]\"\n          \u003e\n            {isPlaying ? (\n              \u003c\u003e\n                \u003cPause className=\"w-4 h-4 mr-2\" /\u003e\n                Pause\n              \u003c/\u003e\n            ) : (\n              \u003c\u003e\n                \u003cPlay className=\"w-4 h-4 mr-2\" /\u003e\n                Play\n              \u003c/\u003e\n            )}\n          \u003c/Button\u003e\n\n          \u003cButton\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={onStop}\n          \u003e\n            \u003cSquare className=\"w-4 h-4\" /\u003e\n          \u003c/Button\u003e\n\n          \u003cdiv className=\"flex items-center gap-2 min-w-[120px]\"\u003e\n            \u003cspan className=\"text-sm text-muted-foreground\"\u003eSpeed:\u003c/span\u003e\n            \u003cSlider\n              value={[speed]}\n              onValueChange={(value) =\u003e onSpeedChange(value[0])}\n              min={0.5}\n              max={3}\n              step={0.1}\n              className=\"w-20\"\n            /\u003e\n            \u003cBadge variant=\"outline\" className=\"min-w-[45px] text-center\"\u003e\n              {speed.toFixed(1)}x\n            \u003c/Badge\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        {/* Right side - Settings, extra content, and fullscreen */}\n        \u003cdiv className=\"flex items-center gap-2\"\u003e\n          {rightExtra}\n          \n          {onToggleSettings \u0026\u0026 (\n            \u003cButton\n              variant={showSettings ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={onToggleSettings}\n            \u003e\n              \u003cSettings className=\"w-4 h-4\" /\u003e\n            \u003c/Button\u003e\n          )}\n\n          \u003cButton\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={onToggleFullscreen}\n          \u003e\n            {isFullscreen ? (\n              \u003cMinimize className=\"w-4 h-4\" /\u003e\n            ) : (\n              \u003cMaximize className=\"w-4 h-4\" /\u003e\n            )}\n          \u003c/Button\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default TopBarControls;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/accordion.tsx",
//   "contents": "import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AccordionPrimitive.Item\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AccordionPrimitive.Item\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cAccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  /\u003e\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AccordionPrimitive.Trigger\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AccordionPrimitive.Trigger\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cAccordionPrimitive.Header className=\"flex\"\u003e\n    \u003cAccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [\u0026[data-state=open]\u003esvg]:rotate-180\",\n        className\n      )}\n      {...props}\n    \u003e\n      {children}\n      \u003cChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" /\u003e\n    \u003c/AccordionPrimitive.Trigger\u003e\n  \u003c/AccordionPrimitive.Header\u003e\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AccordionPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AccordionPrimitive.Content\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cAccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  \u003e\n    \u003cdiv className={cn(\"pb-4 pt-0\", className)}\u003e{children}\u003c/div\u003e\n  \u003c/AccordionPrimitive.Content\u003e\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/alert-dialog.tsx",
//   "contents": "import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AlertDialogPrimitive.Overlay\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AlertDialogPrimitive.Overlay\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cAlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  /\u003e\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AlertDialogPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AlertDialogPrimitive.Content\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cAlertDialogPortal\u003e\n    \u003cAlertDialogOverlay /\u003e\n    \u003cAlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    /\u003e\n  \u003c/AlertDialogPortal\u003e\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLDivElement\u003e) =\u003e (\n  \u003cdiv\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  /\u003e\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLDivElement\u003e) =\u003e (\n  \u003cdiv\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  /\u003e\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AlertDialogPrimitive.Title\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AlertDialogPrimitive.Title\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cAlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  /\u003e\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AlertDialogPrimitive.Description\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AlertDialogPrimitive.Description\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cAlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  /\u003e\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AlertDialogPrimitive.Action\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AlertDialogPrimitive.Action\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cAlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  /\u003e\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AlertDialogPrimitive.Cancel\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AlertDialogPrimitive.Cancel\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cAlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/alert.tsx",
//   "contents": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [\u0026\u003esvg~*]:pl-7 [\u0026\u003esvg+div]:translate-y-[-3px] [\u0026\u003esvg]:absolute [\u0026\u003esvg]:left-4 [\u0026\u003esvg]:top-4 [\u0026\u003esvg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [\u0026\u003esvg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef\u003c\n  HTMLDivElement,\n  React.HTMLAttributes\u003cHTMLDivElement\u003e \u0026 VariantProps\u003ctypeof alertVariants\u003e\n\u003e(({ className, variant, ...props }, ref) =\u003e (\n  \u003cdiv\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  /\u003e\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef\u003c\n  HTMLParagraphElement,\n  React.HTMLAttributes\u003cHTMLHeadingElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003ch5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  /\u003e\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef\u003c\n  HTMLParagraphElement,\n  React.HTMLAttributes\u003cHTMLParagraphElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cdiv\n    ref={ref}\n    className={cn(\"text-sm [\u0026_p]:leading-relaxed\", className)}\n    {...props}\n  /\u003e\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/aspect-ratio.tsx",
//   "contents": "import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/avatar.tsx",
//   "contents": "import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AvatarPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AvatarPrimitive.Root\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cAvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AvatarPrimitive.Image\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AvatarPrimitive.Image\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cAvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  /\u003e\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof AvatarPrimitive.Fallback\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof AvatarPrimitive.Fallback\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cAvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/badge.tsx",
//   "contents": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes\u003cHTMLDivElement\u003e,\n    VariantProps\u003ctypeof badgeVariants\u003e {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    \u003cdiv className={cn(badgeVariants({ variant }), className)} {...props} /\u003e\n  )\n}\n\nexport { Badge, badgeVariants }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/breadcrumb.tsx",
//   "contents": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef\u003c\n  HTMLElement,\n  React.ComponentPropsWithoutRef\u003c\"nav\"\u003e \u0026 {\n    separator?: React.ReactNode\n  }\n\u003e(({ ...props }, ref) =\u003e \u003cnav ref={ref} aria-label=\"breadcrumb\" {...props} /\u003e)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef\u003c\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef\u003c\"ol\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003col\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef\u003c\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef\u003c\"li\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cli\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  /\u003e\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef\u003c\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef\u003c\"a\"\u003e \u0026 {\n    asChild?: boolean\n  }\n\u003e(({ asChild, className, ...props }, ref) =\u003e {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    \u003cComp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    /\u003e\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef\u003c\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef\u003c\"span\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cspan\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  /\u003e\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps\u003c\"li\"\u003e) =\u003e (\n  \u003cli\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[\u0026\u003esvg]:size-3.5\", className)}\n    {...props}\n  \u003e\n    {children ?? \u003cChevronRight /\u003e}\n  \u003c/li\u003e\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps\u003c\"span\"\u003e) =\u003e (\n  \u003cspan\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  \u003e\n    \u003cMoreHorizontal className=\"h-4 w-4\" /\u003e\n    \u003cspan className=\"sr-only\"\u003eMore\u003c/span\u003e\n  \u003c/span\u003e\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/button.tsx",
//   "contents": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [\u0026_svg]:pointer-events-none [\u0026_svg]:size-4 [\u0026_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes\u003cHTMLButtonElement\u003e,\n    VariantProps\u003ctypeof buttonVariants\u003e {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef\u003cHTMLButtonElement, ButtonProps\u003e(\n  ({ className, variant, size, asChild = false, ...props }, ref) =\u003e {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      \u003cComp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      /\u003e\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/calendar.tsx",
//   "contents": "import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps\u003ctypeof DayPicker\u003e;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    \u003cDayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [\u0026:has([aria-selected].day-range-end)]:rounded-r-md [\u0026:has([aria-selected].day-outside)]:bg-accent/50 [\u0026:has([aria-selected])]:bg-accent first:[\u0026:has([aria-selected])]:rounded-l-md last:[\u0026:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) =\u003e \u003cChevronLeft className=\"h-4 w-4\" /\u003e,\n        IconRight: ({ ..._props }) =\u003e \u003cChevronRight className=\"h-4 w-4\" /\u003e,\n      }}\n      {...props}\n    /\u003e\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/card.tsx",
//   "contents": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef\u003c\n  HTMLDivElement,\n  React.HTMLAttributes\u003cHTMLDivElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cdiv\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef\u003c\n  HTMLDivElement,\n  React.HTMLAttributes\u003cHTMLDivElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cdiv\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  /\u003e\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef\u003c\n  HTMLParagraphElement,\n  React.HTMLAttributes\u003cHTMLHeadingElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003ch3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef\u003c\n  HTMLParagraphElement,\n  React.HTMLAttributes\u003cHTMLParagraphElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cp\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  /\u003e\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef\u003c\n  HTMLDivElement,\n  React.HTMLAttributes\u003cHTMLDivElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cdiv ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} /\u003e\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef\u003c\n  HTMLDivElement,\n  React.HTMLAttributes\u003cHTMLDivElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cdiv\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  /\u003e\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/carousel.tsx",
//   "contents": "import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters\u003ctypeof useEmblaCarousel\u003e\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) =\u003e void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType\u003ctypeof useEmblaCarousel\u003e[0]\n  api: ReturnType\u003ctypeof useEmblaCarousel\u003e[1]\n  scrollPrev: () =\u003e void\n  scrollNext: () =\u003e void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} \u0026 CarouselProps\n\nconst CarouselContext = React.createContext\u003cCarouselContextProps | null\u003e(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a \u003cCarousel /\u003e\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef\u003c\n  HTMLDivElement,\n  React.HTMLAttributes\u003cHTMLDivElement\u003e \u0026 CarouselProps\n\u003e(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) =\u003e {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) =\u003e {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() =\u003e {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() =\u003e {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent\u003cHTMLDivElement\u003e) =\u003e {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() =\u003e {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() =\u003e {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () =\u003e {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      \u003cCarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      \u003e\n        \u003cdiv\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        \u003e\n          {children}\n        \u003c/div\u003e\n      \u003c/CarouselContext.Provider\u003e\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef\u003c\n  HTMLDivElement,\n  React.HTMLAttributes\u003cHTMLDivElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    \u003cdiv ref={carouselRef} className=\"overflow-hidden\"\u003e\n      \u003cdiv\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      /\u003e\n    \u003c/div\u003e\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef\u003c\n  HTMLDivElement,\n  React.HTMLAttributes\u003cHTMLDivElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  const { orientation } = useCarousel()\n\n  return (\n    \u003cdiv\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef\u003c\n  HTMLButtonElement,\n  React.ComponentProps\u003ctypeof Button\u003e\n\u003e(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) =\u003e {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    \u003cButton\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    \u003e\n      \u003cArrowLeft className=\"h-4 w-4\" /\u003e\n      \u003cspan className=\"sr-only\"\u003ePrevious slide\u003c/span\u003e\n    \u003c/Button\u003e\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef\u003c\n  HTMLButtonElement,\n  React.ComponentProps\u003ctypeof Button\u003e\n\u003e(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) =\u003e {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    \u003cButton\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    \u003e\n      \u003cArrowRight className=\"h-4 w-4\" /\u003e\n      \u003cspan className=\"sr-only\"\u003eNext slide\u003c/span\u003e\n    \u003c/Button\u003e\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/chart.tsx",
//   "contents": "import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } \u0026 (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record\u003ckeyof typeof THEMES, string\u003e }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext\u003cChartContextProps | null\u003e(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a \u003cChartContainer /\u003e\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e \u0026 {\n    config: ChartConfig\n    children: React.ComponentProps\u003c\n      typeof RechartsPrimitive.ResponsiveContainer\n    \u003e[\"children\"]\n  }\n\u003e(({ id, className, children, config, ...props }, ref) =\u003e {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    \u003cChartContext.Provider value={{ config }}\u003e\n      \u003cdiv\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [\u0026_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [\u0026_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [\u0026_.recharts-curve.recharts-tooltip-cursor]:stroke-border [\u0026_.recharts-dot[stroke='#fff']]:stroke-transparent [\u0026_.recharts-layer]:outline-none [\u0026_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [\u0026_.recharts-radial-bar-background-sector]:fill-muted [\u0026_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [\u0026_.recharts-reference-line_[stroke='#ccc']]:stroke-border [\u0026_.recharts-sector[stroke='#fff']]:stroke-transparent [\u0026_.recharts-sector]:outline-none [\u0026_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      \u003e\n        \u003cChartStyle id={chartId} config={config} /\u003e\n        \u003cRechartsPrimitive.ResponsiveContainer\u003e\n          {children}\n        \u003c/RechartsPrimitive.ResponsiveContainer\u003e\n      \u003c/div\u003e\n    \u003c/ChartContext.Provider\u003e\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) =\u003e {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) =\u003e config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    \u003cstyle\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) =\u003e `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) =\u003e {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    /\u003e\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003ctypeof RechartsPrimitive.Tooltip\u003e \u0026\n    React.ComponentProps\u003c\"div\"\u003e \u0026 {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n\u003e(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) =\u003e {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() =\u003e {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey \u0026\u0026 typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          \u003cdiv className={cn(\"font-medium\", labelClassName)}\u003e\n            {labelFormatter(value, payload)}\n          \u003c/div\u003e\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return \u003cdiv className={cn(\"font-medium\", labelClassName)}\u003e{value}\u003c/div\u003e\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 \u0026\u0026 indicator !== \"dot\"\n\n    return (\n      \u003cdiv\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      \u003e\n        {!nestLabel ? tooltipLabel : null}\n        \u003cdiv className=\"grid gap-1.5\"\u003e\n          {payload.map((item, index) =\u003e {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              \u003cdiv\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [\u0026\u003esvg]:h-2.5 [\u0026\u003esvg]:w-2.5 [\u0026\u003esvg]:text-muted-foreground\",\n                  indicator === \"dot\" \u0026\u0026 \"items-center\"\n                )}\n              \u003e\n                {formatter \u0026\u0026 item?.value !== undefined \u0026\u0026 item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  \u003c\u003e\n                    {itemConfig?.icon ? (\n                      \u003citemConfig.icon /\u003e\n                    ) : (\n                      !hideIndicator \u0026\u0026 (\n                        \u003cdiv\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel \u0026\u0026 indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        /\u003e\n                      )\n                    )}\n                    \u003cdiv\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    \u003e\n                      \u003cdiv className=\"grid gap-1.5\"\u003e\n                        {nestLabel ? tooltipLabel : null}\n                        \u003cspan className=\"text-muted-foreground\"\u003e\n                          {itemConfig?.label || item.name}\n                        \u003c/span\u003e\n                      \u003c/div\u003e\n                      {item.value \u0026\u0026 (\n                        \u003cspan className=\"font-mono font-medium tabular-nums text-foreground\"\u003e\n                          {item.value.toLocaleString()}\n                        \u003c/span\u003e\n                      )}\n                    \u003c/div\u003e\n                  \u003c/\u003e\n                )}\n              \u003c/div\u003e\n            )\n          })}\n        \u003c/div\u003e\n      \u003c/div\u003e\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e \u0026\n    Pick\u003cRechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"\u003e \u0026 {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n\u003e(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) =\u003e {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      \u003cdiv\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      \u003e\n        {payload.map((item) =\u003e {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            \u003cdiv\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [\u0026\u003esvg]:h-3 [\u0026\u003esvg]:w-3 [\u0026\u003esvg]:text-muted-foreground\"\n              )}\n            \u003e\n              {itemConfig?.icon \u0026\u0026 !hideIcon ? (\n                \u003citemConfig.icon /\u003e\n              ) : (\n                \u003cdiv\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                /\u003e\n              )}\n              {itemConfig?.label}\n            \u003c/div\u003e\n          )\n        })}\n      \u003c/div\u003e\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload \u0026\u0026\n    typeof payload.payload === \"object\" \u0026\u0026\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload \u0026\u0026\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload \u0026\u0026\n    key in payloadPayload \u0026\u0026\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/checkbox.tsx",
//   "contents": "import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof CheckboxPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof CheckboxPrimitive.Root\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cCheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  \u003e\n    \u003cCheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    \u003e\n      \u003cCheck className=\"h-4 w-4\" /\u003e\n    \u003c/CheckboxPrimitive.Indicator\u003e\n  \u003c/CheckboxPrimitive.Root\u003e\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/collapsible.tsx",
//   "contents": "import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/command.tsx",
//   "contents": "import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof CommandPrimitive\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof CommandPrimitive\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cCommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) =\u003e {\n  return (\n    \u003cDialog {...props}\u003e\n      \u003cDialogContent className=\"overflow-hidden p-0 shadow-lg\"\u003e\n        \u003cCommand className=\"[\u0026_[cmdk-group-heading]]:px-2 [\u0026_[cmdk-group-heading]]:font-medium [\u0026_[cmdk-group-heading]]:text-muted-foreground [\u0026_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [\u0026_[cmdk-group]]:px-2 [\u0026_[cmdk-input-wrapper]_svg]:h-5 [\u0026_[cmdk-input-wrapper]_svg]:w-5 [\u0026_[cmdk-input]]:h-12 [\u0026_[cmdk-item]]:px-2 [\u0026_[cmdk-item]]:py-3 [\u0026_[cmdk-item]_svg]:h-5 [\u0026_[cmdk-item]_svg]:w-5\"\u003e\n          {children}\n        \u003c/Command\u003e\n      \u003c/DialogContent\u003e\n    \u003c/Dialog\u003e\n  )\n}\n\nconst CommandInput = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof CommandPrimitive.Input\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof CommandPrimitive.Input\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cdiv className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\"\u003e\n    \u003cSearch className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" /\u003e\n    \u003cCommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    /\u003e\n  \u003c/div\u003e\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof CommandPrimitive.List\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof CommandPrimitive.List\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cCommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  /\u003e\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof CommandPrimitive.Empty\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof CommandPrimitive.Empty\u003e\n\u003e((props, ref) =\u003e (\n  \u003cCommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  /\u003e\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof CommandPrimitive.Group\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof CommandPrimitive.Group\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cCommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [\u0026_[cmdk-group-heading]]:px-2 [\u0026_[cmdk-group-heading]]:py-1.5 [\u0026_[cmdk-group-heading]]:text-xs [\u0026_[cmdk-group-heading]]:font-medium [\u0026_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof CommandPrimitive.Separator\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof CommandPrimitive.Separator\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cCommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  /\u003e\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof CommandPrimitive.Item\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof CommandPrimitive.Item\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cCommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLSpanElement\u003e) =\u003e {\n  return (\n    \u003cspan\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/context-menu.tsx",
//   "contents": "import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ContextMenuPrimitive.SubTrigger\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ContextMenuPrimitive.SubTrigger\u003e \u0026 {\n    inset?: boolean\n  }\n\u003e(({ className, inset, children, ...props }, ref) =\u003e (\n  \u003cContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset \u0026\u0026 \"pl-8\",\n      className\n    )}\n    {...props}\n  \u003e\n    {children}\n    \u003cChevronRight className=\"ml-auto h-4 w-4\" /\u003e\n  \u003c/ContextMenuPrimitive.SubTrigger\u003e\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ContextMenuPrimitive.SubContent\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ContextMenuPrimitive.SubContent\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ContextMenuPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ContextMenuPrimitive.Content\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cContextMenuPrimitive.Portal\u003e\n    \u003cContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    /\u003e\n  \u003c/ContextMenuPrimitive.Portal\u003e\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ContextMenuPrimitive.Item\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ContextMenuPrimitive.Item\u003e \u0026 {\n    inset?: boolean\n  }\n\u003e(({ className, inset, ...props }, ref) =\u003e (\n  \u003cContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset \u0026\u0026 \"pl-8\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ContextMenuPrimitive.CheckboxItem\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ContextMenuPrimitive.CheckboxItem\u003e\n\u003e(({ className, children, checked, ...props }, ref) =\u003e (\n  \u003cContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  \u003e\n    \u003cspan className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"\u003e\n      \u003cContextMenuPrimitive.ItemIndicator\u003e\n        \u003cCheck className=\"h-4 w-4\" /\u003e\n      \u003c/ContextMenuPrimitive.ItemIndicator\u003e\n    \u003c/span\u003e\n    {children}\n  \u003c/ContextMenuPrimitive.CheckboxItem\u003e\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ContextMenuPrimitive.RadioItem\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ContextMenuPrimitive.RadioItem\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  \u003e\n    \u003cspan className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"\u003e\n      \u003cContextMenuPrimitive.ItemIndicator\u003e\n        \u003cCircle className=\"h-2 w-2 fill-current\" /\u003e\n      \u003c/ContextMenuPrimitive.ItemIndicator\u003e\n    \u003c/span\u003e\n    {children}\n  \u003c/ContextMenuPrimitive.RadioItem\u003e\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ContextMenuPrimitive.Label\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ContextMenuPrimitive.Label\u003e \u0026 {\n    inset?: boolean\n  }\n\u003e(({ className, inset, ...props }, ref) =\u003e (\n  \u003cContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset \u0026\u0026 \"pl-8\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ContextMenuPrimitive.Separator\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ContextMenuPrimitive.Separator\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  /\u003e\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLSpanElement\u003e) =\u003e {\n  return (\n    \u003cspan\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/dialog.tsx",
//   "contents": "import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DialogPrimitive.Overlay\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DialogPrimitive.Overlay\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cDialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DialogPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DialogPrimitive.Content\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cDialogPortal\u003e\n    \u003cDialogOverlay /\u003e\n    \u003cDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    \u003e\n      {children}\n      \u003cDialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"\u003e\n        \u003cX className=\"h-4 w-4\" /\u003e\n        \u003cspan className=\"sr-only\"\u003eClose\u003c/span\u003e\n      \u003c/DialogPrimitive.Close\u003e\n    \u003c/DialogPrimitive.Content\u003e\n  \u003c/DialogPortal\u003e\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLDivElement\u003e) =\u003e (\n  \u003cdiv\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  /\u003e\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLDivElement\u003e) =\u003e (\n  \u003cdiv\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  /\u003e\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DialogPrimitive.Title\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DialogPrimitive.Title\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cDialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DialogPrimitive.Description\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DialogPrimitive.Description\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  /\u003e\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/drawer.tsx",
//   "contents": "import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps\u003ctypeof DrawerPrimitive.Root\u003e) =\u003e (\n  \u003cDrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  /\u003e\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DrawerPrimitive.Overlay\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DrawerPrimitive.Overlay\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cDrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  /\u003e\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DrawerPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DrawerPrimitive.Content\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cDrawerPortal\u003e\n    \u003cDrawerOverlay /\u003e\n    \u003cDrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    \u003e\n      \u003cdiv className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" /\u003e\n      {children}\n    \u003c/DrawerPrimitive.Content\u003e\n  \u003c/DrawerPortal\u003e\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLDivElement\u003e) =\u003e (\n  \u003cdiv\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  /\u003e\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLDivElement\u003e) =\u003e (\n  \u003cdiv\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  /\u003e\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DrawerPrimitive.Title\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DrawerPrimitive.Title\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cDrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DrawerPrimitive.Description\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DrawerPrimitive.Description\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cDrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  /\u003e\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/dropdown-menu.tsx",
//   "contents": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DropdownMenuPrimitive.SubTrigger\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DropdownMenuPrimitive.SubTrigger\u003e \u0026 {\n    inset?: boolean\n  }\n\u003e(({ className, inset, children, ...props }, ref) =\u003e (\n  \u003cDropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset \u0026\u0026 \"pl-8\",\n      className\n    )}\n    {...props}\n  \u003e\n    {children}\n    \u003cChevronRight className=\"ml-auto h-4 w-4\" /\u003e\n  \u003c/DropdownMenuPrimitive.SubTrigger\u003e\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DropdownMenuPrimitive.SubContent\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DropdownMenuPrimitive.SubContent\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cDropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DropdownMenuPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DropdownMenuPrimitive.Content\u003e\n\u003e(({ className, sideOffset = 4, ...props }, ref) =\u003e (\n  \u003cDropdownMenuPrimitive.Portal\u003e\n    \u003cDropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-lg border bg-card p-1 text-card-foreground shadow-lg backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    /\u003e\n  \u003c/DropdownMenuPrimitive.Portal\u003e\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DropdownMenuPrimitive.Item\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DropdownMenuPrimitive.Item\u003e \u0026 {\n    inset?: boolean\n  }\n\u003e(({ className, inset, ...props }, ref) =\u003e (\n  \u003cDropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-md px-3 py-2 text-sm outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset \u0026\u0026 \"pl-8\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DropdownMenuPrimitive.CheckboxItem\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DropdownMenuPrimitive.CheckboxItem\u003e\n\u003e(({ className, children, checked, ...props }, ref) =\u003e (\n  \u003cDropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  \u003e\n    \u003cspan className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"\u003e\n      \u003cDropdownMenuPrimitive.ItemIndicator\u003e\n        \u003cCheck className=\"h-4 w-4\" /\u003e\n      \u003c/DropdownMenuPrimitive.ItemIndicator\u003e\n    \u003c/span\u003e\n    {children}\n  \u003c/DropdownMenuPrimitive.CheckboxItem\u003e\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DropdownMenuPrimitive.RadioItem\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DropdownMenuPrimitive.RadioItem\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cDropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  \u003e\n    \u003cspan className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"\u003e\n      \u003cDropdownMenuPrimitive.ItemIndicator\u003e\n        \u003cCircle className=\"h-2 w-2 fill-current\" /\u003e\n      \u003c/DropdownMenuPrimitive.ItemIndicator\u003e\n    \u003c/span\u003e\n    {children}\n  \u003c/DropdownMenuPrimitive.RadioItem\u003e\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DropdownMenuPrimitive.Label\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DropdownMenuPrimitive.Label\u003e \u0026 {\n    inset?: boolean\n  }\n\u003e(({ className, inset, ...props }, ref) =\u003e (\n  \u003cDropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-3 py-2 text-sm font-semibold text-foreground\",\n      inset \u0026\u0026 \"pl-8\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof DropdownMenuPrimitive.Separator\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof DropdownMenuPrimitive.Separator\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cDropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  /\u003e\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLSpanElement\u003e) =\u003e {\n  return (\n    \u003cspan\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    /\u003e\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/form.tsx",
//   "contents": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue\u003c\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath\u003cTFieldValues\u003e = FieldPath\u003cTFieldValues\u003e\n\u003e = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext\u003cFormFieldContextValue\u003e(\n  {} as FormFieldContextValue\n)\n\nconst FormField = \u003c\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath\u003cTFieldValues\u003e = FieldPath\u003cTFieldValues\u003e\n\u003e({\n  ...props\n}: ControllerProps\u003cTFieldValues, TName\u003e) =\u003e {\n  return (\n    \u003cFormFieldContext.Provider value={{ name: props.name }}\u003e\n      \u003cController {...props} /\u003e\n    \u003c/FormFieldContext.Provider\u003e\n  )\n}\n\nconst useFormField = () =\u003e {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within \u003cFormField\u003e\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext\u003cFormItemContextValue\u003e(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef\u003c\n  HTMLDivElement,\n  React.HTMLAttributes\u003cHTMLDivElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  const id = React.useId()\n\n  return (\n    \u003cFormItemContext.Provider value={{ id }}\u003e\n      \u003cdiv ref={ref} className={cn(\"space-y-2\", className)} {...props} /\u003e\n    \u003c/FormItemContext.Provider\u003e\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof LabelPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof LabelPrimitive.Root\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  const { error, formItemId } = useFormField()\n\n  return (\n    \u003cLabel\n      ref={ref}\n      className={cn(error \u0026\u0026 \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    /\u003e\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof Slot\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof Slot\u003e\n\u003e(({ ...props }, ref) =\u003e {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    \u003cSlot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    /\u003e\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef\u003c\n  HTMLParagraphElement,\n  React.HTMLAttributes\u003cHTMLParagraphElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    \u003cp\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    /\u003e\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef\u003c\n  HTMLParagraphElement,\n  React.HTMLAttributes\u003cHTMLParagraphElement\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    \u003cp\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    \u003e\n      {body}\n    \u003c/p\u003e\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/help-tooltip.tsx",
//   "contents": "import * as React from \"react\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useHelpMode } from \"@/contexts/HelpModeContext\";\n\ninterface HelpTooltipProps {\n  content: React.ReactNode;\n  children: React.ReactNode;\n  side?: \"top\" | \"bottom\" | \"left\" | \"right\";\n  className?: string;\n  variant?: \"info\" | \"warning\" | \"success\";\n}\n\nconst variantClasses: Record\u003cNonNullable\u003cHelpTooltipProps[\"variant\"]\u003e, string\u003e = {\n  info: \"bg-[hsl(var(--help-bg))] text-[hsl(var(--help-fg))] border-[hsl(var(--help-fg)/0.15)]\",\n  warning: \"bg-[hsl(var(--help-bg))] text-[hsl(var(--help-fg))] border-[hsl(var(--help-fg)/0.15)]\",\n  success: \"bg-[hsl(var(--help-bg))] text-[hsl(var(--help-fg))] border-[hsl(var(--help-fg)/0.15)]\",\n};\n\nexport const HelpTooltip: React.FC\u003cHelpTooltipProps\u003e = ({\n  content,\n  children,\n  side = \"top\",\n  className,\n  variant = \"info\",\n}) =\u003e {\n  const { enabled } = useHelpMode();\n\n  if (!enabled) return \u003c\u003e{children}\u003c/\u003e;\n\n  return (\n    \u003cTooltip delayDuration={150}\u003e\n      \u003cTooltipTrigger asChild\u003e{children}\u003c/TooltipTrigger\u003e\n      \u003cTooltipContent\n        side={side}\n        sideOffset={8}\n        className={cn(\n          \"max-w-xs border shadow-md rounded-md px-3 py-2 font-medium leading-snug\",\n          variantClasses[variant],\n          className\n        )}\n      \u003e\n        \u003cdiv className=\"text-sm\"\u003e{content}\u003c/div\u003e\n      \u003c/TooltipContent\u003e\n    \u003c/Tooltip\u003e\n  );\n};\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/hover-card.tsx",
//   "contents": "import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof HoverCardPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof HoverCardPrimitive.Content\u003e\n\u003e(({ className, align = \"center\", sideOffset = 4, ...props }, ref) =\u003e (\n  \u003cHoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/input-otp.tsx",
//   "contents": "import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof OTPInput\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof OTPInput\u003e\n\u003e(({ className, containerClassName, ...props }, ref) =\u003e (\n  \u003cOTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  /\u003e\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef\u003c\n  React.ElementRef\u003c\"div\"\u003e,\n  React.ComponentPropsWithoutRef\u003c\"div\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cdiv ref={ref} className={cn(\"flex items-center\", className)} {...props} /\u003e\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef\u003c\n  React.ElementRef\u003c\"div\"\u003e,\n  React.ComponentPropsWithoutRef\u003c\"div\"\u003e \u0026 { index: number }\n\u003e(({ index, className, ...props }, ref) =\u003e {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    \u003cdiv\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive \u0026\u0026 \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    \u003e\n      {char}\n      {hasFakeCaret \u0026\u0026 (\n        \u003cdiv className=\"pointer-events-none absolute inset-0 flex items-center justify-center\"\u003e\n          \u003cdiv className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" /\u003e\n        \u003c/div\u003e\n      )}\n    \u003c/div\u003e\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef\u003c\n  React.ElementRef\u003c\"div\"\u003e,\n  React.ComponentPropsWithoutRef\u003c\"div\"\u003e\n\u003e(({ ...props }, ref) =\u003e (\n  \u003cdiv ref={ref} role=\"separator\" {...props}\u003e\n    \u003cDot /\u003e\n  \u003c/div\u003e\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/input.tsx",
//   "contents": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef\u003cHTMLInputElement, React.ComponentProps\u003c\"input\"\u003e\u003e(\n  ({ className, type, ...props }, ref) =\u003e {\n    return (\n      \u003cinput\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      /\u003e\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/label.tsx",
//   "contents": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof LabelPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof LabelPrimitive.Root\u003e \u0026\n    VariantProps\u003ctypeof labelVariants\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cLabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  /\u003e\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/menubar.tsx",
//   "contents": "import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof MenubarPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof MenubarPrimitive.Root\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cMenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof MenubarPrimitive.Trigger\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof MenubarPrimitive.Trigger\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cMenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof MenubarPrimitive.SubTrigger\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof MenubarPrimitive.SubTrigger\u003e \u0026 {\n    inset?: boolean\n  }\n\u003e(({ className, inset, children, ...props }, ref) =\u003e (\n  \u003cMenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset \u0026\u0026 \"pl-8\",\n      className\n    )}\n    {...props}\n  \u003e\n    {children}\n    \u003cChevronRight className=\"ml-auto h-4 w-4\" /\u003e\n  \u003c/MenubarPrimitive.SubTrigger\u003e\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof MenubarPrimitive.SubContent\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof MenubarPrimitive.SubContent\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cMenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof MenubarPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof MenubarPrimitive.Content\u003e\n\u003e(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) =\u003e (\n    \u003cMenubarPrimitive.Portal\u003e\n      \u003cMenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      /\u003e\n    \u003c/MenubarPrimitive.Portal\u003e\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof MenubarPrimitive.Item\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof MenubarPrimitive.Item\u003e \u0026 {\n    inset?: boolean\n  }\n\u003e(({ className, inset, ...props }, ref) =\u003e (\n  \u003cMenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset \u0026\u0026 \"pl-8\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof MenubarPrimitive.CheckboxItem\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof MenubarPrimitive.CheckboxItem\u003e\n\u003e(({ className, children, checked, ...props }, ref) =\u003e (\n  \u003cMenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  \u003e\n    \u003cspan className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"\u003e\n      \u003cMenubarPrimitive.ItemIndicator\u003e\n        \u003cCheck className=\"h-4 w-4\" /\u003e\n      \u003c/MenubarPrimitive.ItemIndicator\u003e\n    \u003c/span\u003e\n    {children}\n  \u003c/MenubarPrimitive.CheckboxItem\u003e\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof MenubarPrimitive.RadioItem\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof MenubarPrimitive.RadioItem\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cMenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  \u003e\n    \u003cspan className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"\u003e\n      \u003cMenubarPrimitive.ItemIndicator\u003e\n        \u003cCircle className=\"h-2 w-2 fill-current\" /\u003e\n      \u003c/MenubarPrimitive.ItemIndicator\u003e\n    \u003c/span\u003e\n    {children}\n  \u003c/MenubarPrimitive.RadioItem\u003e\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof MenubarPrimitive.Label\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof MenubarPrimitive.Label\u003e \u0026 {\n    inset?: boolean\n  }\n\u003e(({ className, inset, ...props }, ref) =\u003e (\n  \u003cMenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset \u0026\u0026 \"pl-8\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof MenubarPrimitive.Separator\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof MenubarPrimitive.Separator\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cMenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  /\u003e\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLSpanElement\u003e) =\u003e {\n  return (\n    \u003cspan\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/navigation-menu.tsx",
//   "contents": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof NavigationMenuPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof NavigationMenuPrimitive.Root\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cNavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  \u003e\n    {children}\n    \u003cNavigationMenuViewport /\u003e\n  \u003c/NavigationMenuPrimitive.Root\u003e\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof NavigationMenuPrimitive.List\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof NavigationMenuPrimitive.List\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cNavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof NavigationMenuPrimitive.Trigger\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof NavigationMenuPrimitive.Trigger\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cNavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  \u003e\n    {children}{\" \"}\n    \u003cChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    /\u003e\n  \u003c/NavigationMenuPrimitive.Trigger\u003e\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof NavigationMenuPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof NavigationMenuPrimitive.Content\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cNavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof NavigationMenuPrimitive.Viewport\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof NavigationMenuPrimitive.Viewport\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cdiv className={cn(\"absolute left-0 top-full flex justify-center\")}\u003e\n    \u003cNavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    /\u003e\n  \u003c/div\u003e\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof NavigationMenuPrimitive.Indicator\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof NavigationMenuPrimitive.Indicator\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cNavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  \u003e\n    \u003cdiv className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" /\u003e\n  \u003c/NavigationMenuPrimitive.Indicator\u003e\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/pagination.tsx",
//   "contents": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps\u003c\"nav\"\u003e) =\u003e (\n  \u003cnav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  /\u003e\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef\u003c\n  HTMLUListElement,\n  React.ComponentProps\u003c\"ul\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  /\u003e\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef\u003c\n  HTMLLIElement,\n  React.ComponentProps\u003c\"li\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cli ref={ref} className={cn(\"\", className)} {...props} /\u003e\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} \u0026 Pick\u003cButtonProps, \"size\"\u003e \u0026\n  React.ComponentProps\u003c\"a\"\u003e\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) =\u003e (\n  \u003ca\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  /\u003e\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps\u003ctypeof PaginationLink\u003e) =\u003e (\n  \u003cPaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  \u003e\n    \u003cChevronLeft className=\"h-4 w-4\" /\u003e\n    \u003cspan\u003ePrevious\u003c/span\u003e\n  \u003c/PaginationLink\u003e\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps\u003ctypeof PaginationLink\u003e) =\u003e (\n  \u003cPaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  \u003e\n    \u003cspan\u003eNext\u003c/span\u003e\n    \u003cChevronRight className=\"h-4 w-4\" /\u003e\n  \u003c/PaginationLink\u003e\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps\u003c\"span\"\u003e) =\u003e (\n  \u003cspan\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  \u003e\n    \u003cMoreHorizontal className=\"h-4 w-4\" /\u003e\n    \u003cspan className=\"sr-only\"\u003eMore pages\u003c/span\u003e\n  \u003c/span\u003e\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/popover.tsx",
//   "contents": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof PopoverPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof PopoverPrimitive.Content\u003e\n\u003e(({ className, align = \"center\", sideOffset = 4, ...props }, ref) =\u003e (\n  \u003cPopoverPrimitive.Portal\u003e\n    \u003cPopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    /\u003e\n  \u003c/PopoverPrimitive.Portal\u003e\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/progress.tsx",
//   "contents": "import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ProgressPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ProgressPrimitive.Root\u003e\n\u003e(({ className, value, ...props }, ref) =\u003e (\n  \u003cProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  \u003e\n    \u003cProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    /\u003e\n  \u003c/ProgressPrimitive.Root\u003e\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/radio-group.tsx",
//   "contents": "import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof RadioGroupPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof RadioGroupPrimitive.Root\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  return (\n    \u003cRadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    /\u003e\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof RadioGroupPrimitive.Item\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof RadioGroupPrimitive.Item\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  return (\n    \u003cRadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    \u003e\n      \u003cRadioGroupPrimitive.Indicator className=\"flex items-center justify-center\"\u003e\n        \u003cCircle className=\"h-2.5 w-2.5 fill-current text-current\" /\u003e\n      \u003c/RadioGroupPrimitive.Indicator\u003e\n    \u003c/RadioGroupPrimitive.Item\u003e\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/resizable.tsx",
//   "contents": "import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps\u003ctypeof ResizablePrimitive.PanelGroup\u003e) =\u003e (\n  \u003cResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  /\u003e\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps\u003ctypeof ResizablePrimitive.PanelResizeHandle\u003e \u0026 {\n  withHandle?: boolean\n}) =\u003e (\n  \u003cResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [\u0026[data-panel-group-direction=vertical]\u003ediv]:rotate-90\",\n      className\n    )}\n    {...props}\n  \u003e\n    {withHandle \u0026\u0026 (\n      \u003cdiv className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\"\u003e\n        \u003cGripVertical className=\"h-2.5 w-2.5\" /\u003e\n      \u003c/div\u003e\n    )}\n  \u003c/ResizablePrimitive.PanelResizeHandle\u003e\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/scroll-area.tsx",
//   "contents": "import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ScrollAreaPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ScrollAreaPrimitive.Root\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  \u003e\n    \u003cScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\"\u003e\n      {children}\n    \u003c/ScrollAreaPrimitive.Viewport\u003e\n    \u003cScrollBar /\u003e\n    \u003cScrollAreaPrimitive.Corner /\u003e\n  \u003c/ScrollAreaPrimitive.Root\u003e\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ScrollAreaPrimitive.ScrollAreaScrollbar\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ScrollAreaPrimitive.ScrollAreaScrollbar\u003e\n\u003e(({ className, orientation = \"vertical\", ...props }, ref) =\u003e (\n  \u003cScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" \u0026\u0026\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" \u0026\u0026\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  \u003e\n    \u003cScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" /\u003e\n  \u003c/ScrollAreaPrimitive.ScrollAreaScrollbar\u003e\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/select.tsx",
//   "contents": "import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SelectPrimitive.Trigger\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SelectPrimitive.Trigger\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cSelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [\u0026\u003espan]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  \u003e\n    {children}\n    \u003cSelectPrimitive.Icon asChild\u003e\n      \u003cChevronDown className=\"h-4 w-4 opacity-50\" /\u003e\n    \u003c/SelectPrimitive.Icon\u003e\n  \u003c/SelectPrimitive.Trigger\u003e\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SelectPrimitive.ScrollUpButton\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SelectPrimitive.ScrollUpButton\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cSelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  \u003e\n    \u003cChevronUp className=\"h-4 w-4\" /\u003e\n  \u003c/SelectPrimitive.ScrollUpButton\u003e\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SelectPrimitive.ScrollDownButton\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SelectPrimitive.ScrollDownButton\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cSelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  \u003e\n    \u003cChevronDown className=\"h-4 w-4\" /\u003e\n  \u003c/SelectPrimitive.ScrollDownButton\u003e\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SelectPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SelectPrimitive.Content\u003e\n\u003e(({ className, children, position = \"popper\", ...props }, ref) =\u003e (\n  \u003cSelectPrimitive.Portal\u003e\n    \u003cSelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" \u0026\u0026\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    \u003e\n      \u003cSelectScrollUpButton /\u003e\n      \u003cSelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" \u0026\u0026\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      \u003e\n        {children}\n      \u003c/SelectPrimitive.Viewport\u003e\n      \u003cSelectScrollDownButton /\u003e\n    \u003c/SelectPrimitive.Content\u003e\n  \u003c/SelectPrimitive.Portal\u003e\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SelectPrimitive.Label\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SelectPrimitive.Label\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cSelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  /\u003e\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SelectPrimitive.Item\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SelectPrimitive.Item\u003e\n\u003e(({ className, children, ...props }, ref) =\u003e (\n  \u003cSelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  \u003e\n    \u003cspan className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"\u003e\n      \u003cSelectPrimitive.ItemIndicator\u003e\n        \u003cCheck className=\"h-4 w-4\" /\u003e\n      \u003c/SelectPrimitive.ItemIndicator\u003e\n    \u003c/span\u003e\n\n    \u003cSelectPrimitive.ItemText\u003e{children}\u003c/SelectPrimitive.ItemText\u003e\n  \u003c/SelectPrimitive.Item\u003e\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SelectPrimitive.Separator\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SelectPrimitive.Separator\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cSelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  /\u003e\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/separator.tsx",
//   "contents": "import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SeparatorPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SeparatorPrimitive.Root\u003e\n\u003e(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) =\u003e (\n    \u003cSeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/sheet.tsx",
//   "contents": "import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SheetPrimitive.Overlay\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SheetPrimitive.Overlay\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cSheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  /\u003e\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef\u003ctypeof SheetPrimitive.Content\u003e,\n  VariantProps\u003ctypeof sheetVariants\u003e { }\n\nconst SheetContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SheetPrimitive.Content\u003e,\n  SheetContentProps\n\u003e(({ side = \"right\", className, children, ...props }, ref) =\u003e (\n  \u003cSheetPortal\u003e\n    \u003cSheetOverlay /\u003e\n    \u003cSheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    \u003e\n      {children}\n      \u003cSheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\"\u003e\n        \u003cX className=\"h-4 w-4\" /\u003e\n        \u003cspan className=\"sr-only\"\u003eClose\u003c/span\u003e\n      \u003c/SheetPrimitive.Close\u003e\n    \u003c/SheetPrimitive.Content\u003e\n  \u003c/SheetPortal\u003e\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLDivElement\u003e) =\u003e (\n  \u003cdiv\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  /\u003e\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLDivElement\u003e) =\u003e (\n  \u003cdiv\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  /\u003e\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SheetPrimitive.Title\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SheetPrimitive.Title\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cSheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  /\u003e\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SheetPrimitive.Description\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SheetPrimitive.Description\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cSheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  /\u003e\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/sidebar.tsx",
//   "contents": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) =\u003e void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) =\u003e void\n  isMobile: boolean\n  toggleSidebar: () =\u003e void\n}\n\nconst SidebarContext = React.createContext\u003cSidebarContext | null\u003e(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e \u0026 {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) =\u003e void\n  }\n\u003e(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) =\u003e {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) =\u003e boolean)) =\u003e {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() =\u003e {\n      return isMobile\n        ? setOpenMobile((open) =\u003e !open)\n        : setOpen((open) =\u003e !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() =\u003e {\n      const handleKeyDown = (event: KeyboardEvent) =\u003e {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT \u0026\u0026\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () =\u003e window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo\u003cSidebarContext\u003e(\n      () =\u003e ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      \u003cSidebarContext.Provider value={contextValue}\u003e\n        \u003cTooltipProvider delayDuration={0}\u003e\n          \u003cdiv\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          \u003e\n            {children}\n          \u003c/div\u003e\n        \u003c/TooltipProvider\u003e\n      \u003c/SidebarContext.Provider\u003e\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e \u0026 {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n\u003e(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) =\u003e {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        \u003cdiv\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        \u003e\n          {children}\n        \u003c/div\u003e\n      )\n    }\n\n    if (isMobile) {\n      return (\n        \u003cSheet open={openMobile} onOpenChange={setOpenMobile} {...props}\u003e\n          \u003cSheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [\u0026\u003ebutton]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          \u003e\n            \u003cdiv className=\"flex h-full w-full flex-col\"\u003e{children}\u003c/div\u003e\n          \u003c/SheetContent\u003e\n        \u003c/Sheet\u003e\n      )\n    }\n\n    return (\n      \u003cdiv\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      \u003e\n        {/* This is what handles the sidebar gap on desktop */}\n        \u003cdiv\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        /\u003e\n        \u003cdiv\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        \u003e\n          \u003cdiv\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          \u003e\n            {children}\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof Button\u003e,\n  React.ComponentProps\u003ctypeof Button\u003e\n\u003e(({ className, onClick, ...props }, ref) =\u003e {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    \u003cButton\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) =\u003e {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    \u003e\n      \u003cPanelLeft /\u003e\n      \u003cspan className=\"sr-only\"\u003eToggle Sidebar\u003c/span\u003e\n    \u003c/Button\u003e\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef\u003c\n  HTMLButtonElement,\n  React.ComponentProps\u003c\"button\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    \u003cbutton\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_\u0026]:cursor-w-resize [[data-side=right]_\u0026]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_\u0026]:cursor-e-resize [[data-side=right][data-state=collapsed]_\u0026]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_\u0026]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_\u0026]:-left-2\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"main\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  return (\n    \u003cmain\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof Input\u003e,\n  React.ComponentProps\u003ctypeof Input\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  return (\n    \u003cInput\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  return (\n    \u003cdiv\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    /\u003e\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  return (\n    \u003cdiv\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    /\u003e\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof Separator\u003e,\n  React.ComponentProps\u003ctypeof Separator\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  return (\n    \u003cSeparator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    /\u003e\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  return (\n    \u003cdiv\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e {\n  return (\n    \u003cdiv\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    /\u003e\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e \u0026 { asChild?: boolean }\n\u003e(({ className, asChild = false, ...props }, ref) =\u003e {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    \u003cComp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [\u0026\u003esvg]:size-4 [\u0026\u003esvg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef\u003c\n  HTMLButtonElement,\n  React.ComponentProps\u003c\"button\"\u003e \u0026 { asChild?: boolean }\n\u003e(({ className, asChild = false, ...props }, ref) =\u003e {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    \u003cComp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [\u0026\u003esvg]:size-4 [\u0026\u003esvg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cdiv\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  /\u003e\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef\u003c\n  HTMLUListElement,\n  React.ComponentProps\u003c\"ul\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  /\u003e\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef\u003c\n  HTMLLIElement,\n  React.ComponentProps\u003c\"li\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cli\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  /\u003e\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [\u0026\u003espan:last-child]:truncate [\u0026\u003esvg]:size-4 [\u0026\u003esvg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef\u003c\n  HTMLButtonElement,\n  React.ComponentProps\u003c\"button\"\u003e \u0026 {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps\u003ctypeof TooltipContent\u003e\n  } \u0026 VariantProps\u003ctypeof sidebarMenuButtonVariants\u003e\n\u003e(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) =\u003e {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      \u003cComp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      /\u003e\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      \u003cTooltip\u003e\n        \u003cTooltipTrigger asChild\u003e{button}\u003c/TooltipTrigger\u003e\n        \u003cTooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        /\u003e\n      \u003c/Tooltip\u003e\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef\u003c\n  HTMLButtonElement,\n  React.ComponentProps\u003c\"button\"\u003e \u0026 {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n\u003e(({ className, asChild = false, showOnHover = false, ...props }, ref) =\u003e {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    \u003cComp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [\u0026\u003esvg]:size-4 [\u0026\u003esvg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover \u0026\u0026\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cdiv\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef\u003c\n  HTMLDivElement,\n  React.ComponentProps\u003c\"div\"\u003e \u0026 {\n    showIcon?: boolean\n  }\n\u003e(({ className, showIcon = false, ...props }, ref) =\u003e {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() =\u003e {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    \u003cdiv\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    \u003e\n      {showIcon \u0026\u0026 (\n        \u003cSkeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        /\u003e\n      )}\n      \u003cSkeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      /\u003e\n    \u003c/div\u003e\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef\u003c\n  HTMLUListElement,\n  React.ComponentProps\u003c\"ul\"\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef\u003c\n  HTMLLIElement,\n  React.ComponentProps\u003c\"li\"\u003e\n\u003e(({ ...props }, ref) =\u003e \u003cli ref={ref} {...props} /\u003e)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef\u003c\n  HTMLAnchorElement,\n  React.ComponentProps\u003c\"a\"\u003e \u0026 {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n\u003e(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) =\u003e {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    \u003cComp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [\u0026\u003espan:last-child]:truncate [\u0026\u003esvg]:size-4 [\u0026\u003esvg]:shrink-0 [\u0026\u003esvg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" \u0026\u0026 \"text-xs\",\n        size === \"md\" \u0026\u0026 \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    /\u003e\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/skeleton.tsx",
//   "contents": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes\u003cHTMLDivElement\u003e) {\n  return (\n    \u003cdiv\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    /\u003e\n  )\n}\n\nexport { Skeleton }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/slider.tsx",
//   "contents": "import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SliderPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SliderPrimitive.Root\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cSliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  \u003e\n    \u003cSliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\"\u003e\n      \u003cSliderPrimitive.Range className=\"absolute h-full bg-primary\" /\u003e\n    \u003c/SliderPrimitive.Track\u003e\n    \u003cSliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" /\u003e\n  \u003c/SliderPrimitive.Root\u003e\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/sonner.tsx",
//   "contents": "import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps\u003ctypeof Sonner\u003e\n\nconst Toaster = ({ ...props }: ToasterProps) =\u003e {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    \u003cSonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    /\u003e\n  )\n}\n\nexport { Toaster, toast }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/switch.tsx",
//   "contents": "import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof SwitchPrimitives.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof SwitchPrimitives.Root\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cSwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  \u003e\n    \u003cSwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    /\u003e\n  \u003c/SwitchPrimitives.Root\u003e\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/table.tsx",
//   "contents": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef\u003c\n  HTMLTableElement,\n  React.HTMLAttributes\u003cHTMLTableElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cdiv className=\"relative w-full overflow-auto\"\u003e\n    \u003ctable\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    /\u003e\n  \u003c/div\u003e\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef\u003c\n  HTMLTableSectionElement,\n  React.HTMLAttributes\u003cHTMLTableSectionElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cthead ref={ref} className={cn(\"[\u0026_tr]:border-b\", className)} {...props} /\u003e\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef\u003c\n  HTMLTableSectionElement,\n  React.HTMLAttributes\u003cHTMLTableSectionElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003ctbody\n    ref={ref}\n    className={cn(\"[\u0026_tr:last-child]:border-0\", className)}\n    {...props}\n  /\u003e\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef\u003c\n  HTMLTableSectionElement,\n  React.HTMLAttributes\u003cHTMLTableSectionElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003ctfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [\u0026\u003etr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef\u003c\n  HTMLTableRowElement,\n  React.HTMLAttributes\u003cHTMLTableRowElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003ctr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef\u003c\n  HTMLTableCellElement,\n  React.ThHTMLAttributes\u003cHTMLTableCellElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cth\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [\u0026:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef\u003c\n  HTMLTableCellElement,\n  React.TdHTMLAttributes\u003cHTMLTableCellElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003ctd\n    ref={ref}\n    className={cn(\"p-4 align-middle [\u0026:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  /\u003e\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef\u003c\n  HTMLTableCaptionElement,\n  React.HTMLAttributes\u003cHTMLTableCaptionElement\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003ccaption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  /\u003e\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/tabs.tsx",
//   "contents": "import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof TabsPrimitive.List\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof TabsPrimitive.List\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cTabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof TabsPrimitive.Trigger\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof TabsPrimitive.Trigger\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cTabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof TabsPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof TabsPrimitive.Content\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cTabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/textarea.tsx",
//   "contents": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes\u003cHTMLTextAreaElement\u003e {}\n\nconst Textarea = React.forwardRef\u003cHTMLTextAreaElement, TextareaProps\u003e(\n  ({ className, ...props }, ref) =\u003e {\n    return (\n      \u003ctextarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      /\u003e\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/toast.tsx",
//   "contents": "import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ToastPrimitives.Viewport\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ToastPrimitives.Viewport\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ToastPrimitives.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ToastPrimitives.Root\u003e \u0026\n    VariantProps\u003ctypeof toastVariants\u003e\n\u003e(({ className, variant, ...props }, ref) =\u003e {\n  return (\n    \u003cToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    /\u003e\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ToastPrimitives.Action\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ToastPrimitives.Action\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ToastPrimitives.Close\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ToastPrimitives.Close\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  \u003e\n    \u003cX className=\"h-4 w-4\" /\u003e\n  \u003c/ToastPrimitives.Close\u003e\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ToastPrimitives.Title\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ToastPrimitives.Title\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  /\u003e\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ToastPrimitives.Description\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ToastPrimitives.Description\u003e\n\u003e(({ className, ...props }, ref) =\u003e (\n  \u003cToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  /\u003e\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef\u003ctypeof Toast\u003e\n\ntype ToastActionElement = React.ReactElement\u003ctypeof ToastAction\u003e\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/toaster.tsx",
//   "contents": "import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    \u003cToastProvider\u003e\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          \u003cToast key={id} {...props}\u003e\n            \u003cdiv className=\"grid gap-1\"\u003e\n              {title \u0026\u0026 \u003cToastTitle\u003e{title}\u003c/ToastTitle\u003e}\n              {description \u0026\u0026 (\n                \u003cToastDescription\u003e{description}\u003c/ToastDescription\u003e\n              )}\n            \u003c/div\u003e\n            {action}\n            \u003cToastClose /\u003e\n          \u003c/Toast\u003e\n        )\n      })}\n      \u003cToastViewport /\u003e\n    \u003c/ToastProvider\u003e\n  )\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/toggle-group.tsx",
//   "contents": "import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext\u003c\n  VariantProps\u003ctypeof toggleVariants\u003e\n\u003e({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ToggleGroupPrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ToggleGroupPrimitive.Root\u003e \u0026\n    VariantProps\u003ctypeof toggleVariants\u003e\n\u003e(({ className, variant, size, children, ...props }, ref) =\u003e (\n  \u003cToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  \u003e\n    \u003cToggleGroupContext.Provider value={{ variant, size }}\u003e\n      {children}\n    \u003c/ToggleGroupContext.Provider\u003e\n  \u003c/ToggleGroupPrimitive.Root\u003e\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof ToggleGroupPrimitive.Item\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof ToggleGroupPrimitive.Item\u003e \u0026\n    VariantProps\u003ctypeof toggleVariants\u003e\n\u003e(({ className, children, variant, size, ...props }, ref) =\u003e {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    \u003cToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    \u003e\n      {children}\n    \u003c/ToggleGroupPrimitive.Item\u003e\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/toggle.tsx",
//   "contents": "import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof TogglePrimitive.Root\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof TogglePrimitive.Root\u003e \u0026\n    VariantProps\u003ctypeof toggleVariants\u003e\n\u003e(({ className, variant, size, ...props }, ref) =\u003e (\n  \u003cTogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  /\u003e\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/tooltip.tsx",
//   "contents": "import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef\u003c\n  React.ElementRef\u003ctypeof TooltipPrimitive.Content\u003e,\n  React.ComponentPropsWithoutRef\u003ctypeof TooltipPrimitive.Content\u003e\n\u003e(({ className, sideOffset = 4, ...props }, ref) =\u003e (\n  \u003cTooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  /\u003e\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/components/ui/use-toast.ts",
//   "contents": "import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/contexts/AuthContext.tsx",
//   "contents": "\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { User, Session } from '@supabase/supabase-js';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from '@/hooks/use-toast';\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n  error: string | null;\n  signIn: (email: string, password: string) =\u003e Promise\u003cany\u003e;\n  signUp: (email: string, password: string, fullName: string) =\u003e Promise\u003cany\u003e;\n  signOut: () =\u003e Promise\u003cany\u003e;\n  resetPassword: (email: string) =\u003e Promise\u003cany\u003e;\n  clearError: () =\u003e void;\n}\n\nconst AuthContext = createContext\u003cAuthContextType | undefined\u003e(undefined);\n\nexport const useAuth = () =\u003e {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) =\u003e {\n  const [user, setUser] = useState\u003cUser | null\u003e(null);\n  const [session, setSession] = useState\u003cSession | null\u003e(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState\u003cstring | null\u003e(null);\n  const [retryCount, setRetryCount] = useState(0);\n\n  useEffect(() =\u003e {\n    let mounted = true;\n    let authSubscription: any = null;\n\n    const initializeAuth = async () =\u003e {\n      try {\n        setError(null);\n        setLoading(true);\n        \n        // Set up auth state listener (synchronous callback per best practices)\n        const { data: { subscription } } = supabase.auth.onAuthStateChange(\n          (event, nextSession) =\u003e {\n            try {\n              if (!mounted) return;\n\n              console.log('Auth state changed:', event, nextSession?.user?.email);\n\n              switch (event) {\n                case 'INITIAL_SESSION':\n                case 'SIGNED_IN':\n                case 'TOKEN_REFRESHED':\n                case 'USER_UPDATED':\n                  setSession(nextSession);\n                  setUser(nextSession?.user ?? null);\n                  setError(null);\n                  setRetryCount(0);\n                  break;\n                case 'SIGNED_OUT':\n                  setSession(null);\n                  setUser(null);\n                  setError(null);\n                  break;\n              }\n              // Do NOT set loading here to avoid race conditions; we'll finalize after initial getSession\n            } catch (err) {\n              console.error('Auth state change error:', err);\n              if (mounted) {\n                setError(err instanceof Error ? err.message : 'Authentication state error');\n              }\n            }\n          }\n        );\n\n        authSubscription = subscription;\n\n        // Check for existing session with enhanced retry mechanism\n        const getSessionWithRetry = async (attempts = 3): Promise\u003cany\u003e =\u003e {\n          for (let i = 0; i \u003c attempts; i++) {\n            try {\n              const { data: { session }, error } = await supabase.auth.getSession();\n              if (error) throw error;\n              return session;\n            } catch (err) {\n              console.error(`Session attempt ${i + 1}/${attempts}:`, err);\n              if (i === attempts - 1) throw err;\n              await new Promise(resolve =\u003e setTimeout(resolve, 1000 * (i + 1)));\n            }\n          }\n        };\n\n        const session = await getSessionWithRetry();\n        \n        if (mounted) {\n          console.log('Initial session check:', session?.user?.email);\n          setSession(session);\n          setUser(session?.user ?? null);\n          setError(null);\n          setRetryCount(0);\n          setLoading(false);\n        }\n\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        if (mounted) {\n          setError(error instanceof Error ? error.message : 'Authentication failed');\n          setLoading(false);\n          \n          // Retry initialization with exponential backoff\n          if (retryCount \u003c 3) {\n            setTimeout(() =\u003e {\n              if (mounted) {\n                setRetryCount(prev =\u003e prev + 1);\n              }\n            }, 2000 * Math.pow(2, retryCount));\n          }\n        }\n      }\n    };\n\n    initializeAuth();\n    \n    return () =\u003e {\n      mounted = false;\n      if (authSubscription) {\n        authSubscription.unsubscribe();\n      }\n    };\n  }, [retryCount]);\n\n  const signIn = async (email: string, password: string) =\u003e {\n    try {\n      setError(null);\n      setLoading(true);\n      console.log('Attempting to sign in:', email);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n      \n      if (error) {\n        setError(error.message);\n        toast({\n          title: \"Sign in failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      }\n      \n      console.log('Sign in result:', { data: data?.user?.email, error: error?.message });\n      return { data, error };\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';\n      setError(errorMessage);\n      toast({\n        title: \"Sign in failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      return { data: null, error: { message: errorMessage } };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email: string, password: string, fullName: string) =\u003e {\n    try {\n      setError(null);\n      setLoading(true);\n      console.log('Attempting to sign up:', email);\n      \n      const redirectUrl = `${window.location.origin}/`;\n      \n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: redirectUrl,\n          data: {\n            full_name: fullName,\n          },\n        },\n      });\n      \n      if (error) {\n        setError(error.message);\n        toast({\n          title: \"Sign up failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      }\n      \n      console.log('Sign up result:', { data: data?.user?.email, error: error?.message });\n      return { data, error };\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';\n      setError(errorMessage);\n      toast({\n        title: \"Sign up failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      return { data: null, error: { message: errorMessage } };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (email: string) =\u003e {\n    const redirectUrl = `${window.location.origin}/reset-password`;\n    \n    const { data, error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: redirectUrl,\n    });\n    return { data, error };\n  };\n\n  const signOut = async () =\u003e {\n    try {\n      setError(null);\n      console.log('Signing out');\n      const { error } = await supabase.auth.signOut();\n      \n      if (error) {\n        setError(error.message);\n        toast({\n          title: \"Sign out failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      }\n      \n      return { error };\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';\n      setError(errorMessage);\n      return { error: { message: errorMessage } };\n    }\n  };\n\n  const clearError = () =\u003e {\n    setError(null);\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    error,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    clearError,\n  };\n\n  return \u003cAuthContext.Provider value={value}\u003e{children}\u003c/AuthContext.Provider\u003e;\n};\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/contexts/HelpModeContext.tsx",
//   "contents": "import React, { createContext, useContext, useEffect, useMemo, useState } from \"react\";\n\ninterface HelpModeContextValue {\n  enabled: boolean;\n  toggle: () =\u003e void;\n  setEnabled: (value: boolean) =\u003e void;\n}\n\nconst HelpModeContext = createContext\u003cHelpModeContextValue | undefined\u003e(undefined);\n\nexport const HelpModeProvider: React.FC\u003c{ children: React.ReactNode }\u003e = ({ children }) =\u003e {\n  const [enabled, setEnabled] = useState\u003cboolean\u003e(() =\u003e {\n    try {\n      const stored = localStorage.getItem(\"helpModeEnabled\");\n      return stored === \"true\";\n    } catch {\n      return false;\n    }\n  });\n\n  useEffect(() =\u003e {\n    try {\n      localStorage.setItem(\"helpModeEnabled\", String(enabled));\n    } catch {}\n  }, [enabled]);\n\n  const value = useMemo(\n    () =\u003e ({\n      enabled,\n      toggle: () =\u003e setEnabled((v) =\u003e !v),\n      setEnabled,\n    }),\n    [enabled]\n  );\n\n  return \u003cHelpModeContext.Provider value={value}\u003e{children}\u003c/HelpModeContext.Provider\u003e;\n};\n\nexport const useHelpMode = () =\u003e {\n  const ctx = useContext(HelpModeContext);\n  if (!ctx) throw new Error(\"useHelpMode must be used within HelpModeProvider\");\n  return ctx;\n};\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/use-mobile.tsx",
//   "contents": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState\u003cboolean | undefined\u003e(undefined)\n\n  React.useEffect(() =\u003e {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () =\u003e {\n      setIsMobile(window.innerWidth \u003c MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth \u003c MOBILE_BREAKPOINT)\n    return () =\u003e mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/use-toast.ts",
//   "contents": "import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 3\nconst TOAST_REMOVE_DELAY = 6000\n\ntype ToasterToast = ToastProps \u0026 {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial\u003cToasterToast\u003e\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map\u003cstring, ReturnType\u003ctypeof setTimeout\u003e\u003e()\n\nconst addToRemoveQueue = (toastId: string) =\u003e {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() =\u003e {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State =\u003e {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =\u003e\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) =\u003e {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =\u003e\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) =\u003e t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array\u003c(state: State) =\u003e void\u003e = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) =\u003e {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit\u003cToasterToast, \"id\"\u003e\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =\u003e\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () =\u003e dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) =\u003e {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState\u003cState\u003e(memoryState)\n\n  React.useEffect(() =\u003e {\n    listeners.push(setState)\n    return () =\u003e {\n      const index = listeners.indexOf(setState)\n      if (index \u003e -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) =\u003e dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/useAIUsageLimit.ts",
//   "contents": "\nimport { useSubscription } from './useSubscription';\nimport { useEffect } from 'react';\n\nexport const useAIUsageLimit = () =\u003e {\n  const { checkUsageLimit, updateUsage, subscription, usage } = useSubscription();\n\n  // Clear old Gemini rate limit localStorage data on first load\n  useEffect(() =\u003e {\n    localStorage.removeItem('gemini_api_usage_stats');\n  }, []);\n\n  const checkLimit = (type: 'script_analyses' | 'ai_messages' | 'video_verifications'): boolean =\u003e {\n    return checkUsageLimit(type);\n  };\n\n  const updateUsageCount = async (type: 'script_analyses' | 'ai_messages' | 'video_verifications'): Promise\u003cboolean\u003e =\u003e {\n    return await updateUsage(type);\n  };\n\n  const showLimitNotification = (type: string) =\u003e {\n    // This is now handled in the useSubscription hook\n  };\n\n  const getRemainingUses = (type: 'script_analyses' | 'ai_messages' | 'video_verifications'): number =\u003e {\n    // This functionality is now handled by the subscription system\n    if (!subscription || !usage) return 0;\n    \n    const plan = subscription.subscription_plans as any;\n    const limit = plan?.limits?.[type];\n    if (limit === -1) return 999; // Unlimited\n    \n    return Math.max(0, limit - usage[`${type}_used`]);\n  };\n\n  return {\n    checkLimit,\n    updateUsage: updateUsageCount,\n    showLimitNotification,\n    getRemainingUses,\n    // Legacy compatibility\n    usage: null,\n    limits: null,\n    isNearLimit: () =\u003e false,\n  };\n};\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/useCoquiTTS.ts",
//   "contents": "import { useState } from 'react'\nimport { supabase } from '@/integrations/supabase/client'\n\ninterface CoquiTTSOptions {\n  voice?: string\n  language?: string\n  serverUrl?: string\n  onStart?: () =\u003e void\n  onComplete?: () =\u003e void\n  onError?: (error: string) =\u003e void\n}\n\nexport const useCoquiTTS = () =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [currentAudio, setCurrentAudio] = useState\u003cHTMLAudioElement | null\u003e(null)\n\n  const speak = async (text: string, options: CoquiTTSOptions = {}) =\u003e {\n    try {\n      setIsLoading(true)\n      options.onStart?.()\n\n      // Stop any currently playing audio\n      if (currentAudio) {\n        currentAudio.pause()\n        currentAudio.currentTime = 0\n      }\n\n      const { data, error } = await supabase.functions.invoke('coqui-tts', {\n        body: {\n          text,\n          voice: options.voice,\n          language: options.language || 'en',\n          serverUrl: options.serverUrl || localStorage.getItem('coqui-server-url')\n        }\n      })\n\n      if (error) {\n        throw new Error(error.message)\n      }\n\n      if (!data.audioContent) {\n        throw new Error('No audio content received')\n      }\n\n      // Convert base64 to audio blob\n      const audioBlob = new Blob(\n        [Uint8Array.from(atob(data.audioContent), c =\u003e c.charCodeAt(0))],\n        { type: 'audio/wav' }\n      )\n\n      const audioUrl = URL.createObjectURL(audioBlob)\n      const audio = new Audio(audioUrl)\n      \n      setCurrentAudio(audio)\n      setIsPlaying(true)\n\n      audio.onended = () =\u003e {\n        setIsPlaying(false)\n        setCurrentAudio(null)\n        URL.revokeObjectURL(audioUrl)\n        options.onComplete?.()\n      }\n\n      audio.onerror = () =\u003e {\n        setIsPlaying(false)\n        setCurrentAudio(null)\n        URL.revokeObjectURL(audioUrl)\n        options.onError?.('Audio playback failed')\n      }\n\n      await audio.play()\n    } catch (error) {\n      console.error('Coqui TTS error:', error)\n      setIsPlaying(false)\n      setCurrentAudio(null)\n      options.onError?.(error instanceof Error ? error.message : 'Unknown error')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const stop = () =\u003e {\n    if (currentAudio) {\n      currentAudio.pause()\n      currentAudio.currentTime = 0\n      setIsPlaying(false)\n      setCurrentAudio(null)\n    }\n  }\n\n  return {\n    speak,\n    stop,\n    isPlaying,\n    isLoading\n  }\n}",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/useElevenLabsTTS.ts",
//   "contents": "import { useState, useRef, useCallback } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\n\ninterface ElevenLabsTTSOptions {\n  voiceId?: string;\n  onStart?: () =\u003e void;\n  onComplete?: () =\u003e void;\n  onError?: (error: string) =\u003e void;\n}\n\nexport const useElevenLabsTTS = () =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const currentAudio = useRef\u003cHTMLAudioElement | null\u003e(null);\n\n  const speak = useCallback(async (text: string, options: ElevenLabsTTSOptions = {}) =\u003e {\n    const { voiceId = '9BWtsMINqrJLrRacOk9x', onStart, onComplete, onError } = options;\n\n    // Stop any currently playing audio\n    stop();\n\n    try {\n      setIsLoading(true);\n      \n      const { data, error } = await supabase.functions.invoke('text-to-speech', {\n        body: {\n          text,\n          voice: voiceId,\n          useElevenLabs: true\n        }\n      });\n\n      if (error) {\n        throw new Error((error as any)?.message || 'TTS function error');\n      }\n\n      if (data?.error) {\n        throw new Error(data.error);\n      }\n\n      if (data?.provider === 'browser') {\n        throw new Error(data?.error || 'ElevenLabs unavailable (received browser provider)');\n      }\n\n      // Convert base64 to audio blob\n      const audioData = atob(data.audioContent);\n      const audioArray = new Uint8Array(audioData.length);\n      for (let i = 0; i \u003c audioData.length; i++) {\n        audioArray[i] = audioData.charCodeAt(i);\n      }\n      \n      const audioBlob = new Blob([audioArray], { type: 'audio/mpeg' });\n      const audioUrl = URL.createObjectURL(audioBlob);\n\n      // Create and play audio\n      const audio = new Audio(audioUrl);\n      currentAudio.current = audio;\n\n      // Ensure we only mark start once across different browsers\n      let started = false;\n      const markStarted = () =\u003e {\n        if (!started) {\n          started = true;\n          setIsLoading(false);\n          setIsPlaying(true);\n          onStart?.();\n        }\n      };\n\n      audio.onloadstart = markStarted;\n      // Extra safety for browsers that don't reliably fire onloadstart\n      audio.oncanplay = markStarted;\n      audio.onplay = markStarted;\n\n      audio.onended = () =\u003e {\n        setIsPlaying(false);\n        setIsLoading(false);\n        URL.revokeObjectURL(audioUrl);\n        onComplete?.();\n      };\n\n      audio.onerror = () =\u003e {\n        setIsPlaying(false);\n        setIsLoading(false);\n        URL.revokeObjectURL(audioUrl);\n        onError?.('Audio playback failed');\n      };\n\n      await audio.play();\n      \n    } catch (error) {\n      setIsLoading(false);\n      setIsPlaying(false);\n      const errorMessage = (error as any)?.message || 'Unknown error occurred';\n      onError?.(errorMessage);\n      console.error('ElevenLabs TTS error:', errorMessage);\n    }\n  }, []);\n\n  const stop = useCallback(() =\u003e {\n    if (currentAudio.current) {\n      currentAudio.current.pause();\n      currentAudio.current = null;\n    }\n    setIsPlaying(false);\n    setIsLoading(false);\n  }, []);\n\n  return {\n    speak,\n    stop,\n    isPlaying,\n    isLoading\n  };\n};",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/useEnhancedTTS.ts",
//   "contents": "import { useState, useRef, useCallback } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\n\nexport interface TTSVoice {\n  name: string;\n  googleVoiceId: string;\n  gender: 'male' | 'female';\n  description: string;\n}\n\nexport const GOOGLE_TTS_VOICES: TTSVoice[] = [\n  { name: 'Male Professional', googleVoiceId: 'en-US-Neural2-J', gender: 'male', description: 'Clear, professional male voice' },\n  { name: 'Female Professional', googleVoiceId: 'en-US-Neural2-F', gender: 'female', description: 'Clear, professional female voice' },\n  { name: 'Male Warm', googleVoiceId: 'en-US-Neural2-A', gender: 'male', description: 'Warm, friendly male voice' },\n  { name: 'Female Warm', googleVoiceId: 'en-US-Neural2-C', gender: 'female', description: 'Warm, friendly female voice' },\n  { name: 'Male Deep', googleVoiceId: 'en-US-Neural2-D', gender: 'male', description: 'Deep, authoritative male voice' },\n  { name: 'Female Bright', googleVoiceId: 'en-US-Neural2-E', gender: 'female', description: 'Bright, energetic female voice' },\n  { name: 'Male Casual', googleVoiceId: 'en-US-Neural2-G', gender: 'male', description: 'Casual, conversational male voice' },\n  { name: 'Female Soft', googleVoiceId: 'en-US-Neural2-H', gender: 'female', description: 'Soft, gentle female voice' }\n];\n\nexport interface DialogueLine {\n  character: string;\n  text: string;\n  lineNumber: number;\n}\n\ninterface TTSQueueItem {\n  id: string;\n  dialogue: DialogueLine;\n  voice: string;\n  speed: number;\n  audioContent?: string;\n  status: 'pending' | 'generating' | 'ready' | 'playing' | 'completed' | 'error';\n}\n\ninterface EnhancedTTSOptions {\n  voice?: string;\n  speed?: number;\n  volume?: number;\n  onStart?: () =\u003e void;\n  onComplete?: () =\u003e void;\n  onError?: (error: string) =\u003e void;\n  onProgress?: (progress: number) =\u003e void;\n}\n\nexport const useEnhancedTTS = () =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentLineIndex, setCurrentLineIndex] = useState(0);\n  const [queue, setQueue] = useState\u003cTTSQueueItem[]\u003e([]);\n  const [volume, setVolume] = useState(1.0);\n  const [ttsHealth, setTtsHealth] = useState\u003c'unknown' | 'healthy' | 'error'\u003e('unknown');\n  \n  const currentAudio = useRef\u003cHTMLAudioElement | null\u003e(null);\n  const audioCache = useRef\u003cMap\u003cstring, string\u003e\u003e(new Map());\n\n  // Test TTS health\n  const checkTTSHealth = useCallback(async () =\u003e {\n    try {\n      const { data, error } = await supabase.functions.invoke('text-to-speech', {\n        body: { health: true }\n      });\n      \n      setTtsHealth(data?.healthy ? 'healthy' : 'error');\n      return data?.healthy || false;\n    } catch (error) {\n      setTtsHealth('error');\n      return false;\n    }\n  }, []);\n\n  // Generate cache key for audio\n  const getCacheKey = useCallback((text: string, voice: string, speed: number) =\u003e {\n    return `${text}-${voice}-${speed}`.replace(/[^a-zA-Z0-9-]/g, '');\n  }, []);\n\n  // Pre-generate TTS for multiple lines\n  const preGenerateAudio = useCallback(async (\n    dialogues: DialogueLine[], \n    characterVoices: Record\u003cstring, string\u003e,\n    speed: number = 1.0,\n    onProgress?: (progress: number) =\u003e void\n  ) =\u003e {\n    console.log('Pre-generating audio for', dialogues.length, 'lines');\n    setIsLoading(true);\n\n    const newQueue: TTSQueueItem[] = dialogues.map((dialogue, index) =\u003e ({\n      id: `${dialogue.lineNumber}-${index}`,\n      dialogue,\n      voice: characterVoices[dialogue.character] || 'en-US-Neural2-J',\n      speed,\n      status: 'pending' as const\n    }));\n\n    setQueue(newQueue);\n\n    // Generate audio for each line\n    for (let i = 0; i \u003c newQueue.length; i++) {\n      const item = newQueue[i];\n      const cacheKey = getCacheKey(item.dialogue.text, item.voice, item.speed);\n      \n      // Check cache first\n      if (audioCache.current.has(cacheKey)) {\n        item.audioContent = audioCache.current.get(cacheKey);\n        item.status = 'ready';\n        onProgress?.(((i + 1) / newQueue.length) * 100);\n        continue;\n      }\n\n      try {\n        item.status = 'generating';\n        setQueue([...newQueue]);\n\n        const { data, error } = await supabase.functions.invoke('text-to-speech', {\n          body: {\n            text: item.dialogue.text,\n            voice: item.voice,\n            speed: item.speed,\n            useGoogle: true\n          }\n        });\n\n        if (error || !data?.audioContent) {\n          item.status = 'error';\n          console.error('TTS generation failed for line:', item.dialogue.text);\n          continue;\n        }\n\n        // Cache the audio\n        audioCache.current.set(cacheKey, data.audioContent);\n        item.audioContent = data.audioContent;\n        item.status = 'ready';\n\n        onProgress?.(((i + 1) / newQueue.length) * 100);\n      } catch (error) {\n        item.status = 'error';\n        console.error('TTS error for line:', item.dialogue.text, error);\n      }\n    }\n\n    setQueue([...newQueue]);\n    setIsLoading(false);\n    console.log('Pre-generation completed. Ready lines:', newQueue.filter(q =\u003e q.status === 'ready').length);\n  }, [getCacheKey]);\n\n  const stop = useCallback(() =\u003e {\n    if (currentAudio.current) {\n      currentAudio.current.pause();\n      currentAudio.current = null;\n    }\n    setIsPlaying(false);\n    \n    // Reset playing statuses\n    const updatedQueue = queue.map(item =\u003e ({\n      ...item,\n      status: item.status === 'playing' ? 'ready' as const : item.status\n    }));\n    setQueue(updatedQueue);\n  }, [queue]);\n\n  // Play single line with proper queue management\n  const playLine = useCallback(async (lineIndex: number, options: EnhancedTTSOptions = {}) =\u003e {\n    const { volume: vol = 1.0, onStart, onComplete, onError } = options;\n    \n    if (lineIndex \u003e= queue.length) {\n      onError?.('Line index out of bounds');\n      return;\n    }\n\n    const queueItem = queue[lineIndex];\n    if (queueItem.status !== 'ready' || !queueItem.audioContent) {\n      onError?.('Audio not ready for this line');\n      return;\n    }\n\n    // Stop current audio\n    stop();\n\n    try {\n      setCurrentLineIndex(lineIndex);\n      queueItem.status = 'playing';\n      setQueue([...queue]);\n\n      onStart?.();\n\n      // Convert base64 to audio URL\n      const binary = atob(queueItem.audioContent);\n      const bytes = new Uint8Array(binary.length);\n      for (let i = 0; i \u003c binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n      }\n      const blob = new Blob([bytes], { type: 'audio/mpeg' });\n      const audioUrl = URL.createObjectURL(blob);\n\n      // Create and configure audio\n      const audio = new Audio(audioUrl);\n      audio.volume = vol;\n      currentAudio.current = audio;\n\n      audio.onloadstart = () =\u003e {\n        setIsPlaying(true);\n      };\n\n      audio.onended = () =\u003e {\n        setIsPlaying(false);\n        queueItem.status = 'completed';\n        setQueue([...queue]);\n        URL.revokeObjectURL(audioUrl);\n        onComplete?.();\n      };\n\n      audio.onerror = () =\u003e {\n        setIsPlaying(false);\n        queueItem.status = 'error';\n        setQueue([...queue]);\n        URL.revokeObjectURL(audioUrl);\n        onError?.('Audio playback failed');\n      };\n\n      await audio.play();\n      \n    } catch (error) {\n      setIsPlaying(false);\n      queueItem.status = 'error';\n      setQueue([...queue]);\n      onError?.((error as any)?.message || 'Playback failed');\n    }\n  }, [queue, stop]);\n\n  // Play all lines sequentially\n  const playSequential = useCallback(async (\n    startIndex: number = 0, \n    options: EnhancedTTSOptions = {}\n  ) =\u003e {\n    const { onProgress } = options;\n    \n    for (let i = startIndex; i \u003c queue.length; i++) {\n      if (!isPlaying) break; // Stop if user paused\n      \n      await new Promise\u003cvoid\u003e((resolve) =\u003e {\n        playLine(i, {\n          ...options,\n          onComplete: () =\u003e {\n            onProgress?.((i + 1) / queue.length * 100);\n            resolve();\n          },\n          onError: () =\u003e {\n            resolve(); // Continue to next line even on error\n          }\n        });\n      });\n    }\n  }, [queue, isPlaying, playLine]);\n\n  // Get TTS status summary\n  const getStatusSummary = useCallback(() =\u003e {\n    const total = queue.length;\n    const ready = queue.filter(q =\u003e q.status === 'ready').length;\n    const generating = queue.filter(q =\u003e q.status === 'generating').length;\n    const errors = queue.filter(q =\u003e q.status === 'error').length;\n    \n    return { total, ready, generating, errors };\n  }, [queue]);\n\n  return {\n    // Audio playback\n    playLine,\n    playSequential,\n    stop,\n    \n    // Pre-generation\n    preGenerateAudio,\n    \n    // State\n    isPlaying,\n    isLoading,\n    currentLineIndex,\n    volume,\n    setVolume,\n    \n    // Queue management\n    queue,\n    getStatusSummary,\n    \n    // Health check\n    ttsHealth,\n    checkTTSHealth,\n    \n    // Cache management\n    clearCache: () =\u003e audioCache.current.clear(),\n    getCacheSize: () =\u003e audioCache.current.size\n  };\n};",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/useGoogleTTS.ts",
//   "contents": "import { useState, useRef, useCallback } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\n\ninterface GoogleTTSOptions {\n  voice?: string;\n  speed?: number;\n  volume?: number;\n  onStart?: () =\u003e void;\n  onComplete?: () =\u003e void;\n  onError?: (error: string) =\u003e void;\n}\n\nexport const useGoogleTTS = () =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const currentAudio = useRef\u003cHTMLAudioElement | null\u003e(null);\n\n  const speak = useCallback(async (text: string, options: GoogleTTSOptions = {}) =\u003e {\n    const { voice = 'en-US-Standard-C', speed = 1.0, volume = 1.0, onStart, onComplete, onError } = options;\n\n    // Stop any currently playing audio\n    stop();\n\n    try {\n      setIsLoading(true);\n      onStart?.();\n\n      const { data, error } = await supabase.functions.invoke('text-to-speech', {\n        body: {\n          text,\n          voice,\n          speed,\n          useGoogle: true,\n        },\n      });\n\n      if (error) {\n        throw new Error(`Google TTS error: ${error.message}`);\n      }\n\n      if (!data || !data.audioContent) {\n        throw new Error('No audio content received from Google TTS');\n      }\n\n      if (data.provider === 'browser') {\n        throw new Error('Google TTS service unavailable');\n      }\n\n      // Convert base64 to audio URL\n      const binary = atob(data.audioContent);\n      const bytes = new Uint8Array(binary.length);\n      for (let i = 0; i \u003c binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n      }\n      const blob = new Blob([bytes], { type: 'audio/mpeg' });\n      const audioUrl = URL.createObjectURL(blob);\n\n      // Create and play audio\n      const audio = new Audio(audioUrl);\n      audio.volume = Math.max(0, Math.min(1, volume)); // Clamp volume between 0 and 1\n      currentAudio.current = audio;\n\n      audio.onloadstart = () =\u003e {\n        setIsLoading(false);\n        setIsPlaying(true);\n      };\n\n      audio.onended = () =\u003e {\n        setIsPlaying(false);\n        URL.revokeObjectURL(audioUrl);\n        onComplete?.();\n      };\n\n      audio.onerror = () =\u003e {\n        setIsPlaying(false);\n        setIsLoading(false);\n        URL.revokeObjectURL(audioUrl);\n        onError?.('Audio playback failed');\n      };\n\n      await audio.play();\n      \n    } catch (error) {\n      setIsLoading(false);\n      setIsPlaying(false);\n      const errorMessage = (error as any)?.message || 'Unknown error occurred';\n      onError?.(errorMessage);\n      console.error('Google TTS error:', errorMessage);\n    }\n  }, []);\n\n  const stop = useCallback(() =\u003e {\n    if (currentAudio.current) {\n      currentAudio.current.pause();\n      currentAudio.current = null;\n    }\n    setIsPlaying(false);\n    setIsLoading(false);\n  }, []);\n\n  return {\n    speak,\n    stop,\n    isPlaying,\n    isLoading\n  };\n};",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/usePreRenderedTTS.ts",
//   "contents": "\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\n\nexport type PreRenderStatus = 'idle' | 'running' | 'completed' | 'cancelled' | 'error';\n\ninterface DialogueItem {\n  character: string;\n  text: string;\n}\n\ninterface StartOptions {\n  dialogues: DialogueItem[];\n  actorCharacter: string | 'none';\n  voiceId: string;\n  speed?: number;\n  characterVoiceMap?: Record\u003cstring, string\u003e;\n  scriptId?: string; // Add scriptId for caching\n}\n\n// Utility: convert base64 string to Blob URL\nfunction base64ToAudioUrl(base64: string, mime: string = 'audio/mpeg') {\n  const binary = atob(base64);\n  const len = binary.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i \u003c len; i++) bytes[i] = binary.charCodeAt(i);\n  const blob = new Blob([bytes], { type: mime });\n  return URL.createObjectURL(blob);\n}\n\nexport function usePreRenderedTTS() {\n  const [status, setStatus] = useState\u003cPreRenderStatus\u003e('idle');\n  const [progress, setProgress] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [failures, setFailures] = useState(0);\n  const [lastError, setLastError] = useState\u003cstring | null\u003e(null);\n  const [audioMap, setAudioMap] = useState\u003cRecord\u003cnumber, string\u003e\u003e({});\n  const [cacheStats, setCacheStats] = useState\u003c{ fromCache: number; generated: number }\u003e({ fromCache: 0, generated: 0 });\n  const runningRef = useRef(false);\n  const abortRef = useRef\u003c{ aborted: boolean }\u003e({ aborted: false });\n  const urlsRef = useRef\u003cstring[]\u003e([]); // for cleanup\n\n  const cleanupUrls = useCallback(() =\u003e {\n    urlsRef.current.forEach((u) =\u003e URL.revokeObjectURL(u));\n    urlsRef.current = [];\n  }, []);\n\n  const reset = useCallback(() =\u003e {\n    runningRef.current = false;\n    abortRef.current.aborted = false;\n    cleanupUrls();\n    setAudioMap({});\n    setProgress(0);\n    setTotal(0);\n    setFailures(0);\n    setLastError(null);\n    setCacheStats({ fromCache: 0, generated: 0 });\n    setStatus('idle');\n  }, [cleanupUrls]);\n\n  const cancel = useCallback(() =\u003e {\n    abortRef.current.aborted = true;\n    runningRef.current = false;\n    setStatus('cancelled');\n  }, []);\n\n  const isRunning = useMemo(() =\u003e status === 'running', [status]);\n\n  const start = useCallback(async ({ dialogues, actorCharacter, voiceId, speed = 1.0, characterVoiceMap, scriptId }: StartOptions) =\u003e {\n    if (runningRef.current) return;\n    reset();\n\n    // Determine which indices to pre-render (AI lines: not actor)\n    const indices = dialogues\n      .map((d, i) =\u003e ({ i, d }))\n      .filter(({ d }) =\u003e actorCharacter === 'none' || d.character !== actorCharacter)\n      .map(({ i }) =\u003e i);\n\n    setTotal(indices.length);\n    setStatus('running');\n    runningRef.current = true;\n\n    const concurrency = 2;\n    let inFlight = 0;\n    let cursor = 0;\n    let cacheHits = 0;\n    let newGenerated = 0;\n\n    const next = async () =\u003e {\n      if (abortRef.current.aborted) return;\n      if (cursor \u003e= indices.length) return;\n      const idx = indices[cursor++];\n      inFlight++;\n      try {\n        // Simple retry with backoff on rate limits\n        let attempts = 0;\n        let completed = false;\n        while (attempts \u003c 2 \u0026\u0026 !completed) {\n          attempts++;\n          try {\n            // Use character-specific voice if available, otherwise use default voiceId\n            const characterName = dialogues[idx].character;\n            const useVoice = characterVoiceMap?.[characterName] || voiceId;\n            \n            // Use TTS cache if scriptId is available, otherwise fallback to direct TTS\n            const endpoint = scriptId ? 'tts-cache' : 'text-to-speech';\n            const requestBody = scriptId ? {\n              scriptId,\n              dialogueIndex: idx,\n              character: characterName,\n              text: dialogues[idx].text,\n              voiceId: useVoice,\n              speed,\n            } : {\n              text: dialogues[idx].text,\n              voice: useVoice,\n              speed,\n              useGoogle: true,\n            };\n\n            const { data, error } = await supabase.functions.invoke(endpoint, {\n              body: requestBody,\n            });\n\n            if (error) {\n              const status = (error as any)?.status;\n              const message = (error as any)?.message || `${endpoint} function error`;\n              throw Object.assign(new Error(message), { status });\n            }\n            if (!data || !data.audioContent) {\n              throw new Error(data?.error || 'No audio returned');\n            }\n            if (data.provider === 'browser') {\n              throw new Error(data?.error || 'Google TTS unavailable');\n            }\n\n            // Track cache statistics\n            if (data.fromCache) {\n              cacheHits++;\n            } else {\n              newGenerated++;\n            }\n\n            const url = base64ToAudioUrl(data.audioContent);\n            urlsRef.current.push(url);\n            setAudioMap((prev) =\u003e ({ ...prev, [idx]: url }));\n            setCacheStats({ fromCache: cacheHits, generated: newGenerated });\n            completed = true;\n          } catch (err: any) {\n            if (err?.status === 429 \u0026\u0026 attempts \u003c 2 \u0026\u0026 !abortRef.current.aborted) {\n              await new Promise((r) =\u003e setTimeout(r, 800));\n              continue;\n            }\n            throw err;\n          }\n        }\n      } catch (err: any) {\n        setFailures((f) =\u003e f + 1);\n        const msg = err?.message || 'Unknown error';\n        setLastError(msg);\n      } finally {\n        setProgress((p) =\u003e p + 1);\n        inFlight--;\n        if (cursor \u003c indices.length \u0026\u0026 !abortRef.current.aborted) {\n          void next();\n        }\n      }\n    };\n\n    // Kick off workers\n    const starters = Math.min(concurrency, indices.length);\n    const workers: Promise\u003cvoid\u003e[] = [];\n    for (let i = 0; i \u003c starters; i++) workers.push(next());\n\n    await Promise.all(workers);\n\n    runningRef.current = false;\n    if (abortRef.current.aborted) return;\n    setStatus('completed');\n  }, [reset]);\n\n  return {\n    // state\n    status,\n    progress,\n    total,\n    failures,\n    lastError,\n    audioMap,\n    cacheStats,\n    isRunning,\n    // actions\n    startPreRender: start,\n    cancelPreRender: cancel,\n    reset,\n  };\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/useProVoiceTTS.ts",
//   "contents": "import { useState, useRef, useCallback } from 'react';\n\ninterface ProVoiceTTSOptions {\n  onStart?: () =\u003e void;\n  onComplete?: () =\u003e void;\n  onError?: (error: string) =\u003e void;\n}\n\nexport const useProVoiceTTS = () =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const currentAudio = useRef\u003cHTMLAudioElement | null\u003e(null);\n\n  const speak = useCallback(async (text: string, options: ProVoiceTTSOptions = {}) =\u003e {\n    const { onStart, onComplete, onError } = options;\n\n    // Stop any currently playing audio\n    stop();\n\n    try {\n      setIsLoading(true);\n      onStart?.();\n\n      // Generate unique filename\n      const timestamp = Date.now();\n      const randomId = Math.random().toString(36).substring(2, 15);\n      const filename = `provoice_${timestamp}_${randomId}`;\n\n      // Call Pro-Voice API\n      const response = await fetch('http://162.19.255.187:3000/synthesize', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          text,\n          filename: `${filename}.wav`\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Pro-Voice API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      if (!data.file) {\n        throw new Error('No audio file received from Pro-Voice API');\n      }\n\n      // Build audio URL\n      const audioUrl = `http://162.19.255.187:3000/audio/${data.file}`;\n      \n      // Create and play audio\n      const audio = new Audio(audioUrl);\n      currentAudio.current = audio;\n\n      // Ensure we only mark start once across different browsers\n      let started = false;\n      const markStarted = () =\u003e {\n        if (!started) {\n          started = true;\n          setIsLoading(false);\n          setIsPlaying(true);\n        }\n      };\n\n      audio.onloadstart = markStarted;\n      audio.oncanplay = markStarted;\n      audio.onplay = markStarted;\n\n      audio.onended = () =\u003e {\n        setIsPlaying(false);\n        setIsLoading(false);\n        onComplete?.();\n      };\n\n      audio.onerror = () =\u003e {\n        setIsPlaying(false);\n        setIsLoading(false);\n        onError?.('Audio playback failed');\n      };\n\n      await audio.play();\n      \n    } catch (error) {\n      setIsLoading(false);\n      setIsPlaying(false);\n      const errorMessage = (error as any)?.message || 'Unknown error occurred';\n      onError?.(errorMessage);\n      console.error('Pro-Voice TTS error:', errorMessage);\n    }\n  }, []);\n\n  const stop = useCallback(() =\u003e {\n    if (currentAudio.current) {\n      currentAudio.current.pause();\n      currentAudio.current = null;\n    }\n    setIsPlaying(false);\n    setIsLoading(false);\n  }, []);\n\n  return {\n    speak,\n    stop,\n    isPlaying,\n    isLoading\n  };\n};",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/useRealtimeVoice.ts",
//   "contents": "import { useState, useRef, useCallback, useEffect } from 'react';\nimport { AudioRecorder, AudioQueue, encodeAudioForAPI } from '@/utils/RealtimeAudio';\n\ninterface RealtimeVoiceOptions {\n  onStart?: () =\u003e void;\n  onComplete?: () =\u003e void;\n  onError?: (error: string) =\u003e void;\n  onTranscript?: (text: string) =\u003e void;\n  volume?: number;\n  microphoneDeviceId?: string;\n  microphoneSensitivity?: number;\n}\n\nexport const useRealtimeVoice = () =\u003e {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  \n  const wsRef = useRef\u003cWebSocket | null\u003e(null);\n  const audioContextRef = useRef\u003cAudioContext | null\u003e(null);\n  const audioQueueRef = useRef\u003cAudioQueue | null\u003e(null);\n  const recorderRef = useRef\u003cAudioRecorder | null\u003e(null);\n  const pendingCallbackRef = useRef\u003cRealtimeVoiceOptions\u003e({});\n  const volumeRef = useRef\u003cnumber\u003e(0.8);\n  const currentTranscriptRef = useRef\u003cstring\u003e('');\n\n  const initializeAudio = useCallback(async (microphoneDeviceId?: string) =\u003e {\n    try {\n      audioContextRef.current = new AudioContext({ sampleRate: 24000 });\n      audioQueueRef.current = new AudioQueue(audioContextRef.current);\n      \n      // Set up audio volume if needed\n      if (volumeRef.current !== 0.8) {\n        audioQueueRef.current.setVolume(volumeRef.current);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to initialize audio:', error);\n      return false;\n    }\n  }, []);\n\n  const connect = useCallback(async () =\u003e {\n    if (isConnected || wsRef.current) return;\n\n    try {\n      setIsLoading(true);\n      \n      // Initialize audio first\n      const audioInitialized = await initializeAudio();\n      if (!audioInitialized) {\n        throw new Error('Failed to initialize audio');\n      }\n\n      // Connect to our Supabase Edge Function\n      const wsUrl = `wss://cqlczzkyktktaajbfmli.functions.supabase.co/realtime-voice-partner`;\n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = () =\u003e {\n        console.log('Connected to realtime voice');\n        setIsConnected(true);\n        setIsLoading(false);\n      };\n\n      wsRef.current.onmessage = async (event) =\u003e {\n        const data = JSON.parse(event.data);\n        console.log('Received event:', data.type);\n\n        if (data.type === 'response.audio.delta') {\n          // Convert base64 to Uint8Array and add to audio queue\n          const binaryString = atob(data.delta);\n          const bytes = new Uint8Array(binaryString.length);\n          for (let i = 0; i \u003c binaryString.length; i++) {\n            bytes[i] = binaryString.charCodeAt(i);\n          }\n          await audioQueueRef.current?.addToQueue(bytes);\n          \n          if (!isPlaying) {\n            setIsPlaying(true);\n            pendingCallbackRef.current.onStart?.();\n          }\n        } else if (data.type === 'response.audio_transcript.delta') {\n          // Handle transcript deltas (AI speaking transcript)\n          if (data.delta) {\n            currentTranscriptRef.current += data.delta;\n            pendingCallbackRef.current.onTranscript?.(currentTranscriptRef.current);\n          }\n        } else if (data.type === 'conversation.item.input_audio_transcription.completed') {\n          // Handle user speech transcript\n          if (data.transcript) {\n            console.log('User transcript:', data.transcript);\n            pendingCallbackRef.current.onTranscript?.(data.transcript);\n          }\n        } else if (data.type === 'input_audio_buffer.speech_started') {\n          console.log('User started speaking');\n          setIsListening(true);\n        } else if (data.type === 'input_audio_buffer.speech_stopped') {\n          console.log('User stopped speaking');\n          setIsListening(false);\n        } else if (data.type === 'response.audio.done') {\n          console.log('Audio response completed');\n          setIsPlaying(false);\n          currentTranscriptRef.current = ''; // Clear transcript for next response\n          pendingCallbackRef.current.onComplete?.();\n          pendingCallbackRef.current = {};\n        } else if (data.type === 'error') {\n          console.error('Realtime error:', data.error);\n          pendingCallbackRef.current.onError?.(data.error);\n          pendingCallbackRef.current = {};\n        }\n      };\n\n      wsRef.current.onerror = (error) =\u003e {\n        console.error('WebSocket error:', error);\n        setIsLoading(false);\n        pendingCallbackRef.current.onError?.('Connection failed');\n        pendingCallbackRef.current = {};\n      };\n\n      wsRef.current.onclose = () =\u003e {\n        console.log('WebSocket closed');\n        setIsConnected(false);\n        setIsPlaying(false);\n        setIsLoading(false);\n      };\n\n    } catch (error) {\n      setIsLoading(false);\n      console.error('Failed to connect:', error);\n      throw error;\n    }\n  }, [isConnected, initializeAudio]);\n\n  const disconnect = useCallback(() =\u003e {\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    \n    recorderRef.current?.stop();\n    recorderRef.current = null;\n    audioQueueRef.current?.clear();\n    audioContextRef.current?.close();\n    audioContextRef.current = null;\n    audioQueueRef.current = null;\n    \n    setIsConnected(false);\n    setIsPlaying(false);\n    setIsLoading(false);\n  }, []);\n\n  const speak = useCallback(async (text: string, options: RealtimeVoiceOptions = {}) =\u003e {\n    if (!isConnected || !wsRef.current) {\n      options.onError?.('Not connected to realtime voice');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      pendingCallbackRef.current = options;\n      \n      // Apply volume setting\n      if (options.volume !== undefined) {\n        volumeRef.current = options.volume;\n        audioQueueRef.current?.setVolume(options.volume);\n      }\n\n      // Send text as a conversation item\n      const conversationItem = {\n        type: 'conversation.item.create',\n        item: {\n          type: 'message',\n          role: 'user',\n          content: [\n            {\n              type: 'input_text',\n              text: `Please deliver this line as my scene partner: \"${text}\"`\n            }\n          ]\n        }\n      };\n\n      wsRef.current.send(JSON.stringify(conversationItem));\n      \n      // Request response\n      wsRef.current.send(JSON.stringify({\n        type: 'response.create'\n      }));\n\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      options.onError?.(errorMessage);\n      console.error('Realtime speech error:', errorMessage);\n    }\n  }, [isConnected]);\n\n  const startListening = useCallback(async (options: RealtimeVoiceOptions = {}) =\u003e {\n    if (!isConnected || !wsRef.current) {\n      options.onError?.('Not connected to realtime voice');\n      return;\n    }\n\n    try {\n      pendingCallbackRef.current = options;\n      \n      // Initialize recorder with specific microphone if provided\n      const constraints: MediaStreamConstraints = {\n        audio: {\n          sampleRate: 24000,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true,\n          ...(options.microphoneDeviceId \u0026\u0026 options.microphoneDeviceId !== 'default' \n            ? { deviceId: { exact: options.microphoneDeviceId } }\n            : {})\n        }\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      \n      recorderRef.current = new AudioRecorder((audioData) =\u003e {\n        if (wsRef.current \u0026\u0026 wsRef.current.readyState === WebSocket.OPEN) {\n          // Apply microphone sensitivity by adjusting audio levels\n          const sensitivityFactor = (options.microphoneSensitivity || 75) / 100;\n          const adjustedAudio = new Float32Array(audioData.length);\n          for (let i = 0; i \u003c audioData.length; i++) {\n            adjustedAudio[i] = audioData[i] * sensitivityFactor;\n          }\n          \n          const encodedAudio = encodeAudioForAPI(adjustedAudio);\n          wsRef.current.send(JSON.stringify({\n            type: 'input_audio_buffer.append',\n            audio: encodedAudio\n          }));\n        }\n      });\n\n      // Use custom stream with the recorder\n      await recorderRef.current.start(stream);\n      \n      setIsListening(true);\n      console.log('Started listening with microphone:', options.microphoneDeviceId || 'default');\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      options.onError?.(errorMessage);\n      console.error('Failed to start listening:', errorMessage);\n    }\n  }, [isConnected]);\n\n  const stopListening = useCallback(() =\u003e {\n    if (recorderRef.current) {\n      recorderRef.current.stop();\n      recorderRef.current = null;\n    }\n    setIsListening(false);\n    console.log('Stopped listening');\n  }, []);\n\n  const stop = useCallback(() =\u003e {\n    audioQueueRef.current?.clear();\n    setIsPlaying(false);\n    pendingCallbackRef.current.onComplete?.();\n    pendingCallbackRef.current = {};\n  }, []);\n\n  // Auto-connect on first use\n  useEffect(() =\u003e {\n    return () =\u003e {\n      disconnect();\n    };\n  }, [disconnect]);\n\n  return {\n    speak,\n    stop,\n    connect,\n    disconnect,\n    startListening,\n    stopListening,\n    isConnected,\n    isPlaying,\n    isLoading,\n    isListening\n  };\n};",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/useSimpleTTS.ts",
//   "contents": "import { useState, useRef, useCallback } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\n\ninterface SimpleTTSOptions {\n  voice?: string;\n  speed?: number;\n  volume?: number;\n  onStart?: () =\u003e void;\n  onComplete?: () =\u003e void;\n  onError?: (error: string) =\u003e void;\n}\n\nexport const useSimpleTTS = () =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const currentAudio = useRef\u003cHTMLAudioElement | null\u003e(null);\n\n  const speak = useCallback(async (text: string, options: SimpleTTSOptions = {}) =\u003e {\n    const { voice = 'en-US-Standard-C', speed = 1.0, volume = 1.0, onStart, onComplete, onError } = options;\n\n    // Stop any currently playing audio\n    stop();\n\n    try {\n      setIsLoading(true);\n      onStart?.();\n\n      const { data, error } = await supabase.functions.invoke('text-to-speech', {\n        body: {\n          text,\n          voice,\n          speed,\n          useGoogle: true,\n        },\n      });\n\n      if (error) {\n        throw new Error(`TTS error: ${error.message}`);\n      }\n\n      if (!data || !data.audioContent) {\n        throw new Error('No audio content received');\n      }\n\n      // Convert base64 to audio URL\n      const binary = atob(data.audioContent);\n      const bytes = new Uint8Array(binary.length);\n      for (let i = 0; i \u003c binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n      }\n      const blob = new Blob([bytes], { type: 'audio/mpeg' });\n      const audioUrl = URL.createObjectURL(blob);\n\n      // Create and play audio\n      const audio = new Audio(audioUrl);\n      audio.volume = Math.max(0, Math.min(1, volume)); // Clamp volume between 0 and 1\n      currentAudio.current = audio;\n\n      audio.onloadstart = () =\u003e {\n        setIsLoading(false);\n        setIsPlaying(true);\n      };\n\n      audio.onended = () =\u003e {\n        setIsPlaying(false);\n        URL.revokeObjectURL(audioUrl);\n        onComplete?.();\n      };\n\n      audio.onerror = () =\u003e {\n        setIsPlaying(false);\n        setIsLoading(false);\n        URL.revokeObjectURL(audioUrl);\n        onError?.('Audio playback failed');\n      };\n\n      await audio.play();\n      \n    } catch (error) {\n      setIsLoading(false);\n      setIsPlaying(false);\n      const errorMessage = (error as any)?.message || 'Unknown error occurred';\n      onError?.(errorMessage);\n      console.error('TTS error:', errorMessage);\n    }\n  }, []);\n\n  const stop = useCallback(() =\u003e {\n    if (currentAudio.current) {\n      currentAudio.current.pause();\n      currentAudio.current = null;\n    }\n    setIsPlaying(false);\n    setIsLoading(false);\n  }, []);\n\n  return {\n    speak,\n    stop,\n    isPlaying,\n    isLoading\n  };\n};",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/useSubscription.ts",
//   "contents": "\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\nimport { SubscriptionPlan, UserSubscription, UserUsage } from '@/types/subscription';\n\nexport const useSubscription = () =\u003e {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [subscription, setSubscription] = useState\u003cUserSubscription | null\u003e(null);\n  const [usage, setUsage] = useState\u003cUserUsage | null\u003e(null);\n  const [plans, setPlans] = useState\u003cSubscriptionPlan[]\u003e([]);\n\n  // Fetch subscription plans\n  const fetchPlans = async () =\u003e {\n    try {\n      const { data, error } = await supabase\n        .from('subscription_plans')\n        .select('*')\n        .order('price', { ascending: true });\n\n      if (error) throw error;\n      setPlans((data || []) as SubscriptionPlan[]);\n    } catch (error: any) {\n      console.error('Error fetching plans:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load subscription plans\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Fetch user subscription\n  const fetchUserSubscription = async () =\u003e {\n    if (!user) return;\n\n    try {\n      const { data, error } = await supabase\n        .from('user_subscriptions')\n        .select(`\n          *,\n          subscription_plans(*)\n        `)\n        .eq('user_id', user.id)\n        .eq('status', 'active')\n        .order('created_at', { ascending: false })\n        .limit(1)\n        .maybeSingle();\n\n      if (error) {\n        console.error('Error fetching subscription:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load subscription data\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setSubscription(data as UserSubscription | null);\n    } catch (error: any) {\n      console.error('Error fetching subscription:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load subscription data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Fetch user usage\n  const fetchUserUsage = async () =\u003e {\n    if (!user || !subscription) return;\n\n    try {\n      const { data, error } = await supabase\n        .from('user_usage')\n        .select('*')\n        .eq('user_id', user.id)\n        .eq('subscription_id', subscription.id)\n        .maybeSingle();\n\n      if (error) {\n        console.error('Error fetching usage:', error);\n        return;\n      }\n      \n      setUsage(data as UserUsage | null);\n    } catch (error: any) {\n      console.error('Error fetching usage:', error);\n    }\n  };\n\n  // Create default demo subscription for new users\n  const createDemoSubscription = async () =\u003e {\n    if (!user || subscription) return;\n\n    try {\n      const demoplan = plans.find(p =\u003e p.name === 'Demo');\n      if (!demoplan) return;\n\n      const { data: newSubscription, error: subError } = await supabase\n        .from('user_subscriptions')\n        .insert({\n          user_id: user.id,\n          plan_id: demoplan.id,\n          status: 'active'\n        })\n        .select(`\n          *,\n          subscription_plans(*)\n        `)\n        .single();\n\n      if (subError) throw subError;\n\n      const { error: usageError } = await supabase\n        .from('user_usage')\n        .insert({\n          user_id: user.id,\n          subscription_id: newSubscription.id\n        });\n\n      if (usageError) throw usageError;\n\n      setSubscription(newSubscription as UserSubscription);\n      await fetchUserUsage();\n    } catch (error: any) {\n      console.error('Error creating demo subscription:', error);\n    }\n  };\n\n  // Check usage limits\n  const checkUsageLimit = (type: 'script_analyses' | 'ai_messages' | 'video_verifications'): boolean =\u003e {\n    if (!subscription || !usage) return false;\n\n    const plan = subscription.subscription_plans as SubscriptionPlan;\n    const limit = plan.limits[type];\n    \n    // -1 means unlimited\n    if (limit === -1) return true;\n    \n    return usage[`${type}_used`] \u003c limit;\n  };\n\n  // Update usage\n  const updateUsage = async (type: 'script_analyses' | 'ai_messages' | 'video_verifications') =\u003e {\n    if (!user || !subscription || !usage) return false;\n\n    if (!checkUsageLimit(type)) {\n      const plan = subscription.subscription_plans as SubscriptionPlan;\n      const planName = plan?.name || 'current plan';\n      const typeName = type.replace('_', ' ').replace('script analyses', 'scene analysis');\n      \n      toast({\n        title: \"Usage Limit Reached\",\n        description: `You've reached your ${typeName} limit for the ${planName} plan. Please upgrade to continue.`,\n        variant: \"destructive\",\n      });\n      return false;\n    }\n\n    try {\n      const { error } = await supabase\n        .from('user_usage')\n        .update({\n          [`${type}_used`]: usage[`${type}_used`] + 1\n        })\n        .eq('id', usage.id);\n\n      if (error) throw error;\n      \n      setUsage(prev =\u003e prev ? {\n        ...prev,\n        [`${type}_used`]: prev[`${type}_used`] + 1\n      } : prev);\n      \n      return true;\n    } catch (error: any) {\n      console.error('Error updating usage:', error);\n      return false;\n    }\n  };\n\n  useEffect(() =\u003e {\n    const initializeSubscription = async () =\u003e {\n      setLoading(true);\n      await fetchPlans();\n      if (user) {\n        await fetchUserSubscription();\n      }\n      setLoading(false);\n    };\n\n    initializeSubscription();\n  }, [user]);\n\n  useEffect(() =\u003e {\n    if (subscription) {\n      fetchUserUsage();\n    } else if (user \u0026\u0026 plans.length \u003e 0 \u0026\u0026 !loading) {\n      createDemoSubscription();\n    }\n  }, [subscription, user, plans, loading]);\n\n  return {\n    subscription,\n    usage,\n    plans,\n    loading,\n    checkUsageLimit,\n    updateUsage,\n    refetch: fetchUserSubscription\n  };\n};\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/hooks/useTextToSpeech.ts",
//   "contents": "\nimport { useState, useCallback, useEffect } from 'react';\n\ninterface TTSOptions {\n  voice?: string;\n  voiceCategory?: 'adult-male' | 'adult-female' | 'child-male' | 'child-female';\n  speed?: number;\n  onComplete?: () =\u003e void;\n  onStart?: () =\u003e void;\n}\n\nexport const useTextToSpeech = () =\u003e {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentUtterance, setCurrentUtterance] = useState\u003cSpeechSynthesisUtterance | null\u003e(null);\n  const [voicesLoaded, setVoicesLoaded] = useState(false);\n\n  // Wait for voices to load properly\n  useEffect(() =\u003e {\n    const handleVoicesChanged = () =\u003e {\n      const voices = speechSynthesis.getVoices();\n      if (voices.length \u003e 0) {\n        setVoicesLoaded(true);\n        console.log('Available voices:', voices.map(v =\u003e ({ name: v.name, lang: v.lang })));\n      }\n    };\n\n    // Check if voices are already loaded\n    if (speechSynthesis.getVoices().length \u003e 0) {\n      handleVoicesChanged();\n    }\n\n    // Listen for voices to load\n    speechSynthesis.addEventListener('voiceschanged', handleVoicesChanged);\n\n    return () =\u003e {\n      speechSynthesis.removeEventListener('voiceschanged', handleVoicesChanged);\n    };\n  }, []);\n\n  // Enhanced voice selection with categories\n  const selectVoiceByCategory = useCallback((category?: 'adult-male' | 'adult-female' | 'child-male' | 'child-female', preferredVoiceName?: string) =\u003e {\n    const voices = speechSynthesis.getVoices();\n    \n    if (voices.length === 0) {\n      console.warn('No voices available');\n      return { voice: null, pitch: 1.0 };\n    }\n\n    console.log('Selecting voice for category:', category, 'from', voices.length, 'available voices');\n\n    // Get English voices\n    const englishVoices = voices.filter(voice =\u003e \n      voice.lang.startsWith('en-') || voice.lang === 'en'\n    );\n\n    if (englishVoices.length === 0) {\n      console.warn('No English voices found, using first available voice');\n      return { voice: voices[0], pitch: 1.0 };\n    }\n\n    // If no category specified, use default selection\n    if (!category) {\n      const usEnglish = englishVoices.filter(v =\u003e v.lang.startsWith('en-US'));\n      const ukEnglish = englishVoices.filter(v =\u003e v.lang.startsWith('en-GB'));\n      const selectedVoice = usEnglish[0] || ukEnglish[0] || englishVoices[0];\n      return { voice: selectedVoice, pitch: 1.0 };\n    }\n\n    // Voice selection patterns for different categories\n    const voicePatterns = {\n      'adult-male': {\n        patterns: ['male', 'man', 'daniel', 'alex', 'david', 'mark', 'paul', 'tom'],\n        pitch: 0.9,\n        fallbackPitch: 0.8\n      },\n      'adult-female': {\n        patterns: ['female', 'woman', 'samantha', 'susan', 'karen', 'moira', 'victoria', 'kate'],\n        pitch: 1.1,\n        fallbackPitch: 1.2\n      },\n      'child-male': {\n        patterns: ['boy', 'child', 'young'],\n        pitch: 1.4,\n        fallbackPitch: 1.5\n      },\n      'child-female': {\n        patterns: ['girl', 'child', 'young'],\n        pitch: 1.6,\n        fallbackPitch: 1.7\n      }\n    };\n\n    const categoryConfig = voicePatterns[category];\n\n    // 1. Try to find voice by preferred name first\n    if (preferredVoiceName) {\n      const preferredVoice = englishVoices.find(voice =\u003e \n        voice.name.toLowerCase().includes(preferredVoiceName.toLowerCase())\n      );\n      if (preferredVoice) {\n        console.log('Selected preferred voice:', preferredVoice.name);\n        return { voice: preferredVoice, pitch: categoryConfig.pitch };\n      }\n    }\n\n    // 2. Try to find voice by category patterns\n    for (const pattern of categoryConfig.patterns) {\n      const voice = englishVoices.find(v =\u003e v.name.toLowerCase().includes(pattern));\n      if (voice) {\n        console.log('Selected voice by pattern:', voice.name, 'for category:', category);\n        return { voice, pitch: categoryConfig.pitch };\n      }\n    }\n\n    // 3. Gender-based fallback for adult voices\n    if (category.startsWith('adult-')) {\n      const genderHints = category.includes('female') \n        ? ['female', 'woman', 'samantha', 'susan', 'victoria']\n        : ['male', 'man', 'daniel', 'alex', 'david'];\n\n      for (const hint of genderHints) {\n        const voice = englishVoices.find(v =\u003e v.name.toLowerCase().includes(hint));\n        if (voice) {\n          console.log('Selected voice by gender hint:', voice.name);\n          return { voice, pitch: categoryConfig.pitch };\n        }\n      }\n    }\n\n    // 4. Default fallback with adjusted pitch\n    const fallbackVoice = englishVoices[0];\n    console.log('Using fallback voice with adjusted pitch for category:', category);\n    return { voice: fallbackVoice, pitch: categoryConfig.fallbackPitch };\n  }, []);\n\n  const speak = useCallback(async (text: string, options: TTSOptions = {}) =\u003e {\n    try {\n      console.log('Starting to speak:', text.substring(0, 50) + '...');\n\n      // Stop any currently playing speech\n      if (currentUtterance) {\n        speechSynthesis.cancel();\n        setCurrentUtterance(null);\n      }\n\n      // Use browser's built-in speech synthesis\n      const utterance = new SpeechSynthesisUtterance(text);\n      \n      // Explicitly set language to English\n      utterance.lang = 'en-US';\n      \n      // Select voice by category or name\n      const { voice: selectedVoice, pitch } = selectVoiceByCategory(options.voiceCategory, options.voice);\n      if (selectedVoice) {\n        utterance.voice = selectedVoice;\n      }\n      \n      utterance.rate = options.speed || 1.0;\n      utterance.pitch = pitch;\n      utterance.volume = 1.0;\n\n      setCurrentUtterance(utterance);\n\n      utterance.onstart = () =\u003e {\n        console.log('Speech started with voice:', utterance.voice?.name, utterance.voice?.lang);\n        setIsPlaying(true);\n        options.onStart?.();\n      };\n\n      utterance.onend = () =\u003e {\n        console.log('Speech completed - calling onComplete');\n        setIsPlaying(false);\n        setCurrentUtterance(null);\n        // Call onComplete after a small delay to ensure state updates\n        setTimeout(() =\u003e {\n          options.onComplete?.();\n        }, 100);\n      };\n\n      utterance.onerror = (event) =\u003e {\n        console.error('Speech error:', event.error);\n        setIsPlaying(false);\n        setCurrentUtterance(null);\n        // Still call onComplete to prevent getting stuck\n        setTimeout(() =\u003e {\n          options.onComplete?.();\n        }, 100);\n      };\n\n      speechSynthesis.speak(utterance);\n      \n    } catch (error) {\n      console.error('Text-to-speech error:', error);\n      setIsPlaying(false);\n      setCurrentUtterance(null);\n      // Call onComplete even on error to prevent getting stuck\n      setTimeout(() =\u003e {\n        options.onComplete?.();\n      }, 100);\n    }\n  }, [currentUtterance, selectVoiceByCategory]);\n\n  const stop = useCallback(() =\u003e {\n    console.log('Stopping speech synthesis');\n    speechSynthesis.cancel();\n    setCurrentUtterance(null);\n    setIsPlaying(false);\n  }, []);\n\n  return {\n    speak,\n    stop,\n    isPlaying,\n    voicesLoaded\n  };\n};\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/index.css",
//   "contents": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Definition of the design system. All colors, gradients, fonts, etc should be defined here. */\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    \n    /* Custom burgundy profile background */\n    --profile-burgundy: 8 50% 25%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 100%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n\n    /* Teleprompter background colors */\n    --teleprompter-black: 0 0% 0%;\n    --teleprompter-white: 0 0% 100%;\n    --teleprompter-green: 120 100% 10%;\n    --teleprompter-blue: 240 100% 10%;\n\n    /* Teleprompter text colors with proper contrast */\n    --teleprompter-text-black: 0 0% 10%;\n    --teleprompter-text-white: 0 0% 95%;\n    --teleprompter-text-yellow: 60 100% 85%;\n    --teleprompter-text-red: 0 100% 75%;\n    --teleprompter-text-green: 120 100% 75%;\n    --teleprompter-text-blue: 240 100% 75%;\n\n    /* Character highlighting colors */\n    --character-highlight-subtle: 60 100% 95%;\n    --character-highlight-medium: 60 100% 88%;\n    --character-highlight-strong: 60 100% 75%;\n\n    /* Current line highlighting */\n    --current-line-bg: 210 100% 95%;\n    --current-line-border: 210 100% 70%;\n\n    --sidebar-background: 0 0% 98%;\n\n    --sidebar-foreground: 240 5.3% 26.1%;\n\n    --sidebar-primary: 240 5.9% 10%;\n\n    --sidebar-primary-foreground: 0 0% 98%;\n\n    --sidebar-accent: 240 4.8% 95.9%;\n\n    --sidebar-accent-foreground: 240 5.9% 10%;\n\n    --sidebar-border: 220 13% 91%;\n\n    --sidebar-ring: 217.2 91.2% 59.8%;\n\n    /* Headline stroke color (black) */\n    --headline-stroke: 0 0% 0%;\n\n    /* Brand yellow */\n    --brand-yellow: 45 97% 55%;\n    --brand-yellow-foreground: 0 0% 100%;\n\n    /* Brand orange */\n    --brand-orange: 30 96% 52%;\n    --brand-orange-foreground: 0 0% 100%;\n\n    /* Hero specific tokens */\n    --hero-button-bg: 2 60% 26%;       /* #6B1D1B */\n    --hero-button-bg-hover: 2 65% 30%; /* slightly lighter on hover */\n    --hero-button-fg: 182 100% 40%;    /* #00C5CC */\n    --hero-headline: 356 78% 56%;      /* #E63946 */\n    /* Help tooltip tokens */\n    --help-bg: 0 0% 100%;\n    --help-fg: 0 0% 0%;\n    \n    /* Marketing page text colors */\n    --marketing-text-dark: 0 0% 20%;\n    --marketing-cta-bg: 30 80% 30%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    \n    /* Custom burgundy profile background for dark mode */\n    --profile-burgundy: 8 45% 20%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 100%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n\n    /* Teleprompter background colors for dark mode */\n    --teleprompter-black: 0 0% 0%;\n    --teleprompter-white: 0 0% 100%;\n    --teleprompter-green: 120 100% 10%;\n    --teleprompter-blue: 240 100% 10%;\n\n    /* Teleprompter text colors for dark mode with proper contrast */\n    --teleprompter-text-black: 0 0% 10%;\n    --teleprompter-text-white: 0 0% 95%;\n    --teleprompter-text-yellow: 60 100% 85%;\n    --teleprompter-text-red: 0 100% 75%;\n    --teleprompter-text-green: 120 100% 75%;\n    --teleprompter-text-blue: 240 100% 75%;\n\n    /* Character highlighting colors for dark mode */\n    --character-highlight-subtle: 60 30% 15%;\n    --character-highlight-medium: 60 50% 20%;\n    --character-highlight-strong: 60 70% 25%;\n\n    /* Current line highlighting for dark mode */\n    --current-line-bg: 210 50% 15%;\n    --current-line-border: 210 70% 35%;\n\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n\n    /* Brand yellow (dark mode) */\n    --brand-yellow: 45 97% 55%;\n    --brand-yellow-foreground: 0 0% 100%;\n\n    /* Brand orange (dark mode) */\n    --brand-orange: 30 96% 52%;\n    --brand-orange-foreground: 0 0% 100%;\n\n    /* Hero specific tokens (dark mode) */\n    --hero-button-bg: 2 60% 26%;\n    --hero-button-bg-hover: 2 65% 30%;\n    --hero-button-fg: 182 100% 40%;\n    --hero-headline: 356 78% 56%;\n    /* Help tooltip tokens */\n    --help-bg: 0 0% 100%;\n    --help-fg: 0 0% 0%;\n    \n    /* Marketing page text colors for dark mode */\n    --marketing-text-dark: 0 0% 20%;\n    --marketing-cta-bg: 30 80% 35%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .text-outline-black {\n    color: hsl(var(--foreground));\n    -webkit-text-stroke: 2px hsl(var(--headline-stroke));\n    paint-order: stroke fill;\n    text-shadow:\n      1px 1px 0 hsl(var(--headline-stroke)),\n      -1px 1px 0 hsl(var(--headline-stroke)),\n      1px -1px 0 hsl(var(--headline-stroke)),\n      -1px -1px 0 hsl(var(--headline-stroke));\n  }\n\n  .btn-brand-yellow {\n    background-color: hsl(var(--brand-yellow));\n    color: hsl(var(--brand-yellow-foreground));\n    border-color: transparent;\n  }\n  .btn-brand-yellow:hover {\n    filter: brightness(0.95);\n  }\n}",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/integrations/supabase/client.ts",
//   "contents": "// This file is automatically generated. Do not edit it directly.\nimport { createClient } from '@supabase/supabase-js';\nimport type { Database } from './types';\n\nconst SUPABASE_URL = \"https://cqlczzkyktktaajbfmli.supabase.co\";\nconst SUPABASE_PUBLISHABLE_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNxbGN6emt5a3RrdGFhamJmbWxpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3MTY2MDUsImV4cCI6MjA2NjI5MjYwNX0.Zw2biXCKS10SiKLo81NCRAFqJCX-lQbO-zjo3HZe5T8\";\n\n// Import the supabase client like this:\n// import { supabase } from \"@/integrations/supabase/client\";\n\nexport const supabase = createClient\u003cDatabase\u003e(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/integrations/supabase/types.ts",
//   "contents": "export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  // Allows to automatically instantiate createClient with right options\n  // instead of createClient\u003cDatabase, { PostgrestVersion: 'XX' }\u003e(URL, KEY)\n  __InternalSupabase: {\n    PostgrestVersion: \"12.2.3 (519615d)\"\n  }\n  public: {\n    Tables: {\n      auditions: {\n        Row: {\n          actor_email: string | null\n          audition_date: string | null\n          audition_type: string | null\n          casting_director: string | null\n          casting_director_current_projects: string | null\n          casting_director_preferences: string | null\n          contact_email: string | null\n          contact_phone: string | null\n          contact_website: string | null\n          created_at: string\n          id: string\n          notes: string | null\n          production_company: string | null\n          reminder_enabled: boolean | null\n          reminder_sent: boolean | null\n          reminder_time: string | null\n          script_id: string | null\n          status: string | null\n          submission_deadline: string | null\n          title: string\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          actor_email?: string | null\n          audition_date?: string | null\n          audition_type?: string | null\n          casting_director?: string | null\n          casting_director_current_projects?: string | null\n          casting_director_preferences?: string | null\n          contact_email?: string | null\n          contact_phone?: string | null\n          contact_website?: string | null\n          created_at?: string\n          id?: string\n          notes?: string | null\n          production_company?: string | null\n          reminder_enabled?: boolean | null\n          reminder_sent?: boolean | null\n          reminder_time?: string | null\n          script_id?: string | null\n          status?: string | null\n          submission_deadline?: string | null\n          title: string\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          actor_email?: string | null\n          audition_date?: string | null\n          audition_type?: string | null\n          casting_director?: string | null\n          casting_director_current_projects?: string | null\n          casting_director_preferences?: string | null\n          contact_email?: string | null\n          contact_phone?: string | null\n          contact_website?: string | null\n          created_at?: string\n          id?: string\n          notes?: string | null\n          production_company?: string | null\n          reminder_enabled?: boolean | null\n          reminder_sent?: boolean | null\n          reminder_time?: string | null\n          script_id?: string | null\n          status?: string | null\n          submission_deadline?: string | null\n          title?: string\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"auditions_script_id_fkey\"\n            columns: [\"script_id\"]\n            isOneToOne: false\n            referencedRelation: \"scripts\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      blog_posts: {\n        Row: {\n          author_id: string\n          content: string\n          cover_image_url: string | null\n          created_at: string\n          excerpt: string | null\n          id: string\n          slug: string\n          status: Database[\"public\"][\"Enums\"][\"blog_status\"]\n          title: string\n          updated_at: string\n          youtube_url: string | null\n        }\n        Insert: {\n          author_id: string\n          content: string\n          cover_image_url?: string | null\n          created_at?: string\n          excerpt?: string | null\n          id?: string\n          slug: string\n          status?: Database[\"public\"][\"Enums\"][\"blog_status\"]\n          title: string\n          updated_at?: string\n          youtube_url?: string | null\n        }\n        Update: {\n          author_id?: string\n          content?: string\n          cover_image_url?: string | null\n          created_at?: string\n          excerpt?: string | null\n          id?: string\n          slug?: string\n          status?: Database[\"public\"][\"Enums\"][\"blog_status\"]\n          title?: string\n          updated_at?: string\n          youtube_url?: string | null\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"blog_posts_author_fk\"\n            columns: [\"author_id\"]\n            isOneToOne: false\n            referencedRelation: \"profiles\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      coaches: {\n        Row: {\n          active: boolean\n          bio: string | null\n          created_at: string\n          email: string | null\n          highlights: string[]\n          id: string\n          name: string\n          photo_url: string | null\n          slug: string\n          updated_at: string\n        }\n        Insert: {\n          active?: boolean\n          bio?: string | null\n          created_at?: string\n          email?: string | null\n          highlights?: string[]\n          id?: string\n          name: string\n          photo_url?: string | null\n          slug: string\n          updated_at?: string\n        }\n        Update: {\n          active?: boolean\n          bio?: string | null\n          created_at?: string\n          email?: string | null\n          highlights?: string[]\n          id?: string\n          name?: string\n          photo_url?: string | null\n          slug?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      coaching_analyses: {\n        Row: {\n          coach_feedback: string | null\n          coaching_score: number | null\n          created_at: string\n          id: string\n          improvement_strategy: string | null\n          performance_id: string\n          practice_recommendations: string[] | null\n          technical_assessment: Json\n          user_id: string\n        }\n        Insert: {\n          coach_feedback?: string | null\n          coaching_score?: number | null\n          created_at?: string\n          id?: string\n          improvement_strategy?: string | null\n          performance_id: string\n          practice_recommendations?: string[] | null\n          technical_assessment?: Json\n          user_id: string\n        }\n        Update: {\n          coach_feedback?: string | null\n          coaching_score?: number | null\n          created_at?: string\n          id?: string\n          improvement_strategy?: string | null\n          performance_id?: string\n          practice_recommendations?: string[] | null\n          technical_assessment?: Json\n          user_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"coaching_analyses_performance_id_fkey\"\n            columns: [\"performance_id\"]\n            isOneToOne: false\n            referencedRelation: \"magic_performances\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      coaching_sessions: {\n        Row: {\n          analysis_id: string\n          audition_id: string | null\n          chat_history: Json\n          created_at: string\n          id: string\n          session_status: string | null\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          analysis_id: string\n          audition_id?: string | null\n          chat_history?: Json\n          created_at?: string\n          id?: string\n          session_status?: string | null\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          analysis_id?: string\n          audition_id?: string | null\n          chat_history?: Json\n          created_at?: string\n          id?: string\n          session_status?: string | null\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"coaching_sessions_analysis_id_fkey\"\n            columns: [\"analysis_id\"]\n            isOneToOne: false\n            referencedRelation: \"script_analyses\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"coaching_sessions_audition_id_fkey\"\n            columns: [\"audition_id\"]\n            isOneToOne: false\n            referencedRelation: \"auditions\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      headshot_analyses: {\n        Row: {\n          created_at: string\n          detailed_feedback: Json\n          headshot_type: string\n          id: string\n          image_url: string\n          improvement_suggestions: string[]\n          industry_score: number\n          overall_score: number\n          professional_score: number\n          strengths: string[]\n          technical_score: number\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          created_at?: string\n          detailed_feedback?: Json\n          headshot_type: string\n          id?: string\n          image_url: string\n          improvement_suggestions?: string[]\n          industry_score: number\n          overall_score: number\n          professional_score: number\n          strengths?: string[]\n          technical_score: number\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          created_at?: string\n          detailed_feedback?: Json\n          headshot_type?: string\n          id?: string\n          image_url?: string\n          improvement_suggestions?: string[]\n          industry_score?: number\n          overall_score?: number\n          professional_score?: number\n          strengths?: string[]\n          technical_score?: number\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      headshot_knowledge: {\n        Row: {\n          category: string\n          content: string\n          created_at: string\n          id: string\n          is_active: boolean\n          keywords: string[]\n          topic: string\n          updated_at: string\n        }\n        Insert: {\n          category: string\n          content: string\n          created_at?: string\n          id?: string\n          is_active?: boolean\n          keywords?: string[]\n          topic: string\n          updated_at?: string\n        }\n        Update: {\n          category?: string\n          content?: string\n          created_at?: string\n          id?: string\n          is_active?: boolean\n          keywords?: string[]\n          topic?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      headshot_rulesets: {\n        Row: {\n          checklists: Json\n          created_at: string\n          enums: Json\n          evaluation_io: Json\n          id: string\n          is_active: boolean\n          metadata: Json\n          persona_tracks: Json\n          platform_specs: Json\n          rules_global: Json\n          scoring: Json\n          style_tracks: Json\n          ui_copy_snippets: Json\n          updated_at: string\n          version: string\n        }\n        Insert: {\n          checklists?: Json\n          created_at?: string\n          enums?: Json\n          evaluation_io?: Json\n          id?: string\n          is_active?: boolean\n          metadata?: Json\n          persona_tracks?: Json\n          platform_specs?: Json\n          rules_global?: Json\n          scoring?: Json\n          style_tracks?: Json\n          ui_copy_snippets?: Json\n          updated_at?: string\n          version: string\n        }\n        Update: {\n          checklists?: Json\n          created_at?: string\n          enums?: Json\n          evaluation_io?: Json\n          id?: string\n          is_active?: boolean\n          metadata?: Json\n          persona_tracks?: Json\n          platform_specs?: Json\n          rules_global?: Json\n          scoring?: Json\n          style_tracks?: Json\n          ui_copy_snippets?: Json\n          updated_at?: string\n          version?: string\n        }\n        Relationships: []\n      }\n      magic_performances: {\n        Row: {\n          created_at: string\n          description: string | null\n          id: string\n          magic_type: string\n          skill_level: string\n          title: string\n          updated_at: string\n          user_id: string\n          video_url: string | null\n          youtube_reference_url: string | null\n        }\n        Insert: {\n          created_at?: string\n          description?: string | null\n          id?: string\n          magic_type: string\n          skill_level: string\n          title: string\n          updated_at?: string\n          user_id: string\n          video_url?: string | null\n          youtube_reference_url?: string | null\n        }\n        Update: {\n          created_at?: string\n          description?: string | null\n          id?: string\n          magic_type?: string\n          skill_level?: string\n          title?: string\n          updated_at?: string\n          user_id?: string\n          video_url?: string | null\n          youtube_reference_url?: string | null\n        }\n        Relationships: []\n      }\n      photographers: {\n        Row: {\n          active: boolean | null\n          bio: string | null\n          business_name: string | null\n          city: string\n          country: string\n          created_at: string\n          email: string\n          id: string\n          instagram: string | null\n          name: string\n          phone: string | null\n          portfolio_url: string | null\n          price_range: string | null\n          rating: number | null\n          specialties: string[] | null\n          state: string\n          total_reviews: number | null\n          updated_at: string\n          verified: boolean | null\n          website: string | null\n        }\n        Insert: {\n          active?: boolean | null\n          bio?: string | null\n          business_name?: string | null\n          city: string\n          country?: string\n          created_at?: string\n          email: string\n          id?: string\n          instagram?: string | null\n          name: string\n          phone?: string | null\n          portfolio_url?: string | null\n          price_range?: string | null\n          rating?: number | null\n          specialties?: string[] | null\n          state: string\n          total_reviews?: number | null\n          updated_at?: string\n          verified?: boolean | null\n          website?: string | null\n        }\n        Update: {\n          active?: boolean | null\n          bio?: string | null\n          business_name?: string | null\n          city?: string\n          country?: string\n          created_at?: string\n          email?: string\n          id?: string\n          instagram?: string | null\n          name?: string\n          phone?: string | null\n          portfolio_url?: string | null\n          price_range?: string | null\n          rating?: number | null\n          specialties?: string[] | null\n          state?: string\n          total_reviews?: number | null\n          updated_at?: string\n          verified?: boolean | null\n          website?: string | null\n        }\n        Relationships: []\n      }\n      profiles: {\n        Row: {\n          acting_methods: string[] | null\n          agency_url: string | null\n          agent_commercial_email: string | null\n          agent_commercial_name: string | null\n          agent_commercial_phone: string | null\n          agent_theatrical_email: string | null\n          agent_theatrical_name: string | null\n          agent_theatrical_phone: string | null\n          avatar_url: string | null\n          bio: string | null\n          created_at: string\n          demo_video_title_1: string | null\n          demo_video_title_2: string | null\n          demo_video_url_1: string | null\n          demo_video_url_2: string | null\n          experience_level: string | null\n          full_name: string | null\n          headshot_url_1: string | null\n          headshot_url_2: string | null\n          headshot_url_3: string | null\n          id: string\n          imdb_url: string | null\n          instagram_url: string | null\n          manager_email: string | null\n          manager_name: string | null\n          manager_phone: string | null\n          resume_pdf_url: string | null\n          talent_email: string | null\n          talent_phone: string | null\n          updated_at: string\n          username: string | null\n          website_url: string | null\n        }\n        Insert: {\n          acting_methods?: string[] | null\n          agency_url?: string | null\n          agent_commercial_email?: string | null\n          agent_commercial_name?: string | null\n          agent_commercial_phone?: string | null\n          agent_theatrical_email?: string | null\n          agent_theatrical_name?: string | null\n          agent_theatrical_phone?: string | null\n          avatar_url?: string | null\n          bio?: string | null\n          created_at?: string\n          demo_video_title_1?: string | null\n          demo_video_title_2?: string | null\n          demo_video_url_1?: string | null\n          demo_video_url_2?: string | null\n          experience_level?: string | null\n          full_name?: string | null\n          headshot_url_1?: string | null\n          headshot_url_2?: string | null\n          headshot_url_3?: string | null\n          id: string\n          imdb_url?: string | null\n          instagram_url?: string | null\n          manager_email?: string | null\n          manager_name?: string | null\n          manager_phone?: string | null\n          resume_pdf_url?: string | null\n          talent_email?: string | null\n          talent_phone?: string | null\n          updated_at?: string\n          username?: string | null\n          website_url?: string | null\n        }\n        Update: {\n          acting_methods?: string[] | null\n          agency_url?: string | null\n          agent_commercial_email?: string | null\n          agent_commercial_name?: string | null\n          agent_commercial_phone?: string | null\n          agent_theatrical_email?: string | null\n          agent_theatrical_name?: string | null\n          agent_theatrical_phone?: string | null\n          avatar_url?: string | null\n          bio?: string | null\n          created_at?: string\n          demo_video_title_1?: string | null\n          demo_video_title_2?: string | null\n          demo_video_url_1?: string | null\n          demo_video_url_2?: string | null\n          experience_level?: string | null\n          full_name?: string | null\n          headshot_url_1?: string | null\n          headshot_url_2?: string | null\n          headshot_url_3?: string | null\n          id?: string\n          imdb_url?: string | null\n          instagram_url?: string | null\n          manager_email?: string | null\n          manager_name?: string | null\n          manager_phone?: string | null\n          resume_pdf_url?: string | null\n          talent_email?: string | null\n          talent_phone?: string | null\n          updated_at?: string\n          username?: string | null\n          website_url?: string | null\n        }\n        Relationships: []\n      }\n      script_analyses: {\n        Row: {\n          acting_method: string\n          analysis_data: Json\n          created_at: string\n          emotional_beats: Json | null\n          id: string\n          objectives: string[] | null\n          obstacles: string[] | null\n          script_id: string\n          selected_character: string\n          tactics: string[] | null\n          user_id: string\n        }\n        Insert: {\n          acting_method: string\n          analysis_data: Json\n          created_at?: string\n          emotional_beats?: Json | null\n          id?: string\n          objectives?: string[] | null\n          obstacles?: string[] | null\n          script_id: string\n          selected_character: string\n          tactics?: string[] | null\n          user_id: string\n        }\n        Update: {\n          acting_method?: string\n          analysis_data?: Json\n          created_at?: string\n          emotional_beats?: Json | null\n          id?: string\n          objectives?: string[] | null\n          obstacles?: string[] | null\n          script_id?: string\n          selected_character?: string\n          tactics?: string[] | null\n          user_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"script_analyses_script_id_fkey\"\n            columns: [\"script_id\"]\n            isOneToOne: false\n            referencedRelation: \"scripts\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      scripts: {\n        Row: {\n          characters: string[] | null\n          content: string\n          created_at: string\n          deleted_at: string | null\n          file_type: string | null\n          file_url: string | null\n          genre: string | null\n          id: string\n          scene_summary: string | null\n          title: string\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          characters?: string[] | null\n          content: string\n          created_at?: string\n          deleted_at?: string | null\n          file_type?: string | null\n          file_url?: string | null\n          genre?: string | null\n          id?: string\n          scene_summary?: string | null\n          title: string\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          characters?: string[] | null\n          content?: string\n          created_at?: string\n          deleted_at?: string | null\n          file_type?: string | null\n          file_url?: string | null\n          genre?: string | null\n          id?: string\n          scene_summary?: string | null\n          title?: string\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      subscription_plans: {\n        Row: {\n          created_at: string\n          currency: string\n          features: Json\n          id: string\n          limits: Json\n          name: string\n          paypal_plan_id: string | null\n          price: number\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          currency?: string\n          features?: Json\n          id?: string\n          limits?: Json\n          name: string\n          paypal_plan_id?: string | null\n          price: number\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          currency?: string\n          features?: Json\n          id?: string\n          limits?: Json\n          name?: string\n          paypal_plan_id?: string | null\n          price?: number\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      support_conversations: {\n        Row: {\n          created_at: string\n          id: string\n          last_message_at: string\n          status: string\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          created_at?: string\n          id?: string\n          last_message_at?: string\n          status?: string\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          last_message_at?: string\n          status?: string\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      support_messages: {\n        Row: {\n          content: string\n          conversation_id: string\n          created_at: string\n          id: string\n          read_at: string | null\n          sender_id: string | null\n          sender_role: Database[\"public\"][\"Enums\"][\"support_sender_role\"]\n        }\n        Insert: {\n          content: string\n          conversation_id: string\n          created_at?: string\n          id?: string\n          read_at?: string | null\n          sender_id?: string | null\n          sender_role: Database[\"public\"][\"Enums\"][\"support_sender_role\"]\n        }\n        Update: {\n          content?: string\n          conversation_id?: string\n          created_at?: string\n          id?: string\n          read_at?: string | null\n          sender_id?: string | null\n          sender_role?: Database[\"public\"][\"Enums\"][\"support_sender_role\"]\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"support_messages_conversation_id_fkey\"\n            columns: [\"conversation_id\"]\n            isOneToOne: false\n            referencedRelation: \"support_conversations\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      testimonials: {\n        Row: {\n          avatar_url: string | null\n          company: string | null\n          content: string\n          created_at: string\n          display_order: number | null\n          id: string\n          is_active: boolean\n          name: string\n          rating: number | null\n          title: string | null\n          updated_at: string\n        }\n        Insert: {\n          avatar_url?: string | null\n          company?: string | null\n          content: string\n          created_at?: string\n          display_order?: number | null\n          id?: string\n          is_active?: boolean\n          name: string\n          rating?: number | null\n          title?: string | null\n          updated_at?: string\n        }\n        Update: {\n          avatar_url?: string | null\n          company?: string | null\n          content?: string\n          created_at?: string\n          display_order?: number | null\n          id?: string\n          is_active?: boolean\n          name?: string\n          rating?: number | null\n          title?: string | null\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      trial_signups: {\n        Row: {\n          created_at: string\n          email: string\n          full_name: string\n          id: string\n          status: string\n        }\n        Insert: {\n          created_at?: string\n          email: string\n          full_name: string\n          id?: string\n          status?: string\n        }\n        Update: {\n          created_at?: string\n          email?: string\n          full_name?: string\n          id?: string\n          status?: string\n        }\n        Relationships: []\n      }\n      tts_cache_items: {\n        Row: {\n          character: string\n          created_at: string\n          dialogue_index: number\n          duration_ms: number | null\n          hash: string\n          id: string\n          provider: string\n          script_id: string\n          speed: number\n          storage_path: string\n          user_id: string\n          voice_id: string\n        }\n        Insert: {\n          character: string\n          created_at?: string\n          dialogue_index: number\n          duration_ms?: number | null\n          hash: string\n          id?: string\n          provider?: string\n          script_id: string\n          speed?: number\n          storage_path: string\n          user_id: string\n          voice_id: string\n        }\n        Update: {\n          character?: string\n          created_at?: string\n          dialogue_index?: number\n          duration_ms?: number | null\n          hash?: string\n          id?: string\n          provider?: string\n          script_id?: string\n          speed?: number\n          storage_path?: string\n          user_id?: string\n          voice_id?: string\n        }\n        Relationships: []\n      }\n      user_roles: {\n        Row: {\n          id: string\n          role: Database[\"public\"][\"Enums\"][\"app_role\"]\n          user_id: string\n        }\n        Insert: {\n          id?: string\n          role: Database[\"public\"][\"Enums\"][\"app_role\"]\n          user_id: string\n        }\n        Update: {\n          id?: string\n          role?: Database[\"public\"][\"Enums\"][\"app_role\"]\n          user_id?: string\n        }\n        Relationships: []\n      }\n      user_subscriptions: {\n        Row: {\n          created_at: string\n          expires_at: string | null\n          id: string\n          paypal_subscription_id: string | null\n          plan_id: string\n          started_at: string\n          status: string\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          created_at?: string\n          expires_at?: string | null\n          id?: string\n          paypal_subscription_id?: string | null\n          plan_id: string\n          started_at?: string\n          status?: string\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          created_at?: string\n          expires_at?: string | null\n          id?: string\n          paypal_subscription_id?: string | null\n          plan_id?: string\n          started_at?: string\n          status?: string\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"user_subscriptions_plan_id_fkey\"\n            columns: [\"plan_id\"]\n            isOneToOne: false\n            referencedRelation: \"subscription_plans\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      user_usage: {\n        Row: {\n          ai_messages_used: number\n          created_at: string\n          id: string\n          last_reset: string\n          script_analyses_used: number\n          subscription_id: string\n          updated_at: string\n          user_id: string\n          video_verifications_used: number\n        }\n        Insert: {\n          ai_messages_used?: number\n          created_at?: string\n          id?: string\n          last_reset?: string\n          script_analyses_used?: number\n          subscription_id: string\n          updated_at?: string\n          user_id: string\n          video_verifications_used?: number\n        }\n        Update: {\n          ai_messages_used?: number\n          created_at?: string\n          id?: string\n          last_reset?: string\n          script_analyses_used?: number\n          subscription_id?: string\n          updated_at?: string\n          user_id?: string\n          video_verifications_used?: number\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"user_usage_subscription_id_fkey\"\n            columns: [\"subscription_id\"]\n            isOneToOne: false\n            referencedRelation: \"user_subscriptions\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      video_submissions: {\n        Row: {\n          ai_analysis: Json | null\n          audition_id: string | null\n          coaching_session_id: string\n          created_at: string\n          evaluated_at: string | null\n          evaluated_by: string | null\n          evaluation_notes: string | null\n          evaluation_score: number | null\n          evaluation_status: string | null\n          feedback_data: Json | null\n          id: string\n          storage_file_path: string | null\n          updated_at: string | null\n          user_id: string\n          video_title: string | null\n          video_url: string\n        }\n        Insert: {\n          ai_analysis?: Json | null\n          audition_id?: string | null\n          coaching_session_id: string\n          created_at?: string\n          evaluated_at?: string | null\n          evaluated_by?: string | null\n          evaluation_notes?: string | null\n          evaluation_score?: number | null\n          evaluation_status?: string | null\n          feedback_data?: Json | null\n          id?: string\n          storage_file_path?: string | null\n          updated_at?: string | null\n          user_id: string\n          video_title?: string | null\n          video_url: string\n        }\n        Update: {\n          ai_analysis?: Json | null\n          audition_id?: string | null\n          coaching_session_id?: string\n          created_at?: string\n          evaluated_at?: string | null\n          evaluated_by?: string | null\n          evaluation_notes?: string | null\n          evaluation_score?: number | null\n          evaluation_status?: string | null\n          feedback_data?: Json | null\n          id?: string\n          storage_file_path?: string | null\n          updated_at?: string | null\n          user_id?: string\n          video_title?: string | null\n          video_url?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"video_submissions_audition_id_fkey\"\n            columns: [\"audition_id\"]\n            isOneToOne: false\n            referencedRelation: \"auditions\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"video_submissions_coaching_session_id_fkey\"\n            columns: [\"coaching_session_id\"]\n            isOneToOne: false\n            referencedRelation: \"coaching_sessions\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      get_public_photographers: {\n        Args: { limit_count?: number }\n        Returns: {\n          bio: string\n          business_name: string\n          city: string\n          country: string\n          id: string\n          instagram: string\n          name: string\n          portfolio_url: string\n          price_range: string\n          rating: number\n          specialties: string[]\n          state: string\n          total_reviews: number\n          verified: boolean\n          website: string\n        }[]\n      }\n      get_public_profile: {\n        Args: { p_username: string }\n        Returns: {\n          acting_methods: string[]\n          avatar_url: string\n          bio: string\n          demo_video_title_1: string\n          demo_video_title_2: string\n          demo_video_url_1: string\n          demo_video_url_2: string\n          experience_level: string\n          full_name: string\n          headshot_url_1: string\n          headshot_url_2: string\n          headshot_url_3: string\n          imdb_url: string\n          instagram_url: string\n          username: string\n          website_url: string\n        }[]\n      }\n      get_public_subscription_plans: {\n        Args: Record\u003cPropertyKey, never\u003e\n        Returns: {\n          currency: string\n          features: Json\n          id: string\n          name: string\n          price: number\n        }[]\n      }\n      get_user_audition_stats: {\n        Args: { user_uuid: string }\n        Returns: Json\n      }\n      has_role: {\n        Args: {\n          _role: Database[\"public\"][\"Enums\"][\"app_role\"]\n          _user_id: string\n        }\n        Returns: boolean\n      }\n      process_audition_reminders: {\n        Args: Record\u003cPropertyKey, never\u003e\n        Returns: undefined\n      }\n      soft_delete_script: {\n        Args: { p_script_id: string }\n        Returns: boolean\n      }\n    }\n    Enums: {\n      app_role: \"admin\" | \"moderator\" | \"user\"\n      blog_status: \"draft\" | \"published\"\n      support_sender_role: \"user\" | \"admin\"\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DatabaseWithoutInternals = Omit\u003cDatabase, \"__InternalSupabase\"\u003e\n\ntype DefaultSchema = DatabaseWithoutInternals[Extract\u003ckeyof Database, \"public\"\u003e]\n\nexport type Tables\u003c\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] \u0026 DefaultSchema[\"Views\"])\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] \u0026\n        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n\u003e = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] \u0026\n      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] \u0026\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] \u0026\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R\n      }\n      ? R\n      : never\n    : never\n\nexport type TablesInsert\u003c\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n\u003e = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I\n      }\n      ? I\n      : never\n    : never\n\nexport type TablesUpdate\u003c\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n\u003e = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U\n      }\n      ? U\n      : never\n    : never\n\nexport type Enums\u003c\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n\u003e = DefaultSchemaEnumNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never\n\nexport type CompositeTypes\u003c\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n\u003e = PublicCompositeTypeNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never\n\nexport const Constants = {\n  public: {\n    Enums: {\n      app_role: [\"admin\", \"moderator\", \"user\"],\n      blog_status: [\"draft\", \"published\"],\n      support_sender_role: [\"user\", \"admin\"],\n    },\n  },\n} as const\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/lib/utils.ts",
//   "contents": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/main.tsx",
//   "contents": "\nimport { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  \u003cStrictMode\u003e\n    \u003cApp /\u003e\n  \u003c/StrictMode\u003e\n);\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/About.tsx",
//   "contents": "import Navigation from \"@/components/Navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, Video, Mic, Bot, Star, Award } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport FAQSection from \"@/components/FAQSection\";\n\nconst About = () =\u003e {\n  const navigate = useNavigate();\n\n  const handleBringToSchool = () =\u003e {\n    navigate('/contact', { \n      state: { \n        subject: 'Bring ACTORS AI to My School',\n        message: 'I am interested in bringing the ACTORS AI: ACTORS INTELLIGENCE course to my school/studio. Please contact me with more information about scheduling and pricing.'\n      } \n    });\n  };\n\n  const handleContactForSession = () =\u003e {\n    navigate('/contact', { \n      state: { \n        subject: 'Book ACTORS AI Session',\n        message: 'I would like to book a session or learn more about the ACTORS AI: ACTORS INTELLIGENCE course. Please provide me with available dates and details.'\n      } \n    });\n  };\n  const courseSections = [\n    {\n      number: \"01\",\n      title: \"Philosophy of Acting\",\n      icon: Users,\n      points: [\n        'Understanding \"being\" vs. \"acting\"',\n        \"Replacing performance anxiety with authentic presence\",\n        \"Scene study as a path to emotional truth\",\n        \"How to make personal, original choices in every audition\"\n      ]\n    },\n    {\n      number: \"02\", \n      title: \"Self-Taping Mastery\",\n      icon: Video,\n      points: [\n        \"Commercial vs. Theatrical taping technique\",\n        \"Camera and lighting setup (2025 gear recommendations)\",\n        \"Eyeline and framing do's and don'ts\",\n        \"Script prep, working with readers\",\n        \"The power of silence and listening\",\n        'Co-star and Under-5 philosophy: \"Serve the scene, don\\'t steal it\"',\n        \"Real-time feedback and in-class taping with live readers\"\n      ]\n    },\n    {\n      number: \"03\",\n      title: \"Voiceover Fundamentals\", \n      icon: Mic,\n      points: [\n        \"Microphone technique and audio setup\",\n        \"Script interpretation for VO (commercial, narration, character)\",\n        \"Performance energy for the mic\",\n        \"Vocal warm-ups and emotional range\",\n        \"VO for animation vs. commercial vs. promo\",\n        \"How to record and edit pro-level auditions from home\"\n      ]\n    },\n    {\n      number: \"04\",\n      title: \"AI \u0026 The New Hollywood\",\n      icon: Bot,\n      points: [\n        \"Using AI to rehearse scenes and memorize lines\",\n        \"AI voice and avatar tools for training and VO expansion\", \n        \"How to stay competitive as an actor in the age of automation\",\n        \"Building your personal brand with AI tools\",\n        \"Ethical and professional considerations in an AI-augmented career\"\n      ]\n    }\n  ];\n\n  const instructors = [\n    {\n      name: \"Rick Zieff\",\n      title: \"Master Acting \u0026 Voice Coach\",\n      description: \"Known for his acclaimed work in front of the camera and behind the mic, Rick is a top-tier acting and voice coach with decades of professional experience in television, film, voice-over, and theater.\",\n      credentials: \"Major industry credits spanning television, film, and voice-over\"\n    },\n    {\n      name: \"Will Roberts\", \n      title: \"Film/TV Actor \u0026 AI Content Creator\",\n      description: \"A veteran film/TV actor (Oppenheimer, Studio City), award-winning performer, voice artist, and AI content creator bringing modern technology to traditional acting training.\",\n      credentials: \"Credits include Oppenheimer, Studio City, and extensive voice-over work\"\n    }\n  ];\n\n  const targetAudience = [\n    \"Actors seeking to upskill for today's hybrid casting world\",\n    \"Performers looking to master self-taping and VO from home\", \n    \"Voice artists ready to level up with live coaching\",\n    \"Students who want to stay ahead of the curve with AI and content creation\",\n    \"Acting schools and educators looking for a future-forward curriculum\"\n  ];\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n      \u003cNavigation /\u003e\n      \n      \u003cdiv className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n        \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n          {/* Hero Section */}\n          \u003cdiv className=\"text-center mb-16\"\u003e\n            \u003ch1 className=\"text-5xl md:text-6xl font-bold mb-6\"\u003e\n              \u003cspan className=\"bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n                ACTORS AI:\n              \u003c/span\u003e\n              \u003cbr /\u003e\n              ACTORS INTELLIGENCE\n            \u003c/h1\u003e\n            \u003cp className=\"text-xl text-gray-300 max-w-3xl mx-auto mb-4\"\u003e\n              Taught by Rick Zieff and Will Roberts\n            \u003c/p\u003e\n            \u003cp className=\"text-lg text-gray-400 max-w-4xl mx-auto\"\u003e\n              A comprehensive, modern-day acting course that takes performers from traditional techniques \n              to cutting-edge AI integration, preparing you for the future of the entertainment industry.\n            \u003c/p\u003e\n          \u003c/div\u003e\n\n          {/* Course Overview */}\n          \u003cdiv className=\"mb-16\"\u003e\n            \u003cdiv className=\"bg-gradient-to-r from-yellow-500/10 via-orange-500/10 to-red-500/10 rounded-lg p-8 mb-12\"\u003e\n              \u003ch2 className=\"text-3xl font-bold text-center mb-6\"\u003eCourse Overview\u003c/h2\u003e\n              \u003cp className=\"text-gray-300 text-lg leading-relaxed max-w-4xl mx-auto text-center\"\u003e\n                Both Rick and Will bring decades of professional experience in television, film, voice-over, \n                and theater, with credits that include major productions. This course bridges the gap between \n                traditional acting fundamentals and the technological innovations reshaping our industry.\n              \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          {/* Course Sections */}\n          \u003cdiv className=\"mb-16\"\u003e\n            \u003ch2 className=\"text-3xl font-bold text-center mb-12\"\u003eWhat You'll Learn\u003c/h2\u003e\n            \u003cdiv className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\"\u003e\n              {courseSections.map((section) =\u003e (\n                \u003cCard key={section.number} className=\"bg-gray-900/50 border-gray-700 hover:border-gray-600 transition-colors\"\u003e\n                  \u003cCardHeader\u003e\n                    \u003cdiv className=\"flex items-center gap-4 mb-4\"\u003e\n                      \u003cdiv className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-black rounded-full w-12 h-12 flex items-center justify-center font-bold text-lg\"\u003e\n                        {section.number}\n                      \u003c/div\u003e\n                      \u003csection.icon className=\"w-8 h-8 text-yellow-400\" /\u003e\n                    \u003c/div\u003e\n                    \u003cCardTitle className=\"text-white text-xl\"\u003e{section.title}\u003c/CardTitle\u003e\n                  \u003c/CardHeader\u003e\n                  \u003cCardContent\u003e\n                    \u003cul className=\"space-y-3\"\u003e\n                      {section.points.map((point, index) =\u003e (\n                        \u003cli key={index} className=\"text-gray-300 flex items-start\"\u003e\n                          \u003cspan className=\"text-yellow-400 mr-3 mt-1\"\u003e•\u003c/span\u003e\n                          \u003cspan\u003e{point}\u003c/span\u003e\n                        \u003c/li\u003e\n                      ))}\n                    \u003c/ul\u003e\n                  \u003c/CardContent\u003e\n                \u003c/Card\u003e\n              ))}\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          {/* Instructors */}\n          \u003cdiv className=\"mb-16\"\u003e\n            \u003ch2 className=\"text-3xl font-bold text-center mb-12\"\u003eMeet Your Instructors\u003c/h2\u003e\n            \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl mx-auto\"\u003e\n              {instructors.map((instructor, index) =\u003e (\n                \u003cCard key={index} className=\"bg-gray-900/50 border-gray-700 text-center\"\u003e\n                  \u003cCardHeader\u003e\n                    \u003cdiv className=\"w-20 h-20 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full mx-auto mb-4 flex items-center justify-center\"\u003e\n                      \u003cAward className=\"w-10 h-10 text-black\" /\u003e\n                    \u003c/div\u003e\n                    \u003cCardTitle className=\"text-white text-2xl\"\u003e{instructor.name}\u003c/CardTitle\u003e\n                    \u003cBadge variant=\"outline\" className=\"border-yellow-500 text-yellow-400 w-fit mx-auto\"\u003e\n                      {instructor.title}\n                    \u003c/Badge\u003e\n                  \u003c/CardHeader\u003e\n                  \u003cCardContent className=\"space-y-4\"\u003e\n                    \u003cp className=\"text-gray-300\"\u003e{instructor.description}\u003c/p\u003e\n                    \u003cp className=\"text-yellow-400 font-medium\"\u003e{instructor.credentials}\u003c/p\u003e\n                  \u003c/CardContent\u003e\n                \u003c/Card\u003e\n              ))}\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          {/* Target Audience */}\n          \u003cdiv className=\"mb-16\"\u003e\n            \u003ch2 className=\"text-3xl font-bold text-center mb-12\"\u003eWho This Course Is For\u003c/h2\u003e\n            \u003cCard className=\"bg-gray-900/50 border-gray-700 max-w-4xl mx-auto\"\u003e\n              \u003cCardContent className=\"p-8\"\u003e\n                \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 gap-6\"\u003e\n                  {targetAudience.map((audience, index) =\u003e (\n                    \u003cdiv key={index} className=\"flex items-start\"\u003e\n                      \u003cStar className=\"w-5 h-5 text-yellow-400 mr-3 mt-1 flex-shrink-0\" /\u003e\n                      \u003cspan className=\"text-gray-300\"\u003e{audience}\u003c/span\u003e\n                    \u003c/div\u003e\n                  ))}\n                \u003c/div\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          \u003c/div\u003e\n\n          {/* FAQ (Compact) */}\n          \u003cdiv className=\"mb-16\"\u003e\n            \u003cFAQSection compact showQuestionBox className=\"\" /\u003e\n          \u003c/div\u003e\n\n          {/* Call to Action */}\n          \u003cdiv className=\"text-center bg-gradient-to-r from-yellow-500/10 via-orange-500/10 to-red-500/10 rounded-lg p-8\"\u003e\n            \u003ch2 className=\"text-3xl font-bold mb-6\"\u003eReady to Transform Your Acting Career?\u003c/h2\u003e\n            \u003cp className=\"text-gray-300 mb-8 max-w-3xl mx-auto text-lg\"\u003e\n              Whether you're just getting started or ready to evolve, ACTORS AI: ACTORS INTELLIGENCE \n              will give you the tools, training, and confidence to thrive in the modern entertainment landscape.\n            \u003c/p\u003e\n            \u003cdiv className=\"flex flex-col sm:flex-row gap-4 justify-center\"\u003e\n              \u003cButton \n                size=\"lg\" \n                className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-semibold\"\n                onClick={handleBringToSchool}\n              \u003e\n                Bring ACTORS AI to Your School\n              \u003c/Button\u003e\n              \u003cButton \n                variant=\"outline\" \n                size=\"lg\"\n                className=\"bg-transparent border-yellow-500 text-yellow-400 hover:bg-yellow-500 hover:text-black transition-colors\"\n                onClick={handleContactForSession}\n              \u003e\n                Contact Us to Book a Session\n              \u003c/Button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default About;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/ActorsApproach.tsx",
//   "contents": "import Navigation from \"@/components/Navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ExternalLink, Video, BookOpen, Users, Star, Lock, Crown } from \"lucide-react\";\n\nconst ActorsApproach = () =\u003e {\n  const handleExploreToolbox = () =\u003e {\n    window.open('https://actorsapproach.com/toolbox-overview', '_blank');\n  };\n\n  const handleVisitWebsite = () =\u003e {\n    window.open('https://actorsapproach.com/', '_blank');\n  };\n\n  const features = [\n    {\n      icon: Video,\n      title: \"Over 375 Videos\",\n      description: \"Comprehensive video library covering all aspects of acting craft and technique\"\n    },\n    {\n      icon: BookOpen,\n      title: \"Dozens of Concepts \u0026 Exercises\",\n      description: \"Proven techniques and exercises from legendary acting masters\"\n    },\n    {\n      icon: Crown,\n      title: \"Lifetime Membership Access\",\n      description: \"One-time payment for unlimited access to all current and future content\"\n    },\n    {\n      icon: Star,\n      title: \"Master Class Techniques\",\n      description: \"Learn from methods by Stanislavski, Chekhov, Meisner, Strasberg, Adler, and more\"\n    }\n  ];\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n      \u003cNavigation /\u003e\n      \n      {/* Logo in top left */}\n      \u003cdiv className=\"absolute top-20 left-4 sm:left-8 z-10\"\u003e\n        \u003cimg \n          src=\"/lovable-uploads/b9bdda75-e907-4a86-b23d-2f65c9803093.png\" \n          alt=\"Actors Approach Craft Technique Toolbox Logo\"\n          className=\"h-16 sm:h-20 w-auto\"\n        /\u003e\n      \u003c/div\u003e\n\n      {/* Hero Section with Banner */}\n      \u003csection className=\"relative pt-32 pb-20 px-4 sm:px-6 lg:px-8 min-h-[70vh] flex items-center\"\u003e\n        {/* Banner Background */}\n        \u003cdiv className=\"absolute inset-0 z-0\"\u003e\n          \u003cimg \n            src=\"/lovable-uploads/0d96f738-f960-4079-bed3-5de26fbb12f7.png\"\n            alt=\"Actors Approach Banner\"\n            className=\"w-full h-full object-cover opacity-60\"\n          /\u003e\n          \u003cdiv className=\"absolute inset-0 bg-black/40\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv className=\"max-w-6xl mx-auto text-center relative z-10\"\u003e\n          \u003cdiv className=\"mb-8\"\u003e\n            \u003cBadge className=\"mb-4 bg-yellow-500/20 text-yellow-400 border-yellow-500/30\"\u003e\n              The Actor's Approach Toolbox\n            \u003c/Badge\u003e\n            \u003ch1 className=\"text-4xl md:text-6xl font-bold mb-6 text-white drop-shadow-lg\"\u003e\n              Explore Uncharted Territories of Creativity and Elevate Your Acting Career!\n            \u003c/h1\u003e\n            \u003cp className=\"text-xl md:text-2xl text-gray-100 max-w-4xl mx-auto leading-relaxed drop-shadow-md\"\u003e\n              Crafting characters with the greats, the Actor's Approach Toolbox is packed with craft, technique and exercises used by the likes of Stanislavski, Chekhov, Meisner, Strasberg, Adler, Hagen, Morris and others. This essential toolbox is your guide to mastering the art and craft of acting.\n            \u003c/p\u003e\n          \u003c/div\u003e\n          \n          \u003cdiv className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\"\u003e\n            \u003cButton \n              size=\"lg\"\n              className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-semibold\"\n              onClick={handleExploreToolbox}\n            \u003e\n              \u003cExternalLink className=\"w-5 h-5 mr-2\" /\u003e\n              Explore The Toolbox Now\n            \u003c/Button\u003e\n            \u003cButton \n              variant=\"outline\"\n              size=\"lg\"\n              className=\"bg-transparent border-yellow-500 text-yellow-400 hover:bg-yellow-500 hover:text-black transition-colors\"\n              onClick={handleVisitWebsite}\n            \u003e\n              Visit Actors Approach Website\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n\n      {/* Features Grid */}\n      \u003csection className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gray-900/30\"\u003e\n        \u003cdiv className=\"max-w-6xl mx-auto\"\u003e\n          \u003ch2 className=\"text-3xl md:text-4xl font-bold text-center mb-12 bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n            What's Inside The Toolbox\n          \u003c/h2\u003e\n          \n          \u003cdiv className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\"\u003e\n            {features.map((feature, index) =\u003e (\n              \u003cCard key={index} className=\"bg-black/50 border-gray-800 hover:border-yellow-500/50 transition-all duration-300 hover:shadow-lg hover:shadow-yellow-500/10\"\u003e\n                \u003cCardHeader className=\"text-center\"\u003e\n                  \u003cfeature.icon className=\"w-12 h-12 mx-auto mb-4 text-yellow-400\" /\u003e\n                  \u003cCardTitle className=\"text-xl text-white\"\u003e{feature.title}\u003c/CardTitle\u003e\n                \u003c/CardHeader\u003e\n                \u003cCardContent\u003e\n                  \u003cp className=\"text-gray-300 text-center\"\u003e{feature.description}\u003c/p\u003e\n                \u003c/CardContent\u003e\n              \u003c/Card\u003e\n            ))}\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n\n      {/* About Jared Section */}\n      \u003csection className=\"py-20 px-4 sm:px-6 lg:px-8\"\u003e\n        \u003cdiv className=\"max-w-4xl mx-auto text-center\"\u003e\n          \u003ch2 className=\"text-3xl md:text-4xl font-bold mb-8 bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n            The Actors Approach with Jared\n          \u003c/h2\u003e\n          \n          \u003cdiv className=\"bg-gray-900/50 rounded-lg p-8 border border-gray-800\"\u003e\n            \u003cp className=\"text-lg text-gray-300 mb-6 leading-relaxed\"\u003e\n              Jared has created an incredible comprehensive program that brings together the most effective acting techniques and exercises from legendary masters. The Actor's Approach Toolbox represents years of research, training, and practical application of proven methods that have shaped some of the greatest actors in history.\n            \u003c/p\u003e\n            \n            \u003cp className=\"text-lg text-gray-300 mb-6 leading-relaxed\"\u003e\n              This extensive library contains over 45 hours of craft, technique, and training content, making it an invaluable resource for actors at any stage of their career. From foundational exercises to advanced character development techniques, the toolbox provides a structured path to mastering the art of acting.\n            \u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n\n      {/* Members Benefits Section */}\n      \u003csection className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-r from-yellow-500/10 to-orange-500/10\"\u003e\n        \u003cdiv className=\"max-w-4xl mx-auto text-center\"\u003e\n          \u003cdiv className=\"bg-black/70 rounded-lg p-8 border border-yellow-500/30\"\u003e\n            \u003cLock className=\"w-16 h-16 mx-auto mb-6 text-yellow-400\" /\u003e\n            \u003ch2 className=\"text-3xl md:text-4xl font-bold mb-6 bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n              Exclusive Access for Actors AI Members\n            \u003c/h2\u003e\n            \n            \u003cp className=\"text-xl text-gray-300 mb-6 leading-relaxed\"\u003e\n              As a member of the Actors AI app, you're eligible to receive special access to this amazing program that Jared has created. This exclusive benefit provides you with a username and password to unlock the full potential of The Actor's Approach Toolbox.\n            \u003c/p\u003e\n            \n            \u003cdiv className=\"bg-yellow-500/10 rounded-lg p-6 border border-yellow-500/30 mb-8\"\u003e\n              \u003ch3 className=\"text-2xl font-semibold text-yellow-400 mb-4\"\u003eHow to Get Access:\u003c/h3\u003e\n              \u003cul className=\"text-left text-gray-300 space-y-2 max-w-2xl mx-auto\"\u003e\n                \u003cli\u003e• Maintain your active Actors AI membership\u003c/li\u003e\n                \u003cli\u003e• Contact our support team to request your credentials\u003c/li\u003e\n                \u003cli\u003e• Receive your personal username and password\u003c/li\u003e\n                \u003cli\u003e• Start exploring 375+ videos and techniques immediately\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/div\u003e\n            \n            \u003cp className=\"text-lg text-gray-400 mb-8\"\u003e\n              This exclusive partnership between Actors AI and The Actor's Approach ensures our members have access to the most comprehensive acting training resources available.\n            \u003c/p\u003e\n            \n            \u003cButton \n              size=\"lg\"\n              className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-semibold\"\n              onClick={() =\u003e window.open('/contact', '_self')}\n            \u003e\n              Contact Us for Access\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default ActorsApproach;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/ActorsToolBox.tsx",
//   "contents": "import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navigation from '@/components/Navigation';\n\nconst ActorsToolBox = () =\u003e {\n  const navigate = useNavigate();\n\n  const handleActorsProfileClick = () =\u003e {\n    navigate(\"/profile\");\n  };\n\n  const handleDashboardClick = () =\u003e {\n    navigate(\"/dashboard\");\n  };\n\n  const handleHeadshotAnalysisClick = () =\u003e {\n    navigate(\"/self-taping#headshot-grader\");\n  };\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-black\"\u003e\n      \u003cNavigation /\u003e\n      \n      \u003cdiv className=\"relative min-h-screen flex items-center justify-center overflow-hidden\"\u003e\n        \u003cdiv className=\"relative z-10 text-center max-w-6xl mx-auto px-4\"\u003e\n          \u003ch1 className=\"text-6xl md:text-7xl font-bold text-white mb-12 leading-tight\"\u003e\n            Actors Tool Box\n          \u003c/h1\u003e\n          \n          {/* Info Boxes */}\n          \u003cdiv className=\"grid md:grid-cols-2 gap-8 mb-12 max-w-5xl mx-auto\"\u003e\n            {/* Teleprompter Mode Info Box */}\n            \u003cdiv className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 text-left\"\u003e\n              \u003ch3 className=\"text-2xl font-bold text-white mb-4\"\u003e\n                Teleprompter Mode with AI Scene Partner\n              \u003c/h3\u003e\n              \u003cul className=\"text-white/90 space-y-2\"\u003e\n                \u003cli\u003e• Rehearse anytime with your AI partner.\u003c/li\u003e\n                \u003cli\u003e• Sharpen timing \u0026 delivery.\u003c/li\u003e\n                \u003cli\u003e• Memorize lines faster with smart cues.\u003c/li\u003e\n                \u003cli\u003e• Easily adapt to rhythms, emotions, and styles.\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/div\u003e\n\n            {/* Smart Feedback Info Box */}\n            \u003cdiv className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 text-left\"\u003e\n              \u003ch3 className=\"text-2xl font-bold text-white mb-4\"\u003e\n                Smart Feedback, Stronger Auditions, Book the Gig\n              \u003c/h3\u003e\n              \u003cul className=\"text-white/90 space-y-2\"\u003e\n                \u003cli\u003e• Consistent feedback to elevate your work.\u003c/li\u003e\n                \u003cli\u003e• Instant self-tape feedback without waiting for a coach.\u003c/li\u003e\n                \u003cli\u003e• Headshot reviews based on industry standards.\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \n          {/* Buttons */}\n          \u003cdiv className=\"flex flex-col sm:flex-row gap-6 justify-center items-center mt-8\"\u003e\n            {/* Headshot Analysis Button */}\n            \u003cbutton\n              onClick={handleHeadshotAnalysisClick}\n              className=\"group relative w-72 h-32 rounded-2xl bg-gradient-to-br from-yellow-500 via-orange-500 to-orange-600 hover:from-orange-500 hover:to-yellow-500 text-black shadow-2xl backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-[0_20px_40px_rgba(251,191,36,0.4)] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-yellow-400 focus-visible:ring-offset-2 focus-visible:ring-offset-background overflow-hidden\"\n              aria-label=\"Analyze your headshot\"\n            \u003e\n              \u003cdiv className=\"absolute inset-0 bg-white/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"relative z-10 flex flex-col items-center justify-center h-full space-y-2\"\u003e\n                \u003csvg className=\"w-8 h-8 mb-1\" fill=\"currentColor\" viewBox=\"0 0 24 24\"\u003e\n                  \u003cpath d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/\u003e\n                \u003c/svg\u003e\n                \u003cspan className=\"text-lg font-bold tracking-wide\"\u003eAnalyze your headshot\u003c/span\u003e\n              \u003c/div\u003e\n            \u003c/button\u003e\n            \u003cbutton\n              onClick={handleActorsProfileClick}\n              className=\"group relative w-72 h-32 rounded-2xl bg-gradient-to-br from-purple-600 via-pink-600 to-red-600 hover:from-pink-600 hover:to-purple-600 text-white shadow-2xl backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-[0_20px_40px_rgba(147,51,234,0.4)] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-400 focus-visible:ring-offset-2 focus-visible:ring-offset-background overflow-hidden\"\n              aria-label=\"Actors Profile\"\n            \u003e\n              \u003cdiv className=\"absolute inset-0 bg-white/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"relative z-10 flex flex-col items-center justify-center h-full space-y-2\"\u003e\n                \u003csvg className=\"w-8 h-8 mb-1\" fill=\"currentColor\" viewBox=\"0 0 24 24\"\u003e\n                  \u003cpath d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/\u003e\n                \u003c/svg\u003e\n                \u003cspan className=\"text-lg font-bold tracking-wide\"\u003eActors Profile\u003c/span\u003e\n              \u003c/div\u003e\n            \u003c/button\u003e\n\n            \u003cbutton\n              onClick={handleDashboardClick}\n              className=\"group relative w-72 h-32 rounded-2xl bg-gradient-to-br from-blue-600 via-indigo-600 to-purple-700 hover:from-indigo-600 hover:to-blue-600 text-white shadow-2xl backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-[0_20px_40px_rgba(59,130,246,0.4)] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 focus-visible:ring-offset-background overflow-hidden\"\n              aria-label=\"Dashboard\"\n            \u003e\n              \u003cdiv className=\"absolute inset-0 bg-white/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"relative z-10 flex flex-col items-center justify-center h-full space-y-2\"\u003e\n                \u003csvg className=\"w-8 h-8 mb-1\" fill=\"currentColor\" viewBox=\"0 0 24 24\"\u003e\n                  \u003cpath d=\"M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z\"/\u003e\n                \u003c/svg\u003e\n                \u003cspan className=\"text-lg font-bold tracking-wide\"\u003eDashboard\u003c/span\u003e\n              \u003c/div\u003e\n            \u003c/button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default ActorsToolBox;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/AdminCoaches.tsx",
//   "contents": "\nimport { useEffect } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport AdminCoachesManager from \"@/components/admin/AdminCoachesManager\";\n\nconst AdminCoaches = () =\u003e {\n  useEffect(() =\u003e {\n    document.title = \"Admin Coaches Manager | MyAuditionAI\";\n\n    const descContent = \"Admin page to manage coaches, add new coaches, and edit existing coach profiles.\";\n    let meta = document.querySelector('meta[name=\"description\"]') as HTMLMetaElement | null;\n    if (!meta) {\n      meta = document.createElement('meta');\n      meta.name = 'description';\n      document.head.appendChild(meta);\n    }\n    meta.content = descContent;\n\n    const href = `${window.location.origin}/admin/coaches`;\n    let canonical = document.querySelector('link[rel=\"canonical\"]') as HTMLLinkElement | null;\n    if (!canonical) {\n      canonical = document.createElement('link');\n      canonical.rel = 'canonical';\n      document.head.appendChild(canonical);\n    }\n    canonical.href = href;\n  }, []);\n\n  return (\n    \u003cProtectedRoute\u003e\n      \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n        \u003cNavigation /\u003e\n        \u003cmain className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n          \u003cdiv className=\"max-w-7xl mx-auto space-y-8\"\u003e\n            \u003cheader\u003e\n              \u003ch1 className=\"text-3xl font-bold\"\u003eAdmin: Coaches Manager\u003c/h1\u003e\n              \u003cp className=\"text-gray-400 mt-2\"\u003eManage all coaches on the platform.\u003c/p\u003e\n            \u003c/header\u003e\n\n            \u003csection aria-label=\"Admin coaches tools\"\u003e\n              \u003cAdminCoachesManager /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        \u003c/main\u003e\n      \u003c/div\u003e\n    \u003c/ProtectedRoute\u003e\n  );\n};\n\nexport default AdminCoaches;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/AdminPhotographers.tsx",
//   "contents": "import { useState, useEffect } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, MapPin, Star, Phone, Globe, Instagram } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Photographer {\n  id: string;\n  name: string;\n  business_name?: string;\n  email: string;\n  phone?: string;\n  website?: string;\n  instagram?: string;\n  city: string;\n  state: string;\n  country: string;\n  specialties: string[];\n  price_range?: string;\n  portfolio_url?: string;\n  bio?: string;\n  rating?: number;\n  total_reviews: number;\n  verified: boolean;\n  active: boolean;\n}\n\nconst emptyPhotographer: Partial\u003cPhotographer\u003e = {\n  name: '',\n  business_name: '',\n  email: '',\n  phone: '',\n  website: '',\n  instagram: '',\n  city: '',\n  state: '',\n  country: 'United States',\n  specialties: [],\n  price_range: '',\n  portfolio_url: '',\n  bio: '',\n  rating: undefined,\n  total_reviews: 0,\n  verified: false,\n  active: true,\n};\n\nexport default function AdminPhotographers() {\n  const [photographers, setPhotographers] = useState\u003cPhotographer[]\u003e([]);\n  const [loading, setLoading] = useState(true);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingPhotographer, setEditingPhotographer] = useState\u003cPartial\u003cPhotographer\u003e\u003e(emptyPhotographer);\n  const [isEditing, setIsEditing] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() =\u003e {\n    fetchPhotographers();\n  }, []);\n\n  const fetchPhotographers = async () =\u003e {\n    try {\n      const { data, error } = await supabase\n        .from('photographers')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setPhotographers(data || []);\n    } catch (error) {\n      console.error('Error fetching photographers:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load photographers\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () =\u003e {\n    try {\n      // Validate required fields\n      if (!editingPhotographer.name || !editingPhotographer.email || \n          !editingPhotographer.city || !editingPhotographer.state) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Please fill in all required fields (Name, Email, City, State)\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const photographerData = {\n        ...editingPhotographer,\n        name: editingPhotographer.name!,\n        email: editingPhotographer.email!,\n        city: editingPhotographer.city!,\n        state: editingPhotographer.state!,\n        country: editingPhotographer.country || 'United States',\n        specialties: editingPhotographer.specialties || [],\n        rating: editingPhotographer.rating || null,\n        total_reviews: editingPhotographer.total_reviews || 0,\n        verified: editingPhotographer.verified || false,\n        active: editingPhotographer.active !== false,\n      };\n\n      if (isEditing) {\n        const { error } = await supabase\n          .from('photographers')\n          .update(photographerData)\n          .eq('id', editingPhotographer.id);\n        if (error) throw error;\n      } else {\n        const { error } = await supabase\n          .from('photographers')\n          .insert(photographerData);\n        if (error) throw error;\n      }\n\n      await fetchPhotographers();\n      setDialogOpen(false);\n      setEditingPhotographer(emptyPhotographer);\n      setIsEditing(false);\n\n      toast({\n        title: \"Success\",\n        description: `Photographer ${isEditing ? 'updated' : 'created'} successfully`,\n      });\n    } catch (error) {\n      console.error('Error saving photographer:', error);\n      toast({\n        title: \"Error\",\n        description: `Failed to ${isEditing ? 'update' : 'create'} photographer`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDelete = async (id: string) =\u003e {\n    if (!confirm('Are you sure you want to delete this photographer?')) return;\n\n    try {\n      const { error } = await supabase\n        .from('photographers')\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n\n      await fetchPhotographers();\n      toast({\n        title: \"Success\",\n        description: \"Photographer deleted successfully\",\n      });\n    } catch (error) {\n      console.error('Error deleting photographer:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete photographer\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const openDialog = (photographer?: Photographer) =\u003e {\n    if (photographer) {\n      setEditingPhotographer(photographer);\n      setIsEditing(true);\n    } else {\n      setEditingPhotographer(emptyPhotographer);\n      setIsEditing(false);\n    }\n    setDialogOpen(true);\n  };\n\n  const handleSpecialtiesChange = (value: string) =\u003e {\n    const specialties = value.split(',').map(s =\u003e s.trim()).filter(s =\u003e s);\n    setEditingPhotographer(prev =\u003e ({ ...prev, specialties }));\n  };\n\n  const renderStarRating = (rating?: number) =\u003e {\n    if (!rating) return \u003cspan className=\"text-muted-foreground\"\u003eNo rating\u003c/span\u003e;\n    return (\n      \u003cdiv className=\"flex items-center gap-1\"\u003e\n        {[...Array(5)].map((_, i) =\u003e (\n          \u003cStar\n            key={i}\n            className={`h-4 w-4 ${\n              i \u003c Math.floor(rating) \n                ? \"fill-yellow-400 text-yellow-400\" \n                : \"text-gray-300\"\n            }`}\n          /\u003e\n        ))}\n        \u003cspan className=\"text-sm text-muted-foreground ml-1\"\u003e\n          {rating.toFixed(1)}\n        \u003c/span\u003e\n      \u003c/div\u003e\n    );\n  };\n\n  if (loading) {\n    return (\n      \u003cdiv className=\"min-h-screen flex items-center justify-center\"\u003e\n        \u003cdiv className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"\u003e\u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-background\"\u003e\n      \u003cdiv className=\"container mx-auto px-4 py-8\"\u003e\n        \u003cdiv className=\"flex items-center justify-between mb-8\"\u003e\n          \u003cdiv\u003e\n            \u003ch1 className=\"text-3xl font-bold\"\u003ePhotographer Management\u003c/h1\u003e\n            \u003cp className=\"text-muted-foreground\"\u003eManage headshot photographers directory\u003c/p\u003e\n          \u003c/div\u003e\n          \n          \u003cDialog open={dialogOpen} onOpenChange={setDialogOpen}\u003e\n            \u003cDialogTrigger asChild\u003e\n              \u003cButton onClick={() =\u003e openDialog()}\u003e\n                \u003cPlus className=\"h-4 w-4 mr-2\" /\u003e\n                Add Photographer\n              \u003c/Button\u003e\n            \u003c/DialogTrigger\u003e\n            \u003cDialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\"\u003e\n              \u003cDialogHeader\u003e\n                \u003cDialogTitle\u003e\n                  {isEditing ? 'Edit Photographer' : 'Add New Photographer'}\n                \u003c/DialogTitle\u003e\n                \u003cDialogDescription\u003e\n                  {isEditing ? 'Update photographer information' : 'Add a new photographer to the directory'}\n                \u003c/DialogDescription\u003e\n              \u003c/DialogHeader\u003e\n              \n              \u003cdiv className=\"grid gap-4 py-4\"\u003e\n                \u003cdiv className=\"grid grid-cols-2 gap-4\"\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"name\"\u003eFull Name *\u003c/Label\u003e\n                    \u003cInput\n                      id=\"name\"\n                      value={editingPhotographer.name || ''}\n                      onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, name: e.target.value }))}\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"business_name\"\u003eBusiness Name\u003c/Label\u003e\n                    \u003cInput\n                      id=\"business_name\"\n                      value={editingPhotographer.business_name || ''}\n                      onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, business_name: e.target.value }))}\n                    /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv className=\"grid grid-cols-2 gap-4\"\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"email\"\u003eEmail *\u003c/Label\u003e\n                    \u003cInput\n                      id=\"email\"\n                      type=\"email\"\n                      value={editingPhotographer.email || ''}\n                      onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, email: e.target.value }))}\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"phone\"\u003ePhone\u003c/Label\u003e\n                    \u003cInput\n                      id=\"phone\"\n                      value={editingPhotographer.phone || ''}\n                      onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, phone: e.target.value }))}\n                    /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv className=\"grid grid-cols-3 gap-4\"\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"city\"\u003eCity *\u003c/Label\u003e\n                    \u003cInput\n                      id=\"city\"\n                      value={editingPhotographer.city || ''}\n                      onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, city: e.target.value }))}\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"state\"\u003eState *\u003c/Label\u003e\n                    \u003cInput\n                      id=\"state\"\n                      value={editingPhotographer.state || ''}\n                      onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, state: e.target.value }))}\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"country\"\u003eCountry\u003c/Label\u003e\n                    \u003cInput\n                      id=\"country\"\n                      value={editingPhotographer.country || ''}\n                      onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, country: e.target.value }))}\n                    /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv className=\"grid grid-cols-2 gap-4\"\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"website\"\u003eWebsite\u003c/Label\u003e\n                    \u003cInput\n                      id=\"website\"\n                      value={editingPhotographer.website || ''}\n                      onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, website: e.target.value }))}\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"instagram\"\u003eInstagram\u003c/Label\u003e\n                    \u003cInput\n                      id=\"instagram\"\n                      value={editingPhotographer.instagram || ''}\n                      onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, instagram: e.target.value }))}\n                    /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv\u003e\n                  \u003cLabel htmlFor=\"specialties\"\u003eSpecialties (comma-separated)\u003c/Label\u003e\n                  \u003cInput\n                    id=\"specialties\"\n                    value={editingPhotographer.specialties?.join(', ') || ''}\n                    onChange={(e) =\u003e handleSpecialtiesChange(e.target.value)}\n                    placeholder=\"headshots, commercial, theatrical, corporate\"\n                  /\u003e\n                \u003c/div\u003e\n\n                \u003cdiv className=\"grid grid-cols-2 gap-4\"\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"price_range\"\u003ePrice Range\u003c/Label\u003e\n                    \u003cInput\n                      id=\"price_range\"\n                      value={editingPhotographer.price_range || ''}\n                      onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, price_range: e.target.value }))}\n                      placeholder=\"$300-500\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"rating\"\u003eRating (1-5)\u003c/Label\u003e\n                    \u003cInput\n                      id=\"rating\"\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"5\"\n                      step=\"0.1\"\n                      value={editingPhotographer.rating || ''}\n                      onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ \n                        ...prev, \n                        rating: e.target.value ? parseFloat(e.target.value) : undefined \n                      }))}\n                    /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv\u003e\n                  \u003cLabel htmlFor=\"bio\"\u003eBio\u003c/Label\u003e\n                  \u003cTextarea\n                    id=\"bio\"\n                    value={editingPhotographer.bio || ''}\n                    onChange={(e) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, bio: e.target.value }))}\n                    rows={3}\n                  /\u003e\n                \u003c/div\u003e\n\n                \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                  \u003cSwitch\n                    id=\"verified\"\n                    checked={editingPhotographer.verified || false}\n                    onCheckedChange={(checked) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, verified: checked }))}\n                  /\u003e\n                  \u003cLabel htmlFor=\"verified\"\u003eVerified Photographer\u003c/Label\u003e\n                \u003c/div\u003e\n\n                \u003cdiv className=\"flex items-center space-x-2\"\u003e\n                  \u003cSwitch\n                    id=\"active\"\n                    checked={editingPhotographer.active !== false}\n                    onCheckedChange={(checked) =\u003e setEditingPhotographer(prev =\u003e ({ ...prev, active: checked }))}\n                  /\u003e\n                  \u003cLabel htmlFor=\"active\"\u003eActive (visible to users)\u003c/Label\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n\n              \u003cDialogFooter\u003e\n                \u003cButton variant=\"outline\" onClick={() =\u003e setDialogOpen(false)}\u003e\n                  Cancel\n                \u003c/Button\u003e\n                \u003cButton onClick={handleSave}\u003e\n                  {isEditing ? 'Update' : 'Create'} Photographer\n                \u003c/Button\u003e\n              \u003c/DialogFooter\u003e\n            \u003c/DialogContent\u003e\n          \u003c/Dialog\u003e\n        \u003c/div\u003e\n\n        \u003cdiv className=\"grid gap-6\"\u003e\n          {photographers.map((photographer) =\u003e (\n            \u003cCard key={photographer.id} className={`${!photographer.active ? 'opacity-60' : ''}`}\u003e\n              \u003cCardHeader\u003e\n                \u003cdiv className=\"flex items-start justify-between\"\u003e\n                  \u003cdiv className=\"space-y-2\"\u003e\n                    \u003cdiv className=\"flex items-center gap-2\"\u003e\n                      \u003cCardTitle\u003e{photographer.name}\u003c/CardTitle\u003e\n                      {photographer.verified \u0026\u0026 (\n                        \u003cBadge variant=\"default\"\u003eVerified\u003c/Badge\u003e\n                      )}\n                      {!photographer.active \u0026\u0026 (\n                        \u003cBadge variant=\"secondary\"\u003eInactive\u003c/Badge\u003e\n                      )}\n                    \u003c/div\u003e\n                    {photographer.business_name \u0026\u0026 (\n                      \u003cCardDescription\u003e{photographer.business_name}\u003c/CardDescription\u003e\n                    )}\n                    \u003cdiv className=\"flex items-center gap-2 text-sm text-muted-foreground\"\u003e\n                      \u003cMapPin className=\"h-4 w-4\" /\u003e\n                      {photographer.city}, {photographer.state}\n                    \u003c/div\u003e\n                    {renderStarRating(photographer.rating)}\n                  \u003c/div\u003e\n                  \n                  \u003cdiv className=\"flex gap-2\"\u003e\n                    \u003cButton variant=\"outline\" size=\"sm\" onClick={() =\u003e openDialog(photographer)}\u003e\n                      \u003cEdit className=\"h-4 w-4\" /\u003e\n                    \u003c/Button\u003e\n                    \u003cButton \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={() =\u003e handleDelete(photographer.id)}\n                    \u003e\n                      \u003cTrash2 className=\"h-4 w-4\" /\u003e\n                    \u003c/Button\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/CardHeader\u003e\n              \n              \u003cCardContent className=\"space-y-4\"\u003e\n                \u003cdiv className=\"flex flex-wrap gap-2\"\u003e\n                  {photographer.specialties.map((specialty, idx) =\u003e (\n                    \u003cBadge key={idx} variant=\"outline\"\u003e\n                      {specialty}\n                    \u003c/Badge\u003e\n                  ))}\n                \u003c/div\u003e\n\n                {photographer.price_range \u0026\u0026 (\n                  \u003cp className=\"text-sm font-medium\"\u003ePrice: {photographer.price_range}\u003c/p\u003e\n                )}\n\n                {photographer.bio \u0026\u0026 (\n                  \u003cp className=\"text-sm text-muted-foreground\"\u003e{photographer.bio}\u003c/p\u003e\n                )}\n\n                \u003cSeparator /\u003e\n\n                \u003cdiv className=\"flex items-center gap-4 text-sm text-muted-foreground\"\u003e\n                  \u003cspan\u003e{photographer.email}\u003c/span\u003e\n                  {photographer.phone \u0026\u0026 (\n                    \u003cdiv className=\"flex items-center gap-1\"\u003e\n                      \u003cPhone className=\"h-3 w-3\" /\u003e\n                      {photographer.phone}\n                    \u003c/div\u003e\n                  )}\n                  {photographer.website \u0026\u0026 (\n                    \u003cdiv className=\"flex items-center gap-1\"\u003e\n                      \u003cGlobe className=\"h-3 w-3\" /\u003e\n                      \u003ca href={photographer.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:underline\"\u003e\n                        Website\n                      \u003c/a\u003e\n                    \u003c/div\u003e\n                  )}\n                  {photographer.instagram \u0026\u0026 (\n                    \u003cdiv className=\"flex items-center gap-1\"\u003e\n                      \u003cInstagram className=\"h-3 w-3\" /\u003e\n                      \u003ca href={photographer.instagram} target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:underline\"\u003e\n                        Instagram\n                      \u003c/a\u003e\n                    \u003c/div\u003e\n                  )}\n                \u003c/div\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          ))}\n\n          {photographers.length === 0 \u0026\u0026 (\n            \u003cCard\u003e\n              \u003cCardContent className=\"text-center py-12\"\u003e\n                \u003cp className=\"text-muted-foreground\"\u003eNo photographers found.\u003c/p\u003e\n                \u003cButton className=\"mt-4\" onClick={() =\u003e openDialog()}\u003e\n                  Add First Photographer\n                \u003c/Button\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          )}\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n}",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/AdminScripts.tsx",
//   "contents": "\nimport { useEffect } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport AdminScriptsManager from \"@/components/admin/AdminScriptsManager\";\n\nconst AdminScripts = () =\u003e {\n  // Basic SEO for this page\n  useEffect(() =\u003e {\n    document.title = \"Admin Scripts Manager | MyAuditionAI\";\n\n    // Meta description\n    const descContent = \"Admin page to view, filter, trash, restore, and permanently delete scripts.\";\n    let meta = document.querySelector('meta[name=\"description\"]') as HTMLMetaElement | null;\n    if (!meta) {\n      meta = document.createElement('meta');\n      meta.name = 'description';\n      document.head.appendChild(meta);\n    }\n    meta.content = descContent;\n\n    // Canonical tag\n    const href = `${window.location.origin}/admin/scripts`;\n    let canonical = document.querySelector('link[rel=\"canonical\"]') as HTMLLinkElement | null;\n    if (!canonical) {\n      canonical = document.createElement('link');\n      canonical.rel = 'canonical';\n      document.head.appendChild(canonical);\n    }\n    canonical.href = href;\n  }, []);\n\n  return (\n    \u003cProtectedRoute\u003e\n      \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n        \u003cNavigation /\u003e\n        \u003cmain className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n          \u003cdiv className=\"max-w-7xl mx-auto space-y-8\"\u003e\n            \u003cheader\u003e\n              \u003ch1 className=\"text-3xl font-bold\"\u003eAdmin: Scripts Manager\u003c/h1\u003e\n              \u003cp className=\"text-gray-400 mt-2\"\u003eManage all scripts across the platform.\u003c/p\u003e\n            \u003c/header\u003e\n\n            \u003csection aria-label=\"Admin scripts tools\"\u003e\n              \u003cAdminScriptsManager /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        \u003c/main\u003e\n      \u003c/div\u003e\n    \u003c/ProtectedRoute\u003e\n  );\n};\n\nexport default AdminScripts;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/AdminTestimonials.tsx",
//   "contents": "import React from 'react';\nimport Navigation from '@/components/Navigation';\nimport AdminTestimonialsManager from '@/components/admin/AdminTestimonialsManager';\nimport ProtectedRoute from '@/components/ProtectedRoute';\n\nconst AdminTestimonials = () =\u003e {\n  return (\n    \u003cProtectedRoute\u003e\n      \u003cdiv className=\"min-h-screen bg-background\"\u003e\n        \u003cNavigation /\u003e\n        \u003cdiv className=\"pt-20\"\u003e\n          \u003cdiv className=\"container max-w-6xl mx-auto px-4 py-8\"\u003e\n            \u003cAdminTestimonialsManager /\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ProtectedRoute\u003e\n  );\n};\n\nexport default AdminTestimonials;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Auth.tsx",
//   "contents": "\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { Link } from 'react-router-dom';\nimport { ArrowLeft, Eye, EyeOff } from 'lucide-react';\n\nconst Auth = () =\u003e {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [fullName, setFullName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [forgotPassword, setForgotPassword] = useState(false);\n  const { signIn, signUp, resetPassword, user } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Redirect if already authenticated\n  useEffect(() =\u003e {\n    if (user) {\n      const from = location.state?.from?.pathname || '/dashboard';\n      navigate(from, { replace: true });\n    }\n  }, [user, navigate, location]);\n\n  const handleSignIn = async (e: React.FormEvent) =\u003e {\n    e.preventDefault();\n    if (!email || !password) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    const { error } = await signIn(email, password);\n    \n    if (error) {\n      console.error('Sign in error:', error);\n      toast({\n        title: \"Sign In Failed\",\n        description: error.message === 'Invalid login credentials' \n          ? \"Invalid email or password. Please check your credentials and try again.\"\n          : error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've been signed in successfully.\",\n      });\n      // Navigation will happen automatically due to useEffect above\n    }\n    \n    setLoading(false);\n  };\n\n  const handleSignUp = async (e: React.FormEvent) =\u003e {\n    e.preventDefault();\n    if (!email || !password || !fullName) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password.length \u003c 6) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    const { error } = await signUp(email, password, fullName);\n    \n    if (error) {\n      console.error('Sign up error:', error);\n      toast({\n        title: \"Sign Up Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Account created!\",\n        description: \"Please check your email to confirm your account, then you can sign in.\",\n      });\n      // Reset form\n      setEmail('');\n      setPassword('');\n      setFullName('');\n    }\n    \n    setLoading(false);\n  };\n\n  const handleForgotPassword = async (e: React.FormEvent) =\u003e {\n    e.preventDefault();\n    if (!email) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter your email address.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    const { error } = await resetPassword(email);\n    \n    if (error) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Password reset sent!\",\n        description: \"Check your email for password reset instructions.\",\n      });\n      setForgotPassword(false);\n    }\n    \n    setLoading(false);\n  };\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-black text-white flex items-center justify-center px-4\"\u003e\n      \u003cdiv className=\"w-full max-w-md\"\u003e\n        \u003cdiv className=\"mb-8\"\u003e\n          \u003cLink to=\"/\" className=\"inline-flex items-center text-yellow-400 hover:text-yellow-300 transition-colors\"\u003e\n            \u003cArrowLeft className=\"w-4 h-4 mr-2\" /\u003e\n            Back to Home\n          \u003c/Link\u003e\n        \u003c/div\u003e\n\n        \u003cCard className=\"bg-gray-900 border-gray-700\"\u003e\n          \u003cCardHeader className=\"text-center\"\u003e\n            \u003cCardTitle className=\"text-2xl text-white\"\u003e\n              {forgotPassword ? 'Reset Password' : 'Welcome to MyAuditionAI.com'}\n            \u003c/CardTitle\u003e\n            \u003cCardDescription className=\"text-gray-400\"\u003e\n              {forgotPassword \n                ? 'Enter your email to receive password reset instructions'\n                : 'Sign in to your account or create a new one'\n              }\n            \u003c/CardDescription\u003e\n          \u003c/CardHeader\u003e\n          \n          \u003cCardContent\u003e\n            {forgotPassword ? (\n              \u003cform onSubmit={handleForgotPassword} className=\"space-y-4\"\u003e\n                \u003cdiv\u003e\n                  \u003cLabel htmlFor=\"email\" className=\"text-white\"\u003eEmail\u003c/Label\u003e\n                  \u003cInput\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) =\u003e setEmail(e.target.value)}\n                    className=\"bg-gray-800 border-gray-600 text-white focus:border-yellow-500\"\n                    placeholder=\"Enter your email\"\n                    required\n                  /\u003e\n                \u003c/div\u003e\n                \u003cButton \n                  type=\"submit\" \n                  className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-bold\"\n                  disabled={loading}\n                \u003e\n                  {loading ? \"Sending...\" : \"Send Reset Link\"}\n                \u003c/Button\u003e\n                \u003cButton \n                  type=\"button\"\n                  variant=\"ghost\"\n                  className=\"w-full text-gray-400 hover:text-white\"\n                  onClick={() =\u003e setForgotPassword(false)}\n                \u003e\n                  Back to Sign In\n                \u003c/Button\u003e\n              \u003c/form\u003e\n            ) : (\n              \u003cTabs defaultValue=\"signin\" className=\"w-full\"\u003e\n                \u003cTabsList className=\"grid w-full grid-cols-2 bg-gray-800\"\u003e\n                  \u003cTabsTrigger value=\"signin\" className=\"text-white data-[state=active]:bg-yellow-500 data-[state=active]:text-black\"\u003e\n                    Sign In\n                  \u003c/TabsTrigger\u003e\n                  \u003cTabsTrigger value=\"signup\" className=\"text-white data-[state=active]:bg-yellow-500 data-[state=active]:text-black\"\u003e\n                    Sign Up\n                  \u003c/TabsTrigger\u003e\n                \u003c/TabsList\u003e\n                \n                \u003cTabsContent value=\"signin\"\u003e\n                  \u003cform onSubmit={handleSignIn} className=\"space-y-4\"\u003e\n                    \u003cdiv\u003e\n                      \u003cLabel htmlFor=\"signin-email\" className=\"text-white\"\u003eEmail\u003c/Label\u003e\n                      \u003cInput\n                        id=\"signin-email\"\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) =\u003e setEmail(e.target.value)}\n                        className=\"bg-gray-800 border-gray-600 text-white focus:border-yellow-500\"\n                        placeholder=\"Enter your email\"\n                        required\n                      /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                      \u003cLabel htmlFor=\"signin-password\" className=\"text-white\"\u003ePassword\u003c/Label\u003e\n                      \u003cdiv className=\"relative\"\u003e\n                        \u003cInput\n                          id=\"signin-password\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          value={password}\n                          onChange={(e) =\u003e setPassword(e.target.value)}\n                          className=\"bg-gray-800 border-gray-600 text-white focus:border-yellow-500 pr-10\"\n                          placeholder=\"Enter your password\"\n                          required\n                        /\u003e\n                        \u003cButton\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() =\u003e setShowPassword(!showPassword)}\n                        \u003e\n                          {showPassword ? (\n                            \u003cEyeOff className=\"h-4 w-4 text-gray-400\" /\u003e\n                          ) : (\n                            \u003cEye className=\"h-4 w-4 text-gray-400\" /\u003e\n                          )}\n                        \u003c/Button\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cButton \n                      type=\"submit\" \n                      className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-bold\"\n                      disabled={loading}\n                    \u003e\n                      {loading ? \"Signing in...\" : \"Sign In\"}\n                    \u003c/Button\u003e\n                    \u003cButton \n                      type=\"button\"\n                      variant=\"ghost\"\n                      className=\"w-full text-gray-400 hover:text-white\"\n                      onClick={() =\u003e setForgotPassword(true)}\n                    \u003e\n                      Forgot your password?\n                    \u003c/Button\u003e\n                  \u003c/form\u003e\n                \u003c/TabsContent\u003e\n                \n                \u003cTabsContent value=\"signup\"\u003e\n                  \u003cform onSubmit={handleSignUp} className=\"space-y-4\"\u003e\n                    \u003cdiv\u003e\n                      \u003cLabel htmlFor=\"signup-fullname\" className=\"text-white\"\u003eFull Name\u003c/Label\u003e\n                      \u003cInput\n                        id=\"signup-fullname\"\n                        type=\"text\"\n                        value={fullName}\n                        onChange={(e) =\u003e setFullName(e.target.value)}\n                        className=\"bg-gray-800 border-gray-600 text-white focus:border-yellow-500\"\n                        placeholder=\"Enter your full name\"\n                        required\n                      /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                      \u003cLabel htmlFor=\"signup-email\" className=\"text-white\"\u003eEmail\u003c/Label\u003e\n                      \u003cInput\n                        id=\"signup-email\"\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) =\u003e setEmail(e.target.value)}\n                        className=\"bg-gray-800 border-gray-600 text-white focus:border-yellow-500\"\n                        placeholder=\"Enter your email\"\n                        required\n                      /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                      \u003cLabel htmlFor=\"signup-password\" className=\"text-white\"\u003ePassword\u003c/Label\u003e\n                      \u003cdiv className=\"relative\"\u003e\n                        \u003cInput\n                          id=\"signup-password\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          value={password}\n                          onChange={(e) =\u003e setPassword(e.target.value)}\n                          className=\"bg-gray-800 border-gray-600 text-white focus:border-yellow-500 pr-10\"\n                          placeholder=\"Create a password (min. 6 characters)\"\n                          required\n                          minLength={6}\n                        /\u003e\n                        \u003cButton\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() =\u003e setShowPassword(!showPassword)}\n                        \u003e\n                          {showPassword ? (\n                            \u003cEyeOff className=\"h-4 w-4 text-gray-400\" /\u003e\n                          ) : (\n                            \u003cEye className=\"h-4 w-4 text-gray-400\" /\u003e\n                          )}\n                        \u003c/Button\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cButton \n                      type=\"submit\" \n                      className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-bold\"\n                      disabled={loading}\n                    \u003e\n                      {loading ? \"Creating account...\" : \"Create Account\"}\n                    \u003c/Button\u003e\n                  \u003c/form\u003e\n                \u003c/TabsContent\u003e\n              \u003c/Tabs\u003e\n            )}\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default Auth;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/BlogPostDetail.tsx",
//   "contents": "import { useParams, Link } from 'react-router-dom';\nimport { useQuery } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  slug: string;\n  excerpt: string | null;\n  content: string;\n  cover_image_url: string | null;\n  youtube_url: string | null;\n  status: 'draft' | 'published';\n  author_id: string;\n  created_at: string;\n  updated_at: string;\n  profiles: {\n    full_name: string | null;\n  } | null;\n}\n\nexport default function BlogPostDetail() {\n  const { slug } = useParams\u003c{ slug: string }\u003e();\n\n  const { data: post, isLoading, error } = useQuery({\n    queryKey: ['blog-post', slug],\n    queryFn: async () =\u003e {\n      const { data, error } = await supabase\n        .from('blog_posts')\n        .select(`\n          *,\n          profiles (\n            full_name\n          )\n        `)\n        .eq('slug', slug)\n        .eq('status', 'published')\n        .single();\n\n      if (error) throw error;\n      return data as BlogPost;\n    },\n    enabled: !!slug,\n  });\n\n  const getYouTubeEmbedId = (url: string) =\u003e {\n    if (!url) return null;\n    \n    // Enhanced regex to handle various YouTube URL formats\n    const patterns = [\n      /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/|youtube\\.com\\/v\\/)([a-zA-Z0-9_-]{11})/,\n      /youtube\\.com\\/watch\\?.*v=([a-zA-Z0-9_-]{11})/,\n      /youtube\\.com\\/shorts\\/([a-zA-Z0-9_-]{11})/,\n    ];\n    \n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match \u0026\u0026 match[1]) {\n        return match[1];\n      }\n    }\n    \n    // Debug: Log the URL if no match is found\n    console.log('Failed to extract YouTube ID from URL:', url);\n    return null;\n  };\n\n  if (isLoading) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-background\"\u003e\n        \u003cdiv className=\"container mx-auto px-4 py-8\"\u003e\n          \u003cdiv className=\"animate-pulse\"\u003e\n            \u003cdiv className=\"h-8 bg-muted rounded w-1/4 mb-6\"\u003e\u003c/div\u003e\n            \u003cdiv className=\"h-12 bg-muted rounded w-3/4 mb-4\"\u003e\u003c/div\u003e\n            \u003cdiv className=\"h-4 bg-muted rounded w-1/2 mb-8\"\u003e\u003c/div\u003e\n            \u003cdiv className=\"h-64 bg-muted rounded mb-6\"\u003e\u003c/div\u003e\n            \u003cdiv className=\"space-y-4\"\u003e\n              \u003cdiv className=\"h-4 bg-muted rounded\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"h-4 bg-muted rounded w-5/6\"\u003e\u003c/div\u003e\n              \u003cdiv className=\"h-4 bg-muted rounded w-4/6\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  if (error || !post) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-background\"\u003e\n        \u003cdiv className=\"container mx-auto px-4 py-8\"\u003e\n          \u003cdiv className=\"text-center\"\u003e\n            \u003ch1 className=\"text-2xl font-bold mb-4\"\u003ePost not found\u003c/h1\u003e\n            \u003cp className=\"text-muted-foreground mb-6\"\u003eThe blog post you're looking for doesn't exist.\u003c/p\u003e\n            \u003cLink to=\"/podcast\"\u003e\n              \u003cButton variant=\"outline\"\u003e\n                \u003cArrowLeft className=\"mr-2 h-4 w-4\" /\u003e\n                Back to Podcast\n              \u003c/Button\u003e\n            \u003c/Link\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  const videoId = post.youtube_url ? getYouTubeEmbedId(post.youtube_url) : null;\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-background\"\u003e\n      \u003carticle className=\"container mx-auto px-4 py-8 max-w-4xl\"\u003e\n        {/* Header */}\n        \u003cdiv className=\"mb-8\"\u003e\n          \u003cLink to=\"/podcast\"\u003e\n            \u003cButton variant=\"ghost\" className=\"mb-6\"\u003e\n              \u003cArrowLeft className=\"mr-2 h-4 w-4\" /\u003e\n              Back to Podcast\n            \u003c/Button\u003e\n          \u003c/Link\u003e\n\n          \u003cdiv className=\"flex items-center gap-3 mb-4\"\u003e\n            \u003cBadge variant=\"secondary\" className=\"bg-primary/10 text-primary border-primary/20\"\u003e\n              Podcast\n            \u003c/Badge\u003e\n            \u003cspan className=\"text-sm text-muted-foreground\"\u003e\n              {formatDistanceToNow(new Date(post.created_at), { addSuffix: true })}\n            \u003c/span\u003e\n          \u003c/div\u003e\n\n          \u003ch1 className=\"text-4xl font-bold leading-tight mb-4\"\u003e\n            {post.title}\n          \u003c/h1\u003e\n\n          {post.excerpt \u0026\u0026 (\n            \u003cp className=\"text-xl text-muted-foreground leading-relaxed mb-6\"\u003e\n              {post.excerpt}\n            \u003c/p\u003e\n          )}\n\n          \u003cdiv className=\"flex items-center justify-between pb-6 border-b border-border\"\u003e\n            \u003cp className=\"text-sm text-muted-foreground\"\u003e\n              By {post.profiles?.full_name || 'Admin'}\n            \u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        {/* Media */}\n        {(videoId || post.cover_image_url) \u0026\u0026 (\n          \u003cdiv className=\"mb-8\"\u003e\n            {videoId ? (\n              \u003cdiv className=\"aspect-video rounded-lg overflow-hidden\"\u003e\n                \u003ciframe\n                  src={`https://www.youtube.com/embed/${videoId}`}\n                  title={post.title}\n                  className=\"w-full h-full\"\n                  allowFullScreen\n                /\u003e\n              \u003c/div\u003e\n            ) : post.cover_image_url ? (\n              \u003cdiv className=\"aspect-video rounded-lg overflow-hidden\"\u003e\n                \u003cimg\n                  src={post.cover_image_url}\n                  alt={post.title}\n                  className=\"w-full h-full object-cover\"\n                /\u003e\n              \u003c/div\u003e\n            ) : null}\n          \u003c/div\u003e\n        )}\n\n        {/* Content */}\n        \u003cdiv className=\"prose prose-lg max-w-none prose-headings:text-foreground prose-p:text-foreground prose-li:text-foreground prose-strong:text-foreground prose-em:text-foreground prose-blockquote:text-foreground prose-code:text-foreground\"\u003e\n          \u003cdiv \n            dangerouslySetInnerHTML={{ __html: post.content.replace(/\\n/g, '\u003cbr/\u003e') }}\n            className=\"leading-relaxed [\u0026\u003ep]:mb-4 [\u0026\u003eh1]:mb-4 [\u0026\u003eh2]:mb-4 [\u0026\u003eh3]:mb-4 [\u0026\u003eh4]:mb-4 [\u0026\u003eh5]:mb-4 [\u0026\u003eh6]:mb-4\"\n          /\u003e\n        \u003c/div\u003e\n      \u003c/article\u003e\n    \u003c/div\u003e\n  );\n}",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/CoachDetail.tsx",
//   "contents": "\nimport { useEffect, useState } from \"react\";\nimport { useParams, Navigate } from \"react-router-dom\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport Navigation from \"@/components/Navigation\";\nimport CoachContactForm from \"@/components/coaches/CoachContactForm\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\n\nconst CoachDetail = () =\u003e {\n  const { slug } = useParams\u003c{ slug: string }\u003e();\n  const [showContactForm, setShowContactForm] = useState(false);\n\n  const { data: coach, isLoading, error } = useQuery({\n    queryKey: ['coach', slug],\n    queryFn: async () =\u003e {\n      if (!slug) throw new Error('No coach slug provided');\n      \n      const { data, error } = await supabase\n        .from('coaches')\n        .select('*')\n        .eq('slug', slug)\n        .eq('active', true)\n        .maybeSingle();\n      \n      if (error) throw error;\n      return data;\n    },\n    enabled: !!slug,\n  });\n\n  useEffect(() =\u003e {\n    if (coach) {\n      document.title = `${coach.name} - Book a Coach | MyAuditionAI`;\n      \n      const descContent = `Connect with ${coach.name} - ${coach.bio?.slice(0, 150) || 'Experienced coach'}`;\n      let meta = document.querySelector('meta[name=\"description\"]') as HTMLMetaElement | null;\n      if (!meta) {\n        meta = document.createElement('meta');\n        meta.name = 'description';\n        document.head.appendChild(meta);\n      }\n      meta.content = descContent;\n    }\n  }, [coach]);\n\n  if (isLoading) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n        \u003cNavigation /\u003e\n        \u003cmain className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n          \u003cdiv className=\"max-w-4xl mx-auto\"\u003e\n            \u003cdiv className=\"flex justify-center items-center py-20\"\u003e\n              \u003cLoader2 className=\"h-8 w-8 animate-spin text-purple-400\" /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/main\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  if (error || !coach) {\n    return \u003cNavigate to=\"/coaches\" replace /\u003e;\n  }\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n      \u003cNavigation /\u003e\n      \u003cmain className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n        \u003cdiv className=\"max-w-4xl mx-auto\"\u003e\n          \u003cdiv className=\"mb-8\"\u003e\n            \u003cLink to=\"/coaches\"\u003e\n              \u003cButton variant=\"ghost\" className=\"text-purple-400 hover:text-purple-300\"\u003e\n                \u003cArrowLeft className=\"h-4 w-4 mr-2\" /\u003e\n                Back to All Coaches\n              \u003c/Button\u003e\n            \u003c/Link\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"bg-gray-900 rounded-lg p-8\"\u003e\n            \u003cdiv className=\"flex flex-col md:flex-row gap-8 mb-8\"\u003e\n              \u003cdiv className=\"flex-shrink-0\"\u003e\n                {coach.photo_url ? (\n                  \u003cimg\n                    src={coach.photo_url}\n                    alt={coach.name}\n                    className=\"w-32 h-32 rounded-lg object-cover border-4 border-purple-400\"\n                    onError={(e) =\u003e {\n                      console.warn(`Failed to load coach photo: ${coach.photo_url}`);\n                      e.currentTarget.style.display = 'none';\n                      e.currentTarget.nextElementSibling?.classList.remove('hidden');\n                    }}\n                  /\u003e\n                ) : null}\n                \u003cdiv className={`w-32 h-32 rounded-lg bg-gray-800 border-4 border-purple-400 flex items-center justify-center text-purple-400 font-bold text-2xl ${coach.photo_url ? 'hidden' : ''}`}\u003e\n                  {coach.name.split(' ').map(n =\u003e n[0]).join('')}\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv className=\"flex-1\"\u003e\n                \u003ch1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\"\u003e\n                  {coach.name}\n                \u003c/h1\u003e\n                \n                {coach.bio \u0026\u0026 (\n                  \u003cp className=\"text-gray-300 text-lg leading-relaxed\"\u003e\n                    {coach.bio}\n                  \u003c/p\u003e\n                )}\n              \u003c/div\u003e\n            \u003c/div\u003e\n\n            {coach.highlights.length \u003e 0 \u0026\u0026 (\n              \u003cdiv className=\"mb-8\"\u003e\n                \u003ch2 className=\"text-2xl font-bold mb-4 text-purple-400\"\u003eExperience \u0026 Highlights\u003c/h2\u003e\n                \u003cdiv className=\"grid gap-3 md:grid-cols-2\"\u003e\n                  {coach.highlights.map((highlight, index) =\u003e (\n                    \u003cBadge \n                      key={index} \n                      variant=\"secondary\" \n                      className=\"p-3 text-sm bg-gray-800 text-gray-300 justify-start text-left h-auto\"\n                    \u003e\n                      • {highlight}\n                    \u003c/Badge\u003e\n                  ))}\n                \u003c/div\u003e\n              \u003c/div\u003e\n            )}\n\n            \u003cdiv className=\"text-center\"\u003e\n              {showContactForm ? (\n                \u003cdiv\u003e\n                  \u003cCoachContactForm \n                    coach={coach} \n                    onSuccess={() =\u003e setShowContactForm(false)}\n                    onCancel={() =\u003e setShowContactForm(false)}\n                  /\u003e\n                \u003c/div\u003e\n              ) : (\n                \u003cButton \n                  onClick={() =\u003e setShowContactForm(true)}\n                  className=\"bg-purple-600 hover:bg-purple-700 text-lg px-8 py-3\"\n                \u003e\n                  Contact {coach.name.split(' ')[0]}\n                \u003c/Button\u003e\n              )}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/main\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default CoachDetail;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Coaches.tsx",
//   "contents": "\nimport { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport Navigation from \"@/components/Navigation\";\nimport CoachCard from \"@/components/coaches/CoachCard\";\nimport { Loader2 } from \"lucide-react\";\n\nconst Coaches = () =\u003e {\n\n  useEffect(() =\u003e {\n    document.title = \"Book a Coach | MyAuditionAI\";\n    \n    const descContent = \"Connect with experienced voice-over and acting coaches for personalized training and guidance.\";\n    let meta = document.querySelector('meta[name=\"description\"]') as HTMLMetaElement | null;\n    if (!meta) {\n      meta = document.createElement('meta');\n      meta.name = 'description';\n      document.head.appendChild(meta);\n    }\n    meta.content = descContent;\n\n    const href = `${window.location.origin}/coaches`;\n    let canonical = document.querySelector('link[rel=\"canonical\"]') as HTMLLinkElement | null;\n    if (!canonical) {\n      canonical = document.createElement('link');\n      canonical.rel = 'canonical';\n      document.head.appendChild(canonical);\n    }\n    canonical.href = href;\n  }, []);\n\n  const { data: coaches, isLoading, error } = useQuery({\n    queryKey: ['coaches'],\n    queryFn: async () =\u003e {\n      const { data, error } = await supabase\n        .from('coaches')\n        .select('*')\n        .eq('active', true)\n        .order('name');\n      \n      if (error) throw error;\n      return data;\n    },\n  });\n\n  if (isLoading) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n        \u003cNavigation /\u003e\n        \u003cmain className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n          \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n            \u003cdiv className=\"flex justify-center items-center py-20\"\u003e\n              \u003cLoader2 className=\"h-8 w-8 animate-spin text-purple-400\" /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/main\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  if (error) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n        \u003cNavigation /\u003e\n        \u003cmain className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n          \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n            \u003cdiv className=\"text-center py-20\"\u003e\n              \u003cp className=\"text-red-400\"\u003eError loading coaches. Please try again later.\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/main\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n      \u003cNavigation /\u003e\n      \u003cmain className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n        \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n          \u003cheader className=\"text-center mb-16\"\u003e\n            \u003ch1 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\"\u003e\n              Book a Coach\n            \u003c/h1\u003e\n            \u003cp className=\"text-xl text-gray-300 max-w-3xl mx-auto\"\u003e\n              Connect with experienced voice-over and acting coaches for personalized training and guidance.\n            \u003c/p\u003e\n          \u003c/header\u003e\n\n          {/* Sean Kanan Spotlight Banner */}\n          \u003cdiv className=\"mb-16 text-center\"\u003e\n            \u003cdiv className=\"inline-block hover:opacity-90 transition-opacity cursor-pointer\"\u003e\n              \u003cimg \n                src=\"/lovable-uploads/79296991-7232-4da1-add6-3f97dc1f6a84.png\" \n                alt=\"Sean Kanan spotlight coach - Click to view available coaches\"\n                className=\"w-1/2 h-auto object-contain rounded-lg mx-auto\"\n                onClick={() =\u003e {\n                  // Navigate to coaches page\n                  window.scrollTo({ top: 0, behavior: 'smooth' });\n                }}\n              /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          {coaches \u0026\u0026 coaches.length \u003e 0 ? (\n            \u003cdiv className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\"\u003e\n              {coaches.map((coach) =\u003e (\n                \u003cCoachCard key={coach.id} coach={coach} /\u003e\n              ))}\n            \u003c/div\u003e\n          ) : (\n            \u003cdiv className=\"text-center py-20\"\u003e\n              \u003cp className=\"text-gray-400 text-lg\"\u003eNo coaches available at the moment.\u003c/p\u003e\n            \u003c/div\u003e\n          )}\n        \u003c/div\u003e\n      \u003c/main\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default Coaches;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Contact.tsx",
//   "contents": "\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport Navigation from \"@/components/Navigation\";\nimport { Mail, Phone, MessageCircle } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nconst Contact = () =\u003e {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n  const { toast } = useToast();\n\n  useEffect(() =\u003e {\n    if (location.state) {\n      setFormData(prev =\u003e ({\n        ...prev,\n        subject: location.state.subject || \"\",\n        message: location.state.message || \"\"\n      }));\n    }\n  }, [location.state]);\n\n  const handleInputChange = (e: React.ChangeEvent\u003cHTMLInputElement | HTMLTextAreaElement\u003e) =\u003e {\n    const { name, value } = e.target;\n    setFormData(prev =\u003e ({ ...prev, [name]: value }));\n  };\n\n  const handleSendEmail = () =\u003e {\n    window.open(\"mailto:Coach@MyAuditionai.com\", \"_blank\");\n  };\n\n  const handleCallNow = () =\u003e {\n    window.open(\"tel:+17024815829\", \"_blank\");\n  };\n\n  const handleStartChat = () =\u003e {\n    toast({\n      title: \"Chat Feature\",\n      description: \"Live chat will be available soon! Please use email or phone for now.\",\n    });\n  };\n\n  const handleSendMessage = (e: React.FormEvent) =\u003e {\n    e.preventDefault();\n    \n    if (!formData.firstName || !formData.lastName || !formData.email || !formData.subject || !formData.message) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Simulate form submission\n    toast({\n      title: \"Message Sent!\",\n      description: \"Thank you for your message. We'll get back to you within 24 hours.\",\n    });\n    \n    // Reset form\n    setFormData({\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      subject: \"\",\n      message: \"\"\n    });\n  };\n\nconst handleViewFAQ = () =\u003e {\n  navigate(\"/faq\");\n};\n\n  const contactMethods = [\n    {\n      icon: Mail,\n      title: \"Email Support\",\n      description: \"Get help via email within 24 hours\",\n      contact: \"Coach@MyAuditionai.com\",\n      action: \"Send Email\",\n      handler: handleSendEmail\n    },\n    {\n      icon: Phone,\n      title: \"Phone Support\",\n      description: \"Talk to our team during business hours\",\n      contact: \"702-481-5829\",\n      action: \"Call Now\",\n      handler: handleCallNow\n    },\n    {\n      icon: MessageCircle,\n      title: \"Live Chat\",\n      description: \"Chat with us in real-time\",\n      contact: \"Available Mon-Fri 9AM-6PM PST\",\n      action: \"Start Chat\",\n      handler: handleStartChat\n    }\n  ];\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n      \u003cNavigation /\u003e\n      \n      \u003cdiv className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n        \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n          {/* Hero Section */}\n          \u003cdiv className=\"text-center mb-16\"\u003e\n            \u003ch1 className=\"text-5xl md:text-6xl font-bold mb-6\"\u003e\n              Get in{\" \"}\n              \u003cspan className=\"bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n                Touch\n              \u003c/span\u003e\n            \u003c/h1\u003e\n            \u003cp className=\"text-xl text-gray-300 max-w-3xl mx-auto\"\u003e\n              Have questions about our coaching services? Need technical support? \n              Want to discuss custom solutions for your acting studio? We're here to help.\n            \u003c/p\u003e\n          \u003c/div\u003e\n\n          {/* Contact Methods Grid */}\n          \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16\"\u003e\n            {contactMethods.map((method, index) =\u003e (\n              \u003cCard key={index} className=\"bg-gray-900/50 border-gray-700 hover:border-gray-600 transition-colors text-center h-full flex flex-col\"\u003e\n                \u003cCardHeader\u003e\n                  \u003cmethod.icon className=\"w-12 h-12 text-yellow-400 mx-auto mb-4\" /\u003e\n                  \u003cCardTitle className=\"text-white text-lg\"\u003e{method.title}\u003c/CardTitle\u003e\n                \u003c/CardHeader\u003e\n                \u003cCardContent className=\"flex-1 flex flex-col justify-between space-y-4\"\u003e\n                  \u003cdiv className=\"space-y-4\"\u003e\n                    \u003cp className=\"text-gray-400\"\u003e{method.description}\u003c/p\u003e\n                    \u003cp className=\"text-white font-medium\"\u003e{method.contact}\u003c/p\u003e\n                  \u003c/div\u003e\n                  \u003cButton \n                    variant=\"outline\" \n                    className=\"w-full bg-transparent border-yellow-500 text-yellow-400 hover:bg-yellow-500 hover:text-black transition-colors mt-auto\"\n                    onClick={method.handler}\n                  \u003e\n                    {method.action}\n                  \u003c/Button\u003e\n                \u003c/CardContent\u003e\n              \u003c/Card\u003e\n            ))}\n          \u003c/div\u003e\n\n          {/* Contact Form Section */}\n          \u003cdiv className=\"max-w-2xl mx-auto\"\u003e\n            \u003cCard className=\"bg-gray-900/50 border-gray-700\"\u003e\n              \u003cCardHeader className=\"text-center\"\u003e\n                \u003cCardTitle className=\"text-2xl font-bold text-white\"\u003eSend us a Message\u003c/CardTitle\u003e\n                \u003cp className=\"text-gray-400\"\u003eWe'll get back to you within 24 hours\u003c/p\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent className=\"space-y-6\"\u003e\n                \u003cform onSubmit={handleSendMessage}\u003e\n                  \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\"\u003e\n                    \u003cdiv\u003e\n                      \u003clabel className=\"block text-sm font-medium text-white mb-2\"\u003eFirst Name\u003c/label\u003e\n                      \u003cinput \n                        type=\"text\"\n                        name=\"firstName\"\n                        value={formData.firstName}\n                        onChange={handleInputChange}\n                        className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:outline-none focus:border-yellow-500\"\n                        placeholder=\"John\"\n                      /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n                      \u003clabel className=\"block text-sm font-medium text-white mb-2\"\u003eLast Name\u003c/label\u003e\n                      \u003cinput \n                        type=\"text\"\n                        name=\"lastName\"\n                        value={formData.lastName}\n                        onChange={handleInputChange}\n                        className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:outline-none focus:border-yellow-500\"\n                        placeholder=\"Doe\"\n                      /\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                  \n                  \u003cdiv className=\"mb-4\"\u003e\n                    \u003clabel className=\"block text-sm font-medium text-white mb-2\"\u003eEmail\u003c/label\u003e\n                    \u003cinput \n                      type=\"email\"\n                      name=\"email\"\n                      value={formData.email}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:outline-none focus:border-yellow-500\"\n                      placeholder=\"john@example.com\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \n                  \u003cdiv className=\"mb-4\"\u003e\n                    \u003clabel className=\"block text-sm font-medium text-white mb-2\"\u003eSubject\u003c/label\u003e\n                    \u003cinput \n                      type=\"text\"\n                      name=\"subject\"\n                      value={formData.subject}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:outline-none focus:border-yellow-500\"\n                      placeholder=\"How can we help you?\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \n                  \u003cdiv className=\"mb-6\"\u003e\n                    \u003clabel className=\"block text-sm font-medium text-white mb-2\"\u003eMessage\u003c/label\u003e\n                    \u003ctextarea \n                      rows={6}\n                      name=\"message\"\n                      value={formData.message}\n                      onChange={handleInputChange}\n                      className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:outline-none focus:border-yellow-500 resize-none\"\n                      placeholder=\"Tell us more about your inquiry...\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \n                  \u003cButton type=\"submit\" className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-3\"\u003e\n                    Send Message\n                  \u003c/Button\u003e\n                \u003c/form\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          \u003c/div\u003e\n\n          {/* Additional Info */}\n          \u003cdiv className=\"text-center mt-16 bg-gradient-to-r from-yellow-500/10 via-orange-500/10 to-red-500/10 rounded-lg p-8\"\u003e\n            \u003ch2 className=\"text-2xl font-bold mb-4\"\u003eFrequently Asked Questions\u003c/h2\u003e\n            \u003cp className=\"text-gray-300 mb-4\"\u003e\n              Looking for quick answers? Check out our FAQ section for common questions about \n              our services, billing, and technical support.\n            \u003c/p\u003e\n            \u003cButton variant=\"outline\" className=\"bg-transparent border-yellow-500 text-yellow-400 hover:bg-yellow-500 hover:text-black transition-colors\" onClick={handleViewFAQ}\u003e\n              View FAQ\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default Contact;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Cookies.tsx",
//   "contents": "import { useEffect, useState } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst Cookies = () =\u003e {\n  const [preferences, setPreferences] = useState({\n    essential: true, // Always required\n    analytics: true,\n    performance: true,\n    marketing: false,\n  });\n  const { toast } = useToast();\n\n  useEffect(() =\u003e {\n    // SEO meta tags\n    document.title = \"Cookie Preferences | MyAuditionAI\";\n    \n    // Meta description\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\"content\", \"Manage your cookie preferences for MyAuditionAI - Control how we use cookies to improve your experience on our platform.\");\n    } else {\n      const meta = document.createElement(\"meta\");\n      meta.name = \"description\";\n      meta.content = \"Manage your cookie preferences for MyAuditionAI - Control how we use cookies to improve your experience on our platform.\";\n      document.head.appendChild(meta);\n    }\n\n    // Canonical URL\n    const canonicalLink = document.querySelector('link[rel=\"canonical\"]');\n    if (canonicalLink) {\n      canonicalLink.setAttribute(\"href\", window.location.origin + \"/cookies\");\n    } else {\n      const link = document.createElement(\"link\");\n      link.rel = \"canonical\";\n      link.href = window.location.origin + \"/cookies\";\n      document.head.appendChild(link);\n    }\n\n    // Load saved preferences\n    const savedPreferences = localStorage.getItem('cookiePreferences');\n    if (savedPreferences) {\n      try {\n        const parsed = JSON.parse(savedPreferences);\n        setPreferences(prev =\u003e ({ ...prev, ...parsed }));\n      } catch (e) {\n        console.error('Failed to parse saved cookie preferences');\n      }\n    }\n  }, []);\n\n  const handleToggle = (type: keyof typeof preferences) =\u003e {\n    if (type === 'essential') return; // Can't disable essential cookies\n    \n    setPreferences(prev =\u003e ({\n      ...prev,\n      [type]: !prev[type],\n    }));\n  };\n\n  const savePreferences = () =\u003e {\n    localStorage.setItem('cookiePreferences', JSON.stringify(preferences));\n    toast({\n      title: \"Preferences Saved\",\n      description: \"Your cookie preferences have been updated.\",\n    });\n  };\n\n  const cookieTypes = [\n    {\n      key: 'essential' as const,\n      title: 'Essential Cookies',\n      description: 'Required for the website to function properly. These cannot be disabled.',\n      required: true,\n    },\n    {\n      key: 'analytics' as const,\n      title: 'Analytics Cookies',\n      description: 'Help us understand how visitors interact with our website.',\n      required: false,\n    },\n    {\n      key: 'performance' as const,\n      title: 'Performance Cookies',\n      description: 'Used to improve website performance and user experience.',\n      required: false,\n    },\n    {\n      key: 'marketing' as const,\n      title: 'Marketing Cookies',\n      description: 'Used to deliver personalized advertisements and marketing content.',\n      required: false,\n    },\n  ];\n\n  return (\n    \u003cmain className=\"min-h-screen bg-background\"\u003e\n      \u003cNavigation /\u003e\n      \u003cdiv className=\"pt-20 pb-12 px-4\"\u003e\n        \u003cdiv className=\"max-w-4xl mx-auto\"\u003e\n          \u003cheader className=\"mb-8\"\u003e\n            \u003ch1 className=\"text-4xl font-bold text-foreground mb-4\"\u003eCookie Preferences\u003c/h1\u003e\n            \u003cp className=\"text-muted-foreground text-lg\"\u003e\n              Manage how we use cookies to enhance your experience\n            \u003c/p\u003e\n          \u003c/header\u003e\n\n          \u003cdiv className=\"space-y-6\"\u003e\n            \u003cdiv className=\"prose prose-neutral dark:prose-invert max-w-none\"\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                Cookies are small files stored on your device that help us provide and improve our services. \n                You can control which types of cookies you allow below. Note that disabling some cookies \n                may affect website functionality.\n              \u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003cdiv className=\"grid gap-4\"\u003e\n              {cookieTypes.map((cookie) =\u003e (\n                \u003cCard key={cookie.key} className=\"border-border\"\u003e\n                  \u003cCardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\"\u003e\n                    \u003cdiv className=\"space-y-1\"\u003e\n                      \u003cCardTitle className=\"text-lg\"\u003e{cookie.title}\u003c/CardTitle\u003e\n                      \u003cCardDescription\u003e{cookie.description}\u003c/CardDescription\u003e\n                    \u003c/div\u003e\n                    \u003cSwitch\n                      checked={preferences[cookie.key]}\n                      onCheckedChange={() =\u003e handleToggle(cookie.key)}\n                      disabled={cookie.required}\n                      aria-label={`Toggle ${cookie.title}`}\n                    /\u003e\n                  \u003c/CardHeader\u003e\n                  {cookie.required \u0026\u0026 (\n                    \u003cCardContent className=\"pt-0\"\u003e\n                      \u003cp className=\"text-sm text-muted-foreground\"\u003e\n                        This type of cookie is required and cannot be disabled.\n                      \u003c/p\u003e\n                    \u003c/CardContent\u003e\n                  )}\n                \u003c/Card\u003e\n              ))}\n            \u003c/div\u003e\n\n            \u003cdiv className=\"flex justify-start pt-4\"\u003e\n              \u003cButton onClick={savePreferences} className=\"px-8\"\u003e\n                Save Preferences\n              \u003c/Button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/main\u003e\n  );\n};\n\nexport default Cookies;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Dashboard.tsx",
//   "contents": "\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport DashboardHeader from \"@/components/dashboard/DashboardHeader\";\nimport DashboardStats from \"@/components/dashboard/DashboardStats\";\nimport AuditionReportCard from \"@/components/dashboard/AuditionReportCard\";\nimport AuditionsList from \"@/components/dashboard/AuditionsList\";\nimport ScriptsList from \"@/components/dashboard/ScriptsList\";\nimport CreateAuditionDialog from \"@/components/dashboard/CreateAuditionDialog\";\nimport EditAuditionDialog from \"@/components/dashboard/EditAuditionDialog\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Audition, AuditionStats, CreateAuditionData } from \"@/types/audition\";\n\nconst Dashboard = () =\u003e {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedAudition, setSelectedAudition] = useState\u003cAudition | null\u003e(null);\n\n  // Fetch user's auditions\n  const { data: auditions = [], isLoading: auditionsLoading, refetch: refetchAuditions } = useQuery({\n    queryKey: ['auditions', user?.id],\n    queryFn: async () =\u003e {\n      if (!user) return [];\n      \n      console.log('Fetching auditions for user:', user.id);\n      \n      const { data, error } = await supabase\n        .from('auditions')\n        .select(`\n          *,\n          scripts(title, content),\n          video_submissions(id, video_title, evaluation_status)\n        `)\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Error fetching auditions:', error);\n        throw error;\n      }\n      \n      console.log('Fetched auditions:', data);\n      return data as Audition[];\n    },\n    enabled: !!user,\n  });\n\n  // Fetch user stats\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['audition-stats', user?.id],\n    queryFn: async () =\u003e {\n      if (!user) return null;\n      \n      const { data, error } = await supabase.rpc('get_user_audition_stats', {\n        user_uuid: user.id\n      });\n\n      if (error) throw error;\n      return data as unknown as AuditionStats;\n    },\n    enabled: !!user,\n  });\n\n  const handleCreateAudition = async (auditionData: CreateAuditionData) =\u003e {\n    if (!user) return;\n\n    try {\n      console.log('Creating audition with data:', auditionData);\n      \n      // Clean the data before inserting\n      const cleanedData = {\n        title: auditionData.title,\n        casting_director: auditionData.casting_director || null,\n        production_company: auditionData.production_company || null,\n        audition_date: auditionData.audition_date || null,\n        audition_type: auditionData.audition_type || 'self-tape',\n        status: auditionData.status || 'preparation',\n        notes: auditionData.notes || null,\n        script_id: auditionData.script_id || null,\n        contact_email: auditionData.contact_email || null,\n        contact_phone: auditionData.contact_phone || null,\n        contact_website: auditionData.contact_website || null,\n        submission_deadline: auditionData.submission_deadline || null,\n        reminder_enabled: auditionData.reminder_enabled ?? false,\n        reminder_time: auditionData.reminder_time || null,\n        actor_email: auditionData.actor_email || null,\n        user_id: user.id,\n      };\n\n      const { data, error } = await supabase\n        .from('auditions')\n        .insert(cleanedData)\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error creating audition:', error);\n        throw error;\n      }\n\n      console.log('Created audition:', data);\n      \n      // Send immediate confirmation email if a deadline is set and reminders are enabled\n      try {\n        if (cleanedData.submission_deadline \u0026\u0026 cleanedData.reminder_enabled) {\n          const { error: emailError } = await supabase.functions.invoke('send-audition-email', {\n            body: {\n              auditionId: data.id,\n              to: cleanedData.actor_email || user?.email || undefined,\n              test: false,\n            },\n          });\n          if (emailError) {\n            console.warn('Immediate confirmation email failed:', emailError);\n          } else {\n            toast({ title: 'Email sent', description: 'Confirmation email sent.' });\n          }\n        }\n      } catch (e) {\n        console.warn('Immediate email exception:', e);\n      }\n      \n      // Refetch auditions to show the new one\n      await refetchAuditions();\n      setIsCreateDialogOpen(false);\n      \n      toast({\n        title: \"Audition created!\",\n        description: \"Your new audition has been added to your dashboard.\",\n      });\n    } catch (error: any) {\n      console.error('Full error creating audition:', error);\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEditAudition = (audition: Audition) =\u003e {\n    setSelectedAudition(audition);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateAudition = async (id: string, auditionData: CreateAuditionData) =\u003e {\n    if (!user) return;\n\n    try {\n      const cleanedData = {\n        title: auditionData.title,\n        casting_director: auditionData.casting_director || null,\n        production_company: auditionData.production_company || null,\n        audition_date: auditionData.audition_date || null,\n        audition_type: auditionData.audition_type || 'self-tape',\n        status: auditionData.status || 'preparation',\n        notes: auditionData.notes || null,\n        contact_email: auditionData.contact_email || null,\n        contact_phone: auditionData.contact_phone || null,\n        contact_website: auditionData.contact_website || null,\n        submission_deadline: auditionData.submission_deadline || null,\n        reminder_enabled: auditionData.reminder_enabled ?? false,\n        reminder_time: auditionData.reminder_time || null,\n        actor_email: auditionData.actor_email || null,\n      };\n\n      const { error } = await supabase\n        .from('auditions')\n        .update(cleanedData)\n        .eq('id', id)\n        .eq('user_id', user.id);\n\n      if (error) throw error;\n\n      // Send immediate confirmation email if a deadline is set and reminders are enabled\n      try {\n        if (cleanedData.submission_deadline \u0026\u0026 cleanedData.reminder_enabled) {\n          const { error: emailError } = await supabase.functions.invoke('send-audition-email', {\n            body: {\n              auditionId: id,\n              to: cleanedData.actor_email || user?.email || undefined,\n              test: false,\n            },\n          });\n          if (emailError) {\n            console.warn('Immediate confirmation email (update) failed:', emailError);\n          } else {\n            toast({ title: 'Email sent', description: 'Confirmation email sent.' });\n          }\n        }\n      } catch (e) {\n        console.warn('Immediate email (update) exception:', e);\n      }\n\n      await refetchAuditions();\n      setIsEditDialogOpen(false);\n      setSelectedAudition(null);\n      \n      toast({\n        title: \"Audition updated!\",\n        description: \"Your audition has been successfully updated.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    \u003cProtectedRoute\u003e\n      \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n        \u003cNavigation /\u003e\n        \n        \u003cdiv className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n          \u003cdiv className=\"max-w-7xl mx-auto space-y-8\"\u003e\n            \u003cDashboardHeader \n              userName={user?.user_metadata?.full_name || user?.email || 'Actor'}\n              onCreateAudition={() =\u003e setIsCreateDialogOpen(true)}\n            /\u003e\n\n            \u003cDashboardStats \n              stats={stats} \n              isLoading={statsLoading} \n            /\u003e\n\n            \u003cAuditionReportCard defaultEmail={user?.email || ''} /\u003e\n\n            \u003cTabs defaultValue=\"auditions\" className=\"w-full\"\u003e\n              \u003cTabsList className=\"grid w-full grid-cols-2 bg-gray-800 border-gray-700\"\u003e\n                \u003cTabsTrigger \n                  value=\"auditions\" \n                  className=\"data-[state=active]:bg-purple-600 data-[state=active]:text-white text-gray-300\"\n                \u003e\n                  Auditions\n                \u003c/TabsTrigger\u003e\n                \u003cTabsTrigger \n                  value=\"scripts\" \n                  className=\"data-[state=active]:bg-purple-600 data-[state=active]:text-white text-gray-300\"\n                \u003e\n                  Scripts\n                \u003c/TabsTrigger\u003e\n              \u003c/TabsList\u003e\n              \n              \u003cTabsContent value=\"auditions\" className=\"mt-6\"\u003e\n                \u003cAuditionsList \n                  auditions={auditions}\n                  isLoading={auditionsLoading}\n                  onRefetch={refetchAuditions}\n                  onEditAudition={handleEditAudition}\n                /\u003e\n              \u003c/TabsContent\u003e\n              \n              \u003cTabsContent value=\"scripts\" className=\"mt-6\"\u003e\n                \u003cScriptsList /\u003e\n              \u003c/TabsContent\u003e\n            \u003c/Tabs\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cCreateAuditionDialog\n          isOpen={isCreateDialogOpen}\n          onClose={() =\u003e setIsCreateDialogOpen(false)}\n          onCreateAudition={handleCreateAudition}\n        /\u003e\n\n        \u003cEditAuditionDialog\n          isOpen={isEditDialogOpen}\n          onClose={() =\u003e {\n            setIsEditDialogOpen(false);\n            setSelectedAudition(null);\n          }}\n          onUpdateAudition={handleUpdateAudition}\n          audition={selectedAudition}\n        /\u003e\n      \u003c/div\u003e\n    \u003c/ProtectedRoute\u003e\n  );\n};\n\nexport default Dashboard;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/FAQ.tsx",
//   "contents": "import Navigation from \"@/components/Navigation\";\nimport FAQSection from \"@/components/FAQSection\";\nimport { useEffect } from \"react\";\n\nexport default function FAQ() {\n  useEffect(() =\u003e {\n    const title = \"FAQ | MyAuditionAI\";\n    const description =\n      \"Answers about scene analysis, video evaluation, privacy, and membership.\";\n    document.title = title;\n\n    // Meta description\n    let metaDesc = document.querySelector('meta[name=\"description\"]');\n    if (!metaDesc) {\n      metaDesc = document.createElement(\"meta\");\n      metaDesc.setAttribute(\"name\", \"description\");\n      document.head.appendChild(metaDesc);\n    }\n    metaDesc.setAttribute(\"content\", description);\n\n    // Canonical tag\n    let link = document.querySelector('link[rel=\"canonical\"]') as HTMLLinkElement | null;\n    if (!link) {\n      link = document.createElement(\"link\");\n      link.setAttribute(\"rel\", \"canonical\");\n      document.head.appendChild(link);\n    }\n    link.setAttribute(\"href\", window.location.href);\n\n    // FAQPage JSON-LD\n    const script = document.createElement(\"script\");\n    script.type = \"application/ld+json\";\n    script.text = JSON.stringify({\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"FAQPage\",\n      mainEntity: [\n        {\n          \"@type\": \"Question\",\n          name: \"How does Scene Analysis work?\",\n          acceptedAnswer: {\n            \"@type\": \"Answer\",\n            text:\n              \"Upload a PDF or paste your text. Our AI extracts characters, beats, and notes. You can manage results in your Dashboard and export reports as PDF.\",\n          },\n        },\n        {\n          \"@type\": \"Question\",\n          name: \"Is my data private?\",\n          acceptedAnswer: {\n            \"@type\": \"Answer\",\n            text:\n              \"We never sell your data. Your uploads are secured via our Supabase backend. You control your content and can delete items in Dashboard.\",\n          },\n        },\n      ],\n    });\n    document.head.appendChild(script);\n\n    return () =\u003e {\n      if (script.parentNode) script.parentNode.removeChild(script);\n    };\n  }, []);\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n      \u003cNavigation /\u003e\n      \u003cmain className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\" role=\"main\"\u003e\n        \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n          \u003cheader className=\"text-center mb-10\"\u003e\n            \u003ch1 className=\"text-5xl md:text-6xl font-bold mb-4\"\u003eFrequently Asked Questions\u003c/h1\u003e\n            \u003cp className=\"text-gray-300 max-w-3xl mx-auto\"\u003e\n              Quick answers about Scene Analysis, Video Evaluation, privacy, and membership.\n            \u003c/p\u003e\n          \u003c/header\u003e\n\n          \u003carticle className=\"bg-gray-900/50 border border-gray-700 rounded-xl p-6\" aria-label=\"FAQ list\"\u003e\n            \u003cFAQSection compact={false} showQuestionBox className=\"\" /\u003e\n          \u003c/article\u003e\n        \u003c/div\u003e\n      \u003c/main\u003e\n    \u003c/div\u003e\n  );\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/HeadshotEvaluation.tsx",
//   "contents": "import { useParams, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, Star, MapPin, Phone, Globe, Instagram, Download } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { generateHeadshotAnalysisPDF } from \"@/utils/pdfGenerator\";\n\ninterface HeadshotAnalysis {\n  id: string;\n  image_url: string;\n  headshot_type: string;\n  overall_score: number;\n  technical_score: number;\n  professional_score: number;\n  industry_score: number;\n  detailed_feedback: {\n    full_analysis: string;\n    casting_types: string[];\n    red_flags: string[];\n    final_verdict: string;\n  };\n  improvement_suggestions: string[];\n  created_at: string;\n}\n\ninterface Photographer {\n  id: string;\n  name: string;\n  business_name?: string;\n  website?: string;\n  instagram?: string;\n  city: string;\n  state: string;\n  specialties: string[];\n  price_range?: string;\n  bio?: string;\n  rating?: number;\n  total_reviews: number;\n  verified: boolean;\n}\n\nexport default function HeadshotEvaluation() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [analysis, setAnalysis] = useState\u003cHeadshotAnalysis | null\u003e(null);\n  const [photographers, setPhotographers] = useState\u003cPhotographer[]\u003e([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =\u003e {\n    if (id) {\n      fetchAnalysis();\n      fetchPhotographers();\n    }\n  }, [id]);\n\n  const fetchAnalysis = async () =\u003e {\n    try {\n      const { data, error } = await supabase\n        .from('headshot_analyses')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n      \n      // Type cast the database response to match our interface\n      const analysisData = data as any;\n      const typedAnalysis: HeadshotAnalysis = {\n        id: analysisData.id,\n        image_url: analysisData.image_url,\n        headshot_type: analysisData.headshot_type,\n        overall_score: analysisData.overall_score,\n        technical_score: analysisData.technical_score,\n        professional_score: analysisData.professional_score,\n        industry_score: analysisData.industry_score,\n        detailed_feedback: analysisData.detailed_feedback as {\n          full_analysis: string;\n          casting_types: string[];\n          red_flags: string[];\n          final_verdict: string;\n        },\n        improvement_suggestions: analysisData.improvement_suggestions || [],\n        created_at: analysisData.created_at,\n      };\n      \n      setAnalysis(typedAnalysis);\n    } catch (error) {\n      console.error('Error fetching analysis:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load headshot analysis\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const fetchPhotographers = async () =\u003e {\n    try {\n      const { data, error } = await supabase\n        .rpc('get_public_photographers', { limit_count: 4 });\n\n      if (error) throw error;\n      setPhotographers(data || []);\n    } catch (error) {\n      console.error('Error fetching photographers:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getScoreColor = (score: number) =\u003e {\n    if (score \u003e= 80) return \"text-emerald-600\";\n    if (score \u003e= 60) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getScoreBadgeVariant = (score: number) =\u003e {\n    if (score \u003e= 80) return \"default\";\n    if (score \u003e= 60) return \"secondary\";\n    return \"destructive\";\n  };\n\n  // Helper to clean and parse analysis text\n  const sanitizeAnalysisText = (text: string) =\u003e {\n    return text.replace(/```json[\\s\\S]*?```/g, '').trim();\n  };\n\n  // Helper to parse analysis into sections\n  const parseAnalysisIntoSections = (analysisText: string) =\u003e {\n    const sanitized = sanitizeAnalysisText(analysisText);\n    const sections = [];\n    \n    // Split by emoji-led headings\n    const lines = sanitized.split('\\n');\n    let currentSection = null;\n    \n    for (const line of lines) {\n      const trimmed = line.trim();\n      if (!trimmed) continue;\n      \n      // Check for emoji-led section headers\n      if (trimmed.match(/^[⭐️🎭📸🧠💡⚠️✨🎯📝]/)) {\n        if (currentSection) sections.push(currentSection);\n        currentSection = {\n          title: trimmed,\n          content: []\n        };\n      } else if (currentSection) {\n        currentSection.content.push(trimmed);\n      } else {\n        // First section without emoji header\n        if (!currentSection) {\n          currentSection = { title: \"📋 Analysis Overview\", content: [] };\n        }\n        currentSection.content.push(trimmed);\n      }\n    }\n    \n    if (currentSection) sections.push(currentSection);\n    return sections;\n  };\n\n  // Helper to convert text to bullet points\n  const bulletizeContent = (content: string[]) =\u003e {\n    return content.map(item =\u003e {\n      const trimmed = item.trim();\n      if (trimmed.startsWith('-') || trimmed.startsWith('•') || trimmed.startsWith('*')) {\n        return trimmed;\n      }\n      return `• ${trimmed}`;\n    });\n  };\n\n  // Helper to copy photographer brief\n  const copyPhotographerBrief = () =\u003e {\n    const brief = `Headshot Photography Instructions\n\nBased on professional analysis of my current headshot, here are specific directions for our upcoming session:\n\nIMPROVEMENT AREAS:\n${analysis?.improvement_suggestions?.map(suggestion =\u003e `• ${suggestion}`).join('\\n') || '• General professional improvements needed'}\n\nRED FLAGS TO AVOID:\n${analysis?.detailed_feedback.red_flags?.map(flag =\u003e `• ${flag}`).join('\\n') || '• No specific issues noted'}\n\nCASTING TYPES TO CAPTURE:\n${analysis?.detailed_feedback.casting_types?.map(type =\u003e `• ${type}`).join('\\n') || '• Commercial and theatrical looks'}\n\nTECHNICAL REQUIREMENTS:\n• Sharp focus on eyes (critical)\n• Professional lighting (no harsh shadows)\n• Mid-chest to top of head framing\n• Clean background with appropriate bokeh\n• Natural, authentic expression\n• Current industry standards for ${analysis?.headshot_type} headshots\n\nPlease ensure we capture looks that are industry-ready and casting-director approved for ${new Date().getFullYear()}.`;\n\n    navigator.clipboard.writeText(brief).then(() =\u003e {\n      toast({\n        title: \"Brief Copied!\",\n        description: \"Photographer instructions copied to clipboard\",\n      });\n    }).catch(() =\u003e {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Please manually copy the text\",\n        variant: \"destructive\"\n      });\n    });\n  };\n\n  // Helper to generate PDF\n  const handleDownloadPDF = () =\u003e {\n    if (!analysis) return;\n    \n    try {\n      generateHeadshotAnalysisPDF({ analysis });\n      toast({\n        title: \"PDF Generated!\",\n        description: \"Your headshot analysis report has been downloaded\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Unable to generate PDF report\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const renderStarRating = (rating?: number) =\u003e {\n    if (!rating) return null;\n    return (\n      \u003cdiv className=\"flex items-center gap-1\"\u003e\n        {[...Array(5)].map((_, i) =\u003e (\n          \u003cStar\n            key={i}\n            className={`h-4 w-4 ${\n              i \u003c Math.floor(rating) \n                ? \"fill-yellow-400 text-yellow-400\" \n                : \"text-gray-300\"\n            }`}\n          /\u003e\n        ))}\n        \u003cspan className=\"text-sm text-muted-foreground ml-1\"\u003e\n          {rating.toFixed(1)} ({photographers.find(p =\u003e p.rating === rating)?.total_reviews || 0} reviews)\n        \u003c/span\u003e\n      \u003c/div\u003e\n    );\n  };\n\n  if (loading) {\n    return (\n      \u003cdiv className=\"min-h-screen flex items-center justify-center\"\u003e\n        \u003cdiv className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"\u003e\u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  if (!analysis) {\n    return (\n      \u003cdiv className=\"min-h-screen flex items-center justify-center\"\u003e\n        \u003cCard className=\"max-w-md\"\u003e\n          \u003cCardHeader\u003e\n            \u003cCardTitle\u003eAnalysis Not Found\u003c/CardTitle\u003e\n            \u003cCardDescription\u003e\n              The headshot analysis you're looking for doesn't exist or has been deleted.\n            \u003c/CardDescription\u003e\n          \u003c/CardHeader\u003e\n          \u003cCardContent\u003e\n            \u003cButton onClick={() =\u003e navigate('/self-taping')} className=\"w-full\"\u003e\n              Back to Headshot Grader\n            \u003c/Button\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-background\"\u003e\n      \u003cdiv className=\"container mx-auto px-4 py-8\"\u003e\n        \u003cButton \n          variant=\"ghost\" \n          onClick={() =\u003e navigate('/self-taping')}\n          className=\"mb-6\"\n        \u003e\n          \u003cArrowLeft className=\"h-4 w-4 mr-2\" /\u003e\n          Back to Headshot Grader\n        \u003c/Button\u003e\n\n        \u003cdiv className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\"\u003e\n          {/* Full Size Image */}\n          \u003cdiv className=\"space-y-4\"\u003e\n            \u003cCard\u003e\n              \u003cCardHeader\u003e\n                \u003cCardTitle className=\"flex items-center justify-between\"\u003e\n                  Your Headshot\n                  \u003cBadge variant={analysis.headshot_type === 'commercial' ? 'default' : 'secondary'}\u003e\n                    {analysis.headshot_type}\n                  \u003c/Badge\u003e\n                \u003c/CardTitle\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent className=\"p-0\"\u003e\n                \u003cimg\n                  src={analysis.image_url}\n                  alt=\"Headshot being evaluated\"\n                  className=\"w-full h-auto rounded-b-lg\"\n                /\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          \u003c/div\u003e\n\n          {/* Analysis Results */}\n          \u003cdiv className=\"space-y-6\"\u003e\n            {/* Overall Scores */}\n            \u003cCard\u003e\n              \u003cCardHeader\u003e\n                \u003cdiv className=\"flex items-center justify-between\"\u003e\n                  \u003cdiv\u003e\n                    \u003cCardTitle\u003eProfessional Analysis\u003c/CardTitle\u003e\n                    \u003cCardDescription\u003ePowered by Google Gemini Pro Vision\u003c/CardDescription\u003e\n                  \u003c/div\u003e\n                  \u003cButton\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleDownloadPDF}\n                    className=\"flex items-center gap-2\"\n                  \u003e\n                    \u003cDownload className=\"h-4 w-4\" /\u003e\n                    Download PDF\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent className=\"space-y-4\"\u003e\n                \u003cdiv className=\"grid grid-cols-2 gap-4\"\u003e\n                  \u003cdiv className=\"text-center\"\u003e\n                    \u003cdiv className={`text-3xl font-bold ${getScoreColor(analysis.overall_score)}`}\u003e\n                      {analysis.overall_score}%\n                    \u003c/div\u003e\n                    \u003cdiv className=\"text-sm text-muted-foreground\"\u003eOverall\u003c/div\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"text-center\"\u003e\n                    \u003cdiv className={`text-3xl font-bold ${getScoreColor(analysis.technical_score)}`}\u003e\n                      {analysis.technical_score}%\n                    \u003c/div\u003e\n                    \u003cdiv className=\"text-sm text-muted-foreground\"\u003eTechnical\u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"grid grid-cols-2 gap-4\"\u003e\n                  \u003cdiv className=\"text-center\"\u003e\n                    \u003cdiv className={`text-3xl font-bold ${getScoreColor(analysis.professional_score)}`}\u003e\n                      {analysis.professional_score}%\n                    \u003c/div\u003e\n                    \u003cdiv className=\"text-sm text-muted-foreground\"\u003eProfessional\u003c/div\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"text-center\"\u003e\n                    \u003cdiv className={`text-3xl font-bold ${getScoreColor(analysis.industry_score)}`}\u003e\n                      {analysis.industry_score}%\n                    \u003c/div\u003e\n                    \u003cdiv className=\"text-sm text-muted-foreground\"\u003eIndustry Ready\u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n\n            {/* Casting Types */}\n            {analysis.detailed_feedback.casting_types?.length \u003e 0 \u0026\u0026 (\n              \u003cCard\u003e\n                \u003cCardHeader\u003e\n                  \u003cCardTitle\u003eCasting Types\u003c/CardTitle\u003e\n                  \u003cCardDescription\u003eRoles this headshot could book\u003c/CardDescription\u003e\n                \u003c/CardHeader\u003e\n                \u003cCardContent\u003e\n                  \u003cdiv className=\"flex flex-wrap gap-2\"\u003e\n                    {analysis.detailed_feedback.casting_types.map((type, index) =\u003e (\n                      \u003cBadge key={index} variant=\"outline\"\u003e\n                        {type}\n                      \u003c/Badge\u003e\n                    ))}\n                  \u003c/div\u003e\n                \u003c/CardContent\u003e\n              \u003c/Card\u003e\n            )}\n\n            {/* Final Verdict */}\n            \u003cCard\u003e\n              \u003cCardHeader\u003e\n                \u003cCardTitle\u003eProfessional Verdict\u003c/CardTitle\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent\u003e\n                \u003cp className=\"text-muted-foreground\"\u003e\n                  {analysis.detailed_feedback.final_verdict}\n                \u003c/p\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n\n            {/* Improvement Suggestions */}\n            {analysis.improvement_suggestions?.length \u003e 0 \u0026\u0026 (\n              \u003cCard\u003e\n                \u003cCardHeader\u003e\n                  \u003cCardTitle\u003ePhotographer Instructions\u003c/CardTitle\u003e\n                  \u003cCardDescription\u003e\n                    Share these specific instructions with your photographer for your next shoot\n                  \u003c/CardDescription\u003e\n                \u003c/CardHeader\u003e\n                \u003cCardContent\u003e\n                  \u003cul className=\"space-y-2\"\u003e\n                    {analysis.improvement_suggestions.map((suggestion, index) =\u003e (\n                      \u003cli key={index} className=\"flex items-start gap-2\"\u003e\n                        \u003cdiv className=\"w-2 h-2 rounded-full bg-primary mt-2 flex-shrink-0\" /\u003e\n                        \u003cspan\u003e{suggestion}\u003c/span\u003e\n                      \u003c/li\u003e\n                    ))}\n                  \u003c/ul\u003e\n                \u003c/CardContent\u003e\n              \u003c/Card\u003e\n            )}\n\n            {/* Red Flags */}\n            {analysis.detailed_feedback.red_flags?.length \u003e 0 \u0026\u0026 (\n              \u003cCard className=\"border-destructive/50\"\u003e\n                \u003cCardHeader\u003e\n                  \u003cCardTitle className=\"text-destructive\"\u003eAreas of Concern\u003c/CardTitle\u003e\n                  \u003cCardDescription\u003eIssues that may affect casting success\u003c/CardDescription\u003e\n                \u003c/CardHeader\u003e\n                \u003cCardContent\u003e\n                  \u003cul className=\"space-y-2\"\u003e\n                    {analysis.detailed_feedback.red_flags.map((flag, index) =\u003e (\n                      \u003cli key={index} className=\"flex items-start gap-2\"\u003e\n                        \u003cdiv className=\"w-2 h-2 rounded-full bg-destructive mt-2 flex-shrink-0\" /\u003e\n                        \u003cspan\u003e{flag}\u003c/span\u003e\n                      \u003c/li\u003e\n                    ))}\n                  \u003c/ul\u003e\n                \u003c/CardContent\u003e\n              \u003c/Card\u003e\n            )}\n          \u003c/div\u003e\n        \u003c/div\u003e\n\n        {/* Recommended Photographers */}\n        {photographers.length \u003e 0 \u0026\u0026 (\n          \u003cdiv className=\"mt-12\"\u003e\n            \u003cCard\u003e\n              \u003cCardHeader\u003e\n                \u003cCardTitle\u003eRecommended Headshot Photographers\u003c/CardTitle\u003e\n                \u003cCardDescription\u003e\n                  Professional photographers in your area who specialize in actor headshots\n                \u003c/CardDescription\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent\u003e\n                \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 gap-6\"\u003e\n                  {photographers.map((photographer) =\u003e (\n                    \u003cCard key={photographer.id} className=\"border\"\u003e\n                      \u003cCardHeader className=\"pb-3\"\u003e\n                        \u003cdiv className=\"flex items-start justify-between\"\u003e\n                          \u003cdiv\u003e\n                            \u003cCardTitle className=\"text-lg\"\u003e{photographer.name}\u003c/CardTitle\u003e\n                            {photographer.business_name \u0026\u0026 (\n                              \u003cCardDescription\u003e{photographer.business_name}\u003c/CardDescription\u003e\n                            )}\n                            \u003cdiv className=\"flex items-center gap-2 mt-1\"\u003e\n                              \u003cMapPin className=\"h-4 w-4 text-muted-foreground\" /\u003e\n                              \u003cspan className=\"text-sm text-muted-foreground\"\u003e\n                                {photographer.city}, {photographer.state}\n                              \u003c/span\u003e\n                            \u003c/div\u003e\n                          \u003c/div\u003e\n                          {photographer.verified \u0026\u0026 (\n                            \u003cBadge variant=\"default\" className=\"text-xs\"\u003e\n                              Verified\n                            \u003c/Badge\u003e\n                          )}\n                        \u003c/div\u003e\n                        {photographer.rating \u0026\u0026 renderStarRating(photographer.rating)}\n                      \u003c/CardHeader\u003e\n                      \u003cCardContent className=\"space-y-3\"\u003e\n                        {photographer.specialties.length \u003e 0 \u0026\u0026 (\n                          \u003cdiv className=\"flex flex-wrap gap-1\"\u003e\n                            {photographer.specialties.slice(0, 3).map((specialty, idx) =\u003e (\n                              \u003cBadge key={idx} variant=\"outline\" className=\"text-xs\"\u003e\n                                {specialty}\n                              \u003c/Badge\u003e\n                            ))}\n                          \u003c/div\u003e\n                        )}\n                        \n                        {photographer.price_range \u0026\u0026 (\n                          \u003cp className=\"text-sm font-medium text-primary\"\u003e\n                            {photographer.price_range}\n                          \u003c/p\u003e\n                        )}\n                        \n                        {photographer.bio \u0026\u0026 (\n                          \u003cp className=\"text-sm text-muted-foreground line-clamp-3\"\u003e\n                            {photographer.bio}\n                          \u003c/p\u003e\n                        )}\n                        \n                        \u003cSeparator /\u003e\n                        \n                        \u003cdiv className=\"flex items-center gap-4 text-sm\"\u003e\n                          {photographer.website \u0026\u0026 (\n                            \u003ca \n                              href={photographer.website}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"flex items-center gap-1 text-muted-foreground hover:text-foreground\"\n                            \u003e\n                              \u003cGlobe className=\"h-3 w-3\" /\u003e\n                              Website\n                            \u003c/a\u003e\n                          )}\n                          {photographer.instagram \u0026\u0026 (\n                            \u003ca \n                              href={photographer.instagram}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"flex items-center gap-1 text-muted-foreground hover:text-foreground\"\n                            \u003e\n                              \u003cInstagram className=\"h-3 w-3\" /\u003e\n                              Instagram\n                            \u003c/a\u003e\n                          )}\n                        \u003c/div\u003e\n                        \n                        \u003cButton \n                          className=\"w-full\"\n                          onClick={() =\u003e {\n                            // Contact requires authentication - redirect to sign up\n                            window.location.href = '/auth';\n                          }}\n                        \u003e\n                          Sign up to Contact\n                        \u003c/Button\u003e\n                      \u003c/CardContent\u003e\n                    \u003c/Card\u003e\n                  ))}\n                \u003c/div\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          \u003c/div\u003e\n        )}\n\n        {/* Enhanced Dynamic Analysis Report */}\n        \u003cdiv className=\"mt-8\"\u003e\n          \u003cCard\u003e\n            \u003cCardHeader\u003e\n              \u003cCardTitle className=\"flex items-center justify-between\"\u003e\n                Professional Headshot Analysis Report\n                \u003cButton \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={copyPhotographerBrief}\n                  className=\"ml-4\"\n                \u003e\n                  📋 Copy Photographer Brief\n                \u003c/Button\u003e\n              \u003c/CardTitle\u003e\n              \u003cCardDescription\u003eDetailed evaluation by industry professionals\u003c/CardDescription\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent className=\"space-y-6\"\u003e\n              {parseAnalysisIntoSections(analysis.detailed_feedback.full_analysis).map((section, index) =\u003e (\n                \u003cdiv key={index} className=\"space-y-3\"\u003e\n                  \u003ch3 className=\"text-lg font-semibold text-foreground\"\u003e\n                    {section.title}\n                  \u003c/h3\u003e\n                  \u003cdiv className=\"bg-muted/50 rounded-lg p-4\"\u003e\n                    \u003cul className=\"space-y-2\"\u003e\n                      {bulletizeContent(section.content).map((point, pointIndex) =\u003e (\n                        \u003cli key={pointIndex} className=\"text-sm leading-relaxed\"\u003e\n                          {point}\n                        \u003c/li\u003e\n                      ))}\n                    \u003c/ul\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              ))}\n              \n              {/* Quick Action Summary */}\n              \u003cdiv className=\"mt-6 p-4 bg-primary/10 rounded-lg border border-primary/20\"\u003e\n                \u003ch4 className=\"font-semibold text-primary mb-2\"\u003e🎯 Next Steps\u003c/h4\u003e\n                \u003cdiv className=\"grid md:grid-cols-2 gap-4 text-sm\"\u003e\n                  \u003cdiv\u003e\n                    \u003cp className=\"font-medium mb-1\"\u003e✅ Strengths to Keep:\u003c/p\u003e\n                    \u003cul className=\"list-disc list-inside text-muted-foreground\"\u003e\n                      {analysis.detailed_feedback.casting_types.map((type, i) =\u003e (\n                        \u003cli key={i}\u003e{type} appeal\u003c/li\u003e\n                      ))}\n                    \u003c/ul\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cp className=\"font-medium mb-1\"\u003e🔧 Priority Improvements:\u003c/p\u003e\n                    \u003cul className=\"list-disc list-inside text-muted-foreground\"\u003e\n                      {analysis.improvement_suggestions.slice(0, 3).map((suggestion, i) =\u003e (\n                        \u003cli key={i}\u003e{suggestion}\u003c/li\u003e\n                      ))}\n                    \u003c/ul\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n        \u003c/div\u003e\n\n        {/* Bottom Download PDF Button */}\n        \u003cdiv className=\"mt-8 text-center\"\u003e\n          \u003cButton \n            onClick={handleDownloadPDF}\n            size=\"lg\"\n            className=\"flex items-center gap-2\"\n          \u003e\n            \u003cDownload className=\"h-5 w-5\" /\u003e\n            Download Complete Analysis PDF\n          \u003c/Button\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n}",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Index.tsx",
//   "contents": "\nimport Navigation from \"@/components/Navigation\";\nimport Hero from \"@/components/Hero\";\nimport PromoBanner from \"@/components/PromoBanner\";\nimport MethodologySection from \"@/components/MethodologySection\";\nimport CTASection from \"@/components/CTASection\";\nimport TestimonialsMarquee from \"@/components/TestimonialsMarquee\";\n\nconst Index = () =\u003e {\n  return (\n    \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n      \u003cNavigation /\u003e\n      \u003cdiv className=\"h-16\"\u003e\u003c/div\u003e\n      \u003cHero /\u003e\n      \u003cPromoBanner /\u003e\n      \u003cMethodologySection /\u003e\n      \u003cCTASection /\u003e\n      \u003cTestimonialsMarquee variant=\"launchDark\" /\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default Index;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/IndividualScriptAnalysis.tsx",
//   "contents": "import { useParams, useNavigate, useSearchParams } from \"react-router-dom\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport Navigation from \"@/components/Navigation\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport ScriptAnalysisHeader from \"@/components/ScriptAnalysisHeader\";\nimport ScriptAnalysisWorkflowSteps from \"@/components/ScriptAnalysisWorkflowSteps\";\nimport ScriptTextEditor from \"@/components/ScriptTextEditor\";\nimport ScriptAnalyzer from \"@/components/ScriptAnalyzer\";\nimport AnalysisResults from \"@/components/AnalysisResults\";\nimport CoachingSession from \"@/components/CoachingSession\";\nimport VideoUpload from \"@/components/VideoUpload\";\nimport VideoEvaluation from \"@/components/VideoEvaluation\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, AlertCircle, Edit } from \"lucide-react\";\n\ntype AnalysisStep = 'upload' | 'analyze' | 'results' | 'coaching' | 'video-upload' | 'video-evaluation';\n\nconst IndividualScriptAnalysis = () =\u003e {\n  const { scriptId } = useParams\u003c{ scriptId: string }\u003e();\n  const { user, signOut } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [searchParams] = useSearchParams();\n  const [currentStep, setCurrentStep] = useState\u003cAnalysisStep\u003e('analyze');\n  const [currentAnalysisId, setCurrentAnalysisId] = useState\u003cstring\u003e('');\n  const [currentAnalysis, setCurrentAnalysis] = useState\u003cany\u003e(null);\n  const [currentCoachingSessionId, setCurrentCoachingSessionId] = useState\u003cstring\u003e('');\n  const [currentVideoId, setCurrentVideoId] = useState\u003cstring\u003e('');\n  const [currentScriptContent, setCurrentScriptContent] = useState\u003cstring\u003e('');\n\n  // Fetch script data and verify ownership\n  const { data: script, isLoading: scriptLoading, error: scriptError } = useQuery({\n    queryKey: ['script', scriptId, user?.id],\n    queryFn: async () =\u003e {\n      if (!user || !scriptId) return null;\n      \n      const { data, error } = await supabase\n        .from('scripts')\n        .select('*')\n        .eq('id', scriptId)\n        .eq('user_id', user.id)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n    enabled: !!user \u0026\u0026 !!scriptId,\n  });\n\n  // Fetch existing analysis for this script\n  const { data: existingAnalysis, isLoading: analysisLoading } = useQuery({\n    queryKey: ['script-analysis', scriptId, user?.id],\n    queryFn: async () =\u003e {\n      if (!user || !scriptId) return null;\n      \n      const { data, error } = await supabase\n        .from('script_analyses')\n        .select('*')\n        .eq('script_id', scriptId)\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false })\n        .limit(1);\n\n      if (error) throw error;\n      return data?.[0] || null;\n    },\n    enabled: !!user \u0026\u0026 !!scriptId,\n  });\n\n  // Set up the analysis state when data is loaded\n  useEffect(() =\u003e {\n    if (existingAnalysis) {\n      setCurrentAnalysisId(existingAnalysis.id);\n      setCurrentAnalysis(existingAnalysis);\n      \n      // Check for step parameter in URL\n      const stepParam = searchParams.get('step') as AnalysisStep;\n      if (stepParam \u0026\u0026 ['analyze', 'results', 'coaching', 'video-upload', 'video-evaluation'].includes(stepParam)) {\n        setCurrentStep(stepParam);\n      } else {\n        setCurrentStep('results');\n      }\n    }\n  }, [existingAnalysis, searchParams]);\n\n  const handleSignOut = async () =\u003e {\n    const { error } = await signOut();\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      navigate('/');\n      toast({\n        title: \"Signed out\",\n        description: \"You've been signed out successfully.\",\n      });\n    }\n  };\n\n  const resetWorkflow = () =\u003e {\n    navigate('/analysis');\n  };\n\n  const handleAnalysisComplete = async (analysisId: string) =\u003e {\n    setCurrentAnalysisId(analysisId);\n    \n    try {\n      const { data: analysisData, error } = await supabase\n        .from('script_analyses')\n        .select('*')\n        .eq('id', analysisId)\n        .single();\n\n      if (error) {\n        console.error('Error fetching analysis:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load analysis results.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setCurrentAnalysis(analysisData);\n      setCurrentStep('results');\n      toast({\n        title: \"Analysis complete!\",\n        description: \"Your scene analysis is ready.\",\n      });\n    } catch (error) {\n      console.error('Error in handleAnalysisComplete:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load analysis results.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleStartCoaching = () =\u003e {\n    setCurrentStep('coaching');\n    toast({\n      title: \"Starting coaching session!\",\n      description: \"Your personalized coaching session is ready.\",\n    });\n  };\n\n  const handleCoachingSessionCreated = (coachingSessionId: string) =\u003e {\n    setCurrentCoachingSessionId(coachingSessionId);\n  };\n\n  const handleStartVideoUpload = () =\u003e {\n    setCurrentStep('video-upload');\n    toast({\n      title: \"Ready for video upload!\",\n      description: \"Upload your audition video for evaluation.\",\n    });\n  };\n\n  const handleVideoUploaded = (videoId: string) =\u003e {\n    setCurrentVideoId(videoId);\n    setCurrentStep('video-evaluation');\n    toast({\n      title: \"Video uploaded successfully!\",\n      description: \"Your audition video is being evaluated.\",\n    });\n  };\n\n  const handleScriptContentChange = async (content: string) =\u003e {\n    setCurrentScriptContent(content);\n    \n    // If we have content but no script in database, create one\n    if (content \u0026\u0026 content.trim() \u0026\u0026 !script \u0026\u0026 scriptId \u0026\u0026 user) {\n      try {\n        const { data, error } = await supabase\n          .from('scripts')\n          .insert({\n            id: scriptId,\n            user_id: user.id,\n            title: 'Uploaded Script',\n            content: content,\n            characters: extractCharactersFromContent(content)\n          })\n          .select()\n          .single();\n\n        if (error) throw error;\n        \n        toast({\n          title: \"Script Saved\",\n          description: \"Your script has been saved to the database.\",\n        });\n        \n        // Refetch the script data\n        window.location.reload();\n      } catch (error: any) {\n        console.error('Error saving script:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to save script to database.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  // Helper function to extract characters from content\n  const extractCharactersFromContent = (text: string): string[] =\u003e {\n    const characterSet = new Set\u003cstring\u003e();\n    \n    // Method 1: Character names followed by colons (most common in scripts)\n    const dialogueMatches = text.match(/^[A-Z][A-Z\\s\\-'\\.]+:/gm);\n    if (dialogueMatches) {\n      dialogueMatches.forEach(match =\u003e {\n        const name = match.replace(':', '').trim();\n        if (name.length \u003e 1 \u0026\u0026 name.length \u003c 30 \u0026\u0026 \n            !name.includes('FADE') \u0026\u0026 !name.includes('CUT') \u0026\u0026 \n            !name.includes('INT') \u0026\u0026 !name.includes('EXT')) {\n          characterSet.add(name);\n        }\n      });\n    }\n    \n    // Method 2: Names at the beginning of lines (screenplay format)\n    const screenplayMatches = text.match(/^\\s*([A-Z][A-Z\\s\\-']+)$/gm);\n    if (screenplayMatches) {\n      screenplayMatches.forEach(match =\u003e {\n        const name = match.trim();\n        if (name.length \u003e 1 \u0026\u0026 name.length \u003c 30 \u0026\u0026 \n            !name.includes('FADE') \u0026\u0026 !name.includes('CUT') \u0026\u0026 \n            !name.includes('INT') \u0026\u0026 !name.includes('EXT') \u0026\u0026\n            !name.includes('SCENE') \u0026\u0026 !name.includes('ACT')) {\n          characterSet.add(name);\n        }\n      });\n    }\n    \n    return Array.from(characterSet).slice(0, 10);\n  };\n\n  if (scriptLoading || analysisLoading) {\n    return (\n      \u003cProtectedRoute\u003e\n        \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n          \u003cNavigation /\u003e\n          \u003cdiv className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n            \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n              \u003cdiv className=\"animate-pulse space-y-4\"\u003e\n                \u003cdiv className=\"h-8 bg-gray-800 rounded w-1/3\"\u003e\u003c/div\u003e\n                \u003cdiv className=\"h-4 bg-gray-800 rounded w-1/2\"\u003e\u003c/div\u003e\n                \u003cdiv className=\"h-32 bg-gray-800 rounded\"\u003e\u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/ProtectedRoute\u003e\n    );\n  }\n\n  if (scriptError || !script) {\n    return (\n      \u003cProtectedRoute\u003e\n        \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n          \u003cNavigation /\u003e\n          \u003cdiv className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n            \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n              \u003cCard className=\"bg-gray-900/50 border-gray-700\"\u003e\n                \u003cCardContent className=\"p-12 text-center\"\u003e\n                  \u003cAlertCircle className=\"w-12 h-12 text-red-400 mx-auto mb-4\" /\u003e\n                  \u003ch3 className=\"text-xl font-semibold text-white mb-2\"\u003eScript Not Found\u003c/h3\u003e\n                  \u003cp className=\"text-gray-400 mb-6\"\u003e\n                    The script you're looking for doesn't exist or you don't have permission to access it.\n                  \u003c/p\u003e\n                  \u003cbutton \n                    onClick={() =\u003e navigate('/dashboard')}\n                    className=\"bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-lg\"\n                  \u003e\n                    Back to Dashboard\n                  \u003c/button\u003e\n                \u003c/CardContent\u003e\n              \u003c/Card\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/ProtectedRoute\u003e\n    );\n  }\n\n  return (\n    \u003cProtectedRoute\u003e\n      \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n        \u003cNavigation /\u003e\n        \n        \u003cdiv className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n          \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n            \u003cScriptAnalysisHeader \n              onSignOut={handleSignOut}\n              onResetWorkflow={resetWorkflow}\n              scriptTitle={script.title}\n              showCoachingButton={currentStep === 'results' \u0026\u0026 !!currentAnalysis}\n              onStartCoaching={handleStartCoaching}\n            /\u003e\n\n            {/* Workflow Steps - hide during coaching, video upload, and evaluation */}\n            {!['coaching', 'video-upload', 'video-evaluation'].includes(currentStep) \u0026\u0026 (\n              \u003cScriptAnalysisWorkflowSteps currentStep={currentStep} /\u003e\n            )}\n\n            {/* Step Content */}\n            {currentStep === 'analyze' \u0026\u0026 (\n              \u003cdiv className=\"space-y-6\"\u003e\n                \u003cCard className=\"bg-gray-900/50 border-gray-700\"\u003e\n                  \u003cCardHeader\u003e\n                    \u003cCardTitle className=\"text-white flex items-center gap-2\"\u003e\n                      \u003cFileText className=\"w-5 h-5\" /\u003e\n                      {script.title}\n                    \u003c/CardTitle\u003e\n                    \u003cCardDescription className=\"text-gray-400\"\u003e\n                      Configure your analysis settings for this script\n                    \u003c/CardDescription\u003e\n                  \u003c/CardHeader\u003e\n                \u003c/Card\u003e\n                \n                \u003cScriptTextEditor \n                  scriptId={scriptId!}\n                  onScriptUpdated={() =\u003e {\n                    toast({\n                      title: \"Script Updated\",\n                      description: \"Character detection will be refreshed with your changes.\",\n                    });\n                  }}\n                  onContentChange={handleScriptContentChange}\n                /\u003e\n                \u003cScriptAnalyzer \n                  scriptId={scriptId!} \n                  onAnalysisComplete={handleAnalysisComplete} \n                /\u003e\n              \u003c/div\u003e\n            )}\n\n            {currentStep === 'results' \u0026\u0026 currentAnalysis \u0026\u0026 (\n              \u003cdiv className=\"space-y-6\"\u003e\n                \u003cdiv className=\"flex justify-end\"\u003e\n                  \u003cButton\n                    onClick={() =\u003e setCurrentStep('analyze')}\n                    variant=\"outline\"\n                    className=\"border-gray-600 text-gray-300 hover:bg-gray-800\"\n                  \u003e\n                    \u003cEdit className=\"w-4 h-4 mr-2\" /\u003e\n                    Edit Script Text\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n                \u003cAnalysisResults \n                  analysis={currentAnalysis} \n                  onStartCoaching={handleStartCoaching} \n                /\u003e\n              \u003c/div\u003e\n            )}\n\n            {currentStep === 'coaching' \u0026\u0026 currentAnalysis \u0026\u0026 (\n              \u003cCoachingSession \n                analysis={{\n                  ...currentAnalysis,\n                  // Use the current script content if it has been edited\n                  analysis_data: {\n                    ...currentAnalysis.analysis_data,\n                    script_content: currentScriptContent || currentAnalysis.analysis_data?.script_content\n                  }\n                }}\n                onBackToResults={() =\u003e setCurrentStep('results')}\n                onStartVideoUpload={handleStartVideoUpload}\n                onCoachingSessionCreated={handleCoachingSessionCreated}\n              /\u003e\n            )}\n\n            {currentStep === 'video-upload' \u0026\u0026 currentAnalysis \u0026\u0026 currentCoachingSessionId \u0026\u0026 (\n              \u003cVideoUpload \n                analysis={currentAnalysis}\n                coachingSessionId={currentCoachingSessionId}\n                onVideoUploaded={handleVideoUploaded}\n                onBackToCoaching={() =\u003e setCurrentStep('coaching')}\n              /\u003e\n            )}\n\n            {currentStep === 'video-evaluation' \u0026\u0026 currentVideoId \u0026\u0026 currentAnalysis \u0026\u0026 (\n              \u003cVideoEvaluation \n                videoId={currentVideoId}\n                analysis={currentAnalysis}\n                onBackToUpload={() =\u003e setCurrentStep('video-upload')}\n                onStartNewAnalysis={resetWorkflow}\n              /\u003e\n            )}\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ProtectedRoute\u003e\n  );\n};\n\nexport default IndividualScriptAnalysis;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/LegalNotices.tsx",
//   "contents": "import { useEffect } from \"react\";\nimport Navigation from \"@/components/Navigation\";\n\nconst LegalNotices = () =\u003e {\n  useEffect(() =\u003e {\n    // SEO meta tags\n    document.title = \"Legal Notices | MyAuditionAI\";\n    \n    // Meta description\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\"content\", \"Legal notices and disclaimers for MyAuditionAI - Important information about liability, intellectual property, and service limitations.\");\n    } else {\n      const meta = document.createElement(\"meta\");\n      meta.name = \"description\";\n      meta.content = \"Legal notices and disclaimers for MyAuditionAI - Important information about liability, intellectual property, and service limitations.\";\n      document.head.appendChild(meta);\n    }\n\n    // Canonical URL\n    const canonicalLink = document.querySelector('link[rel=\"canonical\"]');\n    if (canonicalLink) {\n      canonicalLink.setAttribute(\"href\", window.location.origin + \"/legal\");\n    } else {\n      const link = document.createElement(\"link\");\n      link.rel = \"canonical\";\n      link.href = window.location.origin + \"/legal\";\n      document.head.appendChild(link);\n    }\n  }, []);\n\n  return (\n    \u003cmain className=\"min-h-screen bg-background\"\u003e\n      \u003cNavigation /\u003e\n      \u003cdiv className=\"pt-20 pb-12 px-4\"\u003e\n        \u003cdiv className=\"max-w-4xl mx-auto\"\u003e\n          \u003cheader className=\"mb-8\"\u003e\n            \u003ch1 className=\"text-4xl font-bold text-foreground mb-4\"\u003eLegal Notices\u003c/h1\u003e\n            \u003cp className=\"text-muted-foreground text-lg\"\u003e\n              Important legal information and disclaimers\n            \u003c/p\u003e\n          \u003c/header\u003e\n\n          \u003cdiv className=\"prose prose-neutral dark:prose-invert max-w-none space-y-8\"\u003e\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eDisclaimer of Liability\u003c/h2\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                MyAuditionAI provides acting tools, AI-powered analysis, and coaching resources for informational and educational purposes only. We do not guarantee employment, casting outcomes, or any specific results from using our services. All feedback, reports, or evaluations generated by the AI or provided by coaches are suggestions only and should not be considered definitive or professional guarantees.\n              \u003c/p\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eIntellectual Property\u003c/h2\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                All content, trademarks, logos, software, training materials, and features displayed on this website are the exclusive property of MyAuditionAI, unless otherwise stated. You may not reproduce, distribute, or modify any material without express written permission.\n              \u003c/p\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eThird-Party Content\u003c/h2\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                The website may include links to third-party vendors, payment processors, or partner services. MyAuditionAI is not responsible for the content, accuracy, or practices of these external sites.\n              \u003c/p\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eLimitation of Liability\u003c/h2\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                To the maximum extent permitted by law, MyAuditionAI is not liable for any direct, indirect, incidental, or consequential damages arising from use of the platform, including but not limited to loss of data, loss of business opportunities, or service interruptions.\n              \u003c/p\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/main\u003e\n  );\n};\n\nexport default LegalNotices;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Membership.tsx",
//   "contents": "\nimport React, { useState } from 'react';\nimport Navigation from \"@/components/Navigation\";\nimport AuthModal from \"@/components/AuthModal\";\nimport SubscriptionCard from \"@/components/SubscriptionCard\";\nimport UsageIndicator from \"@/components/UsageIndicator\";\nimport { TrialSignupForm } from \"@/components/TrialSignupForm\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useSubscription } from \"@/hooks/useSubscription\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Membership = () =\u003e {\n  const { user } = useAuth();\n  const { subscription, usage, plans, loading } = useSubscription();\n  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);\n  const [isTrialFormOpen, setIsTrialFormOpen] = useState(false);\n  const navigate = useNavigate();\n\n  const handleGetStartedClick = () =\u003e {\n    if (!user) {\n      setIsAuthModalOpen(true);\n    }\n  };\n\n  const handleTrialSignup = () =\u003e {\n    setIsTrialFormOpen(true);\n  };\n\n  const handleTrialSuccess = () =\u003e {\n    navigate('/dashboard');\n  };\n\n  const handleSubscribe = () =\u003e {\n    // Refresh subscription data after successful subscription\n    window.location.reload();\n  };\n\n  if (loading) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-black text-white flex items-center justify-center\"\u003e\n        \u003cdiv className=\"text-center\"\u003e\n          \u003cdiv className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-yellow-400 mx-auto mb-4\"\u003e\u003c/div\u003e\n          \u003cp className=\"text-gray-300\"\u003eLoading subscription plans...\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  // Sort plans: Demo first, then by price, with Exclusive last\n  const sortedPlans = [...plans].sort((a, b) =\u003e {\n    if (a.name === 'Demo') return -1;\n    if (b.name === 'Demo') return 1;\n    if (a.name === 'Exclusive') return 1;\n    if (b.name === 'Exclusive') return -1;\n    return a.price - b.price;\n  });\n\n  return (\n    \u003c\u003e\n      \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n        \u003cNavigation /\u003e\n        \n        \u003cdiv className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n          \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n            {/* Hero Section */}\n            \u003cdiv className=\"text-center mb-16\"\u003e\n              \u003ch1 className=\"text-5xl md:text-6xl font-bold mb-6\"\u003e\n                Choose Your{\" \"}\n                \u003cspan className=\"bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n                  Membership\n                \u003c/span\u003e\n              \u003c/h1\u003e\n              \u003cp className=\"text-xl text-gray-300 max-w-3xl mx-auto\"\u003e\n                Unlock your acting potential with professional coaching, advanced tools, \n                and personalized feedback tailored to your career goals.\n              \u003c/p\u003e\n            \u003c/div\u003e\n\n            {/* Current Usage (for logged in users) */}\n            {user \u0026\u0026 subscription \u0026\u0026 usage \u0026\u0026 (\n              \u003cdiv className=\"mb-12\"\u003e\n                \u003cdiv className=\"max-w-md mx-auto\"\u003e\n                  \u003cUsageIndicator \n                    plan={subscription.subscription_plans as any} \n                    usage={usage} \n                  /\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            )}\n\n            {/* Pricing Plans */}\n            \u003cdiv className=\"mb-16\"\u003e\n              \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\"\u003e\n                {sortedPlans.map((plan) =\u003e (\n                  \u003cdiv key={plan.id} className=\"flex justify-center\"\u003e\n                    \u003cdiv className=\"w-full max-w-sm\"\u003e\n                      \u003cSubscriptionCard\n                        plan={plan}\n                        currentSubscription={subscription}\n                        onSubscribe={plan.name === 'Demo' ? handleTrialSignup : handleSubscribe}\n                        popular={plan.name === 'Pro'}\n                      /\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                ))}\n              \u003c/div\u003e\n            \u003c/div\u003e\n\n            {/* Additional Info */}\n            \u003cdiv className=\"text-center bg-gray-900/30 border border-gray-700 rounded-lg p-8\"\u003e\n              \u003ch2 className=\"text-2xl font-bold text-white mb-4\"\u003eAll Plans Include\u003c/h2\u003e\n              \u003cdiv className=\"grid grid-cols-1 md:grid-cols-3 gap-6\"\u003e\n                \u003cdiv\u003e\n                  \u003ch3 className=\"font-semibold text-yellow-400 mb-2\"\u003eNo Commitment\u003c/h3\u003e\n                  \u003cp className=\"text-gray-300\"\u003eCancel or change your plan anytime\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv\u003e\n                  \u003ch3 className=\"font-semibold text-yellow-400 mb-2\"\u003eExpert Support\u003c/h3\u003e\n                  \u003cp className=\"text-gray-300\"\u003eGet help from professional acting coaches\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv\u003e\n                  \u003ch3 className=\"font-semibold text-yellow-400 mb-2\"\u003eRegular Updates\u003c/h3\u003e\n                  \u003cp className=\"text-gray-300\"\u003eNew features and improvements every month\u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \n      \u003cAuthModal isOpen={isAuthModalOpen} onClose={() =\u003e setIsAuthModalOpen(false)} /\u003e\n      \u003cTrialSignupForm \n        open={isTrialFormOpen} \n        onClose={() =\u003e setIsTrialFormOpen(false)}\n        onSuccess={handleTrialSuccess}\n      /\u003e\n    \u003c/\u003e\n  );\n};\n\nexport default Membership;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/NotFound.tsx",
//   "contents": "\nimport { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"react-router-dom\";\nimport { Home } from \"lucide-react\";\n\nconst NotFound = () =\u003e {\n  const location = useLocation();\n\n  useEffect(() =\u003e {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    \u003cdiv className=\"min-h-screen flex items-center justify-center bg-black text-white\"\u003e\n      \u003cdiv className=\"text-center max-w-md mx-auto px-4\"\u003e\n        \u003ch1 className=\"text-8xl font-bold mb-4 bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n          404\n        \u003c/h1\u003e\n        \u003ch2 className=\"text-3xl font-bold mb-4\"\u003ePage Not Found\u003c/h2\u003e\n        \u003cp className=\"text-gray-400 mb-8 text-lg\"\u003e\n          The page you're looking for doesn't exist or has been moved.\n        \u003c/p\u003e\n        \u003cButton asChild className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-semibold\"\u003e\n          \u003cLink to=\"/\"\u003e\n            \u003cHome className=\"w-4 h-4 mr-2\" /\u003e\n            Return to Home\n          \u003c/Link\u003e\n        \u003c/Button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default NotFound;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Podcast.tsx",
//   "contents": "import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Plus } from 'lucide-react';\nimport { BlogPostCard } from '@/components/blog/BlogPostCard';\nimport CreateBlogPostDialog from '@/components/blog/CreateBlogPostDialog';\nimport PageHeaderNav from '@/components/PageHeaderNav';\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  slug: string;\n  excerpt: string | null;\n  content: string;\n  cover_image_url: string | null;\n  youtube_url: string | null;\n  status: 'draft' | 'published';\n  author_id: string;\n  created_at: string;\n  updated_at: string;\n  profiles: {\n    full_name: string | null;\n  } | null;\n}\n\nconst Podcast = () =\u003e {\n  const { user } = useAuth();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n\n  const { data: isAdmin } = useQuery({\n    queryKey: ['is-admin', user?.id],\n    queryFn: async () =\u003e {\n      if (!user) return false;\n      const { data, error } = await supabase\n        .from('user_roles')\n        .select('role')\n        .eq('user_id', user.id);\n      if (error) return false;\n      return (data || []).some((r: { role: string }) =\u003e r.role === 'admin');\n    },\n    enabled: !!user,\n  });\n\n  const { data: posts = [], refetch } = useQuery({\n    queryKey: ['blog-posts'],\n    queryFn: async () =\u003e {\n      const { data, error } = await supabase\n        .from('blog_posts')\n        .select(`\n          *,\n          profiles(full_name)\n        `)\n        .eq('status', 'published')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return (data || []) as BlogPost[];\n    },\n  });\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-gray-950\"\u003e\n      \u003cPageHeaderNav title=\"Podcast\" showForward /\u003e\n      {/* Hero Section */}\n      \u003csection className=\"relative py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-yellow-500/20 via-orange-500/20 to-red-500/20\" style={{ marginTop: '20px' }}\u003e\n        \u003cdiv className=\"max-w-4xl mx-auto text-center\"\u003e\n          \u003cdiv className=\"mb-8 flex justify-center\"\u003e\n            \u003cimg \n              src=\"/lovable-uploads/11ffb9ca-b464-4313-9bc3-58aa222d4268.png\" \n              alt=\"MyAuditionAI Podcast\" \n              className=\"w-64 h-64 object-cover rounded-2xl shadow-2xl border-2 border-yellow-500/30\"\n            /\u003e\n          \u003c/div\u003e\n          \u003ch1 className=\"text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent\"\u003e\n            MyAuditionAI Podcast\n          \u003c/h1\u003e\n          \u003cp className=\"text-xl text-gray-300 max-w-2xl mx-auto leading-relaxed\"\u003e\n            Behind-the-scenes insights, industry interviews, and acting tips from the world of AI-powered audition coaching.\n          \u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n\n      {/* Admin Controls */}\n      {isAdmin \u0026\u0026 (\n        \u003csection className=\"py-8 px-4 sm:px-6 lg:px-8 border-b border-gray-800\"\u003e\n          \u003cdiv className=\"max-w-4xl mx-auto flex justify-between items-center\"\u003e\n            \u003ch2 className=\"text-2xl font-semibold text-white\"\u003eManage Blog Posts\u003c/h2\u003e\n            \u003cButton onClick={() =\u003e setCreateDialogOpen(true)} className=\"gap-2 bg-yellow-500 hover:bg-yellow-600 text-black font-semibold\"\u003e\n              \u003cPlus className=\"w-4 h-4\" /\u003e\n              Create Post\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/section\u003e\n      )}\n\n      {/* Blog Posts */}\n      \u003csection className=\"py-12 px-4 sm:px-6 lg:px-8 bg-gray-950\"\u003e\n        \u003cdiv className=\"max-w-4xl mx-auto\"\u003e\n          {posts.length === 0 ? (\n            \u003cdiv className=\"text-center py-12\"\u003e\n              \u003cp className=\"text-xl text-gray-400\"\u003e\n                No podcast episodes yet. Check back soon!\n              \u003c/p\u003e\n            \u003c/div\u003e\n          ) : (\n            \u003cdiv className=\"space-y-12\"\u003e\n              {posts.map((post) =\u003e (\n                \u003cBlogPostCard key={post.id} post={post} /\u003e\n              ))}\n            \u003c/div\u003e\n          )}\n        \u003c/div\u003e\n      \u003c/section\u003e\n\n      {/* Create Post Dialog */}\n      \u003cCreateBlogPostDialog\n        open={createDialogOpen}\n        onOpenChange={setCreateDialogOpen}\n        onSuccess={() =\u003e {\n          refetch();\n          setCreateDialogOpen(false);\n        }}\n      /\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default Podcast;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Privacy.tsx",
//   "contents": "import { useEffect } from \"react\";\nimport Navigation from \"@/components/Navigation\";\n\nconst Privacy = () =\u003e {\n  useEffect(() =\u003e {\n    // SEO meta tags\n    document.title = \"Privacy Policy | MyAuditionAI\";\n    \n    // Meta description\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\"content\", \"Privacy Policy for MyAuditionAI - Learn how we collect, use, and protect your data when using our AI-powered acting tools and services.\");\n    } else {\n      const meta = document.createElement(\"meta\");\n      meta.name = \"description\";\n      meta.content = \"Privacy Policy for MyAuditionAI - Learn how we collect, use, and protect your data when using our AI-powered acting tools and services.\";\n      document.head.appendChild(meta);\n    }\n\n    // Canonical URL\n    const canonicalLink = document.querySelector('link[rel=\"canonical\"]');\n    if (canonicalLink) {\n      canonicalLink.setAttribute(\"href\", window.location.origin + \"/privacy\");\n    } else {\n      const link = document.createElement(\"link\");\n      link.rel = \"canonical\";\n      link.href = window.location.origin + \"/privacy\";\n      document.head.appendChild(link);\n    }\n  }, []);\n\n  return (\n    \u003cmain className=\"min-h-screen bg-background\"\u003e\n      \u003cNavigation /\u003e\n      \u003cdiv className=\"pt-20 pb-12 px-4\"\u003e\n        \u003cdiv className=\"max-w-4xl mx-auto\"\u003e\n          \u003cheader className=\"mb-8\"\u003e\n            \u003ch1 className=\"text-4xl font-bold text-foreground mb-4\"\u003ePrivacy Policy\u003c/h1\u003e\n            \u003cp className=\"text-muted-foreground text-lg\"\u003e\n              How we handle your personal information and data\n            \u003c/p\u003e\n          \u003c/header\u003e\n\n          \u003cdiv className=\"prose prose-neutral dark:prose-invert max-w-none space-y-8\"\u003e\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eInformation We Collect\u003c/h2\u003e\n              \u003cul className=\"list-disc pl-6 space-y-2 text-muted-foreground\"\u003e\n                \u003cli\u003eUploaded scripts, videos, and headshots for analysis.\u003c/li\u003e\n                \u003cli\u003eAccount details (email, username, payment information if applicable).\u003c/li\u003e\n                \u003cli\u003eTechnical data (browser type, device type, usage analytics).\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eHow We Use Your Information\u003c/h2\u003e\n              \u003cul className=\"list-disc pl-6 space-y-2 text-muted-foreground\"\u003e\n                \u003cli\u003eTo provide AI scene analysis, audition feedback, and acting tools.\u003c/li\u003e\n                \u003cli\u003eTo improve our platform and user experience.\u003c/li\u003e\n                \u003cli\u003eTo process billing and membership subscriptions.\u003c/li\u003e\n                \u003cli\u003eTo send service-related notifications (never spam marketing without consent).\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eData Security\u003c/h2\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                Your data is stored securely in our backend infrastructure (Supabase). Files uploaded for analysis remain private and under your control. You may delete your content at any time from your Dashboard.\n              \u003c/p\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eData Sharing\u003c/h2\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                We do not sell your personal data to third parties. Limited sharing may occur with service providers (e.g., payment processors, cloud storage partners) strictly to provide functionality.\n              \u003c/p\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eUser Rights\u003c/h2\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                You have the right to request deletion of your data, access to stored files, and correction of account details. Requests can be submitted through our support channel.\n              \u003c/p\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/main\u003e\n  );\n};\n\nexport default Privacy;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/ProVoiceTest.tsx",
//   "contents": "import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { CheckCircle, XCircle, Loader2 } from 'lucide-react';\n\nconst ProVoiceTest = () =\u003e {\n  const [testText, setTestText] = useState('Hello, this is a Pro-Voice TTS test.');\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState\u003cany\u003e(null);\n  const [error, setError] = useState\u003cstring\u003e('');\n  const [audioUrl, setAudioUrl] = useState\u003cstring\u003e('');\n\n  const testConnection = async () =\u003e {\n    setLoading(true);\n    setError('');\n    setResult(null);\n    setAudioUrl('');\n\n    try {\n      console.log('🔍 Testing Pro-Voice API connection...');\n      \n      // Generate unique filename\n      const timestamp = Date.now();\n      const randomId = Math.random().toString(36).substring(2, 15);\n      const filename = `test_${timestamp}_${randomId}.wav`;\n\n      console.log('📤 Sending request to Pro-Voice API...');\n      const response = await fetch('http://162.19.255.187:3000/synthesize', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          text: testText,\n          filename: filename\n        })\n      });\n\n      console.log('📥 Response status:', response.status);\n      console.log('📥 Response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log('📥 Response data:', data);\n      setResult(data);\n\n      // Test audio URL if file is available\n      if (data.file) {\n        const audioTestUrl = `http://162.19.255.187:3000/audio/${data.file}`;\n        console.log('🎵 Testing audio URL:', audioTestUrl);\n        \n        const audioResponse = await fetch(audioTestUrl, { method: 'HEAD' });\n        console.log('🎵 Audio URL status:', audioResponse.status);\n        \n        if (audioResponse.ok) {\n          setAudioUrl(audioTestUrl);\n          console.log('✅ Audio file accessible!');\n        } else {\n          console.log('❌ Audio file not accessible');\n          setError('Audio file generated but not accessible');\n        }\n      }\n\n    } catch (err: any) {\n      console.error('❌ Connection test failed:', err);\n      setError(err.message || 'Connection failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-background p-8\"\u003e\n      \u003cdiv className=\"max-w-4xl mx-auto space-y-6\"\u003e\n        \u003cCard\u003e\n          \u003cCardHeader\u003e\n            \u003cCardTitle\u003ePro-Voice TTS Connection Test\u003c/CardTitle\u003e\n          \u003c/CardHeader\u003e\n          \u003cCardContent className=\"space-y-4\"\u003e\n            \u003cdiv\u003e\n              \u003clabel className=\"text-sm font-medium\"\u003eTest Text:\u003c/label\u003e\n              \u003cInput\n                value={testText}\n                onChange={(e) =\u003e setTestText(e.target.value)}\n                placeholder=\"Enter text to synthesize...\"\n              /\u003e\n            \u003c/div\u003e\n            \n            \u003cButton onClick={testConnection} disabled={loading} className=\"w-full\"\u003e\n              {loading ? (\n                \u003c\u003e\n                  \u003cLoader2 className=\"w-4 h-4 mr-2 animate-spin\" /\u003e\n                  Testing Connection...\n                \u003c/\u003e\n              ) : (\n                'Test Pro-Voice Connection'\n              )}\n            \u003c/Button\u003e\n\n            {error \u0026\u0026 (\n              \u003cAlert variant=\"destructive\"\u003e\n                \u003cXCircle className=\"h-4 w-4\" /\u003e\n                \u003cAlertDescription\u003e\n                  \u003cstrong\u003eConnection Failed:\u003c/strong\u003e {error}\n                \u003c/AlertDescription\u003e\n              \u003c/Alert\u003e\n            )}\n\n            {result \u0026\u0026 !error \u0026\u0026 (\n              \u003cAlert\u003e\n                \u003cCheckCircle className=\"h-4 w-4\" /\u003e\n                \u003cAlertDescription\u003e\n                  \u003cstrong\u003eConnection Successful!\u003c/strong\u003e \n                  \u003cbr /\u003eResponse: {JSON.stringify(result)}\n                \u003c/AlertDescription\u003e\n              \u003c/Alert\u003e\n            )}\n\n            {audioUrl \u0026\u0026 (\n              \u003cdiv className=\"space-y-2\"\u003e\n                \u003ch3 className=\"font-medium\"\u003eGenerated Audio:\u003c/h3\u003e\n                \u003caudio controls className=\"w-full\"\u003e\n                  \u003csource src={audioUrl} type=\"audio/wav\" /\u003e\n                  Your browser does not support audio playback.\n                \u003c/audio\u003e\n                \u003cp className=\"text-sm text-muted-foreground\"\u003e\n                  Audio URL: {audioUrl}\n                \u003c/p\u003e\n              \u003c/div\u003e\n            )}\n\n            \u003cdiv className=\"text-xs text-muted-foreground space-y-1\"\u003e\n              \u003cp\u003e\u003cstrong\u003eAPI Endpoint:\u003c/strong\u003e http://162.19.255.187:3000/synthesize\u003c/p\u003e\n              \u003cp\u003e\u003cstrong\u003eAudio Base URL:\u003c/strong\u003e http://162.19.255.187:3000/audio/\u003c/p\u003e\n              \u003cp\u003e\u003cstrong\u003eExpected Response:\u003c/strong\u003e {`{\"message\": \"Audio saved\", \"file\": \"filename.wav\"}`}\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default ProVoiceTest;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Profile.tsx",
//   "contents": "import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ProfileImageUpload } from \"@/components/ProfileImageUpload\";\nimport { ProfileVideoUpload } from \"@/components/ProfileVideoUpload\";\nimport { ResumeUpload } from \"@/components/ResumeUpload\";\nimport { Loader2, ExternalLink } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport Navigation from \"@/components/Navigation\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [profile, setProfile] = useState({\n    full_name: \"\",\n    username: \"\",\n    bio: \"\",\n    experience_level: \"beginner\",\n    acting_methods: [] as string[],\n    avatar_url: \"\",\n    headshot_url_1: \"\",\n    headshot_url_2: \"\",\n    headshot_url_3: \"\",\n    demo_video_url_1: \"\",\n    demo_video_url_2: \"\",\n    demo_video_title_1: \"\",\n    demo_video_title_2: \"\",\n    resume_pdf_url: \"\",\n    manager_name: \"\",\n    manager_phone: \"\",\n    manager_email: \"\",\n    agent_commercial_name: \"\",\n    agent_commercial_phone: \"\",\n    agent_commercial_email: \"\",\n    agent_theatrical_name: \"\",\n    agent_theatrical_phone: \"\",\n    agent_theatrical_email: \"\",\n    agency_url: \"\",\n    talent_phone: \"\",\n    talent_email: \"\",\n    instagram_url: \"\",\n    website_url: \"\",\n    imdb_url: \"\",\n  });\n\n  useEffect(() =\u003e {\n    if (user) {\n      fetchProfile();\n    }\n  }, [user]);\n\n  const fetchProfile = async () =\u003e {\n    try {\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .select(\"*\")\n        .eq(\"id\", user?.id)\n        .single();\n\n      if (error \u0026\u0026 error.code !== \"PGRST116\") {\n        throw error;\n      }\n\n      if (data) {\n        setProfile({\n          full_name: data.full_name || \"\",\n          username: data.username || \"\",\n          bio: data.bio || \"\",\n          experience_level: data.experience_level || \"beginner\",\n          acting_methods: data.acting_methods || [],\n          avatar_url: data.avatar_url || \"\",\n          headshot_url_1: data.headshot_url_1 || \"\",\n          headshot_url_2: data.headshot_url_2 || \"\",\n          headshot_url_3: data.headshot_url_3 || \"\",\n          demo_video_url_1: data.demo_video_url_1 || \"\",\n          demo_video_url_2: data.demo_video_url_2 || \"\",\n          demo_video_title_1: data.demo_video_title_1 || \"\",\n          demo_video_title_2: data.demo_video_title_2 || \"\",\n          resume_pdf_url: data.resume_pdf_url || \"\",\n          manager_name: data.manager_name || \"\",\n          manager_phone: data.manager_phone || \"\",\n          manager_email: data.manager_email || \"\",\n          agent_commercial_name: data.agent_commercial_name || \"\",\n          agent_commercial_phone: data.agent_commercial_phone || \"\",\n          agent_commercial_email: data.agent_commercial_email || \"\",\n          agent_theatrical_name: data.agent_theatrical_name || \"\",\n          agent_theatrical_phone: data.agent_theatrical_phone || \"\",\n          agent_theatrical_email: data.agent_theatrical_email || \"\",\n          agency_url: data.agency_url || \"\",\n          talent_phone: data.talent_phone || \"\",\n          talent_email: data.talent_email || \"\",\n          instagram_url: data.instagram_url || \"\",\n          website_url: data.website_url || \"\",\n          imdb_url: data.imdb_url || \"\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching profile:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load profile data.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () =\u003e {\n    if (!user) return;\n\n    setSaving(true);\n    try {\n      const { error } = await supabase.from(\"profiles\").upsert({\n        id: user.id,\n        ...profile,\n        updated_at: new Date().toISOString(),\n      });\n\n      if (error) throw error;\n\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully!\",\n      });\n    } catch (error) {\n      console.error(\"Error saving profile:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save profile.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-black flex items-center justify-center\"\u003e\n        \u003cLoader2 className=\"h-8 w-8 animate-spin text-white\" /\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-black\"\u003e\n      \u003cNavigation /\u003e\n      \n      {/* Header */}\n      \u003cdiv className=\"bg-gradient-to-r from-purple-900/20 to-blue-900/20 border-b border-gray-800 pt-16\"\u003e\n        \u003cdiv className=\"container mx-auto px-4 py-12 max-w-4xl\"\u003e\n          \u003cdiv className=\"flex items-center justify-between\"\u003e\n            \u003cdiv className=\"flex items-center space-x-4\"\u003e\n              \u003cAvatar className=\"h-24 w-24\"\u003e\n                \u003cAvatarImage src={profile.avatar_url || undefined} alt={profile.full_name || 'Profile'} /\u003e\n                \u003cAvatarFallback\u003e{(profile.full_name || 'A').split(' ').map(n =\u003e n[0]).join('').slice(0,2).toUpperCase()}\u003c/AvatarFallback\u003e\n              \u003c/Avatar\u003e\n              \u003cdiv\u003e\n                \u003ch1 className=\"text-4xl font-bold text-white\"\u003e\n                  {profile.full_name || \"Actor Profile\"}\n                \u003c/h1\u003e\n                \u003cp className=\"text-gray-300 text-lg mt-1\"\u003e\n                  Manage your professional acting profile\n                \u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \n            {profile.username \u0026\u0026 (\n              \u003cButton asChild className=\"btn-brand-yellow\"\u003e\n                \u003ca \n                  href={`/profile/${profile.username}`} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                \u003e\n                  \u003cExternalLink className=\"w-4 h-4 mr-2\" /\u003e\n                  View Public Profile\n                \u003c/a\u003e\n              \u003c/Button\u003e\n            )}\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      {/* Content */}\n      \u003cdiv className=\"container mx-auto px-4 py-8 max-w-4xl\"\u003e\n        \u003cdiv className=\"grid gap-6\"\u003e\n          {/* Profile Picture */}\n          \u003cCard className=\"bg-gray-900 border-gray-800\"\u003e\n            \u003cCardHeader\u003e\n              \u003cCardTitle className=\"text-white\"\u003eProfile Picture\u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent\u003e\n              \u003cdiv className=\"max-w-xs\"\u003e\n                \u003cProfileImageUpload\n                  label=\"Profile Picture\"\n                  currentUrl={profile.avatar_url}\n                  onUpload={(url) =\u003e setProfile({ ...profile, avatar_url: url })}\n                /\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Basic Information */}\n          \u003cCard className=\"bg-gray-900 border-gray-800\"\u003e\n            \u003cCardHeader\u003e\n              \u003cCardTitle className=\"text-white\"\u003eBasic Information\u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent className=\"space-y-4\"\u003e\n              \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 gap-4\"\u003e\n                \u003cdiv className=\"space-y-2\"\u003e\n                  \u003cLabel htmlFor=\"full_name\" className=\"text-gray-300\"\u003eFull Name\u003c/Label\u003e\n                  \u003cInput \n                    id=\"full_name\" \n                    value={profile.full_name} \n                    onChange={(e) =\u003e setProfile({ ...profile, full_name: e.target.value })}\n                    className=\"bg-gray-800 border-gray-700 text-white\"\n                  /\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"space-y-2\"\u003e\n                  \u003cLabel htmlFor=\"username\" className=\"text-gray-300\"\u003eUsername\u003c/Label\u003e\n                  \u003cInput \n                    id=\"username\" \n                    value={profile.username} \n                    onChange={(e) =\u003e setProfile({ ...profile, username: e.target.value })}\n                    className=\"bg-gray-800 border-gray-700 text-white\"\n                  /\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv className=\"space-y-2\"\u003e\n                \u003cLabel htmlFor=\"bio\" className=\"text-gray-300\"\u003eBiography\u003c/Label\u003e\n                \u003cTextarea\n                  id=\"bio\"\n                  value={profile.bio}\n                  onChange={(e) =\u003e setProfile({ ...profile, bio: e.target.value })}\n                  rows={4}\n                  placeholder=\"Tell us about your acting background, experience, and goals...\"\n                  className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                /\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Headshots */}\n          \u003cCard className=\"bg-gray-900 border-gray-800\"\u003e\n            \u003cCardHeader\u003e\n              \u003cCardTitle className=\"text-white\"\u003eHeadshots (up to 3)\u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent\u003e\n              \u003cdiv className=\"grid grid-cols-1 md:grid-cols-3 gap-6\"\u003e\n                \u003cProfileImageUpload\n                  label=\"Headshot 1\"\n                  currentUrl={profile.headshot_url_1}\n                  onUpload={(url) =\u003e setProfile({ ...profile, headshot_url_1: url })}\n                /\u003e\n                \u003cProfileImageUpload\n                  label=\"Headshot 2\"\n                  currentUrl={profile.headshot_url_2}\n                  onUpload={(url) =\u003e setProfile({ ...profile, headshot_url_2: url })}\n                /\u003e\n                \u003cProfileImageUpload\n                  label=\"Headshot 3\"\n                  currentUrl={profile.headshot_url_3}\n                  onUpload={(url) =\u003e setProfile({ ...profile, headshot_url_3: url })}\n                /\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Demo Videos */}\n          \u003cCard className=\"bg-gray-900 border-gray-800\"\u003e\n            \u003cCardHeader\u003e\n              \u003cCardTitle className=\"text-white\"\u003eDemo Reels (up to 2)\u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent className=\"space-y-6\"\u003e\n              \u003cProfileVideoUpload\n                label=\"Demo Reel 1\"\n                currentUrl={profile.demo_video_url_1}\n                currentTitle={profile.demo_video_title_1}\n                onUpload={(url) =\u003e setProfile({ ...profile, demo_video_url_1: url })}\n                onTitleChange={(title) =\u003e setProfile({ ...profile, demo_video_title_1: title })}\n              /\u003e\n              \u003cProfileVideoUpload\n                label=\"Demo Reel 2\"\n                currentUrl={profile.demo_video_url_2}\n                currentTitle={profile.demo_video_title_2}\n                onUpload={(url) =\u003e setProfile({ ...profile, demo_video_url_2: url })}\n                onTitleChange={(title) =\u003e setProfile({ ...profile, demo_video_title_2: title })}\n              /\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Resume */}\n          \u003cCard className=\"bg-gray-900 border-gray-800\"\u003e\n            \u003cCardHeader\u003e\n              \u003cCardTitle className=\"text-white\"\u003eResume\u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent\u003e\n              \u003cResumeUpload\n                currentUrl={profile.resume_pdf_url}\n                onUpload={(url) =\u003e setProfile({ ...profile, resume_pdf_url: url })}\n              /\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Professional Contacts */}\n          \u003cCard className=\"bg-gray-900 border-gray-800\"\u003e\n            \u003cCardHeader\u003e\n              \u003cCardTitle className=\"text-white\"\u003eProfessional Contacts\u003c/CardTitle\u003e\n            \u003c/CardHeader\u003e\n            \u003cCardContent className=\"space-y-6\"\u003e\n              \u003cdiv className=\"space-y-4\"\u003e\n                \u003ch4 className=\"font-medium text-white\"\u003eManager\u003c/h4\u003e\n                \u003cdiv className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"manager_name\" className=\"text-gray-300\"\u003eName\u003c/Label\u003e\n                    \u003cInput\n                      id=\"manager_name\"\n                      value={profile.manager_name}\n                      onChange={(e) =\u003e setProfile({ ...profile, manager_name: e.target.value })}\n                      placeholder=\"Manager's name\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"manager_phone\" className=\"text-gray-300\"\u003ePhone\u003c/Label\u003e\n                    \u003cInput\n                      id=\"manager_phone\"\n                      type=\"tel\"\n                      value={profile.manager_phone}\n                      onChange={(e) =\u003e setProfile({ ...profile, manager_phone: e.target.value })}\n                      placeholder=\"(555) 123-4567\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"manager_email\" className=\"text-gray-300\"\u003eEmail\u003c/Label\u003e\n                    \u003cInput\n                      id=\"manager_email\"\n                      type=\"email\"\n                      value={profile.manager_email}\n                      onChange={(e) =\u003e setProfile({ ...profile, manager_email: e.target.value })}\n                      placeholder=\"manager@email.com\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n\n              \u003cdiv className=\"space-y-4\"\u003e\n                \u003ch4 className=\"font-medium text-white\"\u003eCommercial Agent\u003c/h4\u003e\n                \u003cdiv className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"agent_commercial_name\" className=\"text-gray-300\"\u003eName\u003c/Label\u003e\n                    \u003cInput\n                      id=\"agent_commercial_name\"\n                      value={profile.agent_commercial_name}\n                      onChange={(e) =\u003e setProfile({ ...profile, agent_commercial_name: e.target.value })}\n                      placeholder=\"Commercial agent's name\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"agent_commercial_phone\" className=\"text-gray-300\"\u003ePhone\u003c/Label\u003e\n                    \u003cInput\n                      id=\"agent_commercial_phone\"\n                      type=\"tel\"\n                      value={profile.agent_commercial_phone}\n                      onChange={(e) =\u003e setProfile({ ...profile, agent_commercial_phone: e.target.value })}\n                      placeholder=\"(555) 123-4567\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"agent_commercial_email\" className=\"text-gray-300\"\u003eEmail\u003c/Label\u003e\n                    \u003cInput\n                      id=\"agent_commercial_email\"\n                      type=\"email\"\n                      value={profile.agent_commercial_email}\n                      onChange={(e) =\u003e setProfile({ ...profile, agent_commercial_email: e.target.value })}\n                      placeholder=\"agent@email.com\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n\n              \u003cdiv className=\"space-y-4\"\u003e\n                \u003ch4 className=\"font-medium text-white\"\u003eTheatrical Agent\u003c/h4\u003e\n                \u003cdiv className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"agent_theatrical_name\" className=\"text-gray-300\"\u003eName\u003c/Label\u003e\n                    \u003cInput\n                      id=\"agent_theatrical_name\"\n                      value={profile.agent_theatrical_name}\n                      onChange={(e) =\u003e setProfile({ ...profile, agent_theatrical_name: e.target.value })}\n                      placeholder=\"Theatrical agent's name\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"agent_theatrical_phone\" className=\"text-gray-300\"\u003ePhone\u003c/Label\u003e\n                    \u003cInput\n                      id=\"agent_theatrical_phone\"\n                      type=\"tel\"\n                      value={profile.agent_theatrical_phone}\n                      onChange={(e) =\u003e setProfile({ ...profile, agent_theatrical_phone: e.target.value })}\n                      placeholder=\"(555) 123-4567\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"agent_theatrical_email\" className=\"text-gray-300\"\u003eEmail\u003c/Label\u003e\n                    \u003cInput\n                      id=\"agent_theatrical_email\"\n                      type=\"email\"\n                      value={profile.agent_theatrical_email}\n                      onChange={(e) =\u003e setProfile({ ...profile, agent_theatrical_email: e.target.value })}\n                      placeholder=\"agent@email.com\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n\n              \u003cdiv className=\"space-y-4\"\u003e\n                \u003ch4 className=\"font-medium text-white\"\u003eAgency\u003c/h4\u003e\n                \u003cdiv\u003e\n                  \u003cLabel htmlFor=\"agency_url\" className=\"text-gray-300\"\u003eAgency Website\u003c/Label\u003e\n                  \u003cInput\n                    id=\"agency_url\"\n                    type=\"url\"\n                    value={profile.agency_url}\n                    onChange={(e) =\u003e setProfile({ ...profile, agency_url: e.target.value })}\n                    placeholder=\"https://agency.com\"\n                    className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                  /\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n\n              \u003cdiv className=\"space-y-4\"\u003e\n                \u003ch4 className=\"font-medium text-white\"\u003eDirect Contact\u003c/h4\u003e\n                \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 gap-4\"\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"talent_phone\" className=\"text-gray-300\"\u003ePhone\u003c/Label\u003e\n                    \u003cInput\n                      id=\"talent_phone\"\n                      type=\"tel\"\n                      value={profile.talent_phone}\n                      onChange={(e) =\u003e setProfile({ ...profile, talent_phone: e.target.value })}\n                      placeholder=\"(555) 123-4567\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"talent_email\" className=\"text-gray-300\"\u003eEmail\u003c/Label\u003e\n                    \u003cInput\n                      id=\"talent_email\"\n                      type=\"email\"\n                      value={profile.talent_email}\n                      onChange={(e) =\u003e setProfile({ ...profile, talent_email: e.target.value })}\n                      placeholder=\"actor@email.com\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"instagram_url\" className=\"text-gray-300\"\u003eInstagram\u003c/Label\u003e\n                    \u003cInput\n                      id=\"instagram_url\"\n                      type=\"url\"\n                      value={profile.instagram_url}\n                      onChange={(e) =\u003e setProfile({ ...profile, instagram_url: e.target.value })}\n                      placeholder=\"https://instagram.com/username\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                  \u003cdiv\u003e\n                    \u003cLabel htmlFor=\"website_url\" className=\"text-gray-300\"\u003eWebsite\u003c/Label\u003e\n                    \u003cInput\n                      id=\"website_url\"\n                      type=\"url\"\n                      value={profile.website_url}\n                      onChange={(e) =\u003e setProfile({ ...profile, website_url: e.target.value })}\n                      placeholder=\"https://yourwebsite.com\"\n                      className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                    /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv\u003e\n                  \u003cLabel htmlFor=\"imdb_url\" className=\"text-gray-300\"\u003eIMDb Profile\u003c/Label\u003e\n                  \u003cInput\n                    id=\"imdb_url\"\n                    type=\"url\"\n                    value={profile.imdb_url}\n                    onChange={(e) =\u003e setProfile({ ...profile, imdb_url: e.target.value })}\n                    placeholder=\"https://imdb.com/name/nm1234567\"\n                    className=\"bg-gray-800 border-gray-700 text-white placeholder-gray-400\"\n                  /\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/CardContent\u003e\n          \u003c/Card\u003e\n\n          {/* Save Button */}\n          \u003cdiv className=\"flex justify-end\"\u003e\n            \u003cButton \n              onClick={handleSave} \n              disabled={saving}\n              className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n            \u003e\n              {saving \u0026\u0026 \u003cLoader2 className=\"mr-2 h-4 w-4 animate-spin\" /\u003e}\n              Save Profile\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/PublicProfile.tsx",
//   "contents": "import { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Home, ExternalLink } from \"lucide-react\";\nimport SectionHeading from \"@/components/profile/SectionHeading\";\nimport Pill from \"@/components/profile/Pill\";\nimport { InfoList } from \"@/components/profile/InfoList\";\nimport VideoCard from \"@/components/profile/VideoCard\";\nimport { toast } from \"sonner\";\n\ninterface Profile {\n  username: string;\n  full_name: string;\n  bio: string;\n  avatar_url: string;\n  acting_methods: string[];\n  experience_level: string;\n  headshot_url_1: string;\n  headshot_url_2: string;\n  headshot_url_3: string;\n  demo_video_url_1: string;\n  demo_video_url_2: string;\n  demo_video_title_1: string;\n  demo_video_title_2: string;\n  instagram_url: string;\n  website_url: string;\n  imdb_url: string;\n}\n\nexport default function PublicProfile() {\n  const { username } = useParams();\n  const [profile, setProfile] = useState\u003cProfile | null\u003e(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =\u003e {\n    const fetchProfile = async () =\u003e {\n      if (!username) return;\n\n      try {\n        const { data, error } = await supabase\n          .rpc('get_public_profile', { p_username: username });\n\n        if (error) {\n          console.error(\"Error fetching profile:\", error);\n          toast.error(\"Profile not found\");\n          return;\n        }\n\n        if (!data || data.length === 0) {\n          toast.error(\"Profile not found\");\n          return;\n        }\n\n        setProfile(data[0]);\n      } catch (error) {\n        console.error(\"Error:\", error);\n        toast.error(\"Failed to load profile\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProfile();\n  }, [username]);\n\n  if (loading) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-background flex items-center justify-center\"\u003e\n        \u003cdiv className=\"text-center\"\u003e\n          \u003cdiv className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"\u003e\u003c/div\u003e\n          \u003cp className=\"text-muted-foreground\"\u003eLoading profile...\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  if (!profile) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-background\"\u003e\n        {/* Navigation Header */}\n        \u003cdiv className=\"border-b bg-card\"\u003e\n          \u003cdiv className=\"container mx-auto px-4 py-4\"\u003e\n            \u003cLink \n              to=\"/\"\n              className=\"flex items-center gap-2 text-primary hover:text-primary/80 transition-colors\"\n            \u003e\n              \u003cArrowLeft className=\"w-4 h-4\" /\u003e\n              \u003cspan className=\"font-medium\"\u003eBack to MyAuditionAI.com\u003c/span\u003e\n            \u003c/Link\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv className=\"flex items-center justify-center min-h-[80vh]\"\u003e\n          \u003cdiv className=\"text-center\"\u003e\n            \u003ch1 className=\"text-2xl font-bold mb-4 text-foreground\"\u003eProfile Not Found\u003c/h1\u003e\n            \u003cp className=\"text-muted-foreground\"\u003eThe requested actor profile could not be found.\u003c/p\u003e\n            \u003cButton asChild className=\"mt-4\"\u003e\n              \u003cLink to=\"/\"\u003eReturn Home\u003c/Link\u003e\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  const headshots = [\n    profile.headshot_url_1,\n    profile.headshot_url_2,\n    profile.headshot_url_3,\n  ].filter(Boolean);\n\n  const demoVideos = [\n    { url: profile.demo_video_url_1, title: profile.demo_video_title_1 },\n    { url: profile.demo_video_url_2, title: profile.demo_video_title_2 },\n  ].filter((video) =\u003e video.url);\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-background\"\u003e\n      {/* Navigation Header */}\n      \u003cdiv className=\"border-b bg-card\"\u003e\n        \u003cdiv className=\"container mx-auto px-4 py-4\"\u003e\n          \u003cdiv className=\"flex items-center justify-between\"\u003e\n            \u003cLink \n              to=\"/\"\n              className=\"flex items-center gap-2 text-primary hover:text-primary/80 transition-colors\"\n            \u003e\n              \u003cArrowLeft className=\"w-4 h-4\" /\u003e\n              \u003cspan className=\"font-medium\"\u003eBack to MyAuditionAI.com\u003c/span\u003e\n            \u003c/Link\u003e\n            \u003cButton variant=\"outline\" size=\"sm\" asChild\u003e\n              \u003cLink to=\"/\"\u003e\n                \u003cHome className=\"w-4 h-4 mr-2\" /\u003e\n                Home\n              \u003c/Link\u003e\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n      {/* Profile Content */}\n      \u003cdiv className=\"bg-gradient-to-b from-muted/50 to-background\"\u003e\n        \u003cdiv className=\"container mx-auto px-4 py-8 lg:py-12\"\u003e\n          \u003cdiv className=\"max-w-6xl mx-auto grid lg:grid-cols-12 gap-8\"\u003e\n            {/* Sidebar */}\n            \u003caside className=\"lg:col-span-4 space-y-6 lg:sticky lg:top-8 self-start\"\u003e\n              {/* Primary Headshot */}\n              {headshots[0] \u0026\u0026 (\n                \u003cdiv className=\"overflow-hidden rounded-lg border bg-card\"\u003e\n                  \u003cimg\n                    src={headshots[0]}\n                    alt={`${profile.full_name} - Primary Headshot`}\n                    className=\"w-full h-auto object-cover\"\n                    loading=\"lazy\"\n                  /\u003e\n                \u003c/div\u003e\n              )}\n\n              {/* Links */}\n              {(profile.instagram_url || profile.website_url || profile.imdb_url) \u0026\u0026 (\n                \u003csection\u003e\n                  \u003cSectionHeading\u003eLinks\u003c/SectionHeading\u003e\n                  \u003cdiv className=\"mt-4\"\u003e\n                    \u003cInfoList\n                      items={[\n                        profile.instagram_url ? { label: \"Instagram\", value: \"View Profile\", href: profile.instagram_url } : {},\n                        profile.website_url ? { label: \"Website\", value: profile.website_url, href: profile.website_url } : {},\n                        profile.imdb_url ? { label: \"IMDb\", value: \"View IMDb Profile\", href: profile.imdb_url } : {},\n                      ].filter((i) =\u003e Object.keys(i).length \u003e 0) as any}\n                    /\u003e\n                  \u003c/div\u003e\n                \u003c/section\u003e\n              )}\n            \u003c/aside\u003e\n\n            {/* Main */}\n            \u003cmain className=\"lg:col-span-8 space-y-8\"\u003e\n              \u003cheader\u003e\n                \u003ch1 className=\"text-4xl lg:text-5xl font-bold tracking-tight\"\u003e{profile.full_name}\u003c/h1\u003e\n                \u003cp className=\"text-muted-foreground mt-1\"\u003eProfessional Actor\u003c/p\u003e\n                \u003cdiv className=\"flex flex-wrap gap-2 mt-4\"\u003e\n                  {profile.experience_level \u0026\u0026 (\n                    \u003cPill\u003e{profile.experience_level.charAt(0).toUpperCase() + profile.experience_level.slice(1)} Level\u003c/Pill\u003e\n                  )}\n                  \u003cPill\u003e@{profile.username}\u003c/Pill\u003e\n                \u003c/div\u003e\n              \u003c/header\u003e\n\n              {/* Bio */}\n              {profile.bio \u0026\u0026 (\n                \u003csection\u003e\n                  \u003cSectionHeading\u003eBiography\u003c/SectionHeading\u003e\n                  \u003carticle className=\"prose prose-sm md:prose-base dark:prose-invert mt-4 max-w-none\"\u003e\n                    \u003cp\u003e{profile.bio}\u003c/p\u003e\n                  \u003c/article\u003e\n                \u003c/section\u003e\n              )}\n\n              {/* Training \u0026 Methods */}\n              {profile.acting_methods \u0026\u0026 profile.acting_methods.length \u003e 0 \u0026\u0026 (\n                \u003csection\u003e\n                  \u003cSectionHeading\u003eTraining \u0026 Methods\u003c/SectionHeading\u003e\n                  \u003cdiv className=\"mt-4 flex flex-wrap gap-2\"\u003e\n                    {profile.acting_methods.map((method, i) =\u003e (\n                      \u003cPill key={i}\u003e{method}\u003c/Pill\u003e\n                    ))}\n                  \u003c/div\u003e\n                \u003c/section\u003e\n              )}\n\n              {/* Headshots */}\n              {headshots.length \u003e 1 \u0026\u0026 (\n                \u003csection\u003e\n                  \u003cSectionHeading\u003eHeadshots\u003c/SectionHeading\u003e\n                  \u003cdiv className=\"mt-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\"\u003e\n                    {headshots.slice(1).map((url, index) =\u003e (\n                      \u003cdiv key={index} className=\"group relative overflow-hidden rounded-md border\"\u003e\n                        \u003cimg\n                          src={url}\n                          alt={`${profile.full_name} - Headshot ${index + 2}`}\n                          className=\"w-full h-full object-cover\"\n                          loading=\"lazy\"\n                        /\u003e\n                        \u003ca\n                          href={url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors flex items-center justify-center\"\n                          aria-label=\"View full size\"\n                        \u003e\n                          \u003cspan className=\"opacity-0 group-hover:opacity-100 transition-opacity text-white inline-flex items-center gap-2 text-sm\"\u003e\n                            \u003cExternalLink className=\"w-4 h-4\" /\u003e View Full Size\n                          \u003c/span\u003e\n                        \u003c/a\u003e\n                      \u003c/div\u003e\n                    ))}\n                  \u003c/div\u003e\n                \u003c/section\u003e\n              )}\n\n              {/* Demo Reels */}\n              {demoVideos.length \u003e 0 \u0026\u0026 (\n                \u003csection\u003e\n                  \u003cSectionHeading\u003eDemo Reels\u003c/SectionHeading\u003e\n                  \u003cdiv className=\"mt-4 grid gap-6\"\u003e\n                    {demoVideos.map((video, i) =\u003e (\n                      \u003cVideoCard key={i} url={video.url} title={video.title} /\u003e\n                    ))}\n                  \u003c/div\u003e\n                \u003c/section\u003e\n              )}\n\n              {/* Actions */}\n              \u003cdiv className=\"flex flex-wrap gap-3 pt-2\"\u003e\n                \u003cButton variant=\"outline\" size=\"lg\"\u003eContact for Casting\u003c/Button\u003e\n              \u003c/div\u003e\n            \u003c/main\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n}",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/ScriptAnalysis.tsx",
//   "contents": "import Navigation from \"@/components/Navigation\";\nimport AuthModal from \"@/components/AuthModal\";\nimport ScriptUpload from \"@/components/ScriptUpload\";\nimport ScriptAnalyzer from \"@/components/ScriptAnalyzer\";\nimport ScriptTextEditor from \"@/components/ScriptTextEditor\";\nimport AnalysisResults from \"@/components/AnalysisResults\";\nimport CoachingSession from \"@/components/CoachingSession\";\nimport VideoUpload from \"@/components/VideoUpload\";\nimport VideoEvaluation from \"@/components/VideoEvaluation\";\nimport ScriptAnalysisMarketing from \"@/components/ScriptAnalysisMarketing\";\nimport ScriptStepsNav from \"@/components/analysis/ScriptStepsNav\";\nimport ScriptAnalysisHeader from \"@/components/ScriptAnalysisHeader\";\nimport ScriptAnalysisHistory from \"@/components/ScriptAnalysisHistory\";\n\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useNavigate } from \"react-router-dom\";\ntype AnalysisStep = 'upload' | 'analyze' | 'results' | 'coaching' | 'video-upload' | 'video-evaluation';\nconst ScriptAnalysis = () =\u003e {\n  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);\n  const [currentStep, setCurrentStep] = useState\u003cAnalysisStep\u003e('upload');\n  const [currentScriptId, setCurrentScriptId] = useState\u003cstring\u003e('');\n  const [currentAnalysisId, setCurrentAnalysisId] = useState\u003cstring\u003e('');\n  const [currentAnalysis, setCurrentAnalysis] = useState\u003cany\u003e(null);\n  const [currentCoachingSessionId, setCurrentCoachingSessionId] = useState\u003cstring\u003e('');\n  const [currentVideoId, setCurrentVideoId] = useState\u003cstring\u003e('');\n  const [currentScriptContent, setCurrentScriptContent] = useState\u003cstring\u003e('');\n  const [activeTab, setActiveTab] = useState('analysis');\n  const {\n    user,\n    signOut\n  } = useAuth();\n  const {\n    toast\n  } = useToast();\n  const navigate = useNavigate();\n  const handleStartAnalysisClick = () =\u003e {\n    if (user) {\n      setCurrentStep('upload');\n    } else {\n      setIsAuthModalOpen(true);\n    }\n  };\n  const handleScriptUploaded = (scriptId: string) =\u003e {\n    console.log('[ScriptAnalysis] Script uploaded, transitioning to analyze step. ScriptId:', scriptId);\n    setCurrentScriptId(scriptId);\n    setCurrentStep('analyze');\n    toast({\n      title: \"Script uploaded!\",\n      description: \"Now configure your analysis settings.\"\n    });\n  };\n  const handleAnalysisComplete = async (analysisId: string) =\u003e {\n    console.log('[ScriptAnalysis] Analysis complete, fetching results. AnalysisId:', analysisId);\n    setCurrentAnalysisId(analysisId);\n    try {\n      // Fetch the actual analysis data from the database\n      const {\n        data: analysisData,\n        error\n      } = await supabase.from('script_analyses').select('*').eq('id', analysisId).single();\n      if (error) {\n        console.error('Error fetching analysis:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load analysis results.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      console.log('[ScriptAnalysis] Analysis data fetched:', analysisData);\n      setCurrentAnalysis(analysisData);\n      setCurrentStep('results');\n      toast({\n        title: \"Analysis complete!\",\n        description: \"Your scene analysis is ready.\"\n      });\n    } catch (error) {\n      console.error('Error in handleAnalysisComplete:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load analysis results.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  const handleStartCoaching = () =\u003e {\n    console.log('[ScriptAnalysis] Starting coaching session...');\n    setCurrentStep('coaching');\n    toast({\n      title: \"Starting coaching session!\",\n      description: \"Your personalized coaching session is ready.\"\n    });\n  };\n  const handleCoachingSessionCreated = (coachingSessionId: string) =\u003e {\n    setCurrentCoachingSessionId(coachingSessionId);\n  };\n  const handleStartVideoUpload = () =\u003e {\n    setCurrentStep('video-upload');\n    toast({\n      title: \"Ready for video upload!\",\n      description: \"Upload your audition video for evaluation.\"\n    });\n  };\n  const handleVideoUploaded = (videoId: string) =\u003e {\n    setCurrentVideoId(videoId);\n    setCurrentStep('video-evaluation');\n    toast({\n      title: \"Video uploaded successfully!\",\n      description: \"Your audition video is being evaluated.\"\n    });\n  };\n  const handleSignOut = async () =\u003e {\n    const {\n      error\n    } = await signOut();\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } else {\n      setCurrentStep('upload');\n      setCurrentScriptId('');\n      setCurrentAnalysisId('');\n      setCurrentAnalysis(null);\n      setCurrentCoachingSessionId('');\n      setCurrentVideoId('');\n      setCurrentScriptContent('');\n      toast({\n        title: \"Signed out\",\n        description: \"You've been signed out successfully.\"\n      });\n    }\n  };\n  const resetWorkflow = () =\u003e {\n    setCurrentStep('upload');\n    setCurrentScriptId('');\n    setCurrentAnalysisId('');\n    setCurrentAnalysis(null);\n    setCurrentCoachingSessionId('');\n    setCurrentVideoId('');\n    setCurrentScriptContent('');\n  };\n  const handleScriptContentChange = (content: string) =\u003e {\n    setCurrentScriptContent(content);\n  };\n  const handleContinueFromHistory = (scriptId: string) =\u003e {\n    navigate(`/analysis/${scriptId}`);\n  };\n  if (user) {\n    return \u003cdiv className=\"min-h-screen bg-background\"\u003e\n        \u003cNavigation /\u003e\n        \n        \u003cdiv className=\"pt-16\"\u003e\n          {/* Hero Header */}\n          \u003cdiv className=\"bg-gradient-to-r from-primary/5 to-accent/5 border-b border-border\"\u003e\n            \u003cdiv className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\"\u003e\n              \u003cdiv className=\"flex items-center justify-between\"\u003e\n                \u003cdiv\u003e\n                  \u003ch1 className=\"text-3xl font-bold text-foreground\"\u003eScene Analysis\u003c/h1\u003e\n                  \u003cp className=\"mt-2 text-muted-foreground\"\u003eAnalyze scenes with AI-powered insights and coaching\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"flex items-center gap-3\"\u003e\n                  \u003cButton onClick={resetWorkflow} variant=\"outline\" size=\"sm\"\u003e\n                    New Analysis\n                  \u003c/Button\u003e\n                  \n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          {/* Main Content */}\n          \u003cdiv className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\"\u003e\n            \u003cTabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\"\u003e\n              {/* Tabs Navigation */}\n              \u003cdiv className=\"flex items-center justify-center\"\u003e\n                \u003cdiv className=\"relative\"\u003e\n                  \u003cTabsList className=\"grid w-full max-w-md grid-cols-2\"\u003e\n                    \u003cTabsTrigger value=\"analysis\" className=\"text-sm font-medium\"\u003e\n                      Current Analysis\n                    \u003c/TabsTrigger\u003e\n                    \u003cTabsTrigger \n                      value=\"history\" \n                      className=\"text-sm font-medium data-[state=active]:bg-gradient-to-r data-[state=active]:from-yellow-400 data-[state=active]:to-yellow-500 data-[state=active]:text-black data-[state=inactive]:text-yellow-600 data-[state=inactive]:hover:text-yellow-500 font-semibold\"\n                    \u003e\n                      Analysis History\n                    \u003c/TabsTrigger\u003e\n                  \u003c/TabsList\u003e\n                  {/* Blinking Arrow */}\n                  \u003cdiv className=\"absolute -right-8 top-1/2 -translate-y-1/2 text-yellow-500 animate-pulse\"\u003e\n                    \u003csvg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\"\u003e\n                      \u003cpath fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" /\u003e\n                    \u003c/svg\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n\n              {/* Guidance Text */}\n              \u003cdiv className=\"text-center text-sm text-muted-foreground max-w-2xl mx-auto\"\u003e\n                \u003cp\u003eIf you go away from this screen and lose your scene, you can find all your scenes in \"Analysis History\"\u003c/p\u003e\n              \u003c/div\u003e\n\n              {/* Analysis Tab */}\n              \u003cTabsContent value=\"analysis\" className=\"space-y-8\"\u003e\n                {/* Progress Steps */}\n                \u003cScriptStepsNav currentStep={currentStep} /\u003e\n\n                {/* Content Area */}\n                 \u003cdiv className=\"space-y-6\"\u003e\n                   {currentStep === 'upload' \u0026\u0026 (\n                     \u003cdiv className=\"bg-card border border-border rounded-lg p-8\"\u003e\n                       \u003cScriptUpload onScriptUploaded={handleScriptUploaded} /\u003e\n                     \u003c/div\u003e\n                   )}\n\n                  {currentStep === 'analyze' \u0026\u0026 currentScriptId \u0026\u0026 (\n                    \u003cdiv className=\"space-y-6\"\u003e\n                      \u003cdiv className=\"bg-card border border-border rounded-lg p-8\"\u003e\n                        \u003cdiv className=\"text-center mb-8\"\u003e\n                          \u003ch2 className=\"text-2xl font-semibold text-foreground mb-2\"\u003eConfigure Analysis\u003c/h2\u003e\n                          \u003cp className=\"text-muted-foreground\"\u003eEdit your script and select character and method for analysis\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cScriptTextEditor \n                          scriptId={currentScriptId} \n                          onScriptUpdated={() =\u003e {\n                            toast({\n                              title: \"Script Updated\",\n                              description: \"Character detection will be refreshed with your changes.\"\n                            });\n                          }} \n                          onContentChange={handleScriptContentChange} \n                        /\u003e\n                      \u003c/div\u003e\n                      \n                      \u003cdiv className=\"bg-card border border-border rounded-lg p-8\"\u003e\n                        \u003cScriptAnalyzer \n                          scriptId={currentScriptId} \n                          onAnalysisComplete={handleAnalysisComplete} \n                        /\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  )}\n\n                  {currentStep === 'results' \u0026\u0026 currentAnalysis \u0026\u0026 (\n                    \u003cdiv className=\"bg-card border border-border rounded-lg p-8\"\u003e\n                      \u003cdiv className=\"text-center mb-8\"\u003e\n                        \u003ch2 className=\"text-2xl font-semibold text-foreground mb-2\"\u003eAnalysis Results\u003c/h2\u003e\n                        \u003cp className=\"text-muted-foreground\"\u003eReview your character analysis and insights\u003c/p\u003e\n                      \u003c/div\u003e\n                      \u003cAnalysisResults analysis={currentAnalysis} onStartCoaching={handleStartCoaching} /\u003e\n                    \u003c/div\u003e\n                  )}\n\n                  {currentStep === 'coaching' \u0026\u0026 currentAnalysis \u0026\u0026 (\n                    \u003cdiv className=\"bg-card border border-border rounded-lg p-8\"\u003e\n                      \u003cdiv className=\"text-center mb-8\"\u003e\n                        \u003ch2 className=\"text-2xl font-semibold text-foreground mb-2\"\u003eCoaching Session\u003c/h2\u003e\n                        \u003cp className=\"text-muted-foreground\"\u003eGet personalized coaching based on your analysis\u003c/p\u003e\n                      \u003c/div\u003e\n                      \u003cCoachingSession \n                        analysis={{\n                          ...currentAnalysis,\n                          analysis_data: {\n                            ...currentAnalysis.analysis_data,\n                            script_content: currentScriptContent || currentAnalysis.analysis_data?.script_content\n                          }\n                        }} \n                        onBackToResults={() =\u003e setCurrentStep('results')} \n                        onStartVideoUpload={handleStartVideoUpload} \n                        onCoachingSessionCreated={handleCoachingSessionCreated} \n                      /\u003e\n                    \u003c/div\u003e\n                  )}\n\n                  {currentStep === 'video-upload' \u0026\u0026 currentAnalysis \u0026\u0026 currentCoachingSessionId \u0026\u0026 (\n                    \u003cdiv className=\"bg-card border border-border rounded-lg p-8\"\u003e\n                      \u003cdiv className=\"text-center mb-8\"\u003e\n                        \u003ch2 className=\"text-2xl font-semibold text-foreground mb-2\"\u003eUpload Audition Video\u003c/h2\u003e\n                        \u003cp className=\"text-muted-foreground\"\u003eUpload your performance for evaluation\u003c/p\u003e\n                      \u003c/div\u003e\n                      \u003cVideoUpload \n                        analysis={currentAnalysis} \n                        coachingSessionId={currentCoachingSessionId} \n                        onVideoUploaded={handleVideoUploaded} \n                        onBackToCoaching={() =\u003e setCurrentStep('coaching')} \n                      /\u003e\n                    \u003c/div\u003e\n                  )}\n\n                  {currentStep === 'video-evaluation' \u0026\u0026 currentVideoId \u0026\u0026 currentAnalysis \u0026\u0026 (\n                    \u003cdiv className=\"bg-card border border-border rounded-lg p-8\"\u003e\n                      \u003cdiv className=\"text-center mb-8\"\u003e\n                        \u003ch2 className=\"text-2xl font-semibold text-foreground mb-2\"\u003eVideo Evaluation\u003c/h2\u003e\n                        \u003cp className=\"text-muted-foreground\"\u003eReview your performance analysis\u003c/p\u003e\n                      \u003c/div\u003e\n                      \u003cVideoEvaluation \n                        videoId={currentVideoId} \n                        analysis={currentAnalysis} \n                        onBackToUpload={() =\u003e setCurrentStep('video-upload')} \n                        onStartNewAnalysis={resetWorkflow} \n                      /\u003e\n                    \u003c/div\u003e\n                  )}\n                \u003c/div\u003e\n              \u003c/TabsContent\u003e\n\n              {/* History Tab */}\n              \u003cTabsContent value=\"history\" className=\"space-y-6\"\u003e\n                \u003cdiv className=\"bg-card border border-border rounded-lg p-8\"\u003e\n                  \u003cScriptAnalysisHistory onContinueAnalysis={handleContinueFromHistory} onStartFirstAnalysis={() =\u003e setActiveTab('analysis')} /\u003e\n                \u003c/div\u003e\n              \u003c/TabsContent\u003e\n            \u003c/Tabs\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e;\n  }\n\n  // Marketing page for non-authenticated users\n  return \u003cdiv className=\"min-h-screen bg-background\"\u003e\n      \u003cNavigation /\u003e\n      \n      \u003cdiv className=\"pt-16\"\u003e\n        \u003cdiv className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\"\u003e\n          \u003cScriptAnalysisMarketing onStartAnalysisClick={handleStartAnalysisClick} /\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \n      \u003cAuthModal isOpen={isAuthModalOpen} onClose={() =\u003e setIsAuthModalOpen(false)} /\u003e\n    \u003c/div\u003e;\n};\nexport default ScriptAnalysis;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/SelfTaping.tsx",
//   "contents": "\nimport Navigation from \"@/components/Navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Users, Clock, Target, Film, Lightbulb } from \"lucide-react\";\nimport HeadshotGrader from \"@/components/HeadshotGrader\";\n\nconst SelfTaping = () =\u003e {\n  const handleWatchVideo = () =\u003e {\n    // Scroll to video section\n    const videoElement = document.getElementById('self-taping-video');\n    videoElement?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n  };\n\n  const techniques = [\n    {\n      icon: Film,\n      title: \"Camera Setup\",\n      description: \"Learn optimal camera positioning and lighting for professional-looking self-tapes\"\n    },\n    {\n      icon: Target,\n      title: \"Focus \u0026 Framing\",\n      description: \"Master the art of proper framing and maintaining focus throughout your performance\"\n    },\n    {\n      icon: Clock,\n      title: \"Timing \u0026 Pacing\",\n      description: \"Perfect your timing and understand how to pace your performance for maximum impact\"\n    },\n    {\n      icon: Lightbulb,\n      title: \"Performance Tips\",\n      description: \"Discover advanced techniques to elevate your self-tape performances\"\n    }\n  ];\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-black text-white\"\u003e\n      \u003cNavigation /\u003e\n      \n      \u003cdiv className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\"\u003e\n        \u003cdiv className=\"max-w-7xl mx-auto\"\u003e\n          {/* Hero Section */}\n          \u003cdiv className=\"text-center mb-16\"\u003e\n            \u003ch1 className=\"text-5xl md:text-6xl font-bold mb-6\"\u003e\n              Master the Art of{\" \"}\n              \u003cspan className=\"bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n                Self Taping\n              \u003c/span\u003e\n            \u003c/h1\u003e\n            \u003cp className=\"text-xl text-gray-300 max-w-3xl mx-auto\"\u003e\n              Learn professional self-taping techniques from industry expert Will Roberts. \n              Transform your audition process and book more roles with proven methods.\n            \u003c/p\u003e\n          \u003c/div\u003e\n\n          {/* Featured Video Section */}\n          \u003cdiv className=\"mb-16\"\u003e\n            \u003cCard className=\"bg-gray-900/50 border-gray-700 overflow-hidden\"\u003e\n              \u003cCardHeader className=\"text-center\"\u003e\n                \u003cCardTitle className=\"text-3xl font-bold text-white mb-2\"\u003e\n                  Will Roberts' Self-Taping Methodology\n                \u003c/CardTitle\u003e\n                \u003cp className=\"text-gray-400 text-lg\"\u003e\n                  Industry secrets revealed in this comprehensive guide\n                \u003c/p\u003e\n              \u003c/CardHeader\u003e\n              \u003cCardContent className=\"p-8\"\u003e\n                {/* YouTube Video Embed */}\n                \u003cdiv \n                  id=\"self-taping-video\"\n                  className=\"relative aspect-video bg-gray-800 rounded-lg overflow-hidden mb-6\"\n                \u003e\n                  \u003ciframe\n                    src=\"https://www.youtube.com/embed/5PtfVF8XXHw?rel=0\u0026modestbranding=1\u0026controls=1\"\n                    title=\"Will Roberts' Self-Taping Methodology\"\n                    className=\"absolute inset-0 w-full h-full\"\n                    frameBorder=\"0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                    allowFullScreen\n                  /\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv className=\"text-center\"\u003e\n                  \u003cButton \n                    onClick={handleWatchVideo}\n                    className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-semibold px-8 py-3\"\n                  \u003e\n                    \u003cPlay className=\"w-5 h-5 mr-2\" /\u003e\n                    Watch Video\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              \u003c/CardContent\u003e\n            \u003c/Card\u003e\n          \u003c/div\u003e\n\n          {/* Techniques Grid */}\n          \u003cdiv className=\"mb-16\"\u003e\n            \u003ch2 className=\"text-3xl font-bold text-center mb-12\"\u003e\n              Self-Taping{\" \"}\n              \u003cspan className=\"bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n                Techniques\n              \u003c/span\u003e\n            \u003c/h2\u003e\n            \n            \u003cdiv className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"\u003e\n              {techniques.map((technique, index) =\u003e (\n                \u003cCard key={index} className=\"bg-gray-900/50 border-gray-700 hover:border-gray-600 transition-colors text-center\"\u003e\n                  \u003cCardHeader\u003e\n                    \u003ctechnique.icon className=\"w-12 h-12 text-yellow-400 mx-auto mb-4\" /\u003e\n                    \u003cCardTitle className=\"text-white text-lg\"\u003e{technique.title}\u003c/CardTitle\u003e\n                  \u003c/CardHeader\u003e\n                  \u003cCardContent\u003e\n                    \u003cp className=\"text-gray-400\"\u003e{technique.description}\u003c/p\u003e\n                  \u003c/CardContent\u003e\n                \u003c/Card\u003e\n              ))}\n            \u003c/div\u003e\n          \u003c/div\u003e\n\n          {/* AI Headshot Grading Tool Section */}\n          \u003cdiv id=\"headshot-grader\" className=\"mb-16\"\u003e\n            \u003cdiv className=\"text-center mb-12\"\u003e\n              \u003ch2 className=\"text-3xl font-bold mb-4\"\u003e\n                AI Headshot{\" \"}\n                \u003cspan className=\"bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\"\u003e\n                  Grading Tool\n                \u003c/span\u003e\n              \u003c/h2\u003e\n              \u003cp className=\"text-gray-300 max-w-3xl mx-auto\"\u003e\n                Get professional feedback on your headshots with our AI-powered grading system. \n                Receive detailed analysis on technical quality, professional standards, and industry expectations.\n              \u003c/p\u003e\n            \u003c/div\u003e\n            \u003cHeadshotGrader /\u003e\n          \u003c/div\u003e\n\n          {/* Additional Resources Section */}\n          \u003cdiv className=\"bg-gradient-to-r from-yellow-500/10 via-orange-500/10 to-red-500/10 rounded-lg p-8 text-center\"\u003e\n            \u003ch2 className=\"text-2xl font-bold mb-4\"\u003eMore Resources Coming Soon\u003c/h2\u003e\n            \u003cp className=\"text-gray-300 mb-6 max-w-2xl mx-auto\"\u003e\n              We're continuously expanding our self-taping resources. Stay tuned for additional \n              tutorials, downloadable guides, and interactive workshops to perfect your craft.\n            \u003c/p\u003e\n            \u003cdiv className=\"flex flex-col sm:flex-row gap-4 justify-center\"\u003e\n              \u003cButton className=\"bg-yellow-500 hover:bg-yellow-600 text-black font-semibold\"\u003e\n                \u003cUsers className=\"w-4 h-4 mr-2\" /\u003e\n                Join Community\n              \u003c/Button\u003e\n              \u003cButton className=\"bg-gray-800 hover:bg-gray-700 text-white border border-gray-600\"\u003e\n                \u003cFilm className=\"w-4 h-4 mr-2\" /\u003e\n                Download Guide\n              \u003c/Button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default SelfTaping;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/TTSDebug.tsx",
//   "contents": "import React, { useState } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst VOICES = [\n  { id: \"9BWtsMINqrJLrRacOk9x\", name: \"Aria\" },\n  { id: \"CwhRBWXzGAHq8TQ4Fs17\", name: \"Roger\" },\n  { id: \"EXAVITQu4vr4xnSDxMaL\", name: \"Sarah\" },\n  { id: \"FGY2WhTYpPnrIDTdsKH5\", name: \"Laura\" },\n  { id: \"IKne3meq5aSn9XLyUdCD\", name: \"Charlie\" },\n  { id: \"JBFqnCBsd6RMkjVDRZzb\", name: \"George\" },\n  { id: \"N2lVS1w4EtoT3dr4eOWO\", name: \"Callum\" },\n  { id: \"SAz9YHcvj6GT2YYXdXww\", name: \"River\" },\n  { id: \"TX3LPaxmHKxFdv7VOQHJ\", name: \"Liam\" },\n  { id: \"XB0fDUnXU5powFXDhCwa\", name: \"Charlotte\" },\n  { id: \"Xb7hH8MSUJpSbSDYk0k2\", name: \"Alice\" },\n  { id: \"XrExE9yKIg1WjnnlVkGX\", name: \"Matilda\" },\n  { id: \"bIHbv24MWmeRgasZH58o\", name: \"Will\" },\n  { id: \"cgSgspJ2msm6clMCkdW9\", name: \"Jessica\" },\n  { id: \"cjVigY5qzO86Huf0OWal\", name: \"Eric\" },\n  { id: \"iP95p4xoKVk53GoZ742B\", name: \"Chris\" },\n  { id: \"nPczCjzI2devNBz1zQrb\", name: \"Brian\" },\n  { id: \"onwK4e9ZLuTAKqWW03F9\", name: \"Daniel\" },\n  { id: \"pFZP5JQG7iQjIQuC4Bku\", name: \"Lily\" },\n  { id: \"pqHfZKP75CvOlQylNhV4\", name: \"Bill\" },\n];\n\nconst TTSDebug: React.FC = () =\u003e {\n  const [text, setText] = useState(\n    \"Hello! This is a quick test of ElevenLabs text-to-speech.\"\n  );\n  const [voiceId, setVoiceId] = useState(VOICES[0].id);\n  const [isLoading, setIsLoading] = useState(false);\n  const [result, setResult] = useState\u003cany\u003e(null);\n  const [audioUrl, setAudioUrl] = useState\u003cstring | null\u003e(null);\n  const [error, setError] = useState\u003cstring | null\u003e(null);\n\n  const synthesize = async () =\u003e {\n    setIsLoading(true);\n    setError(null);\n    setResult(null);\n    if (audioUrl) URL.revokeObjectURL(audioUrl);\n    setAudioUrl(null);\n\n    try {\n      const { data, error } = await supabase.functions.invoke(\n        \"text-to-speech\",\n        {\n          body: {\n            text,\n            voice: voiceId,\n            useElevenLabs: true,\n          },\n        }\n      );\n\n      if (error) throw new Error(error.message);\n\n      setResult(data);\n\n      if (data.provider !== \"elevenlabs\") {\n        setError(\n          (data?.error ? `${data.error} ` : \"\") +\n            `Provider: ${data?.provider || \"unknown\"}. Check ELEVENLABS_API_KEY in Supabase.`\n        );\n        return;\n      }\n\n      // Decode base64 and create audio URL\n      const binary = atob(data.audioContent);\n      const len = binary.length;\n      const bytes = new Uint8Array(len);\n      for (let i = 0; i \u003c len; i++) bytes[i] = binary.charCodeAt(i);\n      const blob = new Blob([bytes], { type: \"audio/mpeg\" });\n      const url = URL.createObjectURL(blob);\n      setAudioUrl(url);\n    } catch (e: any) {\n      setError(e?.message || \"Unexpected error\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    \u003cmain className=\"container mx-auto max-w-3xl py-8\"\u003e\n      \u003cCard\u003e\n        \u003cCardHeader\u003e\n          \u003cCardTitle\u003eText-to-Speech Debugger (ElevenLabs)\u003c/CardTitle\u003e\n        \u003c/CardHeader\u003e\n        \u003cCardContent className=\"space-y-4\"\u003e\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"voice\"\u003eVoice\u003c/Label\u003e\n            \u003cSelect value={voiceId} onValueChange={setVoiceId}\u003e\n              \u003cSelectTrigger id=\"voice\"\u003e\n                \u003cSelectValue placeholder=\"Select a voice\" /\u003e\n              \u003c/SelectTrigger\u003e\n              \u003cSelectContent\u003e\n                {VOICES.map((v) =\u003e (\n                  \u003cSelectItem key={v.id} value={v.id}\u003e\n                    {v.name} ({v.id.slice(0, 6)}…)\n                  \u003c/SelectItem\u003e\n                ))}\n              \u003c/SelectContent\u003e\n            \u003c/Select\u003e\n          \u003c/div\u003e\n\n          \u003cdiv className=\"space-y-2\"\u003e\n            \u003cLabel htmlFor=\"text\"\u003eText\u003c/Label\u003e\n            \u003cTextarea\n              id=\"text\"\n              value={text}\n              onChange={(e) =\u003e setText(e.target.value)}\n              rows={5}\n            /\u003e\n          \u003c/div\u003e\n\n          \u003cButton onClick={synthesize} disabled={isLoading || !text.trim()}\u003e\n            {isLoading ? \"Synthesizing…\" : \"Synthesize with ElevenLabs\"}\n          \u003c/Button\u003e\n\n          {error \u0026\u0026 (\n            \u003cdiv className=\"text-sm text-destructive\"\u003e{error}\u003c/div\u003e\n          )}\n\n          {audioUrl \u0026\u0026 (\n            \u003cdiv className=\"space-y-2\"\u003e\n              \u003cLabel\u003ePreview\u003c/Label\u003e\n              \u003caudio src={audioUrl} controls /\u003e\n            \u003c/div\u003e\n          )}\n\n          {result \u0026\u0026 (\n            \u003cdiv className=\"space-y-2\"\u003e\n              \u003cLabel\u003eRaw response\u003c/Label\u003e\n              \u003cpre className=\"text-xs overflow-auto p-3 rounded border\"\u003e\n                {JSON.stringify(result, null, 2)}\n              \u003c/pre\u003e\n            \u003c/div\u003e\n          )}\n        \u003c/CardContent\u003e\n      \u003c/Card\u003e\n    \u003c/main\u003e\n  );\n};\n\nexport default TTSDebug;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Teleprompter.tsx",
//   "contents": "import React, { useState, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n\nimport { FileText, Upload, History } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport ScriptUpload from '@/components/ScriptUpload';\nimport ScriptTextEditor from '@/components/ScriptTextEditor';\nimport TeleprompterModeSelection from '@/components/TeleprompterModeSelection';\nimport TeleprompterHistory from '@/components/teleprompter/TeleprompterHistory';\nimport EnhancedBasicTeleprompter from '@/components/teleprompter/EnhancedBasicTeleprompter';\nimport EnhancedAdvancedTeleprompter from '@/components/teleprompter/EnhancedAdvancedTeleprompter';\nimport EnhancedProTeleprompter from '@/components/teleprompter/EnhancedProTeleprompter';\nimport { DataUseDisclaimer } from '@/components/DataUseDisclaimer';\nimport PageHeaderNav from '@/components/PageHeaderNav';\n\ntype TeleprompterStep = 'selection' | 'basic' | 'advanced' | 'pro';\ntype TeleprompterMode = 'basic' | 'advanced' | 'pro';\n\ninterface Script {\n  id: string;\n  title: string;\n  content: string;\n  characters?: string[];\n}\n\nconst Teleprompter = () =\u003e {\n  const { user, loading } = useAuth();\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState\u003cTeleprompterStep\u003e('selection');\n  const [currentScript, setCurrentScript] = useState\u003cScript | null\u003e(null);\n  const [selectedMode, setSelectedMode] = useState\u003cTeleprompterMode\u003e('advanced');\n\n  const handleScriptUploaded = async (scriptId: string) =\u003e {\n    try {\n      // Fetch the uploaded script to get full details\n      const { data, error } = await supabase\n        .from('scripts')\n        .select('*')\n        .eq('id', scriptId)\n        .single();\n\n      if (error) throw error;\n\n      const script = {\n        id: data.id,\n        title: data.title,\n        content: data.content,\n        characters: data.characters || []\n      };\n      \n      setCurrentScript(script);\n      setCurrentStep('advanced'); // Skip directly to advanced mode\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load uploaded script.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleScriptSelected = async (scriptId: string) =\u003e {\n    try {\n      const { data, error } = await supabase\n        .from('scripts')\n        .select('*')\n        .eq('id', scriptId)\n        .single();\n\n      if (error) throw error;\n\n      const script = {\n        id: data.id,\n        title: data.title,\n        content: data.content,\n        characters: data.characters || []\n      };\n      \n      setCurrentScript(script);\n      setCurrentStep('advanced'); // Skip directly to advanced mode\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load script.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleModeSelected = (mode: TeleprompterMode) =\u003e {\n    setSelectedMode(mode);\n    setCurrentStep(mode);\n  };\n\n  const handleBackToSelection = () =\u003e {\n    setCurrentStep('selection');\n    setCurrentScript(null);\n  };\n\n  if (loading) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-background flex items-center justify-center\"\u003e\n        \u003cCard className=\"max-w-md mx-auto\"\u003e\n          \u003cCardContent className=\"p-8 text-center\"\u003e\n            \u003cdiv className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-primary mx-auto mb-4\"\u003e\u003c/div\u003e\n            \u003cp className=\"text-muted-foreground\"\u003eChecking session…\u003c/p\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  if (!user) {\n    return (\n      \u003cdiv className=\"min-h-screen bg-background flex items-center justify-center\"\u003e\n        \u003cCard className=\"max-w-md mx-auto\"\u003e\n          \u003cCardContent className=\"p-8 text-center\"\u003e\n            \u003cFileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" /\u003e\n            \u003ch2 className=\"text-2xl font-bold text-foreground mb-2\"\u003eSign In Required\u003c/h2\u003e\n            \u003cp className=\"text-muted-foreground mb-6\"\u003ePlease sign in to use the teleprompter.\u003c/p\u003e\n            \u003cButton onClick={() =\u003e window.location.href = '/auth'}\u003eSign In\u003c/Button\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  // Handle script updates from teleprompter editors\n  const handleScriptUpdated = useCallback((updatedScript: Script) =\u003e {\n    setCurrentScript(updatedScript);\n  }, []);\n\n  const renderCurrentStep = () =\u003e {\n    switch (currentStep) {\n      case 'selection':\n        return (\n          \u003c\u003e\n            \u003cPageHeaderNav title=\"Teleprompter\" /\u003e\n            \u003cdiv className=\"max-w-5xl mx-auto px-4 pt-8\"\u003e\n              \u003cdiv className=\"text-center mb-12\"\u003e\n                \u003ch1 className=\"text-4xl font-bold text-primary mb-4\"\u003e\n                  Teleprompter\n                \u003c/h1\u003e\n                \u003cp className=\"text-lg text-muted-foreground\"\u003e\n                  Upload a new script or select from your recent scripts to get started\n                \u003c/p\u003e\n              \u003c/div\u003e\n\n            \u003cdiv className=\"space-y-8\"\u003e\n              {/* Recent Scripts Section */}\n              \u003cCard className=\"w-full\"\u003e\n                \u003cCardHeader\u003e\n                  \u003cCardTitle className=\"flex items-center gap-3\"\u003e\n                    \u003cHistory className=\"w-6 h-6 text-primary\" /\u003e\n                    Recent Scripts\n                  \u003c/CardTitle\u003e\n                \u003c/CardHeader\u003e\n                \u003cCardContent\u003e\n                  \u003cTeleprompterHistory onScriptSelected={handleScriptSelected} /\u003e\n                \u003c/CardContent\u003e\n              \u003c/Card\u003e\n\n              {/* Upload New Script Section */}\n              \u003cCard className=\"w-full\"\u003e\n                \u003cCardHeader\u003e\n                  \u003cCardTitle className=\"flex items-center gap-3\"\u003e\n                    \u003cUpload className=\"w-6 h-6 text-primary\" /\u003e\n                    Upload New Script\n                  \u003c/CardTitle\u003e\n                \u003c/CardHeader\u003e\n                \u003cCardContent\u003e\n                  \u003cScriptUpload onScriptUploaded={handleScriptUploaded} /\u003e\n                \u003c/CardContent\u003e\n              \u003c/Card\u003e\n              \n              \u003cDataUseDisclaimer className=\"mt-6\" /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003c/\u003e\n        );\n\n      case 'basic':\n        return currentScript \u0026\u0026 (\n          \u003cEnhancedBasicTeleprompter \n            script={currentScript} \n            onBack={handleBackToSelection}\n            onScriptUpdated={handleScriptUpdated}\n          /\u003e\n        );\n      case 'advanced':\n        return currentScript \u0026\u0026 (\n          \u003cEnhancedAdvancedTeleprompter \n            script={currentScript} \n            onBack={handleBackToSelection}\n            onScriptUpdated={handleScriptUpdated}\n          /\u003e\n        );\n      case 'pro':\n        return currentScript \u0026\u0026 (\n          \u003cEnhancedProTeleprompter \n            script={currentScript} \n            onBack={handleBackToSelection}\n            onScriptUpdated={handleScriptUpdated}\n          /\u003e\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    \u003cdiv className=\"min-h-screen bg-background\"\u003e\n      {currentStep === 'selection' ? (\n        \u003cdiv className=\"container max-w-7xl mx-auto px-4 pb-8\" style={{ marginTop: '100px', paddingTop: '20px' }}\u003e\n          {renderCurrentStep()}\n        \u003c/div\u003e\n      ) : (\n        renderCurrentStep()\n      )}\n    \u003c/div\u003e\n  );\n};\n\nexport default Teleprompter;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Terms.tsx",
//   "contents": "import { useEffect } from \"react\";\nimport Navigation from \"@/components/Navigation\";\n\nconst Terms = () =\u003e {\n  useEffect(() =\u003e {\n    // SEO meta tags\n    document.title = \"Terms of Use | MyAuditionAI\";\n    \n    // Meta description\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\"content\", \"Terms of Use for MyAuditionAI - Review our service terms, user responsibilities, and platform guidelines for AI-powered acting tools.\");\n    } else {\n      const meta = document.createElement(\"meta\");\n      meta.name = \"description\";\n      meta.content = \"Terms of Use for MyAuditionAI - Review our service terms, user responsibilities, and platform guidelines for AI-powered acting tools.\";\n      document.head.appendChild(meta);\n    }\n\n    // Canonical URL\n    const canonicalLink = document.querySelector('link[rel=\"canonical\"]');\n    if (canonicalLink) {\n      canonicalLink.setAttribute(\"href\", window.location.origin + \"/terms\");\n    } else {\n      const link = document.createElement(\"link\");\n      link.rel = \"canonical\";\n      link.href = window.location.origin + \"/terms\";\n      document.head.appendChild(link);\n    }\n  }, []);\n\n  return (\n    \u003cmain className=\"min-h-screen bg-background\"\u003e\n      \u003cNavigation /\u003e\n      \u003cdiv className=\"pt-20 pb-12 px-4\"\u003e\n        \u003cdiv className=\"max-w-4xl mx-auto\"\u003e\n          \u003cheader className=\"mb-8\"\u003e\n            \u003ch1 className=\"text-4xl font-bold text-foreground mb-4\"\u003eTerms of Use\u003c/h1\u003e\n            \u003cp className=\"text-muted-foreground text-lg\"\u003e\n              Guidelines and conditions for using MyAuditionAI services\n            \u003c/p\u003e\n          \u003c/header\u003e\n\n          \u003cdiv className=\"prose prose-neutral dark:prose-invert max-w-none space-y-8\"\u003e\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eEligibility\u003c/h2\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                Users must be at least 13 years old (or 16 in some jurisdictions) to create an account. By signing up, you confirm that you meet the age requirement and agree to these Terms.\n              \u003c/p\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eAcceptable Use\u003c/h2\u003e\n              \u003cul className=\"list-disc pl-6 space-y-2 text-muted-foreground\"\u003e\n                \u003cli\u003eYou may only upload scripts, videos, and headshots that you own or have the rights to use.\u003c/li\u003e\n                \u003cli\u003eYou agree not to misuse the platform (e.g., uploading harmful files, spamming, or misrepresenting your identity).\u003c/li\u003e\n                \u003cli\u003eYou agree not to attempt to reverse engineer, hack, or exploit the platform's technology.\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eMembership \u0026 Billing\u003c/h2\u003e\n              \u003cul className=\"list-disc pl-6 space-y-2 text-muted-foreground\"\u003e\n                \u003cli\u003eFree demo accounts include limited access to features.\u003c/li\u003e\n                \u003cli\u003ePaid subscriptions (Pro, $19.99/month) are billed monthly and may be canceled anytime via your account settings. Access remains until the end of the paid period.\u003c/li\u003e\n                \u003cli\u003eRefunds are handled on a case-by-case basis where required by law.\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eAI-Generated Content\u003c/h2\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                All AI-generated analysis, feedback, or suggestions are tools to assist your preparation, not professional or legal advice. MyAuditionAI is not responsible for casting decisions, career outcomes, or third-party interpretations of your audition materials.\n              \u003c/p\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eTermination of Use\u003c/h2\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                We reserve the right to suspend or terminate accounts that violate these Terms, misuse the platform, or engage in fraudulent activity.\n              \u003c/p\u003e\n            \u003c/section\u003e\n\n            \u003csection\u003e\n              \u003ch2 className=\"text-2xl font-semibold text-foreground mb-4\"\u003eGoverning Law\u003c/h2\u003e\n              \u003cp className=\"text-muted-foreground\"\u003e\n                These Terms are governed by the laws of the state where MyAuditionAI is registered. Any disputes will be resolved under that jurisdiction.\n              \u003c/p\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/main\u003e\n  );\n};\n\nexport default Terms;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/pages/Test.tsx",
//   "contents": "import React, { useState, useRef, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Mic, MicOff, Trash2, Download } from 'lucide-react';\nimport { useToast } from '@/components/ui/use-toast';\n\nconst Test: React.FC = () =\u003e {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [isSupported, setIsSupported] = useState(false);\n  const [interimTranscript, setInterimTranscript] = useState('');\n  const recognitionRef = useRef\u003cSpeechRecognition | null\u003e(null);\n  const { toast } = useToast();\n\n  // Check if Web Speech API is supported\n  React.useEffect(() =\u003e {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    setIsSupported(!!SpeechRecognition);\n    \n    if (SpeechRecognition) {\n      const recognition = new SpeechRecognition();\n      recognition.continuous = true;\n      recognition.interimResults = true;\n      recognition.lang = 'en-US';\n      \n      recognition.onstart = () =\u003e {\n        setIsListening(true);\n        toast({\n          title: \"Listening started\",\n          description: \"Speak now, and your voice will be converted to text.\",\n        });\n      };\n\n      recognition.onresult = (event) =\u003e {\n        let finalTranscript = '';\n        let interimText = '';\n\n        for (let i = event.resultIndex; i \u003c event.results.length; i++) {\n          const result = event.results[i];\n          if (result.isFinal) {\n            finalTranscript += result[0].transcript + ' ';\n          } else {\n            interimText += result[0].transcript;\n          }\n        }\n\n        if (finalTranscript) {\n          setTranscript(prev =\u003e prev + finalTranscript);\n        }\n        setInterimTranscript(interimText);\n      };\n\n      recognition.onerror = (event) =\u003e {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n        toast({\n          title: \"Recognition Error\",\n          description: `Error: ${event.error}. Please try again.`,\n          variant: \"destructive\",\n        });\n      };\n\n      recognition.onend = () =\u003e {\n        setIsListening(false);\n        setInterimTranscript('');\n      };\n\n      recognitionRef.current = recognition;\n    }\n\n    return () =\u003e {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, [toast]);\n\n  const startListening = useCallback(() =\u003e {\n    if (recognitionRef.current \u0026\u0026 !isListening) {\n      recognitionRef.current.start();\n    }\n  }, [isListening]);\n\n  const stopListening = useCallback(() =\u003e {\n    if (recognitionRef.current \u0026\u0026 isListening) {\n      recognitionRef.current.stop();\n    }\n  }, [isListening]);\n\n  const clearTranscript = () =\u003e {\n    setTranscript('');\n    setInterimTranscript('');\n  };\n\n  const downloadTranscript = () =\u003e {\n    if (!transcript.trim()) {\n      toast({\n        title: \"No content\",\n        description: \"There's no transcript to download.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const blob = new Blob([transcript], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `transcript-${new Date().toISOString().slice(0, 10)}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Download started\",\n      description: \"Your transcript has been downloaded.\",\n    });\n  };\n\n  if (!isSupported) {\n    return (\n      \u003cdiv className=\"container mx-auto px-4 py-8 max-w-4xl\"\u003e\n        \u003cCard\u003e\n          \u003cCardHeader\u003e\n            \u003cCardTitle className=\"text-destructive\"\u003eSpeech Recognition Not Supported\u003c/CardTitle\u003e\n            \u003cCardDescription\u003e\n              Your browser doesn't support the Web Speech API. Please try using a modern browser like Chrome, Edge, or Safari.\n            \u003c/CardDescription\u003e\n          \u003c/CardHeader\u003e\n        \u003c/Card\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  return (\n    \u003cdiv className=\"container mx-auto px-4 py-8 max-w-4xl\"\u003e\n      \u003cdiv className=\"space-y-6\"\u003e\n        \u003cdiv className=\"text-center\"\u003e\n          \u003ch1 className=\"text-4xl font-bold text-primary mb-4\"\u003eVoice to Text Test\u003c/h1\u003e\n          \u003cp className=\"text-muted-foreground text-lg\"\u003e\n            Test speech-to-text functionality by speaking into your microphone\n          \u003c/p\u003e\n        \u003c/div\u003e\n\n        \u003cCard\u003e\n          \u003cCardHeader\u003e\n            \u003cCardTitle className=\"flex items-center justify-between\"\u003e\n              Speech Recognition\n              \u003cBadge variant={isListening ? \"default\" : \"secondary\"}\u003e\n                {isListening ? \"Listening...\" : \"Ready\"}\n              \u003c/Badge\u003e\n            \u003c/CardTitle\u003e\n            \u003cCardDescription\u003e\n              Click the microphone button to start/stop voice recognition\n            \u003c/CardDescription\u003e\n          \u003c/CardHeader\u003e\n          \u003cCardContent className=\"space-y-4\"\u003e\n            \u003cdiv className=\"flex gap-2 justify-center\"\u003e\n              \u003cButton\n                size=\"lg\"\n                variant={isListening ? \"destructive\" : \"default\"}\n                onClick={isListening ? stopListening : startListening}\n                className=\"flex items-center gap-2\"\n              \u003e\n                {isListening ? \u003cMicOff className=\"w-5 h-5\" /\u003e : \u003cMic className=\"w-5 h-5\" /\u003e}\n                {isListening ? \"Stop Listening\" : \"Start Listening\"}\n              \u003c/Button\u003e\n              \n              \u003cButton\n                variant=\"outline\"\n                onClick={clearTranscript}\n                disabled={!transcript \u0026\u0026 !interimTranscript}\n                className=\"flex items-center gap-2\"\n              \u003e\n                \u003cTrash2 className=\"w-4 h-4\" /\u003e\n                Clear\n              \u003c/Button\u003e\n\n              \u003cButton\n                variant=\"outline\"\n                onClick={downloadTranscript}\n                disabled={!transcript.trim()}\n                className=\"flex items-center gap-2\"\n              \u003e\n                \u003cDownload className=\"w-4 h-4\" /\u003e\n                Download\n              \u003c/Button\u003e\n            \u003c/div\u003e\n\n            \u003cdiv className=\"space-y-2\"\u003e\n              \u003clabel className=\"text-sm font-medium\"\u003eTranscript:\u003c/label\u003e\n              \u003cTextarea\n                value={transcript + interimTranscript}\n                onChange={(e) =\u003e setTranscript(e.target.value)}\n                placeholder=\"Your speech will appear here as text...\"\n                className=\"min-h-[200px] font-mono\"\n              /\u003e\n              {interimTranscript \u0026\u0026 (\n                \u003cp className=\"text-xs text-muted-foreground\"\u003e\n                  Interim text (processing): {interimTranscript}\n                \u003c/p\u003e\n              )}\n            \u003c/div\u003e\n\n            \u003cdiv className=\"text-sm text-muted-foreground space-y-1\"\u003e\n              \u003cp\u003e\u003cstrong\u003eTips:\u003c/strong\u003e\u003c/p\u003e\n              \u003cul className=\"list-disc list-inside space-y-1\"\u003e\n                \u003cli\u003eSpeak clearly and at a moderate pace\u003c/li\u003e\n                \u003cli\u003eMake sure your microphone permissions are enabled\u003c/li\u003e\n                \u003cli\u003eGray text shows interim results while processing\u003c/li\u003e\n                \u003cli\u003eYou can edit the transcript directly in the text area\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/div\u003e\n          \u003c/CardContent\u003e\n        \u003c/Card\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n};\n\nexport default Test;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/types/audition.ts",
//   "contents": "\nexport interface Audition {\n  id: string;\n  user_id: string;\n  title: string;\n  casting_director?: string;\n  production_company?: string;\n  audition_date?: string;\n  audition_type: 'self-tape' | 'in-person' | 'callback' | 'chemistry-read';\n  status: 'preparation' | 'submitted' | 'callback' | 'booked' | 'rejected' | 'expired';\n  notes?: string;\n  script_id?: string;\n  contact_email?: string;\n  contact_phone?: string;\n  contact_website?: string;\n  casting_director_preferences?: string;\n  casting_director_current_projects?: string;\n  created_at: string;\n  updated_at: string;\n  submission_deadline?: string;\n  reminder_enabled?: boolean;\n  reminder_time?: string;\n  actor_email?: string;\n  scripts?: {\n    title: string;\n    content: string;\n  };\n  script_analyses?: {\n    selected_character: string;\n    acting_method: string;\n  }[];\n  video_submissions?: {\n    id: string;\n    video_title?: string;\n    evaluation_status?: string;\n  }[];\n}\n\nexport interface AuditionStats {\n  total_auditions: number;\n  preparation: number;\n  submitted: number;\n  callback: number;\n  booked: number;\n  rejected: number;\n  success_rate: number;\n}\n\n// Create a separate type for audition creation that matches the database insert schema\nexport interface CreateAuditionData {\n  title: string;\n  casting_director?: string;\n  production_company?: string;\n  audition_date?: string;\n  audition_type?: 'self-tape' | 'in-person' | 'callback' | 'chemistry-read';\n  status?: 'preparation' | 'submitted' | 'callback' | 'booked' | 'rejected' | 'expired';\n  notes?: string;\n  script_id?: string;\n  contact_email?: string;\n  contact_phone?: string;\n  contact_website?: string;\n  casting_director_preferences?: string;\n  casting_director_current_projects?: string;\n  submission_deadline?: string;\n  reminder_enabled?: boolean;\n  reminder_time?: string;\n  actor_email?: string;\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/types/speech.d.ts",
//   "contents": "// TypeScript declarations for Web Speech API\ninterface SpeechRecognition extends EventTarget {\n  continuous: boolean;\n  grammars: SpeechGrammarList;\n  interimResults: boolean;\n  lang: string;\n  maxAlternatives: number;\n  serviceURI: string;\n  start(): void;\n  stop(): void;\n  abort(): void;\n  onaudiostart: ((this: SpeechRecognition, ev: Event) =\u003e any) | null;\n  onaudioend: ((this: SpeechRecognition, ev: Event) =\u003e any) | null;\n  onend: ((this: SpeechRecognition, ev: Event) =\u003e any) | null;\n  onerror: ((this: SpeechRecognition, ev: SpeechRecognitionErrorEvent) =\u003e any) | null;\n  onnomatch: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) =\u003e any) | null;\n  onresult: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) =\u003e any) | null;\n  onsoundstart: ((this: SpeechRecognition, ev: Event) =\u003e any) | null;\n  onsoundend: ((this: SpeechRecognition, ev: Event) =\u003e any) | null;\n  onspeechstart: ((this: SpeechRecognition, ev: Event) =\u003e any) | null;\n  onspeechend: ((this: SpeechRecognition, ev: Event) =\u003e any) | null;\n  onstart: ((this: SpeechRecognition, ev: Event) =\u003e any) | null;\n}\n\ninterface SpeechRecognitionErrorEvent extends Event {\n  readonly error: string;\n  readonly message: string;\n}\n\ninterface SpeechRecognitionEvent extends Event {\n  readonly resultIndex: number;\n  readonly results: SpeechRecognitionResultList;\n}\n\ninterface SpeechRecognitionResultList {\n  readonly length: number;\n  item(index: number): SpeechRecognitionResult;\n  [index: number]: SpeechRecognitionResult;\n}\n\ninterface SpeechRecognitionResult {\n  readonly length: number;\n  readonly isFinal: boolean;\n  item(index: number): SpeechRecognitionAlternative;\n  [index: number]: SpeechRecognitionAlternative;\n}\n\ninterface SpeechRecognitionAlternative {\n  readonly transcript: string;\n  readonly confidence: number;\n}\n\ninterface SpeechGrammarList {\n  readonly length: number;\n  item(index: number): SpeechGrammar;\n  [index: number]: SpeechGrammar;\n  addFromURI(src: string, weight?: number): void;\n  addFromString(string: string, weight?: number): void;\n}\n\ninterface SpeechGrammar {\n  src: string;\n  weight: number;\n}\n\ndeclare var SpeechRecognition: {\n  prototype: SpeechRecognition;\n  new(): SpeechRecognition;\n};\n\ndeclare var webkitSpeechRecognition: {\n  prototype: SpeechRecognition;\n  new(): SpeechRecognition;\n};\n\ninterface Window {\n  SpeechRecognition: typeof SpeechRecognition;\n  webkitSpeechRecognition: typeof webkitSpeechRecognition;\n}",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/types/subscription.ts",
//   "contents": "\nexport interface SubscriptionPlan {\n  id: string;\n  name: string;\n  price: number;\n  currency: string;\n  paypal_plan_id?: string;\n  features: Record\u003cstring, boolean\u003e;\n  limits: {\n    script_analyses: number;\n    ai_messages: number;\n    video_verifications: number;\n  };\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserSubscription {\n  id: string;\n  user_id: string;\n  plan_id: string;\n  status: 'active' | 'cancelled' | 'expired' | 'pending';\n  paypal_subscription_id?: string;\n  started_at: string;\n  expires_at?: string;\n  created_at: string;\n  updated_at: string;\n  subscription_plans?: SubscriptionPlan;\n}\n\nexport interface UserUsage {\n  id: string;\n  user_id: string;\n  subscription_id: string;\n  script_analyses_used: number;\n  ai_messages_used: number;\n  video_verifications_used: number;\n  last_reset: string;\n  created_at: string;\n  updated_at: string;\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/utils/RealtimeAudio.ts",
//   "contents": "export class AudioRecorder {\n  private stream: MediaStream | null = null;\n  private audioContext: AudioContext | null = null;\n  private processor: ScriptProcessorNode | null = null;\n  private source: MediaStreamAudioSourceNode | null = null;\n\n  constructor(private onAudioData: (audioData: Float32Array) =\u003e void) {}\n\n  async start(customStream?: MediaStream) {\n    try {\n      if (customStream) {\n        this.stream = customStream;\n      } else {\n        this.stream = await navigator.mediaDevices.getUserMedia({\n          audio: {\n            sampleRate: 24000,\n            channelCount: 1,\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true\n          }\n        });\n      }\n      \n      this.audioContext = new AudioContext({\n        sampleRate: 24000,\n      });\n      \n      this.source = this.audioContext.createMediaStreamSource(this.stream);\n      this.processor = this.audioContext.createScriptProcessor(4096, 1, 1);\n      \n      this.processor.onaudioprocess = (e) =\u003e {\n        const inputData = e.inputBuffer.getChannelData(0);\n        this.onAudioData(new Float32Array(inputData));\n      };\n      \n      this.source.connect(this.processor);\n      this.processor.connect(this.audioContext.destination);\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      throw error;\n    }\n  }\n\n  stop() {\n    if (this.source) {\n      this.source.disconnect();\n      this.source = null;\n    }\n    if (this.processor) {\n      this.processor.disconnect();\n      this.processor = null;\n    }\n    if (this.stream) {\n      this.stream.getTracks().forEach(track =\u003e track.stop());\n      this.stream = null;\n    }\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\n\nexport const encodeAudioForAPI = (float32Array: Float32Array): string =\u003e {\n  const int16Array = new Int16Array(float32Array.length);\n  for (let i = 0; i \u003c float32Array.length; i++) {\n    const s = Math.max(-1, Math.min(1, float32Array[i]));\n    int16Array[i] = s \u003c 0 ? s * 0x8000 : s * 0x7FFF;\n  }\n  \n  const uint8Array = new Uint8Array(int16Array.buffer);\n  let binary = '';\n  const chunkSize = 0x8000;\n  \n  for (let i = 0; i \u003c uint8Array.length; i += chunkSize) {\n    const chunk = uint8Array.subarray(i, Math.min(i + chunkSize, uint8Array.length));\n    binary += String.fromCharCode.apply(null, Array.from(chunk));\n  }\n  \n  return btoa(binary);\n};\n\nexport class AudioQueue {\n  private queue: Uint8Array[] = [];\n  private isPlaying = false;\n  private audioContext: AudioContext;\n  private volume = 1.0;\n  private gainNode: GainNode;\n\n  constructor(audioContext: AudioContext) {\n    this.audioContext = audioContext;\n    this.gainNode = audioContext.createGain();\n    this.gainNode.connect(audioContext.destination);\n  }\n\n  setVolume(volume: number) {\n    this.volume = Math.max(0, Math.min(1, volume));\n    this.gainNode.gain.value = this.volume;\n  }\n\n  async addToQueue(audioData: Uint8Array) {\n    this.queue.push(audioData);\n    if (!this.isPlaying) {\n      await this.playNext();\n    }\n  }\n\n  private async playNext() {\n    if (this.queue.length === 0) {\n      this.isPlaying = false;\n      return;\n    }\n\n    this.isPlaying = true;\n    const audioData = this.queue.shift()!;\n\n    try {\n      const wavData = this.createWavFromPCM(audioData);\n      const audioBuffer = await this.audioContext.decodeAudioData(wavData.buffer);\n      \n      const source = this.audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this.gainNode);\n      \n      source.onended = () =\u003e this.playNext();\n      source.start(0);\n    } catch (error) {\n      console.error('Error playing audio:', error);\n      this.playNext(); // Continue with next segment even if current fails\n    }\n  }\n\n  private createWavFromPCM(pcmData: Uint8Array): Uint8Array {\n    // Convert bytes to 16-bit samples\n    const int16Data = new Int16Array(pcmData.length / 2);\n    for (let i = 0; i \u003c pcmData.length; i += 2) {\n      int16Data[i / 2] = (pcmData[i + 1] \u003c\u003c 8) | pcmData[i];\n    }\n    \n    // Create WAV header\n    const wavHeader = new ArrayBuffer(44);\n    const view = new DataView(wavHeader);\n    \n    const writeString = (view: DataView, offset: number, string: string) =\u003e {\n      for (let i = 0; i \u003c string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n\n    // WAV header parameters\n    const sampleRate = 24000;\n    const numChannels = 1;\n    const bitsPerSample = 16;\n    const blockAlign = (numChannels * bitsPerSample) / 8;\n    const byteRate = sampleRate * blockAlign;\n\n    // Write WAV header\n    writeString(view, 0, 'RIFF');\n    view.setUint32(4, 36 + int16Data.byteLength, true);\n    writeString(view, 8, 'WAVE');\n    writeString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, byteRate, true);\n    view.setUint16(32, blockAlign, true);\n    view.setUint16(34, bitsPerSample, true);\n    writeString(view, 36, 'data');\n    view.setUint32(40, int16Data.byteLength, true);\n\n    // Combine header and data\n    const wavArray = new Uint8Array(wavHeader.byteLength + int16Data.byteLength);\n    wavArray.set(new Uint8Array(wavHeader), 0);\n    wavArray.set(new Uint8Array(int16Data.buffer), wavHeader.byteLength);\n    \n    return wavArray;\n  }\n\n  clear() {\n    this.queue = [];\n  }\n\n  get isActive() {\n    return this.isPlaying || this.queue.length \u003e 0;\n  }\n}",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/utils/pdfGenerator.ts",
//   "contents": "\nimport jsPDF from 'jspdf';\n\ninterface VideoAnalysisData {\n  analysis: any;\n  videoSubmission: any;\n}\n\ninterface HeadshotAnalysisData {\n  analysis: {\n    id: string;\n    image_url: string;\n    headshot_type: string;\n    overall_score: number;\n    technical_score: number;\n    professional_score: number;\n    industry_score: number;\n    detailed_feedback: {\n      full_analysis: string;\n      casting_types: string[];\n      red_flags: string[];\n      final_verdict: string;\n    };\n    improvement_suggestions: string[];\n    created_at: string;\n  };\n}\n\nexport const generateAnalysisPDF = ({ analysis, videoSubmission }: VideoAnalysisData) =\u003e {\n  const doc = new jsPDF();\n  const pageWidth = doc.internal.pageSize.width;\n  const margin = 20;\n  let yPosition = 30;\n\n  // Helper function to add text with word wrapping\n  const addText = (text: string, x: number, y: number, options?: any) =\u003e {\n    const lines = doc.splitTextToSize(text, pageWidth - 2 * margin);\n    doc.text(lines, x, y, options);\n    return y + (lines.length * 6);\n  };\n\n  // Header\n  doc.setFontSize(18);\n  doc.setFont('helvetica', 'bold');\n  yPosition = addText('🎭 Actor App – Video Analysis Report', margin, yPosition);\n  \n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'normal');\n  yPosition = addText('Professional Self-Tape Evaluation', margin, yPosition + 5);\n  \n  // Add line separator\n  doc.line(margin, yPosition + 5, pageWidth - margin, yPosition + 5);\n  yPosition += 15;\n\n  // Scene Performance Summary\n  doc.setFontSize(14);\n  doc.setFont('helvetica', 'bold');\n  yPosition = addText('🎬 Scene Performance Summary', margin, yPosition);\n  yPosition += 5;\n\n  doc.setFontSize(10);\n  doc.setFont('helvetica', 'normal');\n  \n  const aiAnalysis = videoSubmission.ai_analysis;\n  const overallScore = videoSubmission.evaluation_score;\n  const performanceScore = aiAnalysis?.performance_score;\n  const technicalScore = aiAnalysis?.technical_score;\n\n  yPosition = addText(`Character Name: ${analysis.selected_character}`, margin, yPosition);\n  yPosition = addText(`Acting Method: ${analysis.acting_method}`, margin, yPosition);\n  yPosition = addText(`Overall Score: ${overallScore}/100`, margin, yPosition);\n  yPosition += 5;\n\n  // Objective Status\n  const objectiveAchieved = performanceScore \u003e= 75;\n  yPosition = addText(`Objective Status: ${objectiveAchieved ? '✅ Achieved' : '❌ Not Achieved'}`, margin, yPosition);\n  yPosition += 10;\n\n  // Scene Notes\n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'bold');\n  yPosition = addText('📝 Scene Notes:', margin, yPosition);\n  yPosition += 5;\n\n  doc.setFontSize(10);\n  doc.setFont('helvetica', 'normal');\n  \n  const sceneNotes = aiAnalysis?.performance_feedback || [];\n  sceneNotes.slice(0, 5).forEach((note: string) =\u003e {\n    yPosition = addText(`• ${note}`, margin + 5, yPosition);\n  });\n  \n  yPosition += 10;\n\n  // Technical Self-Tape Review\n  doc.setFontSize(14);\n  doc.setFont('helvetica', 'bold');\n  yPosition = addText('🎥 Technical Self-Tape Review', margin, yPosition);\n  yPosition += 5;\n\n  doc.setFontSize(10);\n  doc.setFont('helvetica', 'normal');\n\n  const technicalNotes = aiAnalysis?.technical_feedback || [];\n  technicalNotes.forEach((note: string) =\u003e {\n    let category = 'General';\n    if (note.toLowerCase().includes('lighting')) category = 'Lighting';\n    else if (note.toLowerCase().includes('audio')) category = 'Audio';\n    else if (note.toLowerCase().includes('camera')) category = 'Framing';\n    else if (note.toLowerCase().includes('background')) category = 'Background';\n\n    yPosition = addText(`${category}: ${note}`, margin, yPosition);\n  });\n\n  yPosition += 10;\n\n  // Performance Scores\n  doc.setFontSize(14);\n  doc.setFont('helvetica', 'bold');\n  yPosition = addText('📊 Performance Scores', margin, yPosition);\n  yPosition += 5;\n\n  doc.setFontSize(10);\n  doc.setFont('helvetica', 'normal');\n  yPosition = addText(`Overall Performance: ${overallScore || 'N/A'}/100`, margin, yPosition);\n  yPosition = addText(`Technical Quality: ${technicalScore || 'N/A'}/100`, margin, yPosition);\n  yPosition = addText(`Acting Performance: ${performanceScore || 'N/A'}/100`, margin, yPosition);\n\n  // Footer\n  yPosition = doc.internal.pageSize.height - 20;\n  doc.setFontSize(8);\n  doc.setFont('helvetica', 'italic');\n  const footerText = `Generated by AI Actor • ${new Date().toLocaleDateString()} • Professional Self-Tape Analysis`;\n  doc.text(footerText, pageWidth / 2, yPosition, { align: 'center' });\n\n  // Save the PDF\n  const filename = `${analysis.selected_character}_Analysis_${new Date().toISOString().split('T')[0]}.pdf`;\n  doc.save(filename);\n};\n\nexport const generateHeadshotAnalysisPDF = ({ analysis }: HeadshotAnalysisData) =\u003e {\n  const doc = new jsPDF();\n  const pageWidth = doc.internal.pageSize.width;\n  const margin = 20;\n  let yPosition = 30;\n\n  // Helper function to add text with word wrapping\n  const addText = (text: string, x: number, y: number, options?: any) =\u003e {\n    const lines = doc.splitTextToSize(text, pageWidth - 2 * margin);\n    doc.text(lines, x, y, options);\n    return y + (lines.length * 6);\n  };\n\n  // Header\n  doc.setFontSize(18);\n  doc.setFont('helvetica', 'bold');\n  yPosition = addText('📸 AI Actor – Professional Headshot Analysis', margin, yPosition);\n  \n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'normal');\n  yPosition = addText('Powered by Google Gemini Pro Vision', margin, yPosition + 5);\n  \n  // Add line separator\n  doc.line(margin, yPosition + 5, pageWidth - margin, yPosition + 5);\n  yPosition += 15;\n\n  // Professional Analysis Summary\n  doc.setFontSize(14);\n  doc.setFont('helvetica', 'bold');\n  yPosition = addText('🎭 Professional Analysis Summary', margin, yPosition);\n  yPosition += 5;\n\n  doc.setFontSize(10);\n  doc.setFont('helvetica', 'normal');\n  \n  yPosition = addText(`Headshot Type: ${analysis.headshot_type.charAt(0).toUpperCase() + analysis.headshot_type.slice(1)}`, margin, yPosition);\n  yPosition = addText(`Analysis Date: ${new Date(analysis.created_at).toLocaleDateString()}`, margin, yPosition);\n  yPosition += 5;\n\n  // Score Breakdown\n  doc.setFontSize(14);\n  doc.setFont('helvetica', 'bold');\n  yPosition = addText('📊 Score Breakdown', margin, yPosition);\n  yPosition += 5;\n\n  doc.setFontSize(10);\n  doc.setFont('helvetica', 'normal');\n  yPosition = addText(`Overall Score: ${analysis.overall_score}/100`, margin, yPosition);\n  yPosition = addText(`Technical Quality: ${analysis.technical_score}/100`, margin, yPosition);\n  yPosition = addText(`Professional Standard: ${analysis.professional_score}/100`, margin, yPosition);\n  yPosition = addText(`Industry Readiness: ${analysis.industry_score}/100`, margin, yPosition);\n  yPosition += 10;\n\n  // Casting Types\n  if (analysis.detailed_feedback.casting_types?.length \u003e 0) {\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    yPosition = addText('🎭 Suitable Casting Types:', margin, yPosition);\n    yPosition += 5;\n\n    doc.setFontSize(10);\n    doc.setFont('helvetica', 'normal');\n    \n    analysis.detailed_feedback.casting_types.forEach((type: string) =\u003e {\n      yPosition = addText(`• ${type}`, margin + 5, yPosition);\n    });\n    \n    yPosition += 10;\n  }\n\n  // Professional Verdict\n  if (analysis.detailed_feedback.final_verdict) {\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    yPosition = addText('🎬 Professional Verdict:', margin, yPosition);\n    yPosition += 5;\n\n    doc.setFontSize(10);\n    doc.setFont('helvetica', 'normal');\n    yPosition = addText(analysis.detailed_feedback.final_verdict, margin, yPosition);\n    yPosition += 10;\n  }\n\n  // Check if we need a new page\n  if (yPosition \u003e 250) {\n    doc.addPage();\n    yPosition = 30;\n  }\n\n  // Improvement Suggestions\n  if (analysis.improvement_suggestions?.length \u003e 0) {\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    yPosition = addText('✨ Photographer Instructions:', margin, yPosition);\n    yPosition += 5;\n\n    doc.setFontSize(10);\n    doc.setFont('helvetica', 'normal');\n    \n    analysis.improvement_suggestions.slice(0, 8).forEach((suggestion: string) =\u003e {\n      yPosition = addText(`• ${suggestion}`, margin + 5, yPosition);\n      \n      // Check if we need a new page\n      if (yPosition \u003e 270) {\n        doc.addPage();\n        yPosition = 30;\n      }\n    });\n    \n    yPosition += 10;\n  }\n\n  // Areas of Concern\n  if (analysis.detailed_feedback.red_flags?.length \u003e 0) {\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    yPosition = addText('⚠️ Areas of Concern:', margin, yPosition);\n    yPosition += 5;\n\n    doc.setFontSize(10);\n    doc.setFont('helvetica', 'normal');\n    \n    analysis.detailed_feedback.red_flags.forEach((flag: string) =\u003e {\n      yPosition = addText(`• ${flag}`, margin + 5, yPosition);\n      \n      // Check if we need a new page\n      if (yPosition \u003e 270) {\n        doc.addPage();\n        yPosition = 30;\n      }\n    });\n  }\n\n  // Footer\n  yPosition = doc.internal.pageSize.height - 20;\n  doc.setFontSize(8);\n  doc.setFont('helvetica', 'italic');\n  const footerText = `Generated by AI Actor • ${new Date().toLocaleDateString()} • Professional Headshot Analysis`;\n  doc.text(footerText, pageWidth / 2, yPosition, { align: 'center' });\n\n  // Save the PDF\n  const filename = `Headshot_Analysis_${analysis.headshot_type}_${new Date().toISOString().split('T')[0]}.pdf`;\n  doc.save(filename);\n};\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/utils/scriptParser.ts",
//   "contents": "export interface DialogueLine {\n  character: string;\n  text: string;\n  lineNumber: number;\n}\n\nexport interface ScriptParsing {\n  characters: string[];\n  dialogues: DialogueLine[];\n  isPlainText: boolean;\n}\n\n// Helper function to clean and validate extracted text\nconst preprocessScript = (text: string): string =\u003e {\n  return text\n    .replace(/\\r\\n/g, '\\n') // Normalize line endings\n    .replace(/\\u00A0/g, ' ') // Replace non-breaking spaces\n    .replace(/\\u2018|\\u2019/g, \"'\") // Replace smart quotes\n    .replace(/\\u201C|\\u201D/g, '\"') // Replace smart double quotes\n    .replace(/\\u2013|\\u2014/g, '-') // Replace em/en dashes\n    .replace(/\\t/g, '    ') // Replace tabs with spaces\n    // Remove unwanted symbols and formatting artifacts\n    .replace(/^\\*\\s*$/gm, '') // Remove lines with only asterisks\n    .replace(/^\\*\\s*\\n/gm, '') // Remove asterisk-only lines\n    .replace(/\\*\\s*$/gm, '') // Remove trailing asterisks\n    .replace(/^\\s*\\*\\s*/gm, '') // Remove leading asterisks\n    .replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n') // Clean up excessive line breaks\n    .trim();\n};\n\nexport const parseScript = (scriptText: string): ScriptParsing =\u003e {\n  // Preprocess the script text\n  const cleanedScript = preprocessScript(scriptText);\n  const lines = cleanedScript.split('\\n');\n  const characters = new Set\u003cstring\u003e();\n  const dialogues: DialogueLine[] = [];\n\n  console.log('=== SCRIPT PARSER DEBUG ===');\n  console.log('Parsing script with', lines.length, 'lines');\n\n  // Helper function to detect action lines and stage directions that should be ignored\n  const isActionLine = (line: string): boolean =\u003e {\n    const trimmed = line.trim();\n    \n    // Check if it's an ALL CAPS line that's likely a stage direction/action\n    const isAllCaps = trimmed === trimmed.toUpperCase() \u0026\u0026 trimmed.length \u003e 5 \u0026\u0026 /[A-Z]/.test(trimmed);\n    if (isAllCaps) {\n      // Enhanced action words detection\n      const actionWords = [\n        'LOOKS', 'WALKS', 'RUNS', 'SITS', 'STANDS', 'ENTERS', 'EXITS', 'MOVES', 'TURNS',\n        'GRABS', 'HOLDS', 'OPENS', 'CLOSES', 'POINTS', 'NODS', 'SHAKES', 'SMILES',\n        'CAMERA', 'PLEADING', 'STARING', 'WATCHING', 'LISTENING', 'WAITING',\n        'SUDDENLY', 'QUICKLY', 'SLOWLY', 'CAREFULLY', 'FRANTICALLY',\n        'BEGINS', 'CONTINUES', 'STOPS', 'PAUSES', 'HESITATES', 'APPROACHES',\n        'DEPARTS', 'RETURNS', 'FOLLOWS', 'LEADS', 'PUSHES', 'PULLS', 'LIFTS'\n      ];\n      \n      // If it's all caps and contains action words, it's likely a stage direction\n      if (actionWords.some(word =\u003e trimmed.includes(word))) {\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // Helper function to detect scene or technical directions\n  const isSceneOrTechnical = (line: string): boolean =\u003e {\n    const trimmed = line.trim().toUpperCase();\n    \n    // Enhanced technical patterns\n    const technicalPatterns = [\n      /^(INT\\.|EXT\\.|FADE|CUT|DISSOLVE|MONTAGE|FLASHBACK|TITLE|CAPTION)/,\n      /^(SCENE|ACT|CHAPTER|PART)\\s*\\d+/,\n      /^(CONTINUED|CONT'D|MORE|OVER|INTERCUT)/,\n      /^\\d+\\./, // Scene numbers\n      /^(MUSIC|SOUND|SFX|FX|AUDIO):/,\n      /^(NARRATOR|ANNOUNCER|VOICE\\s+OVER):/,\n      /^(SUPER|GRAPHIC|TEXT\\s+ON\\s+SCREEN)/,\n      /^(BEGIN|END)\\s+(SCENE|ACT|FLASHBACK)/,\n      /^(MORNING|EVENING|NIGHT|DAY|LATER|EARLIER)/,\n      /^(MEANWHILE|SIMULTANEOUSLY|AT\\s+THE\\s+SAME\\s+TIME)/,\n    ];\n    \n    return technicalPatterns.some(pattern =\u003e pattern.test(trimmed));\n  };\n\n  // Simplified parsing - focus on UPPERCASE character names followed by dialogue\n  for (let i = 0; i \u003c lines.length; i++) {\n    const line = lines[i].trim();\n    \n    // Skip empty lines\n    if (!line) continue;\n    \n    // Skip obvious action lines and stage directions\n    if (isActionLine(line) || isSceneOrTechnical(line)) {\n      continue;\n    }\n\n    // Check if this line is a character name (UPPERCASE line)\n    const isCharacterName = line === line.toUpperCase() \u0026\u0026 \n                           line.length \u003e= 2 \u0026\u0026 \n                           line.length \u003c= 50 \u0026\u0026 \n                           /^[A-Z][A-Z\\s\\-'\\.]*$/.test(line) \u0026\u0026\n                           !line.includes(':') \u0026\u0026\n                           isValidCharacterName(line);\n\n    if (isCharacterName) {\n      const characterName = line.trim();\n      characters.add(characterName);\n      \n      // Look for dialogue in next line(s)\n      let dialogueText = '';\n      let nextLineIndex = i + 1;\n      \n      // Collect dialogue lines until we hit another character name or empty line\n      while (nextLineIndex \u003c lines.length) {\n        const nextLine = lines[nextLineIndex].trim();\n        \n        // Stop if empty line or another character name\n        if (!nextLine) break;\n        \n        const nextIsCharacter = nextLine === nextLine.toUpperCase() \u0026\u0026 \n                               nextLine.length \u003e= 2 \u0026\u0026 \n                               nextLine.length \u003c= 50 \u0026\u0026 \n                               /^[A-Z][A-Z\\s\\-'\\.]*$/.test(nextLine) \u0026\u0026\n                               !nextLine.includes(':') \u0026\u0026\n                               isValidCharacterName(nextLine);\n        \n        if (nextIsCharacter || isActionLine(nextLine) || isSceneOrTechnical(nextLine)) {\n          break;\n        }\n        \n        // Add this line to dialogue\n        if (dialogueText) {\n          dialogueText += ' ' + nextLine;\n        } else {\n          dialogueText = nextLine;\n        }\n        \n        nextLineIndex++;\n      }\n      \n      // Add dialogue if we found any\n      if (dialogueText) {\n        dialogues.push({\n          character: characterName,\n          text: dialogueText,\n          lineNumber: i + 1\n        });\n      }\n      \n      // Skip the lines we processed\n      i = nextLineIndex - 1;\n      continue;\n    }\n    \n    // Check for standard format: CHARACTER: dialogue\n    const colonMatch = line.match(/^([A-Z][A-Z\\s\\-'\\.]*?):\\s*(.+)$/);\n    if (colonMatch) {\n      const characterName = colonMatch[1].trim();\n      const dialogueText = colonMatch[2].trim();\n      \n      if (isValidCharacterName(characterName) \u0026\u0026 dialogueText) {\n        characters.add(characterName);\n        dialogues.push({\n          character: characterName,\n          text: dialogueText,\n          lineNumber: i + 1\n        });\n      }\n    }\n  }\n\n  const finalCharacters = Array.from(characters);\n  let finalDialogues = dialogues;\n  \n  // If no characters found, treat as plain text\n  const isPlainText = finalCharacters.length === 0;\n  if (isPlainText \u0026\u0026 scriptText.trim()) {\n    console.log('No characters detected, treating as plain text');\n    const textLines = scriptText.split('\\n')\n      .map(line =\u003e line.trim())\n      .filter(line =\u003e line.length \u003e 0 \u0026\u0026 !isActionLine(line) \u0026\u0026 !isSceneOrTechnical(line));\n    \n    finalDialogues = textLines.map((line, index) =\u003e ({\n      character: 'SPEAKER',\n      text: line,\n      lineNumber: index + 1\n    }));\n    \n    if (finalDialogues.length \u003e 0) {\n      finalCharacters.push('SPEAKER');\n    }\n  }\n  \n  console.log('Final parsed characters:', finalCharacters);\n  console.log('Total dialogue lines:', finalDialogues.length);\n  console.log('Is plain text:', isPlainText);\n  console.log('=== END SCRIPT PARSER DEBUG ===');\n\n  return {\n    characters: finalCharacters,\n    dialogues: finalDialogues,\n    isPlainText\n  };\n};\n\n// Helper function to validate character names - enhanced strict validation\nfunction isValidCharacterName(name: string): boolean {\n  // Basic length and content checks\n  if (name.length \u003c 2 || name.length \u003e 30) return false;\n  if (!/[A-Z]/i.test(name)) return false;\n  \n  // Must be primarily letters with allowed characters\n  if (!/^[A-Za-z\\s\\.'\\-]+$/.test(name)) return false;\n  \n  // Strict word count - character names should be 1-3 words max\n  const words = name.trim().split(/\\s+/);\n  if (words.length \u003e 3) return false;\n  \n  // Reject dialogue patterns\n  const dialoguePatterns = [\n    /^(INCREDIBLE|CONGRATULATIONS|READY|ORDERS|WINNER|HAVOC|CRIMSON)/i,\n    /\\b(READY\\s+FOR|WINNER\\s+OF|CONGRATULATIONS)\\b/i,\n    /^(YES|NO|OKAY|FINE|GOOD|GREAT|AMAZING|INCREDIBLE)\\s/i,\n    /\\b(LOOKS|SAYS|TELLS|ASKS|ANSWERS|REPLIES|RESPONDS)\\b/i\n  ];\n  \n  for (const pattern of dialoguePatterns) {\n    if (pattern.test(name)) return false;\n  }\n  \n  // Exclude technical terms and stage directions\n  const invalidPatterns = [\n    /^(FADE|CUT|INT|EXT|ZOOM|CLOSE|WIDE|MEDIUM|SHOT)/i,\n    /^(MUSIC|SOUND|SFX|VOICE|NARRATOR|ANNOUNCER)/i,\n    /^(CONTINUED|SCENE|ACT|END|TITLE|CREDITS)/i,\n    /(LOOKS|WALKS|RUNS|SITS|STANDS|ENTERS|EXITS|MOVES|TURNS)/i,\n    /(CAMERA|ANGLE|SHOT|FRAME|PLEADING|STARING|WATCHING)/i,\n    /^(MEANWHILE|LATER|EARLIER|FLASHBACK|MONTAGE)/i,\n    /^(HE|SHE|THEY|WE|YOU|I)\\s/i,\n    /^(THE|A|AN)\\s/i,\n    /^(AND|BUT|OR|SO|THEN|NOW|WELL)\\s/i\n  ];\n  \n  for (const pattern of invalidPatterns) {\n    if (pattern.test(name)) return false;\n  }\n  \n  // Common phrases that get misidentified as character names\n  const invalidPhrases = [\n    'VOICE', 'NARRATOR', 'ANNOUNCER', 'TITLE', 'CREDITS', 'SPEAKER',\n    'LEON READY', 'READY FOR', 'WINNER OF', 'THEA WINNER',\n    'CRIMSON HAVOC', 'CLEOPATRA VII'\n  ];\n  \n  const upperName = name.toUpperCase();\n  for (const phrase of invalidPhrases) {\n    if (upperName.includes(phrase)) return false;\n  }\n  \n  // Each word should look like a proper name\n  for (const word of words) {\n    // Each word should be 2+ characters\n    if (word.length \u003c 2) return false;\n    \n    // Avoid common non-name words\n    const nonNameWords = [\n      'FOR', 'THE', 'AND', 'BUT', 'YOU', 'ARE', 'CAN', 'WILL', 'WAS',\n      'HAVE', 'BEEN', 'WERE', 'THEY', 'THEM', 'THIS', 'THAT', 'WITH',\n      'FROM', 'INTO', 'OVER', 'BACK', 'DOWN', 'ONLY', 'JUST', 'LIKE',\n      'WHAT', 'WHEN', 'WHERE', 'READY', 'WINNER', 'ORDERS'\n    ];\n    \n    if (nonNameWords.includes(word.toUpperCase())) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\nexport const getCharacterLines = (dialogues: DialogueLine[], character: string): DialogueLine[] =\u003e {\n  return dialogues.filter(d =\u003e d.character === character);\n};\n\nexport const getOtherCharacterLines = (dialogues: DialogueLine[], excludeCharacter: string): DialogueLine[] =\u003e {\n  return dialogues.filter(d =\u003e d.character !== excludeCharacter);\n};\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/utils/textFormatter.ts",
//   "contents": "import React from 'react';\n\n// Utility to format dialogue text for better teleprompter readability\n\nexport interface FormattedTextChunk {\n  text: string;\n  isPause: boolean;\n  pauseType?: 'short' | 'medium' | 'long';\n}\n\nexport const formatDialogueForTeleprompter = (text: string): FormattedTextChunk[] =\u003e {\n  if (!text || typeof text !== 'string') {\n    return [{ text: '', isPause: false }];\n  }\n\n  // Just return the text as-is, no special formatting\n  return [{ text: text.trim(), isPause: false }];\n};\n\nexport const renderFormattedText = (\n  chunks: FormattedTextChunk[],\n  fontSize: number,\n  lineHeight: number,\n  textColor: string\n): React.ReactElement =\u003e {\n  return React.createElement('div', {\n    style: {\n      fontSize: `${fontSize}px`,\n      lineHeight: lineHeight,\n      color: textColor,\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      whiteSpace: 'pre-wrap'\n    }\n  }, chunks.map(chunk =\u003e chunk.text).join(' '));\n};",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "src/vite-env.d.ts",
//   "contents": "/// \u003creference types=\"vite/client\" /\u003e\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/config.toml",
//   "contents": "\nproject_id = \"cqlczzkyktktaajbfmli\"\n\n[functions.text-to-speech]\nverify_jwt = false\n\n[functions.tts-cache]\nverify_jwt = false\n\n[functions.purge-tts-cache]\nverify_jwt = false\n\n[functions.realtime-voice-partner]\nverify_jwt = false\n\n[functions.coaching-voice-chat]\nverify_jwt = false\n\n[functions.send-audition-reminders]\nverify_jwt = false\n\n[functions.summarize-scene]\nverify_jwt = false\n\n[functions.coqui-tts]\nverify_jwt = false\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/analyze-script/index.ts",
//   "contents": "\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) =\u003e {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    console.log('=== ANALYZE-SCRIPT FUNCTION START v2 ===');\n    \n    // Check API key first\n    const GOOGLE_AI_API_KEY = Deno.env.get('GOOGLE_AI_API_KEY');\n    console.log('API key check v2:', {\n      hasApiKey: !!GOOGLE_AI_API_KEY,\n      keyLength: GOOGLE_AI_API_KEY?.length || 0,\n      keyPrefix: GOOGLE_AI_API_KEY?.substring(0, 20) + '...' || 'none',\n      keyType: typeof GOOGLE_AI_API_KEY\n    });\n    \n    if (!GOOGLE_AI_API_KEY) {\n      console.error('Google AI API key not configured');\n      return new Response(JSON.stringify({ \n        error: 'Google AI API key not configured',\n        debug: 'GOOGLE_AI_API_KEY environment variable is missing'\n      }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    // Parse request body\n    let requestBody;\n    try {\n      requestBody = await req.json();\n      console.log('Request body parsed successfully:', { hasTest: !!requestBody.test });\n    } catch (parseError) {\n      console.error('Failed to parse request body:', parseError);\n      return new Response(JSON.stringify({ error: 'Invalid JSON in request body' }), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    // Handle API test request\n    if (requestBody.test === true) {\n      console.log('Testing API connectivity...');\n      \n      const testPayload = {\n        contents: [\n          {\n            parts: [\n              {\n                text: \"Hello, respond with 'API is working'\"\n              }\n            ]\n          }\n        ],\n        generationConfig: {\n          temperature: 0.1,\n          maxOutputTokens: 50,\n        }\n      };\n\n      const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GOOGLE_AI_API_KEY}`;\n      \n      console.log('Making test request to Gemini API...');\n      const response = await fetch(geminiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(testPayload),\n      });\n\n      console.log('Test API response status:', response.status);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Test API error:', errorText);\n        return new Response(JSON.stringify({ \n          error: 'API test failed',\n          status: response.status,\n          details: errorText\n        }), {\n          status: 500,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        });\n      }\n\n      const data = await response.json();\n      console.log('Test API success:', data);\n\n      return new Response(JSON.stringify({ \n        success: true,\n        message: 'API is working correctly',\n        response: data.candidates?.[0]?.content?.parts?.[0]?.text || 'No response text'\n      }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    // Handle regular script analysis\n    const { scriptContent, selectedCharacter, actingMethod, scriptTitle } = requestBody;\n    \n    console.log('Request data:', {\n      hasScriptContent: !!scriptContent,\n      scriptContentLength: scriptContent?.length,\n      selectedCharacter,\n      actingMethod,\n      scriptTitle\n    });\n\n    // Validate input for regular analysis\n    if (!scriptContent) {\n      console.error('No script content provided');\n      return new Response(JSON.stringify({ error: 'Script content is required' }), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    if (!selectedCharacter) {\n      console.error('No character selected');\n      return new Response(JSON.stringify({ error: 'Character selection is required' }), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    console.log('Building prompt for script analysis...');\n    const prompt = `You are an expert acting coach with deep knowledge of all acting methods and techniques. Analyze this script thoroughly for an actor preparing to perform.\n\nSCRIPT TITLE: ${scriptTitle || 'Untitled Script'}\n\nFULL SCRIPT CONTENT:\n${scriptContent}\n\nACTOR'S FOCUS:\n- Character: ${selectedCharacter}\n- Acting Method: ${actingMethod}\n\nPlease provide a comprehensive analysis including:\n\n1. CHARACTER ANALYSIS for ${selectedCharacter}:\n   - Character arc and development throughout the script\n   - Core personality traits and background\n   - Relationships with other characters (reference specific scenes and interactions)\n   - Key motivations and desires based on their dialogue and actions\n\n2. EMOTIONAL JOURNEY for ${selectedCharacter}:\n   - Track the emotional beats and changes throughout the script\n   - Identify key emotional turning points and their triggers\n   - Note where ${selectedCharacter} experiences the highest and lowest emotional states\n   - Map how emotions shift from scene to scene\n\n3. ACTING OBJECTIVES for ${selectedCharacter}:\n   - Primary objective (what ${selectedCharacter} wants most throughout the script)\n   - Scene-specific objectives (what they want in each major scene)\n   - Tactics they use to achieve their objectives\n\n4. OBSTACLES for ${selectedCharacter}:\n   - Internal obstacles (fears, flaws, conflicting desires)\n   - External obstacles (other characters, circumstances, environment)\n   - How these obstacles create conflict and drive the story forward\n\n5. TACTICS for ${selectedCharacter}:\n   - Specific behavioral tactics they use to overcome obstacles\n   - How their tactics change based on what's working or not working\n   - Subtext beneath their words and actions\n\n6. ${actingMethod} METHOD APPLICATION:\n   - Specific ${actingMethod} techniques that would be most effective for this role\n   - How to apply ${actingMethod} principles to ${selectedCharacter}'s journey\n   - Practical exercises and approaches using the ${actingMethod} method\n\n7. SCENE WORK RECOMMENDATIONS:\n   - Most challenging scenes for ${selectedCharacter} and why\n   - Key preparation needed for emotional scenes\n   - Important relationships to develop with scene partners\n   - Physical and vocal considerations for the character\n\n8. AUDITION STRATEGY:\n   - Best scenes to showcase ${selectedCharacter}'s range\n   - Key moments that demonstrate the character's essence\n   - How to make strong, specific choices that serve the story\n\nFormat your response with clear sections marked exactly as:\nCHARACTER ANALYSIS\nEMOTIONAL JOURNEY  \nACTING OBJECTIVES\nOBSTACLES\nTACTICS\n${actingMethod.toUpperCase()} METHOD APPLICATION\nSCENE WORK RECOMMENDATIONS\nAUDITION STRATEGY\n\nProvide practical, actionable advice that references specific content from the script. Be detailed while keeping the language conversational and encouraging. Quote specific lines when relevant to illustrate points.`;\n\n    console.log('Prompt built, calling Gemini API...');\n\n    const requestPayload = {\n      contents: [\n        {\n          parts: [\n            {\n              text: prompt\n            }\n          ]\n        }\n      ],\n      generationConfig: {\n        temperature: 0.7,\n        topK: 40,\n        topP: 0.95,\n        maxOutputTokens: 8192,\n      },\n      safetySettings: [\n        {\n          category: \"HARM_CATEGORY_HARASSMENT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        },\n        {\n          category: \"HARM_CATEGORY_HATE_SPEECH\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        },\n        {\n          category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        },\n        {\n          category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        }\n      ]\n    };\n\n    console.log('Making request to Gemini API...');\n    \n    const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GOOGLE_AI_API_KEY}`;\n    \n    const response = await fetch(geminiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestPayload),\n    });\n\n    console.log('Gemini API response status:', response.status);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Gemini API error:', {\n        status: response.status,\n        statusText: response.statusText,\n        error: errorText\n      });\n      \n      let userFriendlyMessage = 'Failed to analyze script';\n      \n      if (response.status === 429) {\n        userFriendlyMessage = 'API quota exceeded. Please upgrade your Google AI API plan or try again later.';\n      } else if (response.status === 503) {\n        userFriendlyMessage = 'Google AI service is temporarily overloaded. Please try again in a few moments.';\n      } else if (response.status === 400) {\n        userFriendlyMessage = 'Invalid request format. Please check your script content and try again.';\n      } else if (response.status === 403) {\n        userFriendlyMessage = 'API access denied. Please check your Google AI API key configuration.';\n      } else if (response.status \u003e= 500) {\n        userFriendlyMessage = 'Google AI service error. Please try again later.';\n      }\n      \n      return new Response(JSON.stringify({ \n        error: userFriendlyMessage,\n        status: response.status,\n        technical_details: errorText\n      }), {\n        status: response.status === 429 ? 429 : 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    const data = await response.json();\n    console.log('Gemini API response received, processing...');\n\n    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\n      console.error('Invalid Gemini API response structure:', data);\n      return new Response(JSON.stringify({ \n        error: 'Invalid response from Gemini API' \n      }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    const analysisText = data.candidates[0].content.parts[0].text;\n    console.log('Analysis text length:', analysisText?.length);\n\n    // Parse the analysis into structured data\n    const analysisData = {\n      character_analysis: extractSection(analysisText, 'CHARACTER ANALYSIS'),\n      emotional_journey: extractSection(analysisText, 'EMOTIONAL JOURNEY'),\n      method_application: extractSection(analysisText, `${actingMethod.toUpperCase()} METHOD APPLICATION`),\n      scene_work: extractSection(analysisText, 'SCENE WORK RECOMMENDATIONS'),\n      audition_strategy: extractSection(analysisText, 'AUDITION STRATEGY'),\n      full_analysis: analysisText\n    };\n\n    const objectives = extractListItems(analysisText, 'ACTING OBJECTIVES');\n    const obstacles = extractListItems(analysisText, 'OBSTACLES');\n    const tactics = extractListItems(analysisText, 'TACTICS');\n\n    console.log('Analysis completed successfully, sending response');\n\n    return new Response(JSON.stringify({\n      analysis_data: analysisData,\n      objectives,\n      obstacles,\n      tactics,\n      full_analysis: analysisText\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      status: 200,\n    });\n\n  } catch (error) {\n    console.error('=== FATAL ERROR in analyze-script ===');\n    console.error('Error details:', {\n      name: error.name,\n      message: error.message,\n      stack: error.stack\n    });\n    \n    return new Response(JSON.stringify({ \n      error: 'Internal server error',\n      details: error.message \n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n  }\n});\n\n// Helper functions\nfunction extractSection(text: string, sectionName: string): string {\n  const regex = new RegExp(`${sectionName}[\\\\s\\\\S]*?(?=\\\\n[A-Z][A-Z\\\\s]+:|$)`, 'i');\n  const match = text.match(regex);\n  return match ? match[0].replace(sectionName, '').trim() : '';\n}\n\nfunction extractListItems(text: string, sectionName: string): string[] {\n  const section = extractSection(text, sectionName);\n  const lines = section.split('\\n');\n  const items: string[] = [];\n  \n  for (const line of lines) {\n    const trimmed = line.trim();\n    if (trimmed \u0026\u0026 (trimmed.startsWith('-') || trimmed.startsWith('•') || trimmed.match(/^\\d+\\./))) {\n      items.push(trimmed.replace(/^[-•]\\s*|\\d+\\.\\s*/, '').trim());\n    }\n  }\n  \n  return items.length \u003e 0 ? items : [section.trim()];\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/coaching-chat/index.ts",
//   "contents": "\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) =\u003e {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const { message, analysis, chatHistory } = await req.json();\n    \n    const GOOGLE_AI_API_KEY = Deno.env.get('GOOGLE_AI_API_KEY');\n    if (!GOOGLE_AI_API_KEY) {\n      throw new Error('Google AI API key not configured');\n    }\n\n    // Extract script content from analysis data\n    const scriptContent = analysis.analysis_data?.script_content || analysis.emotional_beats?.script_content || '';\n    const scriptTitle = analysis.analysis_data?.script_title || 'the script';\n\n    // Build comprehensive conversation context with full script\n    const systemPrompt = `You are an expert acting coach with deep knowledge of all acting methods and techniques. You are helping an actor prepare for their role.\n\nFULL SCRIPT CONTENT:\n${scriptContent}\n\nSCRIPT ANALYSIS CONTEXT:\n- Script Title: ${scriptTitle}\n- Character: ${analysis.selected_character}\n- Acting Method: ${analysis.acting_method}\n- Character Objectives: ${analysis.objectives?.join(', ') || 'Not specified'}\n- Character Obstacles: ${analysis.obstacles?.join(', ') || 'Not specified'}  \n- Character Tactics: ${analysis.tactics?.join(', ') || 'Not specified'}\n- Analysis Notes: ${analysis.analysis_data?.style_notes || 'General analysis'}\n\nCOACHING APPROACH:\n- You have read the ENTIRE script above and can reference specific lines, scenes, and moments\n- Be supportive, encouraging, and SPECIFIC in your guidance using actual script content\n- Reference specific dialogue, character interactions, and plot points from the script\n- Ask probing questions about specific scenes and moments in the script\n- Provide practical exercises based on actual script content\n- Help with specific line delivery by quoting the actual lines from the script\n- Draw connections between different scenes and character development\n- Use ${analysis.acting_method} method when appropriate\n- Keep responses focused and practical (2-3 paragraphs max)\n- Always reference specific script content when giving advice\n\nCONVERSATION HISTORY:\n${chatHistory.map((msg: any) =\u003e `${msg.role}: ${msg.content}`).join('\\n')}\n\nCurrent question from actor: ${message}\n\nRespond as their acting coach with specific references to the script content, helping them work through this challenge using actual lines and scenes from their script.`;\n\n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GOOGLE_AI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: systemPrompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.8,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 800,\n        }\n      })\n    });\n\n    if (!response.ok) {\n      const errorData = await response.text();\n      console.error('Gemini API error:', errorData);\n      throw new Error(`Gemini API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    const coachResponse = data.candidates[0].content.parts[0].text;\n\n    return new Response(JSON.stringify({\n      message: coachResponse\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Error in coaching-chat:', error);\n    return new Response(JSON.stringify({ \n      error: error.message || 'Failed to generate coaching response'\n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n});\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/coqui-tts/index.ts",
//   "contents": "import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\nserve(async (req) =\u003e {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  try {\n    const { text, voice, language, serverUrl } = await req.json()\n\n    if (!text) {\n      throw new Error('Text is required')\n    }\n\n    if (!serverUrl) {\n      throw new Error('Coqui TTS server URL is required')\n    }\n\n    // Call Coqui TTS server\n    const response = await fetch(`${serverUrl}/api/tts`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        text: text,\n        speaker_wav: voice || null,\n        language: language || 'en',\n        split_sentences: true\n      })\n    })\n\n    if (!response.ok) {\n      const errorText = await response.text()\n      console.error('Coqui TTS API error:', errorText)\n      throw new Error(`Coqui TTS API error: ${response.status}`)\n    }\n\n    // Convert audio to base64\n    const arrayBuffer = await response.arrayBuffer()\n    const base64Audio = btoa(\n      String.fromCharCode(...new Uint8Array(arrayBuffer))\n    )\n\n    return new Response(\n      JSON.stringify({ \n        audioContent: base64Audio,\n        voice: voice || 'default',\n        language: language || 'en',\n        provider: 'coqui'\n      }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      },\n    )\n  } catch (error) {\n    console.error('Error in coqui-tts function:', error)\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      },\n    )\n  }\n})",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/evaluate-video/index.ts",
//   "contents": "\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) =\u003e {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const { videoUrl, analysis, coachingNotes } = await req.json();\n    \n    const GOOGLE_AI_API_KEY = Deno.env.get('GOOGLE_AI_API_KEY');\n    if (!GOOGLE_AI_API_KEY) {\n      throw new Error('Google AI API key not configured');\n    }\n\n    // Get the actual script content from analysis\n    const scriptContent = analysis.analysis_data?.script_content || analysis.emotional_beats?.script_content || 'No script content available';\n    \n    // Handle the acting method display\n    const actingMethodDisplay = analysis.acting_method === 'none' ? 'Natural Analysis (no specific technique)' : analysis.acting_method;\n    const actingMethodInstructions = analysis.acting_method === 'none' \n      ? 'natural acting principles and general performance standards'\n      : `${analysis.acting_method} technique`;\n    \n    const prompt = `You are an expert casting director with 20+ years of experience evaluating self-tape auditions for major studios, streaming platforms, and independent productions. You know exactly what separates bookable actors from the rest.\n\nCHARACTER \u0026 SCRIPT CONTEXT:\nScript Content: \"${scriptContent.substring(0, 1000)}...\"\nCharacter Being Played: ${analysis.selected_character}\nActing Method Used: ${actingMethodDisplay}\nCharacter Objectives: ${analysis.objectives?.join(', ') || 'Not specified'}\nCharacter Obstacles: ${analysis.obstacles?.join(', ') || 'Not specified'}\nCharacter Tactics: ${analysis.tactics?.join(', ') || 'Not specified'}\n\nCOACHING CONTEXT: ${coachingNotes || 'Standard coaching session completed'}\n\nCRITICAL EVALUATION REQUIREMENTS:\n1. SCRIPT MATCH VERIFICATION - First determine if the video actually matches the script and character \"${analysis.selected_character}\". If not, give low scores (20-40) and clearly state the mismatch.\n2. If the video is random content unrelated to the script, immediately flag this and give very low scores.\n3. Be strict with scoring - only give high scores (80+) for truly excellent performances.\n\nCASTING DIRECTOR EVALUATION FRAMEWORK:\n\n**TECHNICAL QUALITY ASSESSMENT:**\n- LIGHTING: Professional even lighting, clear visibility of eyes and face\n- AUDIO: Crystal clear dialogue, no background noise or echo\n- FRAMING: Proper close-up, centered, eye-level camera\n- PRODUCTION VALUE: HD quality, professional background\n\n**PERFORMANCE EVALUATION:**\n- SCRIPT ADHERENCE: Does performance match the provided script content?\n- CHARACTER ACCURACY: Is this actually portraying \"${analysis.selected_character}\"?\n- ACTING TECHNIQUE: Effective use of ${actingMethodInstructions}\n- EMOTIONAL AUTHENTICITY: Genuine, believable performance\n- SCENE UNDERSTANDING: Clear grasp of objectives, obstacles, tactics\n\n**SCORING GUIDELINES:**\n- 90-100: Exceptional, booking-ready performance\n- 80-89: Strong performance with minor adjustments needed\n- 70-79: Good foundation, needs significant improvement\n- 60-69: Below industry standard, major work required\n- 20-59: Poor/mismatched content, does not meet requirements\n\nFORMAT YOUR RESPONSE EXACTLY AS:\n\n**OVERALL SCORE: X/100**\n**TECHNICAL SCORE: X/100** \n**PERFORMANCE SCORE: X/100**\n\n**SCRIPT MATCH VERIFICATION:**\n[State clearly if video matches script and character, or if there's a mismatch]\n\n**TECHNICAL FEEDBACK:**\n• [Specific lighting feedback]\n• [Specific audio feedback] \n• [Specific framing feedback]\n• [Specific production feedback]\n\n**PERFORMANCE FEEDBACK:**\n• [Specific character portrayal feedback]\n• [Specific scene work feedback]\n• [Specific technique feedback]\n• [Specific emotional work feedback]\n• [Specific improvement needed]\n\n**KEY INSIGHTS:**\n• [Most important strength]\n• [Most critical weakness] \n• [Primary focus for improvement]\n\nBe brutally honest and specific. If the video doesn't match the script or character, say so clearly and score accordingly.`;\n\n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GOOGLE_AI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.8,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 2000,\n        }\n      })\n    });\n\n    if (!response.ok) {\n      const errorData = await response.text();\n      console.error('Gemini API error:', errorData);\n      throw new Error(`Gemini API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    const evaluationText = data.candidates[0].content.parts[0].text;\n\n    console.log('Raw evaluation text:', evaluationText);\n\n    // Parse the evaluation into structured data\n    const evaluation = {\n      overall_score: extractScore(evaluationText, 'OVERALL SCORE'),\n      technical_score: extractScore(evaluationText, 'TECHNICAL SCORE'),\n      performance_score: extractScore(evaluationText, 'PERFORMANCE SCORE'),\n      notes: evaluationText,\n      analysis: {\n        overall_performance: getPerformanceLevel(extractScore(evaluationText, 'OVERALL SCORE')),\n        technical_feedback: extractBulletPoints(evaluationText, 'TECHNICAL FEEDBACK'),\n        performance_feedback: extractBulletPoints(evaluationText, 'PERFORMANCE FEEDBACK'),\n        key_insights: extractBulletPoints(evaluationText, 'KEY INSIGHTS'),\n        script_match_analysis: extractScriptMatch(evaluationText),\n        character_focus: analysis.selected_character,\n        acting_method_used: actingMethodDisplay,\n        improvement_summary: extractBulletPoints(evaluationText, 'PERFORMANCE FEEDBACK')\n      }\n    };\n\n    console.log('Parsed evaluation:', evaluation);\n\n    return new Response(JSON.stringify(evaluation), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Error in evaluate-video:', error);\n    return new Response(JSON.stringify({ \n      error: error.message || 'Failed to evaluate video'\n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n});\n\nfunction extractScore(text: string, scoreType: string): number {\n  console.log(`Extracting score for: ${scoreType}`);\n  \n  const patterns = [\n    new RegExp(`\\\\*\\\\*${scoreType}[:\\\\s]*([0-9]+)(?:/100)?\\\\*\\\\*`, 'i'),\n    new RegExp(`${scoreType}[:\\\\s]*([0-9]+)(?:/100)?`, 'i'),\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match) {\n      console.log(`Found score ${match[1]} for ${scoreType}`);\n      return parseInt(match[1]);\n    }\n  }\n  \n  console.log(`No score found for ${scoreType}, using default 70`);\n  return 70;\n}\n\nfunction getPerformanceLevel(score: number): string {\n  if (score \u003e= 90) return 'Excellent';\n  if (score \u003e= 80) return 'Good';\n  if (score \u003e= 70) return 'Needs Work';\n  return 'Requires Significant Improvement';\n}\n\nfunction extractBulletPoints(text: string, sectionName: string): string[] {\n  console.log(`Extracting bullet points for: ${sectionName}`);\n  \n  const sectionPattern = new RegExp(`\\\\*\\\\*${sectionName}[:\\\\s]*\\\\*\\\\*([\\\\s\\\\S]*?)(?=\\\\*\\\\*[A-Z\\\\s]+:|$)`, 'i');\n  const match = text.match(sectionPattern);\n  \n  if (!match) {\n    console.log(`No section found for ${sectionName}`);\n    return [];\n  }\n  \n  const sectionText = match[1];\n  const bulletPoints = sectionText\n    .split('\\n')\n    .map(line =\u003e line.trim())\n    .filter(line =\u003e line.startsWith('•') || line.startsWith('-') || line.startsWith('*'))\n    .map(line =\u003e line.replace(/^[•\\-\\*]\\s*/, '').trim())\n    .filter(line =\u003e line.length \u003e 10)\n    .slice(0, 5);\n  \n  console.log(`Found ${bulletPoints.length} bullet points for ${sectionName}:`, bulletPoints);\n  return bulletPoints;\n}\n\nfunction extractScriptMatch(text: string): string {\n  const scriptSection = text.match(/\\*\\*SCRIPT MATCH VERIFICATION[:\\s]*\\*\\*([\\s\\S]*?)(?=\\*\\*[A-Z\\s]+:|$)/i);\n  if (scriptSection) {\n    return scriptSection[1].trim();\n  }\n  \n  const mismatchIndicators = ['mismatch', 'does not match', 'doesn\\'t match', 'not align', 'incorrect', 'unrelated', 'random'];\n  const lowerText = text.toLowerCase();\n  \n  for (const indicator of mismatchIndicators) {\n    if (lowerText.includes(indicator)) {\n      const sentences = text.split(/[.!?]+/);\n      const matchingSentence = sentences.find(sentence =\u003e \n        sentence.toLowerCase().includes(indicator)\n      );\n      if (matchingSentence) {\n        return matchingSentence.trim();\n      }\n    }\n  }\n  \n  return 'Performance appears to align with the provided script and character';\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/extract-text/index.ts",
//   "contents": "\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) =\u003e {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const formData = await req.formData();\n    const file = formData.get('file') as File;\n    \n    if (!file) {\n      return new Response(\n        JSON.stringify({ error: 'No file provided' }),\n        { \n          status: 400, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n        }\n      );\n    }\n\n    console.log('Processing file:', file.name, 'Type:', file.type, 'Size:', file.size);\n\n    let extractedText = '';\n\n    if (file.type === 'text/plain' || file.name.toLowerCase().endsWith('.txt')) {\n      // Handle TXT files\n      extractedText = await file.text();\n    } else if (file.type === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf')) {\n      // Handle PDF files using pdf-parse\n      try {\n        const { default: pdfParse } = await import('npm:pdf-parse@1.1.1');\n        const arrayBuffer = await file.arrayBuffer();\n        const buffer = new Uint8Array(arrayBuffer);\n        const data = await pdfParse(buffer);\n        extractedText = data.text;\n      } catch (pdfError) {\n        console.error('PDF parsing error:', pdfError);\n        return new Response(\n          JSON.stringify({ error: 'Failed to extract text from PDF. Please ensure the file is not corrupted or password-protected.' }),\n          { \n            status: 400, \n            headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n          }\n        );\n      }\n    } else {\n      return new Response(\n        JSON.stringify({ error: 'Unsupported file type. Please upload a PDF or TXT file.' }),\n        { \n          status: 400, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n        }\n      );\n    }\n\n    if (!extractedText || extractedText.trim().length === 0) {\n      return new Response(\n        JSON.stringify({ error: 'No text could be extracted from the file.' }),\n        { \n          status: 400, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n        }\n      );\n    }\n\n    console.log('Successfully extracted text, length:', extractedText.length);\n\n    // Clean up unwanted symbols and formatting artifacts and prevent duplications\n    const cleanedText = extractedText\n      .replace(/^\\*\\s*$/gm, '') // Remove lines with only asterisks\n      .replace(/^\\*\\s*\\n/gm, '') // Remove asterisk-only lines\n      .replace(/\\*\\s*$/gm, '') // Remove trailing asterisks\n      .replace(/^\\s*\\*\\s*/gm, '') // Remove leading asterisks\n      .replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n') // Clean up excessive line breaks\n      // Remove duplicate consecutive lines (common OCR issue)\n      .split('\\n')\n      .reduce((acc: string[], line: string, index: number, arr: string[]) =\u003e {\n        const trimmedLine = line.trim();\n        const prevLine = index \u003e 0 ? arr[index - 1].trim() : '';\n        const nextLine = index \u003c arr.length - 1 ? arr[index + 1].trim() : '';\n        \n        // Skip if this line is identical to the previous line and both are substantial\n        if (trimmedLine === prevLine \u0026\u0026 trimmedLine.length \u003e 10) {\n          return acc;\n        }\n        \n        // Skip if this line appears to be a duplicate within a 3-line window\n        if (trimmedLine.length \u003e 15) {\n          const isDuplicateInWindow = acc.slice(-3).some(prevAccLine =\u003e \n            prevAccLine.trim() === trimmedLine\n          );\n          if (isDuplicateInWindow) {\n            return acc;\n          }\n        }\n        \n        acc.push(line);\n        return acc;\n      }, [])\n      .join('\\n')\n      .trim();\n\n    return new Response(\n      JSON.stringify({ \n        text: cleanedText,\n        fileName: file.name \n      }),\n      { \n        headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n      }\n    );\n\n  } catch (error) {\n    console.error('Text extraction error:', error);\n    return new Response(\n      JSON.stringify({ error: 'Failed to process file: ' + error.message }),\n      { \n        status: 500, \n        headers: { ...corsHeaders, 'Content-Type': 'application/json' } \n      }\n    );\n  }\n});\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/grade-headshot/index.ts",
//   "contents": "\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\n// Helper function to convert ArrayBuffer to base64 without stack overflow\nfunction arrayBufferToBase64(buffer: ArrayBuffer): string {\n  const bytes = new Uint8Array(buffer);\n  const chunkSize = 0x8000; // 32KB chunks\n  let binary = '';\n  \n  for (let i = 0; i \u003c bytes.length; i += chunkSize) {\n    const chunk = bytes.subarray(i, Math.min(i + chunkSize, bytes.length));\n    binary += String.fromCharCode.apply(null, Array.from(chunk));\n  }\n  \n  return btoa(binary);\n}\n\n// Helper function to detect MIME type from buffer\nfunction detectMimeType(buffer: ArrayBuffer, filename: string): string {\n  const bytes = new Uint8Array(buffer);\n  \n  // Check for common image signatures\n  if (bytes[0] === 0xFF \u0026\u0026 bytes[1] === 0xD8 \u0026\u0026 bytes[2] === 0xFF) return 'image/jpeg';\n  if (bytes[0] === 0x89 \u0026\u0026 bytes[1] === 0x50 \u0026\u0026 bytes[2] === 0x4E \u0026\u0026 bytes[3] === 0x47) return 'image/png';\n  if (bytes[0] === 0x57 \u0026\u0026 bytes[1] === 0x45 \u0026\u0026 bytes[2] === 0x42 \u0026\u0026 bytes[3] === 0x50) return 'image/webp';\n  \n  // Fallback to extension-based detection\n  const ext = filename.toLowerCase().split('.').pop();\n  if (ext === 'jpg' || ext === 'jpeg') return 'image/jpeg';\n  if (ext === 'png') return 'image/png';\n  if (ext === 'webp') return 'image/webp';\n  \n  return 'image/jpeg'; // Default fallback\n}\n\n// Retry function with exponential backoff\nasync function callGeminiWithRetry(url: string, payload: any, maxRetries = 2): Promise\u003cResponse\u003e {\n  let lastError: Error;\n  \n  for (let attempt = 0; attempt \u003c= maxRetries; attempt++) {\n    try {\n      console.log(`Gemini API attempt ${attempt + 1}/${maxRetries + 1}`);\n      \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      console.log(`Gemini API response status: ${response.status}`);\n\n      // If successful, return response\n      if (response.ok) {\n        return response;\n      }\n\n      // Handle rate limiting (429)\n      if (response.status === 429) {\n        const errorText = await response.text();\n        console.log(`Rate limit hit on attempt ${attempt + 1}:`, errorText);\n        \n        // If this is our last attempt, return the 429 response\n        if (attempt === maxRetries) {\n          return response;\n        }\n\n        // Wait before retrying (exponential backoff)\n        const waitTime = Math.min(1000 * Math.pow(2, attempt), 10000); // Max 10 seconds\n        console.log(`Waiting ${waitTime}ms before retry...`);\n        await new Promise(resolve =\u003e setTimeout(resolve, waitTime));\n        continue;\n      }\n\n      // For other errors, return immediately\n      return response;\n\n    } catch (error) {\n      console.error(`Attempt ${attempt + 1} failed:`, error);\n      lastError = error as Error;\n      \n      if (attempt \u003c maxRetries) {\n        const waitTime = Math.min(1000 * Math.pow(2, attempt), 5000);\n        console.log(`Waiting ${waitTime}ms before retry...`);\n        await new Promise(resolve =\u003e setTimeout(resolve, waitTime));\n      }\n    }\n  }\n\n  throw lastError!;\n}\n\nserve(async (req) =\u003e {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    console.log('=== GRADE-HEADSHOT FUNCTION START ===');\n    \n    // Check API key\n    const GOOGLE_AI_API_KEY = Deno.env.get('GOOGLE_AI_API_KEY');\n    if (!GOOGLE_AI_API_KEY) {\n      console.error('Google AI API key not configured');\n      return new Response(JSON.stringify({ \n        error: 'Google AI API key not configured' \n      }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    // Get auth token from request\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) {\n      console.error('No authorization header');\n      return new Response(JSON.stringify({ error: 'No authorization header' }), {\n        status: 401,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    // Create Supabase client with user's auth token\n    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;\n    const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY')!;\n    const supabase = createClient(supabaseUrl, supabaseKey, {\n      global: {\n        headers: {\n          Authorization: authHeader,\n        },\n      },\n    });\n\n    // Verify user authentication\n    const { data: { user }, error: authError } = await supabase.auth.getUser(\n      authHeader.replace('Bearer ', '')\n    );\n\n    if (authError || !user) {\n      console.error('Authentication error:', authError);\n      return new Response(JSON.stringify({ error: 'Invalid auth token' }), {\n        status: 401,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    console.log('User authenticated:', user.id);\n\n    // Parse request body\n    const { imageUrl, headshotType, personaId, platformTarget } = await req.json();\n    \n    console.log('Request data:', {\n      hasImageUrl: !!imageUrl,\n      headshotType,\n      personaId,\n      platformTarget,\n      userId: user.id\n    });\n\n    if (!imageUrl || !headshotType) {\n      return new Response(JSON.stringify({ \n        error: 'Image URL and headshot type are required' \n      }), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    // Fetch the active ruleset from database\n    console.log('Fetching headshot evaluation ruleset...');\n    const { data: rulesetData, error: rulesetError } = await supabase\n      .from('headshot_rulesets')\n      .select('*')\n      .eq('is_active', true)\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .single();\n\n    if (rulesetError) {\n      console.error('Error fetching ruleset:', rulesetError);\n      return new Response(JSON.stringify({ \n        error: 'Failed to load evaluation criteria' \n      }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    const ruleset = rulesetData;\n    console.log('Retrieved ruleset version:', ruleset.version);\n\n    // Get the target style track (commercial or theatrical)\n    const styleTrack = ruleset.style_tracks[headshotType] || ruleset.style_tracks.commercial;\n    \n    // Get persona-specific guidelines if specified\n    let personaGuidelines = null;\n    if (personaId) {\n      const personas = ruleset.persona_tracks.personas || [];\n      personaGuidelines = personas.find(p =\u003e p.id === personaId);\n    }\n\n    // Get platform-specific requirements if specified\n    const platformSpecs = platformTarget ? ruleset.platform_specs[platformTarget] : null;\n\n    // Build comprehensive evaluation context\n    const evaluationContext = {\n      track: styleTrack,\n      persona: personaGuidelines,\n      platform: platformSpecs,\n      globalRules: ruleset.rules_global,\n      scoring: ruleset.scoring,\n      enums: ruleset.enums\n    };\n\n    console.log('Building comprehensive prompt using ruleset v1.1...');\n    \n    // Build detailed prompt using the ruleset\n    const prompt = `You are a professional headshot evaluator using the comprehensive 2025 industry standards (v${ruleset.version}).\n\n**EVALUATION TRACK**: ${headshotType.toUpperCase()}\nPurpose: ${styleTrack.purpose}\n${personaGuidelines ? `**PERSONA**: ${personaGuidelines.label} - ${personaGuidelines.track_bias} bias` : ''}\n${platformSpecs ? `**PLATFORM**: ${platformTarget} - ${platformSpecs.notes || 'Standard platform requirements'}` : ''}\n\n**STYLE GUIDELINES**:\n- Expression: ${styleTrack.expression_primary.join(', ')}\n- Lighting: ${styleTrack.lighting}\n- Wardrobe Palette: ${styleTrack.wardrobe_palette.join(', ')}\n- Background: ${styleTrack.background_palette.join(', ')}\n- Key Dos: ${styleTrack.dos.join('; ')}\n- Avoid: ${styleTrack.donts.join('; ')}\n\n**TECHNICAL STANDARDS**:\n- Focus: ${evaluationContext.globalRules.technical.focus}\n- Exposure: ${evaluationContext.globalRules.technical.exposure}\n- Retouching: ${evaluationContext.globalRules.retouching.philosophy}\n- Background: ${evaluationContext.globalRules.background.style}\n\n**SCORING WEIGHTS**:\n${Object.entries(evaluationContext.scoring.weights).map(([key, weight]) =\u003e \n  `- ${key.replace(/_/g, ' ')}: ${(weight * 100).toFixed(0)}%`\n).join('\\n')}\n\nEvaluate this ${headshotType} headshot using these exact criteria. Provide scores 1-5 for each dimension and detailed feedback.`;\n\n    // Convert image URL to base64 for Gemini Vision\n    console.log('Fetching image for analysis...');\n    const imageResponse = await fetch(imageUrl);\n    if (!imageResponse.ok) {\n      throw new Error(`Failed to fetch image: ${imageResponse.status} ${imageResponse.statusText}`);\n    }\n    \n    const imageBuffer = await imageResponse.arrayBuffer();\n    \n    // Check image size (limit to 8MB for better performance)\n    if (imageBuffer.byteLength \u003e 8 * 1024 * 1024) {\n      console.error('Image too large:', imageBuffer.byteLength);\n      return new Response(JSON.stringify({ \n        error: 'Image file is too large. Please use an image smaller than 8MB.' \n      }), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n    \n    console.log('Converting image to base64 (size:', imageBuffer.byteLength, 'bytes)...');\n    const base64Image = arrayBufferToBase64(imageBuffer);\n    \n    // Detect proper MIME type\n    const mimeType = detectMimeType(imageBuffer, imageUrl);\n    console.log('Detected MIME type:', mimeType);\n    \n    console.log('Preparing Gemini Vision API request...');\n\n    const requestPayload = {\n      contents: [\n        {\n          parts: [\n            {\n              text: prompt\n            },\n            {\n              inline_data: {\n                mime_type: mimeType,\n                data: base64Image\n              }\n            }\n          ]\n        }\n      ],\n      generationConfig: {\n        temperature: 0.2,\n        topK: 32,\n        topP: 0.7,\n        maxOutputTokens: 4096, // Reduced for efficiency\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            full_analysis: {\n              type: \"string\",\n              description: \"Complete analysis with section headers and emojis\"\n            },\n            overall_score: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 5,\n              description: \"Overall rating 1-5\"\n            },\n            technical_score: {\n              type: \"integer\", \n              minimum: 1,\n              maximum: 5,\n              description: \"Technical quality 1-5\"\n            },\n            professional_score: {\n              type: \"integer\",\n              minimum: 1, \n              maximum: 5,\n              description: \"Professional standards 1-5\"\n            },\n            industry_score: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 5, \n              description: \"Industry readiness 1-5\"\n            },\n            casting_types: {\n              type: \"array\",\n              items: { type: \"string\" },\n              maxItems: 3,\n              description: \"2-3 casting archetypes\"\n            },\n            red_flags: {\n              type: \"array\", \n              items: { type: \"string\" },\n              maxItems: 3,\n              description: \"Critical issues\"\n            },\n            suggestions: {\n              type: \"array\",\n              items: { type: \"string\" },\n              maxItems: 3,\n              description: \"Improvement recommendations\"\n            },\n            final_verdict: {\n              type: \"string\",\n              description: \"Brief casting potential summary\"\n            }\n          },\n          required: [\"full_analysis\", \"overall_score\", \"technical_score\", \"professional_score\", \"industry_score\", \"casting_types\", \"red_flags\", \"suggestions\", \"final_verdict\"]\n        }\n      }\n    };\n\n    // Try gemini-1.5-pro first, fallback to gemini-1.5-flash if rate limited\n    let geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=${GOOGLE_AI_API_KEY}`;\n    \n    console.log('Calling Gemini API with retry logic...');\n    let response = await callGeminiWithRetry(geminiUrl, requestPayload, 1);\n\n    // If still rate limited, try gemini-1.5-flash\n    if (!response.ok \u0026\u0026 response.status === 429) {\n      console.log('Rate limited on gemini-1.5-pro, trying gemini-1.5-flash...');\n      geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GOOGLE_AI_API_KEY}`;\n      response = await callGeminiWithRetry(geminiUrl, requestPayload, 1);\n    }\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Final Gemini API error:', errorText);\n      \n      // Return specific error messages for different scenarios\n      if (response.status === 429) {\n        return new Response(JSON.stringify({ \n          error: 'RATE_LIMIT_EXCEEDED',\n          message: 'The AI analysis service is currently experiencing high demand. Please try again in a few minutes.',\n          retry_after: 60\n        }), {\n          status: 429,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        });\n      }\n      \n      return new Response(JSON.stringify({ \n        error: 'API_ERROR',\n        message: `Analysis service error (${response.status}). Please try again.`\n      }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    const data = await response.json();\n    console.log('Gemini API response received, processing...');\n\n    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\n      console.error('Invalid Gemini API response structure:', data);\n      return new Response(JSON.stringify({ \n        error: 'Invalid response from Gemini API' \n      }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    const analysisResponse = data.candidates[0].content.parts[0].text;\n    console.log('Structured JSON response received, parsing...');\n\n    // Parse the structured JSON response\n    let jsonSummary;\n    try {\n      jsonSummary = JSON.parse(analysisResponse);\n      console.log('Successfully parsed structured response:', jsonSummary);\n    } catch (parseError) {\n      console.error('Failed to parse structured JSON response:', parseError);\n      console.error('Raw response:', analysisResponse);\n      \n      // Fallback summary\n      jsonSummary = {\n        full_analysis: \"Analysis completed with technical difficulties. Professional headshot evaluation performed.\",\n        overall_score: 3,\n        technical_score: 3,\n        professional_score: 3,\n        industry_score: 3,\n        casting_types: [\"General\"],\n        red_flags: [],\n        suggestions: [\"Professional retake recommended\"],\n        final_verdict: \"Analysis completed\"\n      };\n    }\n\n    // Convert 1-5 scale to 0-100 for database compatibility\n    const convertToPercent = (score) =\u003e Math.round((score / 5) * 100);\n\n    // Save analysis to database\n    console.log('Saving analysis to database...');\n    const { data: savedAnalysis, error: dbError } = await supabase\n      .from('headshot_analyses')\n      .insert({\n        user_id: user.id,\n        image_url: imageUrl,\n        headshot_type: headshotType,\n        overall_score: convertToPercent(jsonSummary.overall_score),\n        technical_score: convertToPercent(jsonSummary.technical_score),\n        professional_score: convertToPercent(jsonSummary.professional_score),\n        industry_score: convertToPercent(jsonSummary.industry_score),\n        detailed_feedback: {\n          full_analysis: (jsonSummary.full_analysis || \"Analysis completed\").replace(/```json[\\s\\S]*?```/g, '').trim(),\n          casting_types: jsonSummary.casting_types || [],\n          red_flags: jsonSummary.red_flags || [],\n          final_verdict: jsonSummary.final_verdict || \"Analysis completed\"\n        },\n        improvement_suggestions: jsonSummary.suggestions || [],\n        strengths: jsonSummary.casting_types || []\n      })\n      .select()\n      .single();\n\n    if (dbError) {\n      console.error('Database error:', dbError);\n      return new Response(JSON.stringify({ \n        error: 'Failed to save analysis',\n        details: dbError.message \n      }), {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    console.log('Analysis completed and saved successfully');\n\n    return new Response(JSON.stringify({\n      full_analysis: jsonSummary.full_analysis || \"Analysis completed\",\n      overall_score: convertToPercent(jsonSummary.overall_score),\n      technical_score: convertToPercent(jsonSummary.technical_score),\n      professional_score: convertToPercent(jsonSummary.professional_score),\n      industry_score: convertToPercent(jsonSummary.industry_score),\n      casting_types: jsonSummary.casting_types,\n      red_flags: jsonSummary.red_flags,\n      improvement_suggestions: jsonSummary.suggestions,\n      final_verdict: jsonSummary.final_verdict,\n      analysis_id: savedAnalysis.id,\n      created_at: savedAnalysis.created_at\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      status: 200,\n    });\n\n  } catch (error) {\n    console.error('=== FATAL ERROR in grade-headshot ===');\n    console.error('Error details:', {\n      name: error.name,\n      message: error.message,\n      stack: error.stack\n    });\n    \n    return new Response(JSON.stringify({ \n      error: 'Internal server error',\n      details: error.message \n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n  }\n});\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/handle-trial-signup/index.ts",
//   "contents": "import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.38.4';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\ninterface TrialSignupRequest {\n  full_name: string;\n  email: string;\n  password: string;\n}\n\nconst handler = async (req: Request): Promise\u003cResponse\u003e =\u003e {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    const { full_name, email, password }: TrialSignupRequest = await req.json();\n\n    console.log('Processing trial signup for:', email);\n\n    // Validate input\n    if (!full_name || !email || !password) {\n      return new Response(\n        JSON.stringify({ error: 'Full name, email, and password are required' }),\n        { \n          status: 400, \n          headers: { 'Content-Type': 'application/json', ...corsHeaders } \n        }\n      );\n    }\n\n    if (password.length \u003c 8) {\n      return new Response(\n        JSON.stringify({ error: 'Password must be at least 8 characters long' }),\n        { \n          status: 400, \n          headers: { 'Content-Type': 'application/json', ...corsHeaders } \n        }\n      );\n    }\n\n    // Store trial signup\n    const { data: trialData, error: trialError } = await supabaseClient\n      .from('trial_signups')\n      .insert({\n        full_name,\n        email,\n        status: 'pending'\n      })\n      .select()\n      .single();\n\n    if (trialError) {\n      console.error('Trial signup error:', trialError);\n      if (trialError.code === '23505') { // Unique constraint violation\n        return new Response(\n          JSON.stringify({ error: 'Email already registered for trial' }),\n          { \n            status: 400, \n            headers: { 'Content-Type': 'application/json', ...corsHeaders } \n          }\n        );\n      }\n      throw trialError;\n    }\n\n    console.log('Trial signup created:', trialData.id);\n\n    // Create user account\n    const { data: authData, error: authError } = await supabaseClient.auth.admin.createUser({\n      email: email,\n      password: password,\n      email_confirm: true,\n      user_metadata: {\n        full_name: full_name,\n        trial_signup_id: trialData.id\n      }\n    });\n\n    if (authError) {\n      console.error('Auth creation error:', authError);\n      // If user already exists, that's okay for trial purposes\n      if (authError.message?.includes('already registered')) {\n        console.log('User already exists, continuing with trial signup');\n      } else {\n        throw authError;\n      }\n    }\n\n    console.log('User created or exists:', authData?.user?.id);\n\n    // Get the demo plan\n    const { data: demoPlans, error: planError } = await supabaseClient\n      .from('subscription_plans')\n      .select('*')\n      .eq('name', 'Demo')\n      .limit(1);\n\n    if (planError || !demoPlans || demoPlans.length === 0) {\n      console.error('Demo plan not found:', planError);\n      return new Response(\n        JSON.stringify({ error: 'Demo plan not available' }),\n        { \n          status: 500, \n          headers: { 'Content-Type': 'application/json', ...corsHeaders } \n        }\n      );\n    }\n\n    const demoPlan = demoPlans[0];\n    console.log('Demo plan found:', demoPlan.id);\n\n    // If we have a user, create subscription\n    if (authData?.user) {\n      const { error: subscriptionError } = await supabaseClient\n        .from('user_subscriptions')\n        .insert({\n          user_id: authData.user.id,\n          plan_id: demoPlan.id,\n          status: 'active',\n          started_at: new Date().toISOString()\n        });\n\n      if (subscriptionError) {\n        console.error('Subscription creation error:', subscriptionError);\n        // Don't fail the whole process if subscription creation fails\n      } else {\n        console.log('Demo subscription created for user:', authData.user.id);\n      }\n    }\n\n    return new Response(\n      JSON.stringify({ \n        success: true, \n        message: 'Trial signup successful',\n        trial_id: trialData.id \n      }),\n      {\n        status: 200,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      }\n    );\n\n  } catch (error: any) {\n    console.error('Error in handle-trial-signup:', error);\n    return new Response(\n      JSON.stringify({ error: error.message || 'Internal server error' }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      }\n    );\n  }\n};\n\nserve(handler);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/ocr-script/index.ts",
//   "contents": "import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nfunction getMimeType(fileName: string, provided?: string): string {\n  if (provided) return provided;\n  const ext = fileName.split(\".\").pop()?.toLowerCase();\n  switch (ext) {\n    case \"jpg\":\n    case \"jpeg\":\n      return \"image/jpeg\";\n    case \"png\":\n      return \"image/png\";\n    case \"pdf\":\n      return \"application/pdf\";\n    default:\n      return \"application/octet-stream\";\n  }\n}\n\nfunction toBase64(buffer: ArrayBuffer): string {\n  const bytes = new Uint8Array(buffer);\n  let binary = \"\";\n  for (let i = 0; i \u003c bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  // btoa is available in Deno\n  return btoa(binary);\n}\n\nserve(async (req) =\u003e {\n  // Handle CORS preflight\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    console.log(\"OCR script function called\");\n    const apiKey = Deno.env.get(\"GOOGLE_AI_API_KEY\");\n    console.log(\"API key present:\", !!apiKey);\n    \n    if (!apiKey) {\n      console.error(\"Missing GOOGLE_AI_API_KEY secret\");\n      return new Response(\n        JSON.stringify({ error: \"Missing GOOGLE_AI_API_KEY secret\" }),\n        { status: 500, headers: { ...corsHeaders, \"Content-Type\": \"application/json\" } }\n      );\n    }\n\n    console.log(\"Parsing form data...\");\n    const formData = await req.formData();\n    const file = formData.get(\"file\") as File | null;\n    console.log(\"File received:\", !!file, file?.name, file?.size);\n\n    if (!file) {\n      console.error(\"No file in form data\");\n      return new Response(\n        JSON.stringify({ error: \"No file uploaded\" }),\n        { status: 400, headers: { ...corsHeaders, \"Content-Type\": \"application/json\" } }\n      );\n    }\n\n    const fileName = file.name || \"upload\";\n    const mimeType = getMimeType(fileName, (file as any).type);\n    console.log(\"File details:\", { fileName, mimeType, size: (file as any).size });\n\n    // 10MB guard\n    if ((file as any).size \u0026\u0026 (file as any).size \u003e 10 * 1024 * 1024) {\n      console.error(\"File too large:\", (file as any).size);\n      return new Response(\n        JSON.stringify({ error: \"File too large. Max 10MB.\" }),\n        { status: 400, headers: { ...corsHeaders, \"Content-Type\": \"application/json\" } }\n      );\n    }\n\n    console.log(\"Converting file to base64...\");\n    const arrayBuffer = await file.arrayBuffer();\n    const base64 = toBase64(arrayBuffer);\n    console.log(\"Base64 conversion complete, length:\", base64.length);\n\n    const instruction = `You are an expert screenplay OCR and formatter. Extract readable raw script text from the provided file (PDF or image). \n- Preserve line breaks.\n- Use CHARACTER NAMES in caps at the start of dialogue lines followed by a colon, e.g., JANE:\n- Keep parentheticals on their own line in parentheses when present.\n- Remove watermarks, page numbers, headers/footers, or any non-dialogue artifacts.\n- Do not include commentary, analysis, or extra sections. Only output the script text.`;\n\n    const body = {\n      contents: [\n        {\n          role: \"user\",\n          parts: [\n            { text: instruction },\n            {\n              inline_data: {\n                mime_type: mimeType,\n                data: base64,\n              },\n            },\n          ],\n        },\n      ],\n      generationConfig: {\n        temperature: 0.2,\n      },\n    } as any;\n\n    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`;\n    console.log(\"Calling Gemini API...\");\n    \n    // Add retry logic for API overload\n    let attempts = 0;\n    const maxRetries = 3;\n    let resp: Response;\n    \n    while (attempts \u003c maxRetries) {\n      try {\n        console.log(`API attempt ${attempts + 1}/${maxRetries}`);\n        resp = await fetch(url, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body),\n        });\n\n        console.log(\"API response status:\", resp.status);\n        if (resp.ok) {\n          console.log(\"API call successful\");\n          break; // Success, exit retry loop\n        }\n        \n        // Check if it's a 503 (overloaded) error that we should retry\n        if (resp.status === 503 \u0026\u0026 attempts \u003c maxRetries - 1) {\n          console.log(`Gemini API overloaded (attempt ${attempts + 1}), retrying in ${(attempts + 1) * 2} seconds...`);\n          await new Promise(resolve =\u003e setTimeout(resolve, (attempts + 1) * 2000));\n          attempts++;\n          continue;\n        }\n        \n        // For other errors or final retry, break and handle below\n        break;\n        \n      } catch (fetchError) {\n        console.error(`Fetch attempt ${attempts + 1} failed:`, fetchError);\n        if (attempts \u003c maxRetries - 1) {\n          await new Promise(resolve =\u003e setTimeout(resolve, (attempts + 1) * 2000));\n          attempts++;\n          continue;\n        }\n        throw fetchError;\n      }\n    }\n\n    if (!resp!.ok) {\n      const txt = await resp!.text();\n      console.error(\"Gemini API error:\", resp!.status, txt);\n      \n      // Provide user-friendly error messages\n      let userMessage = \"Failed to process the document with OCR.\";\n      if (resp!.status === 503) {\n        userMessage = \"The OCR service is currently overloaded. Please try again in a few minutes.\";\n      } else if (resp!.status === 400) {\n        userMessage = \"The uploaded file format is not supported or the file is corrupted.\";\n      } else if (resp!.status === 429) {\n        userMessage = \"Too many requests. Please wait a moment before trying again.\";\n      }\n      \n      return new Response(\n        JSON.stringify({ \n          error: userMessage, \n          details: `API returned ${resp!.status}: ${txt}`,\n          retryAfter: resp!.status === 503 ? 120 : 30 // Suggest retry time in seconds\n        }),\n        { status: resp!.status, headers: { ...corsHeaders, \"Content-Type\": \"application/json\" } }\n      );\n    }\n\n    console.log(\"Processing API response...\");\n    const json = await resp!.json();\n    console.log(\"API response structure:\", Object.keys(json || {}));\n    \n    const candidate = json?.candidates?.[0];\n    console.log(\"Candidate found:\", !!candidate);\n    \n    const parts = candidate?.content?.parts || [];\n    console.log(\"Parts found:\", parts.length);\n    \n    const rawText = parts\n      .map((p: any) =\u003e p.text)\n      .filter((t: any) =\u003e typeof t === \"string\")\n      .join(\"\\n\")\n      .trim();\n\n    // Clean up unwanted symbols and formatting artifacts and prevent duplications\n    const lines = rawText.split('\\n');\n    \n    // Remove duplicate consecutive lines (common OCR issue)\n    const deduplicatedLines = lines.reduce((acc: string[], line: string, index: number) =\u003e {\n      const trimmedLine = line.trim();\n      const prevLine = index \u003e 0 ? lines[index - 1].trim() : '';\n      \n      // Skip if this line is identical to the previous line and both are substantial\n      if (trimmedLine === prevLine \u0026\u0026 trimmedLine.length \u003e 8) {\n        return acc;\n      }\n      \n      // Skip if this line appears to be a duplicate within recent lines\n      if (trimmedLine.length \u003e 12) {\n        const isDuplicateInRecent = acc.slice(-2).some(recentLine =\u003e \n          recentLine.trim() === trimmedLine\n        );\n        if (isDuplicateInRecent) {\n          return acc;\n        }\n      }\n      \n      acc.push(line);\n      return acc;\n    }, []);\n    \n    const text = deduplicatedLines.join('\\n')\n      .replace(/^\\*\\s*$/gm, '') // Remove lines with only asterisks\n      .replace(/^\\*\\s*\\n/gm, '') // Remove asterisk-only lines\n      .replace(/\\*\\s*$/gm, '') // Remove trailing asterisks\n      .replace(/^\\s*\\*\\s*/gm, '') // Remove leading asterisks\n      .replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n') // Clean up excessive line breaks\n      .trim();\n\n    console.log(\"Extracted text length:\", text.length);\n    \n    if (!text) {\n      console.error(\"No text extracted from OCR\");\n      return new Response(\n        JSON.stringify({ error: \"No OCR text returned\" }),\n        { status: 500, headers: { ...corsHeaders, \"Content-Type\": \"application/json\" } }\n      );\n    }\n\n    console.log(\"OCR processing successful\");\n    return new Response(\n      JSON.stringify({ text, filename: fileName }),\n      { headers: { ...corsHeaders, \"Content-Type\": \"application/json\" } }\n    );\n  } catch (error: any) {\n    console.error(\"ocr-script error:\", error);\n    return new Response(\n      JSON.stringify({ error: \"Unexpected error\", details: error?.message || String(error) }),\n      { status: 500, headers: { ...corsHeaders, \"Content-Type\": \"application/json\" } }\n    );\n  }\n});\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/purge-tts-cache/index.ts",
//   "contents": "\nimport \"https://deno.land/x/xhr@0.1.0/mod.ts\";\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts'\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\nserve(async (req) =\u003e {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders })\n  }\n\n  try {\n    const { scriptId } = await req.json()\n\n    if (!scriptId) {\n      return new Response(\n        JSON.stringify({ error: 'scriptId is required' }),\n        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    // Get user ID from JWT token\n    const authHeader = req.headers.get('Authorization')\n    if (!authHeader) {\n      return new Response(\n        JSON.stringify({ error: 'Authorization required' }),\n        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    // Initialize Supabase client with service role key\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    )\n\n    // Verify user identity with provided JWT\n    const userSupabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? ''\n    )\n\n    const { data: { user }, error: userError } = await userSupabase.auth.getUser(\n      authHeader.replace('Bearer ', '')\n    )\n\n    if (userError || !user) {\n      return new Response(\n        JSON.stringify({ error: 'Invalid authorization' }),\n        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    console.log(`Purging TTS cache for user ${user.id}, script ${scriptId}`)\n\n    // Get all cache items for this script\n    const { data: cacheItems, error: fetchError } = await supabase\n      .from('tts_cache_items')\n      .select('storage_path')\n      .eq('user_id', user.id)\n      .eq('script_id', scriptId)\n\n    if (fetchError) {\n      console.error('Error fetching cache items:', fetchError)\n      return new Response(\n        JSON.stringify({ error: 'Failed to fetch cache items' }),\n        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    let deletedFiles = 0\n    let failedFiles = 0\n\n    // Delete storage files\n    if (cacheItems \u0026\u0026 cacheItems.length \u003e 0) {\n      for (const item of cacheItems) {\n        try {\n          const { error: deleteError } = await supabase.storage\n            .from('tts-audio')\n            .remove([item.storage_path])\n\n          if (deleteError) {\n            console.error(`Failed to delete ${item.storage_path}:`, deleteError)\n            failedFiles++\n          } else {\n            deletedFiles++\n          }\n        } catch (err) {\n          console.error(`Error deleting ${item.storage_path}:`, err)\n          failedFiles++\n        }\n      }\n    }\n\n    // Delete cache index entries\n    const { error: indexDeleteError } = await supabase\n      .from('tts_cache_items')\n      .delete()\n      .eq('user_id', user.id)\n      .eq('script_id', scriptId)\n\n    if (indexDeleteError) {\n      console.error('Error deleting cache index entries:', indexDeleteError)\n      return new Response(\n        JSON.stringify({ error: 'Failed to delete cache index entries' }),\n        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    console.log(`Cache purge complete: ${deletedFiles} files deleted, ${failedFiles} failed`)\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        deletedFiles,\n        failedFiles,\n        message: `Purged ${deletedFiles} cached audio files for script`\n      }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    )\n\n  } catch (error: any) {\n    console.error('Error in purge-tts-cache function:', error)\n    return new Response(\n      JSON.stringify({ error: error?.message || 'Unexpected server error' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    )\n  }\n})\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/realtime-voice-partner/index.ts",
//   "contents": "import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) =\u003e {\n  const { headers } = req;\n  const upgradeHeader = headers.get(\"upgrade\") || \"\";\n\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  if (upgradeHeader.toLowerCase() !== \"websocket\") {\n    return new Response(\"Expected WebSocket connection\", { status: 400 });\n  }\n\n  const { socket, response } = Deno.upgradeWebSocket(req);\n  \n  const openAIApiKey = Deno.env.get('OPENAI_API_KEY');\n  if (!openAIApiKey) {\n    console.error('OPENAI_API_KEY not found');\n    socket.close(1000, 'API key not configured');\n    return response;\n  }\n\n  let openAISocket: WebSocket | null = null;\n  let sessionStarted = false;\n\n  socket.onopen = () =\u003e {\n    console.log('Client WebSocket connection opened');\n    \n    // Connect to OpenAI Realtime API\n    const openAIUrl = `wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-12-17`;\n    openAISocket = new WebSocket(openAIUrl, [], {\n      headers: {\n        \"Authorization\": `Bearer ${openAIApiKey}`,\n        \"OpenAI-Beta\": \"realtime=v1\"\n      }\n    });\n\n    openAISocket.onopen = () =\u003e {\n      console.log('Connected to OpenAI Realtime API');\n    };\n\n    openAISocket.onmessage = (event) =\u003e {\n      const data = JSON.parse(event.data);\n      console.log('OpenAI message:', data.type);\n\n      // Handle session.created event to configure the session\n      if (data.type === 'session.created' \u0026\u0026 !sessionStarted) {\n        sessionStarted = true;\n        console.log('Session created, sending configuration...');\n        \n        const sessionConfig = {\n          type: \"session.update\",\n          session: {\n            modalities: [\"text\", \"audio\"],\n            instructions: `You are an acting scene partner. Your role is to deliver dialogue lines naturally and conversationally, as if you're performing in a scene with another actor. \n\nKey instructions:\n- When given script lines, deliver them with appropriate emotion and timing\n- Speak naturally as if you're having a real conversation\n- Don't add commentary or explanations unless asked\n- Match the tone and energy of the scene\n- Pause naturally between lines to allow for actor responses\n- Be supportive and encouraging as a scene partner would be\n\nYou will receive script content and should deliver the assigned character lines with natural acting performance.`,\n            voice: \"alloy\",\n            input_audio_format: \"pcm16\",\n            output_audio_format: \"pcm16\",\n            input_audio_transcription: {\n              model: \"whisper-1\"\n            },\n            turn_detection: {\n              type: \"server_vad\",\n              threshold: 0.5,\n              prefix_padding_ms: 300,\n              silence_duration_ms: 800\n            },\n            temperature: 0.8,\n            max_response_output_tokens: \"inf\"\n          }\n        };\n        \n        openAISocket?.send(JSON.stringify(sessionConfig));\n      }\n\n      // Forward all messages to client\n      socket.send(event.data);\n    };\n\n    openAISocket.onerror = (error) =\u003e {\n      console.error('OpenAI WebSocket error:', error);\n      socket.send(JSON.stringify({\n        type: 'error',\n        error: 'OpenAI connection failed'\n      }));\n    };\n\n    openAISocket.onclose = () =\u003e {\n      console.log('OpenAI WebSocket closed');\n      socket.close();\n    };\n  };\n\n  socket.onmessage = (event) =\u003e {\n    // Forward client messages to OpenAI\n    if (openAISocket \u0026\u0026 openAISocket.readyState === WebSocket.OPEN) {\n      console.log('Forwarding client message to OpenAI');\n      openAISocket.send(event.data);\n    }\n  };\n\n  socket.onclose = () =\u003e {\n    console.log('Client WebSocket closed');\n    openAISocket?.close();\n  };\n\n  socket.onerror = (error) =\u003e {\n    console.error('Client WebSocket error:', error);\n    openAISocket?.close();\n  };\n\n  return response;\n});",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/send-audition-email/index.ts",
//   "contents": "import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.0';\nimport { Resend } from \"npm:resend@2.0.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nconst resend = new Resend(Deno.env.get(\"RESEND_API_KEY\"));\n\ninterface SendRequest {\n  auditionId: string;\n  to?: string;\n  test?: boolean;\n}\n\nconst generateEmailHtml = (audition: any) =\u003e {\n  const fmt = (d?: string) =\u003e (d ? new Date(d).toLocaleString() : 'Not specified');\n  return `\n    \u003chtml\u003e\n      \u003cbody style=\"font-family: Arial, sans-serif; color: #111;\"\u003e\n        \u003ch2 style=\"margin:0 0 12px;\"\u003eAudition: ${audition.title}\u003c/h2\u003e\n        \u003cp\u003e\u003cstrong\u003eAudition Date:\u003c/strong\u003e ${fmt(audition.audition_date)}\u003c/p\u003e\n        ${audition.submission_deadline ? `\u003cp\u003e\u003cstrong\u003eSubmission Deadline:\u003c/strong\u003e ${fmt(audition.submission_deadline)}\u003c/p\u003e` : ''}\n        ${audition.casting_director ? `\u003cp\u003e\u003cstrong\u003eCasting Director:\u003c/strong\u003e ${audition.casting_director}\u003c/p\u003e` : ''}\n        ${audition.production_company ? `\u003cp\u003e\u003cstrong\u003eProduction Company:\u003c/strong\u003e ${audition.production_company}\u003c/p\u003e` : ''}\n        ${audition.notes ? `\u003cp\u003e\u003cstrong\u003eNotes:\u003c/strong\u003e ${audition.notes}\u003c/p\u003e` : ''}\n        \u003cp style=\"margin-top:16px;\"\u003eGood luck! 🎭\u003c/p\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n  `;\n};\n\nserve(async (req) =\u003e {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const { auditionId, to, test }: SendRequest = await req.json();\n\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n      {\n        global: {\n          headers: { Authorization: req.headers.get('Authorization') ?? '' },\n        },\n      }\n    );\n\n    // Get the user to enforce ownership\n    const { data: userData, error: userError } = await supabase.auth.getUser();\n    if (userError || !userData.user) {\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      });\n    }\n\n    const userId = userData.user.id;\n\n    // Fetch audition and ensure it belongs to the user\n    const { data: audition, error: auditionError } = await supabase\n      .from('auditions')\n      .select('*')\n      .eq('id', auditionId)\n      .eq('user_id', userId)\n      .maybeSingle();\n\n    if (auditionError || !audition) {\n      return new Response(JSON.stringify({ error: 'Audition not found' }), {\n        status: 404,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      });\n    }\n\n    // Determine recipient\n    let recipient = to;\n    if (!recipient) {\n      // fallback to actor_email if set\n      recipient = audition.actor_email;\n    }\n\n    if (!recipient \u0026\u0026 test) {\n      // For tests without explicit to, default to the current user's email from profile\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('talent_email')\n        .eq('id', userId)\n        .maybeSingle();\n      recipient = profile?.talent_email || userData.user.email || undefined;\n    }\n\n    if (!recipient) {\n      return new Response(JSON.stringify({ error: 'No recipient email provided' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      });\n    }\n\n    const html = generateEmailHtml(audition);\n\n    const emailResponse = await resend.emails.send({\n      from: 'Audition Tracker \u003cauditions@resend.dev\u003e',\n      to: [recipient],\n      subject: `Audition: ${audition.title}`,\n      html,\n    });\n\n    return new Response(JSON.stringify({ ok: true, emailResponse }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json', ...corsHeaders },\n    });\n  } catch (error: any) {\n    console.error('Error in send-audition-email:', error);\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json', ...corsHeaders },\n    });\n  }\n});",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/send-audition-reminders/index.ts",
//   "contents": "import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.0';\nimport { Resend } from \"npm:resend@2.0.0\";\n\nconst resend = new Resend(Deno.env.get(\"RESEND_API_KEY\"));\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface Audition {\n  id: string;\n  title: string;\n  casting_director?: string;\n  production_company?: string;\n  audition_date?: string;\n  submission_deadline?: string;\n  reminder_time?: string;\n  audition_type: string;\n  user_id: string;\n  actor_email?: string;\n  profiles?: {\n    full_name?: string;\n    talent_email?: string;\n  };\n}\n\nconst generateReminderEmail = (audition: Audition, userName: string) =\u003e {\n  const formatDate = (dateString?: string) =\u003e {\n    if (!dateString) return 'Not specified';\n    return new Date(dateString).toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return `\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003ctitle\u003eAudition Reminder\u003c/title\u003e\n      \u003cstyle\u003e\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px 20px; text-align: center; border-radius: 8px 8px 0 0; }\n        .content { background: #f9f9f9; padding: 30px 20px; border-radius: 0 0 8px 8px; }\n        .audition-card { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n        .detail-row { margin: 10px 0; }\n        .label { font-weight: bold; color: #667eea; }\n        .urgent { color: #e74c3c; font-weight: bold; }\n        .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }\n        .cta-button { background: #667eea; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 20px 0; }\n      \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv class=\"header\"\u003e\n        \u003ch1\u003e🎭 Audition Reminder\u003c/h1\u003e\n        \u003cp\u003eDon't miss your upcoming audition!\u003c/p\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"content\"\u003e\n        \u003cp\u003eHi ${userName},\u003c/p\u003e\n        \u003cp\u003eThis is a friendly reminder about your upcoming audition:\u003c/p\u003e\n        \n        \u003cdiv class=\"audition-card\"\u003e\n          \u003ch2\u003e${audition.title}\u003c/h2\u003e\n          \n          \u003cdiv class=\"detail-row\"\u003e\n            \u003cspan class=\"label\"\u003eAudition Date:\u003c/span\u003e ${formatDate(audition.audition_date)}\n          \u003c/div\u003e\n          \n          ${audition.submission_deadline ? `\n          \u003cdiv class=\"detail-row ${new Date(audition.submission_deadline) \u003c= new Date(Date.now() + 24 * 60 * 60 * 1000) ? 'urgent' : ''}\"\u003e\n            \u003cspan class=\"label\"\u003eSubmission Deadline:\u003c/span\u003e ${formatDate(audition.submission_deadline)}\n            ${new Date(audition.submission_deadline) \u003c= new Date(Date.now() + 24 * 60 * 60 * 1000) ? ' ⚠️ URGENT' : ''}\n          \u003c/div\u003e\n          ` : ''}\n          \n          ${audition.casting_director ? `\n          \u003cdiv class=\"detail-row\"\u003e\n            \u003cspan class=\"label\"\u003eCasting Director:\u003c/span\u003e ${audition.casting_director}\n          \u003c/div\u003e\n          ` : ''}\n          \n          ${audition.production_company ? `\n          \u003cdiv class=\"detail-row\"\u003e\n            \u003cspan class=\"label\"\u003eProduction Company:\u003c/span\u003e ${audition.production_company}\n          \u003c/div\u003e\n          ` : ''}\n          \n          \u003cdiv class=\"detail-row\"\u003e\n            \u003cspan class=\"label\"\u003eAudition Type:\u003c/span\u003e ${audition.audition_type.replace('-', ' ').toUpperCase()}\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cp\u003e\u003cstrong\u003eAction Items:\u003c/strong\u003e\u003c/p\u003e\n        \u003cul\u003e\n          \u003cli\u003eReview your script and character preparation\u003c/li\u003e\n          \u003cli\u003eCheck your equipment (camera, lighting, audio)\u003c/li\u003e\n          \u003cli\u003ePrepare your slate and any required materials\u003c/li\u003e\n          \u003cli\u003eDouble-check submission requirements\u003c/li\u003e\n        \u003c/ul\u003e\n        \n        \u003cdiv style=\"text-align: center;\"\u003e\n          \u003ca href=\"https://cqlczzkyktktaajbfmli.supabase.co\" class=\"cta-button\"\u003e\n            View Audition Details\n          \u003c/a\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv class=\"footer\"\u003e\n          \u003cp\u003eGood luck with your audition! 🌟\u003c/p\u003e\n          \u003cp\u003e\u003csmall\u003eThis reminder was sent from your Audition Tracker. To manage your reminder preferences, log into your dashboard.\u003c/small\u003e\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n  `;\n};\n\nconst handler = async (req: Request): Promise\u003cResponse\u003e =\u003e {\n  // Handle CORS preflight requests\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  console.log(\"Starting audition reminder check...\");\n\n  try {\n    // Initialize Supabase client\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    // Get current time and calculate reminder window\n    const now = new Date();\n    const reminderWindow = new Date(now.getTime() + 60 * 60 * 1000); // Next hour\n\n    console.log(`Checking for reminders between ${now.toISOString()} and ${reminderWindow.toISOString()}`);\n\n    // Query auditions that need reminders\n    const { data: auditions, error: auditionsError } = await supabase\n      .from('auditions')\n      .select(`\n        id,\n        title,\n        casting_director,\n        production_company,\n        audition_date,\n        submission_deadline,\n        reminder_time,\n        audition_type,\n        user_id,\n        actor_email\n      `)\n      .eq('reminder_enabled', true)\n      .eq('reminder_sent', false)\n      .lte('reminder_time', reminderWindow.toISOString())\n      .gte('reminder_time', now.toISOString());\n\n    if (auditionsError) {\n      console.error('Error fetching auditions:', auditionsError);\n      throw auditionsError;\n    }\n\n    console.log(`Found ${auditions?.length || 0} auditions needing reminders`);\n\n    if (!auditions || auditions.length === 0) {\n      return new Response(\n        JSON.stringify({ message: 'No reminders to send', processed: 0 }),\n        {\n          status: 200,\n          headers: { \"Content-Type\": \"application/json\", ...corsHeaders },\n        }\n      );\n    }\n\n    let successCount = 0;\n    let errorCount = 0;\n\n    // Process each audition\n    for (const audition of auditions) {\n      try {\n        const { data: profile, error: profileError } = await supabase\n          .from('profiles')\n          .select('full_name, talent_email')\n          .eq('id', audition.user_id)\n          .maybeSingle();\n\n        if (profileError) {\n          console.warn(`Error fetching profile for user ${audition.user_id}:`, profileError);\n        }\n\n        const recipient = audition.actor_email || profile?.talent_email;\n        const userName = profile?.full_name || 'Actor';\n\n        if (!recipient) {\n          console.warn(`No recipient email found for user ${audition.user_id}, audition ${audition.id}`);\n          errorCount++;\n          continue;\n        }\n\n        console.log(`Sending reminder for audition \"${audition.title}\" to ${recipient}`);\n\n        // Send reminder email\n        const emailResponse = await resend.emails.send({\n          from: \"Audition Tracker \u003cauditions@resend.dev\u003e\",\n          to: [recipient],\n          subject: `🎭 Reminder: ${audition.title} Audition`,\n          html: generateReminderEmail(audition, userName),\n        });\n\n        console.log(`Email sent successfully for audition ${audition.id}:`, emailResponse);\n\n        // Mark reminder as sent\n        const { error: updateError } = await supabase\n          .from('auditions')\n          .update({ reminder_sent: true })\n          .eq('id', audition.id);\n\n        if (updateError) {\n          console.error(`Error updating reminder status for audition ${audition.id}:`, updateError);\n          errorCount++;\n        } else {\n          successCount++;\n        }\n\n      } catch (emailError) {\n        console.error(`Error sending email for audition ${audition.id}:`, emailError);\n        errorCount++;\n      }\n    }\n\n    console.log(`Reminder processing complete. Success: ${successCount}, Errors: ${errorCount}`);\n\n    return new Response(\n      JSON.stringify({\n        message: 'Reminder processing complete',\n        processed: auditions.length,\n        success: successCount,\n        errors: errorCount\n      }),\n      {\n        status: 200,\n        headers: { \"Content-Type\": \"application/json\", ...corsHeaders },\n      }\n    );\n\n  } catch (error: any) {\n    console.error(\"Error in send-audition-reminders function:\", error);\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      {\n        status: 500,\n        headers: { \"Content-Type\": \"application/json\", ...corsHeaders },\n      }\n    );\n  }\n};\n\nserve(handler);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/send-audition-report/index.ts",
//   "contents": "import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\nimport { Resend } from \"npm:resend@2.0.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface ReportRequest {\n  to?: string[] | string;\n  startDate?: string; // YYYY-MM-DD\n  endDate?: string;   // YYYY-MM-DD\n}\n\nfunction toCSV(rows: any[]): string {\n  const header = [\n    \"Title\",\n    \"Casting Director\",\n    \"Production Company\",\n    \"Audition Date\",\n    \"Type\",\n    \"Status\",\n    \"Created At\",\n  ];\n  const escape = (v: any) =\u003e `\"${String(v ?? \"\").replace(/\"/g, '\"\"')}\"`;\n  const lines = [header.join(\",\")];\n  for (const r of rows) {\n    lines.push([\n      escape(r.title),\n      escape(r.casting_director),\n      escape(r.production_company),\n      escape(r.audition_date ?? \"\"),\n      escape(r.audition_type ?? \"\"),\n      escape(r.status ?? \"\"),\n      escape(r.created_at ?? \"\"),\n    ].join(\",\"));\n  }\n  return lines.join(\"\\n\");\n}\n\nfunction base64Encode(str: string): string {\n  return btoa(unescape(encodeURIComponent(str)));\n}\n\nfunction generateHtmlSummary(userEmail: string, stats: any, count: number, range?: {start?: string; end?: string}) {\n  return `\n    \u003cdiv style=\"font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; color: #111\"\u003e\n      \u003ch1 style=\"margin: 0 0 12px; font-size: 22px\"\u003eYour Audition Report\u003c/h1\u003e\n      \u003cp style=\"margin: 0 0 16px; color: #444\"\u003eSent to: ${userEmail}\u003c/p\u003e\n      ${range?.start || range?.end ? `\u003cp style=\"margin: 0 0 16px; color: #444\"\u003eRange: ${range.start ?? '—'} to ${range.end ?? '—'}\u003c/p\u003e` : ''}\n      \u003cdiv style=\"margin: 16px 0; padding: 12px; background: #f7f7f7; border-radius: 8px\"\u003e\n        \u003cp style=\"margin: 0 0 8px\"\u003e\u003cstrong\u003eTotal auditions:\u003c/strong\u003e ${stats.total_auditions ?? count}\u003c/p\u003e\n        \u003cp style=\"margin: 0 0 8px\"\u003e\u003cstrong\u003ePreparation:\u003c/strong\u003e ${stats.preparation ?? 0}\u003c/p\u003e\n        \u003cp style=\"margin: 0 0 8px\"\u003e\u003cstrong\u003eSubmitted:\u003c/strong\u003e ${stats.submitted ?? 0}\u003c/p\u003e\n        \u003cp style=\"margin: 0 0 8px\"\u003e\u003cstrong\u003eCallbacks:\u003c/strong\u003e ${stats.callback ?? 0}\u003c/p\u003e\n        \u003cp style=\"margin: 0 0 8px\"\u003e\u003cstrong\u003eBooked:\u003c/strong\u003e ${stats.booked ?? 0}\u003c/p\u003e\n        \u003cp style=\"margin: 0 0 8px\"\u003e\u003cstrong\u003eRejected:\u003c/strong\u003e ${stats.rejected ?? 0}\u003c/p\u003e\n        \u003cp style=\"margin: 0\"\u003e\u003cstrong\u003eSuccess rate:\u003c/strong\u003e ${(stats.success_rate ?? 0)}%\u003c/p\u003e\n      \u003c/div\u003e\n      \u003cp style=\"color: #555; font-size: 14px;\"\u003eA CSV report is attached for your records.\u003c/p\u003e\n    \u003c/div\u003e\n  `;\n}\n\nserve(async (req) =\u003e {\n  // Handle CORS preflight requests\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const { to, startDate, endDate } = (await req.json()) as ReportRequest;\n\n    const supabaseUrl = Deno.env.get(\"SUPABASE_URL\") as string;\n    const supabaseAnon = Deno.env.get(\"SUPABASE_ANON_KEY\") as string;\n\n    const supabase = createClient(supabaseUrl, supabaseAnon, {\n      global: { headers: { Authorization: req.headers.get(\"Authorization\")! } },\n    });\n\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n    if (userError || !user) {\n      console.error(\"Auth error:\", userError);\n      return new Response(JSON.stringify({ error: \"Unauthorized\" }), {\n        status: 401,\n        headers: { \"Content-Type\": \"application/json\", ...corsHeaders },\n      });\n    }\n\n    // Fetch auditions for the user (optionally filter by date)\n    let query = supabase\n      .from(\"auditions\")\n      .select(\n        \"id,title,casting_director,production_company,audition_date,audition_type,status,created_at\"\n      )\n      .eq(\"user_id\", user.id)\n      .order(\"created_at\", { ascending: false });\n\n    if (startDate) query = query.gte(\"audition_date\", startDate);\n    if (endDate) query = query.lte(\"audition_date\", endDate);\n\n    const { data: auditions, error: auditionsError } = await query;\n    if (auditionsError) throw auditionsError;\n\n    // Compute simple stats (fallback if RPC unavailable for range)\n    const stats = {\n      total_auditions: auditions?.length ?? 0,\n      preparation: auditions?.filter((a) =\u003e a.status === \"preparation\").length ?? 0,\n      submitted: auditions?.filter((a) =\u003e a.status === \"submitted\").length ?? 0,\n      callback: auditions?.filter((a) =\u003e a.status === \"callback\").length ?? 0,\n      booked: auditions?.filter((a) =\u003e a.status === \"booked\").length ?? 0,\n      rejected: auditions?.filter((a) =\u003e a.status === \"rejected\").length ?? 0,\n      success_rate:\n        auditions \u0026\u0026 auditions.length \u003e 0\n          ? Math.round(((auditions.filter((a) =\u003e a.status === \"booked\").length / auditions.length) * 100) * 100) / 100\n          : 0,\n    };\n\n    // CSV attachment\n    const csv = toCSV(auditions ?? []);\n    const csvB64 = base64Encode(csv);\n\n    const resend = new Resend(Deno.env.get(\"RESEND_API_KEY\"));\n\n    // Determine recipients\n    let recipients: string[] = [];\n    if (Array.isArray(to)) recipients = to;\n    else if (typeof to === \"string\" \u0026\u0026 to.trim().length \u003e 0) recipients = [to];\n    else if (user.email) recipients = [user.email];\n\n    if (recipients.length === 0) {\n      return new Response(JSON.stringify({ error: \"No recipient email provided\" }), {\n        status: 400,\n        headers: { \"Content-Type\": \"application/json\", ...corsHeaders },\n      });\n    }\n\n    const html = generateHtmlSummary(recipients.join(\", \"), stats, auditions?.length ?? 0, {\n      start: startDate,\n      end: endDate,\n    });\n\n    const emailResponse = await resend.emails.send({\n      from: \"Cast Coach \u003conboarding@resend.dev\u003e\",\n      to: recipients,\n      subject: \"Your Audition Report\",\n      html,\n      attachments: [\n        {\n          filename: \"audition-report.csv\",\n          content: csvB64,\n          contentType: \"text/csv\",\n        } as any,\n      ],\n    } as any);\n\n    console.log(\"Email sent:\", emailResponse);\n\n    return new Response(JSON.stringify({ ok: true }), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\", ...corsHeaders },\n    });\n  } catch (error: any) {\n    console.error(\"send-audition-report error:\", error);\n    return new Response(JSON.stringify({ error: error?.message || \"Unknown error\" }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\", ...corsHeaders },\n    });\n  }\n});\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/send-coach-inquiry/index.ts",
//   "contents": "\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.0';\nimport { Resend } from \"npm:resend@2.0.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nconst resend = new Resend(Deno.env.get(\"RESEND_API_KEY\"));\n\ninterface InquiryRequest {\n  coachSlug: string;\n  actorName: string;\n  actorEmail: string;\n  actorPhone?: string;\n  message: string;\n}\n\nconst generateEmailHtml = (coach: any, inquiry: InquiryRequest) =\u003e {\n  return `\n    \u003chtml\u003e\n      \u003cbody style=\"font-family: Arial, sans-serif; color: #111; max-width: 600px; margin: 0 auto;\"\u003e\n        \u003cdiv style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; text-align: center;\"\u003e\n          \u003ch1 style=\"color: white; margin: 0;\"\u003eNew Coaching Inquiry\u003c/h1\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv style=\"padding: 20px; background: #f9f9f9;\"\u003e\n          \u003ch2 style=\"color: #333; margin-top: 0;\"\u003eHello ${coach.name},\u003c/h2\u003e\n          \n          \u003cp style=\"color: #666;\"\u003eYou have received a new coaching inquiry through MyAuditionAI:\u003c/p\u003e\n          \n          \u003cdiv style=\"background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #667eea; margin: 20px 0;\"\u003e\n            \u003ch3 style=\"color: #333; margin-top: 0;\"\u003eContact Information\u003c/h3\u003e\n            \u003cp\u003e\u003cstrong\u003eName:\u003c/strong\u003e ${inquiry.actorName}\u003c/p\u003e\n            \u003cp\u003e\u003cstrong\u003eEmail:\u003c/strong\u003e ${inquiry.actorEmail}\u003c/p\u003e\n            ${inquiry.actorPhone ? `\u003cp\u003e\u003cstrong\u003ePhone:\u003c/strong\u003e ${inquiry.actorPhone}\u003c/p\u003e` : ''}\n          \u003c/div\u003e\n          \n          \u003cdiv style=\"background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #764ba2; margin: 20px 0;\"\u003e\n            \u003ch3 style=\"color: #333; margin-top: 0;\"\u003eMessage\u003c/h3\u003e\n            \u003cp style=\"white-space: pre-wrap; color: #555; line-height: 1.6;\"\u003e${inquiry.message}\u003c/p\u003e\n          \u003c/div\u003e\n          \n          \u003cp style=\"color: #666; margin-top: 30px;\"\u003e\n            Please reply directly to \u003cstrong\u003e${inquiry.actorEmail}\u003c/strong\u003e to respond to this inquiry.\n          \u003c/p\u003e\n          \n          \u003chr style=\"border: none; border-top: 1px solid #ddd; margin: 30px 0;\"\u003e\n          \n          \u003cp style=\"color: #999; font-size: 14px;\"\u003e\n            This inquiry was sent through the MyAuditionAI platform.\u003cbr\u003e\n            If you have any questions, please contact support.\n          \u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n  `;\n};\n\nserve(async (req) =\u003e {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const { coachSlug, actorName, actorEmail, actorPhone, message }: InquiryRequest = await req.json();\n\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n    );\n\n    // Get coach details\n    const { data: coach, error: coachError } = await supabase\n      .from('coaches')\n      .select('*')\n      .eq('slug', coachSlug)\n      .eq('active', true)\n      .maybeSingle();\n\n    if (coachError || !coach) {\n      return new Response(JSON.stringify({ error: 'Coach not found' }), {\n        status: 404,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      });\n    }\n\n    const inquiryData = { coachSlug, actorName, actorEmail, actorPhone, message };\n    const html = generateEmailHtml(coach, inquiryData);\n\n    // Determine recipients\n    const recipients = [];\n    const ownerEmail = Deno.env.get(\"OWNER_NOTIFICATIONS_EMAIL\");\n    \n    if (coach.email) {\n      recipients.push(coach.email);\n    }\n    \n    // Always CC the owner if email is set\n    if (ownerEmail \u0026\u0026 ownerEmail !== coach.email) {\n      recipients.push(ownerEmail);\n    }\n\n    if (recipients.length === 0) {\n      return new Response(JSON.stringify({ \n        error: 'No recipient email configured. Please contact the administrator to set up coach email addresses.' \n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      });\n    }\n\n    console.log('Sending inquiry to:', recipients);\n\n    const emailResponse = await resend.emails.send({\n      from: 'MyAuditionAI \u003cinquiries@resend.dev\u003e',\n      to: recipients,\n      replyTo: actorEmail,\n      subject: `New Coaching Inquiry from ${actorName}`,\n      html,\n    });\n\n    console.log('Email sent successfully:', emailResponse);\n\n    return new Response(JSON.stringify({ \n      success: true, \n      message: 'Inquiry sent successfully',\n      emailResponse \n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json', ...corsHeaders },\n    });\n  } catch (error: any) {\n    console.error('Error in send-coach-inquiry:', error);\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json', ...corsHeaders },\n    });\n  }\n});\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/summarize-scene/index.ts",
//   "contents": "import \"https://deno.land/x/xhr@0.1.0/mod.ts\";\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) =\u003e {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const googleAIApiKey = Deno.env.get('GOOGLE_AI_API_KEY');\n    if (!googleAIApiKey) {\n      console.error('GOOGLE_AI_API_KEY not found');\n      return new Response(\n        JSON.stringify({ error: 'AI service not configured' }),\n        { \n          status: 500, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    const { scriptTitle, scriptContent } = await req.json();\n    \n    if (!scriptContent) {\n      return new Response(\n        JSON.stringify({ error: 'Script content is required' }),\n        { \n          status: 400, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    // Truncate content if too long (keep under 30k characters for safety)\n    const truncatedContent = scriptContent.length \u003e 30000 \n      ? scriptContent.substring(0, 30000) + \"...\" \n      : scriptContent;\n\n    const prompt = `Please provide a brief 2-3 sentence summary of this ${scriptTitle ? `script titled \"${scriptTitle}\"` : 'script'}. Focus on the main story, characters, and central conflict or situation. Keep it concise and suitable for an actor preparing for analysis.\n\nScript content:\n${truncatedContent}`;\n\n    console.log('Calling Google AI API for scene summary...');\n    \n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${googleAIApiKey}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 200,\n        }\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Google AI API error:', response.status, errorText);\n      throw new Error(`Google AI API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log('Google AI API response received');\n    \n    const summary = data.candidates?.[0]?.content?.parts?.[0]?.text;\n    \n    if (!summary) {\n      throw new Error('No summary generated');\n    }\n\n    return new Response(\n      JSON.stringify({ summary: summary.trim() }),\n      { \n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n\n  } catch (error) {\n    console.error('Error in summarize-scene function:', error);\n    return new Response(\n      JSON.stringify({ error: 'Failed to generate scene summary' }),\n      { \n        status: 500, \n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      }\n    );\n  }\n});\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/text-to-speech/index.ts",
//   "contents": "import \"https://deno.land/x/xhr@0.1.0/mod.ts\";\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts'\nimport { encode as base64Encode } from 'https://deno.land/std@0.168.0/encoding/base64.ts'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\nserve(async (req) =\u003e {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders })\n  }\n\n  try {\n    const { text, voice, speed, useGoogle, health } = await req.json()\n\n    // Health check endpoint\n    if (health) {\n      const googleApiKey = Deno.env.get('GOOGLE_TTS_API_KEY')\n      return new Response(\n        JSON.stringify({\n          status: 'healthy',\n          providers: {\n            google: !!googleApiKey\n          }\n        }),\n        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    if (!text) {\n      return new Response(\n        JSON.stringify({ error: 'Text is required' }),\n        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    // Google TTS implementation\n    if (useGoogle) {\n      const googleApiKey = Deno.env.get('GOOGLE_TTS_API_KEY')\n\n      if (!googleApiKey) {\n        console.error('GOOGLE_TTS_API_KEY is not set')\n        return new Response(\n          JSON.stringify({ error: 'Google TTS API key not configured', provider: 'google' }),\n          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n        )\n      }\n\n      // Default voice mapping for Google TTS (fallback aliases)\n      const voiceMap: Record\u003cstring, { name: string; languageCode: string }\u003e = {\n        'alloy': { name: 'en-US-Standard-B', languageCode: 'en-US' }, // male\n        'echo': { name: 'en-US-Standard-C', languageCode: 'en-US' },  // female\n        'fable': { name: 'en-US-Standard-D', languageCode: 'en-US' }, // male\n        'onyx': { name: 'en-US-Standard-A', languageCode: 'en-US' },  // male\n        'nova': { name: 'en-US-Standard-E', languageCode: 'en-US' },  // female\n        'shimmer': { name: 'en-US-Standard-F', languageCode: 'en-US' }, // female\n        'ember': { name: 'en-US-Standard-G', languageCode: 'en-US' }  // female\n      }\n\n      // Accept direct Google voice names like en-US-Standard-C, en-US-Wavenet-A, en-US-Journey-F, en-US-Studio-O, en-US-Neural2-J\n      let selectedVoice: { name: string; languageCode: string }\n      if (typeof voice === 'string' \u0026\u0026 /^[a-z]{2}-[A-Z]{2}-/.test(voice)) {\n        const parts = (voice as string).split('-')\n        const languageCode = parts.slice(0, 2).join('-') // e.g., en-US\n        selectedVoice = { name: voice as string, languageCode }\n      } else {\n        selectedVoice = voiceMap[voice as string] || voiceMap['echo'] // default to female voice\n      }\n\n      const speakingRate = speed || 1.0\n\n      console.log(`Using Google TTS voice: ${selectedVoice.name}, rate: ${speakingRate}`)\n\n      try {\n        // Call Google Cloud Text-to-Speech API\n        const response = await fetch(`https://texttospeech.googleapis.com/v1/text:synthesize?key=${googleApiKey}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            input: { text },\n            voice: {\n              languageCode: selectedVoice.languageCode,\n              name: selectedVoice.name\n            },\n            audioConfig: {\n              audioEncoding: 'MP3',\n              speakingRate: Math.max(0.25, Math.min(4.0, speakingRate))\n            }\n          }),\n        })\n\n        if (!response.ok) {\n          const errorText = await response.text()\n          console.error('Google TTS API error:', errorText)\n          return new Response(\n            JSON.stringify({\n              error: `Google TTS API error: ${response.status}`,\n              details: errorText,\n              provider: 'google',\n            }),\n            { status: response.status, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n          )\n        }\n\n        const data = await response.json()\n        \n        if (!data.audioContent) {\n          throw new Error('No audio content received from Google TTS')\n        }\n\n        return new Response(\n          JSON.stringify({\n            audioContent: data.audioContent,\n            voice: selectedVoice.name,\n            provider: 'google',\n          }),\n          { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n        )\n      } catch (err) {\n        console.error('Error fetching Google TTS audio:', err)\n        const message = err instanceof Error ? err.message : 'Unknown Google TTS error'\n        return new Response(\n          JSON.stringify({ error: message, provider: 'google' }),\n          { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n        )\n      }\n    }\n\n    // Fallback to browser TTS format (when neither Google nor ElevenLabs is requested)\n    const response = {\n      audioContent: text, // Return text for browser's speechSynthesis API\n      voice: voice || 'default',\n      speed: speed || 1.0,\n      provider: 'browser',\n    }\n\n    return new Response(\n      JSON.stringify(response),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } },\n    )\n  } catch (error: any) {\n    console.error('Error in text-to-speech function:', error)\n    return new Response(\n      JSON.stringify({ error: error?.message || 'Unexpected server error' }),\n      { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } },\n    )\n  }\n})\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/functions/tts-cache/index.ts",
//   "contents": "\nimport \"https://deno.land/x/xhr@0.1.0/mod.ts\";\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts'\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\nserve(async (req) =\u003e {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders })\n  }\n\n  try {\n    const { scriptId, dialogueIndex, character, text, voiceId, speed = 1.0 } = await req.json()\n\n    if (!scriptId || dialogueIndex === undefined || !character || !text || !voiceId) {\n      return new Response(\n        JSON.stringify({ error: 'Missing required parameters' }),\n        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    // Get user ID from JWT token\n    const authHeader = req.headers.get('Authorization')\n    if (!authHeader) {\n      return new Response(\n        JSON.stringify({ error: 'Authorization required' }),\n        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    // Initialize Supabase client with service role key for database operations\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    )\n\n    // Verify user identity with provided JWT\n    const userSupabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? ''\n    )\n\n    const { data: { user }, error: userError } = await userSupabase.auth.getUser(\n      authHeader.replace('Bearer ', '')\n    )\n\n    if (userError || !user) {\n      return new Response(\n        JSON.stringify({ error: 'Invalid authorization' }),\n        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    // Create content hash for cache key\n    const contentText = `${text}:${voiceId}:${speed}`\n    const encoder = new TextEncoder()\n    const data = encoder.encode(contentText)\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data)\n    const hashArray = Array.from(new Uint8Array(hashBuffer))\n    const hash = hashArray.map(b =\u003e b.toString(16).padStart(2, '0')).join('')\n\n    console.log(`TTS Cache lookup for user ${user.id}, script ${scriptId}, dialogue ${dialogueIndex}`)\n\n    // Check for existing cache entry\n    const { data: cacheItem, error: cacheError } = await supabase\n      .from('tts_cache_items')\n      .select('*')\n      .eq('user_id', user.id)\n      .eq('script_id', scriptId)\n      .eq('dialogue_index', dialogueIndex)\n      .eq('voice_id', voiceId)\n      .eq('speed', speed)\n      .eq('hash', hash)\n      .maybeSingle()\n\n    if (cacheError) {\n      console.error('Cache lookup error:', cacheError)\n    }\n\n    // If cache hit, return cached audio\n    if (cacheItem) {\n      console.log(`Cache HIT for dialogue ${dialogueIndex}`)\n      try {\n        const { data: fileData, error: downloadError } = await supabase.storage\n          .from('tts-audio')\n          .download(cacheItem.storage_path)\n\n        if (downloadError) {\n          console.error('Download error:', downloadError)\n          // Cache entry exists but file missing - clean up and regenerate\n          await supabase\n            .from('tts_cache_items')\n            .delete()\n            .eq('id', cacheItem.id)\n        } else {\n          // Convert file to base64\n          const arrayBuffer = await fileData.arrayBuffer()\n          const base64Audio = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)))\n          \n          return new Response(\n            JSON.stringify({\n              audioContent: base64Audio,\n              voice: voiceId,\n              provider: cacheItem.provider,\n              fromCache: true\n            }),\n            { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n          )\n        }\n      } catch (err) {\n        console.error('Cache retrieval error:', err)\n        // Continue to regeneration\n      }\n    }\n\n    console.log(`Cache MISS for dialogue ${dialogueIndex} - generating new audio`)\n\n    // Cache miss - generate new TTS\n    const ttsResponse = await fetch(`${Deno.env.get('SUPABASE_URL')}/functions/v1/text-to-speech`, {\n      method: 'POST',\n      headers: {\n        'Authorization': authHeader,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        text,\n        voice: voiceId,\n        speed,\n        useGoogle: true,\n      }),\n    })\n\n    const ttsData = await ttsResponse.json()\n\n    if (!ttsResponse.ok || !ttsData.audioContent) {\n      return new Response(\n        JSON.stringify({ error: ttsData.error || 'TTS generation failed' }),\n        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    // Store audio file in storage\n    const fileName = `${user.id}/${scriptId}/${dialogueIndex}_${hash.slice(0, 8)}.mp3`\n    const audioBuffer = Uint8Array.from(atob(ttsData.audioContent), c =\u003e c.charCodeAt(0))\n\n    const { error: uploadError } = await supabase.storage\n      .from('tts-audio')\n      .upload(fileName, audioBuffer, {\n        contentType: 'audio/mpeg',\n        upsert: true\n      })\n\n    if (uploadError) {\n      console.error('Upload error:', uploadError)\n      // Return the audio even if caching failed\n      return new Response(\n        JSON.stringify({\n          audioContent: ttsData.audioContent,\n          voice: voiceId,\n          provider: ttsData.provider,\n          fromCache: false\n        }),\n        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      )\n    }\n\n    // Store cache index entry\n    const { error: indexError } = await supabase\n      .from('tts_cache_items')\n      .insert({\n        user_id: user.id,\n        script_id: scriptId,\n        dialogue_index: dialogueIndex,\n        character,\n        voice_id: voiceId,\n        speed,\n        provider: ttsData.provider || 'google',\n        hash,\n        storage_path: fileName\n      })\n\n    if (indexError) {\n      console.error('Index creation error:', indexError)\n    }\n\n    return new Response(\n      JSON.stringify({\n        audioContent: ttsData.audioContent,\n        voice: voiceId,\n        provider: ttsData.provider,\n        fromCache: false\n      }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    )\n\n  } catch (error: any) {\n    console.error('Error in tts-cache function:', error)\n    return new Response(\n      JSON.stringify({ error: error?.message || 'Unexpected server error' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    )\n  }\n})\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250624050904-e6c53344-2623-48b5-aa0a-ac9ef8bfcc4c.sql",
//   "contents": "\n-- Create profiles table for user data\nCREATE TABLE public.profiles (\n  id UUID NOT NULL REFERENCES auth.users ON DELETE CASCADE,\n  username TEXT UNIQUE,\n  full_name TEXT,\n  avatar_url TEXT,\n  acting_methods TEXT[] DEFAULT '{}',\n  experience_level TEXT DEFAULT 'beginner',\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  PRIMARY KEY (id)\n);\n\n-- Create scripts table for uploaded scripts\nCREATE TABLE public.scripts (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID REFERENCES auth.users NOT NULL,\n  title TEXT NOT NULL,\n  content TEXT NOT NULL,\n  file_url TEXT,\n  file_type TEXT,\n  characters TEXT[] DEFAULT '{}',\n  genre TEXT,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Create script_analyses table for AI analysis results\nCREATE TABLE public.script_analyses (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  script_id UUID REFERENCES public.scripts NOT NULL,\n  user_id UUID REFERENCES auth.users NOT NULL,\n  selected_character TEXT NOT NULL,\n  acting_method TEXT NOT NULL,\n  analysis_data JSONB NOT NULL,\n  objectives TEXT[],\n  obstacles TEXT[],\n  tactics TEXT[],\n  emotional_beats JSONB,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Create coaching_sessions table for guidance sessions\nCREATE TABLE public.coaching_sessions (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  analysis_id UUID REFERENCES public.script_analyses NOT NULL,\n  user_id UUID REFERENCES auth.users NOT NULL,\n  chat_history JSONB NOT NULL DEFAULT '[]',\n  session_status TEXT DEFAULT 'active',\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Create video_submissions table for performance videos\nCREATE TABLE public.video_submissions (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  coaching_session_id UUID REFERENCES public.coaching_sessions NOT NULL,\n  user_id UUID REFERENCES auth.users NOT NULL,\n  video_url TEXT NOT NULL,\n  video_title TEXT,\n  feedback_data JSONB,\n  ai_analysis JSONB,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Enable Row Level Security\nALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.scripts ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.script_analyses ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.coaching_sessions ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.video_submissions ENABLE ROW LEVEL SECURITY;\n\n-- Create RLS policies for profiles\nCREATE POLICY \"Users can view their own profile\" ON public.profiles FOR SELECT USING (auth.uid() = id);\nCREATE POLICY \"Users can update their own profile\" ON public.profiles FOR UPDATE USING (auth.uid() = id);\nCREATE POLICY \"Users can insert their own profile\" ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);\n\n-- Create RLS policies for scripts\nCREATE POLICY \"Users can view their own scripts\" ON public.scripts FOR SELECT USING (auth.uid() = user_id);\nCREATE POLICY \"Users can create their own scripts\" ON public.scripts FOR INSERT WITH CHECK (auth.uid() = user_id);\nCREATE POLICY \"Users can update their own scripts\" ON public.scripts FOR UPDATE USING (auth.uid() = user_id);\nCREATE POLICY \"Users can delete their own scripts\" ON public.scripts FOR DELETE USING (auth.uid() = user_id);\n\n-- Create RLS policies for script_analyses\nCREATE POLICY \"Users can view their own analyses\" ON public.script_analyses FOR SELECT USING (auth.uid() = user_id);\nCREATE POLICY \"Users can create their own analyses\" ON public.script_analyses FOR INSERT WITH CHECK (auth.uid() = user_id);\nCREATE POLICY \"Users can update their own analyses\" ON public.script_analyses FOR UPDATE USING (auth.uid() = user_id);\n\n-- Create RLS policies for coaching_sessions\nCREATE POLICY \"Users can view their own sessions\" ON public.coaching_sessions FOR SELECT USING (auth.uid() = user_id);\nCREATE POLICY \"Users can create their own sessions\" ON public.coaching_sessions FOR INSERT WITH CHECK (auth.uid() = user_id);\nCREATE POLICY \"Users can update their own sessions\" ON public.coaching_sessions FOR UPDATE USING (auth.uid() = user_id);\n\n-- Create RLS policies for video_submissions\nCREATE POLICY \"Users can view their own videos\" ON public.video_submissions FOR SELECT USING (auth.uid() = user_id);\nCREATE POLICY \"Users can create their own videos\" ON public.video_submissions FOR INSERT WITH CHECK (auth.uid() = user_id);\nCREATE POLICY \"Users can update their own videos\" ON public.video_submissions FOR UPDATE USING (auth.uid() = user_id);\n\n-- Create trigger to auto-create profile on user signup\nCREATE OR REPLACE FUNCTION public.handle_new_user()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nSECURITY DEFINER SET search_path = ''\nAS $$\nBEGIN\n  INSERT INTO public.profiles (id, full_name, username)\n  VALUES (\n    new.id,\n    new.raw_user_meta_data -\u003e\u003e 'full_name',\n    new.raw_user_meta_data -\u003e\u003e 'username'\n  );\n  RETURN new;\nEND;\n$$;\n\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();\n\n-- Create storage bucket for script files and videos\nINSERT INTO storage.buckets (id, name, public) VALUES ('scripts', 'scripts', true);\nINSERT INTO storage.buckets (id, name, public) VALUES ('videos', 'videos', true);\n\n-- Create storage policies\nCREATE POLICY \"Users can upload their own scripts\" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'scripts' AND auth.uid()::text = (storage.foldername(name))[1]);\nCREATE POLICY \"Users can view their own scripts\" ON storage.objects FOR SELECT USING (bucket_id = 'scripts' AND auth.uid()::text = (storage.foldername(name))[1]);\nCREATE POLICY \"Users can upload their own videos\" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'videos' AND auth.uid()::text = (storage.foldername(name))[1]);\nCREATE POLICY \"Users can view their own videos\" ON storage.objects FOR SELECT USING (bucket_id = 'videos' AND auth.uid()::text = (storage.foldername(name))[1]);\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250624193252-6df0c025-4fd5-4954-bdf7-a9654758b1da.sql",
//   "contents": "\n-- Add video upload and evaluation functionality to the database\n\n-- First, ensure we have a storage bucket for videos\nINSERT INTO storage.buckets (id, name, public) \nVALUES ('videos', 'videos', true)\nON CONFLICT (id) DO NOTHING;\n\n-- Drop existing storage policies if they exist and recreate them\nDROP POLICY IF EXISTS \"Users can upload their own videos\" ON storage.objects;\nDROP POLICY IF EXISTS \"Users can view their own videos\" ON storage.objects;\nDROP POLICY IF EXISTS \"Users can delete their own videos\" ON storage.objects;\n\n-- Create storage policies for video uploads\nCREATE POLICY \"Users can upload their own videos\" \nON storage.objects FOR INSERT \nWITH CHECK (\n    bucket_id = 'videos' \n    AND auth.uid()::text = (string_to_array(name, '/'))[1]\n);\n\nCREATE POLICY \"Users can view their own videos\" \nON storage.objects FOR SELECT \nUSING (\n    bucket_id = 'videos' \n    AND auth.uid()::text = (string_to_array(name, '/'))[1]\n);\n\nCREATE POLICY \"Users can delete their own videos\" \nON storage.objects FOR DELETE \nUSING (\n    bucket_id = 'videos' \n    AND auth.uid()::text = (string_to_array(name, '/'))[1]\n);\n\n-- Update the existing video_submissions table structure\nALTER TABLE public.video_submissions \nADD COLUMN IF NOT EXISTS evaluation_status TEXT DEFAULT 'pending',\nADD COLUMN IF NOT EXISTS evaluation_score INTEGER,\nADD COLUMN IF NOT EXISTS evaluation_notes TEXT,\nADD COLUMN IF NOT EXISTS evaluated_at TIMESTAMP WITH TIME ZONE,\nADD COLUMN IF NOT EXISTS evaluated_by UUID REFERENCES auth.users(id);\n\n-- Add constraints if they don't exist\nDO $$ \nBEGIN\n    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'video_submissions_evaluation_status_check') THEN\n        ALTER TABLE public.video_submissions \n        ADD CONSTRAINT video_submissions_evaluation_status_check \n        CHECK (evaluation_status IN ('pending', 'in_progress', 'completed', 'rejected'));\n    END IF;\n    \n    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'video_submissions_evaluation_score_check') THEN\n        ALTER TABLE public.video_submissions \n        ADD CONSTRAINT video_submissions_evaluation_score_check \n        CHECK (evaluation_score \u003e= 0 AND evaluation_score \u003c= 100);\n    END IF;\nEND $$;\n\n-- Create indexes for better performance if they don't exist\nCREATE INDEX IF NOT EXISTS idx_video_submissions_user_id ON public.video_submissions(user_id);\nCREATE INDEX IF NOT EXISTS idx_video_submissions_evaluation_status ON public.video_submissions(evaluation_status);\nCREATE INDEX IF NOT EXISTS idx_video_submissions_created_at ON public.video_submissions(created_at);\n\n-- Create updated_at trigger function if it doesn't exist\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n   NEW.updated_at = NOW();\n   RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Drop and recreate trigger to ensure it works\nDROP TRIGGER IF EXISTS update_video_submissions_updated_at ON public.video_submissions;\nCREATE TRIGGER update_video_submissions_updated_at \n    BEFORE UPDATE ON public.video_submissions \n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250624200711-a1c28da7-a347-410b-9f26-35c5eb064736.sql",
//   "contents": "\n-- Create the auditions table as the central hub for all audition-related data\nCREATE TABLE public.auditions (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n  title TEXT NOT NULL,\n  casting_director TEXT,\n  production_company TEXT,\n  audition_date DATE,\n  audition_type TEXT DEFAULT 'self-tape' CHECK (audition_type IN ('self-tape', 'in-person', 'callback', 'chemistry-read')),\n  status TEXT DEFAULT 'preparation' CHECK (status IN ('preparation', 'submitted', 'callback', 'booked', 'rejected', 'expired')),\n  notes TEXT,\n  script_id UUID REFERENCES public.scripts(id) ON DELETE SET NULL,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Add RLS to auditions table\nALTER TABLE public.auditions ENABLE ROW LEVEL SECURITY;\n\n-- Create RLS policies for auditions table\nCREATE POLICY \"Users can view their own auditions\" \n  ON public.auditions \n  FOR SELECT \n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can create their own auditions\" \n  ON public.auditions \n  FOR INSERT \n  WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can update their own auditions\" \n  ON public.auditions \n  FOR UPDATE \n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can delete their own auditions\" \n  ON public.auditions \n  FOR DELETE \n  USING (auth.uid() = user_id);\n\n-- Add RLS policies for existing tables only if they don't exist\nDO $$ \nBEGIN\n    -- Enable RLS on tables if not already enabled\n    IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'scripts' AND rowsecurity = true) THEN\n        ALTER TABLE public.scripts ENABLE ROW LEVEL SECURITY;\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'script_analyses' AND rowsecurity = true) THEN\n        ALTER TABLE public.script_analyses ENABLE ROW LEVEL SECURITY;\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'coaching_sessions' AND rowsecurity = true) THEN\n        ALTER TABLE public.coaching_sessions ENABLE ROW LEVEL SECURITY;\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'video_submissions' AND rowsecurity = true) THEN\n        ALTER TABLE public.video_submissions ENABLE ROW LEVEL SECURITY;\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'profiles' AND rowsecurity = true) THEN\n        ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;\n    END IF;\n\n    -- Create policies only if they don't exist for scripts\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'scripts' AND policyname = 'Users can view their own scripts') THEN\n        EXECUTE 'CREATE POLICY \"Users can view their own scripts\" ON public.scripts FOR SELECT USING (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'scripts' AND policyname = 'Users can create their own scripts') THEN\n        EXECUTE 'CREATE POLICY \"Users can create their own scripts\" ON public.scripts FOR INSERT WITH CHECK (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'scripts' AND policyname = 'Users can update their own scripts') THEN\n        EXECUTE 'CREATE POLICY \"Users can update their own scripts\" ON public.scripts FOR UPDATE USING (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'scripts' AND policyname = 'Users can delete their own scripts') THEN\n        EXECUTE 'CREATE POLICY \"Users can delete their own scripts\" ON public.scripts FOR DELETE USING (auth.uid() = user_id)';\n    END IF;\n\n    -- Create policies for other tables similarly\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'script_analyses' AND policyname = 'Users can view their own script analyses') THEN\n        EXECUTE 'CREATE POLICY \"Users can view their own script analyses\" ON public.script_analyses FOR SELECT USING (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'script_analyses' AND policyname = 'Users can create their own script analyses') THEN\n        EXECUTE 'CREATE POLICY \"Users can create their own script analyses\" ON public.script_analyses FOR INSERT WITH CHECK (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'script_analyses' AND policyname = 'Users can update their own script analyses') THEN\n        EXECUTE 'CREATE POLICY \"Users can update their own script analyses\" ON public.script_analyses FOR UPDATE USING (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'script_analyses' AND policyname = 'Users can delete their own script analyses') THEN\n        EXECUTE 'CREATE POLICY \"Users can delete their own script analyses\" ON public.script_analyses FOR DELETE USING (auth.uid() = user_id)';\n    END IF;\n\n    -- Coaching sessions policies\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'coaching_sessions' AND policyname = 'Users can view their own coaching sessions') THEN\n        EXECUTE 'CREATE POLICY \"Users can view their own coaching sessions\" ON public.coaching_sessions FOR SELECT USING (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'coaching_sessions' AND policyname = 'Users can create their own coaching sessions') THEN\n        EXECUTE 'CREATE POLICY \"Users can create their own coaching sessions\" ON public.coaching_sessions FOR INSERT WITH CHECK (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'coaching_sessions' AND policyname = 'Users can update their own coaching sessions') THEN\n        EXECUTE 'CREATE POLICY \"Users can update their own coaching sessions\" ON public.coaching_sessions FOR UPDATE USING (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'coaching_sessions' AND policyname = 'Users can delete their own coaching sessions') THEN\n        EXECUTE 'CREATE POLICY \"Users can delete their own coaching sessions\" ON public.coaching_sessions FOR DELETE USING (auth.uid() = user_id)';\n    END IF;\n\n    -- Video submissions policies\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'video_submissions' AND policyname = 'Users can view their own video submissions') THEN\n        EXECUTE 'CREATE POLICY \"Users can view their own video submissions\" ON public.video_submissions FOR SELECT USING (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'video_submissions' AND policyname = 'Users can create their own video submissions') THEN\n        EXECUTE 'CREATE POLICY \"Users can create their own video submissions\" ON public.video_submissions FOR INSERT WITH CHECK (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'video_submissions' AND policyname = 'Users can update their own video submissions') THEN\n        EXECUTE 'CREATE POLICY \"Users can update their own video submissions\" ON public.video_submissions FOR UPDATE USING (auth.uid() = user_id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'video_submissions' AND policyname = 'Users can delete their own video submissions') THEN\n        EXECUTE 'CREATE POLICY \"Users can delete their own video submissions\" ON public.video_submissions FOR DELETE USING (auth.uid() = user_id)';\n    END IF;\n\n    -- Profiles policies\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'profiles' AND policyname = 'Users can view their own profile') THEN\n        EXECUTE 'CREATE POLICY \"Users can view their own profile\" ON public.profiles FOR SELECT USING (auth.uid() = id)';\n    END IF;\n\n    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'profiles' AND policyname = 'Users can update their own profile') THEN\n        EXECUTE 'CREATE POLICY \"Users can update their own profile\" ON public.profiles FOR UPDATE USING (auth.uid() = id)';\n    END IF;\nEND $$;\n\n-- Add audition_id to coaching_sessions and video_submissions for better organization\nALTER TABLE public.coaching_sessions ADD COLUMN IF NOT EXISTS audition_id UUID REFERENCES public.auditions(id) ON DELETE CASCADE;\nALTER TABLE public.video_submissions ADD COLUMN IF NOT EXISTS audition_id UUID REFERENCES public.auditions(id) ON DELETE CASCADE;\n\n-- Create trigger to update updated_at timestamp\nDROP TRIGGER IF EXISTS update_auditions_updated_at ON public.auditions;\nCREATE TRIGGER update_auditions_updated_at\n    BEFORE UPDATE ON public.auditions\n    FOR EACH ROW\n    EXECUTE FUNCTION public.update_updated_at_column();\n\n-- Create function to get user audition statistics\nCREATE OR REPLACE FUNCTION public.get_user_audition_stats(user_uuid UUID)\nRETURNS JSON AS $$\nDECLARE\n    stats JSON;\nBEGIN\n    SELECT json_build_object(\n        'total_auditions', COUNT(*),\n        'preparation', COUNT(*) FILTER (WHERE status = 'preparation'),\n        'submitted', COUNT(*) FILTER (WHERE status = 'submitted'),\n        'callback', COUNT(*) FILTER (WHERE status = 'callback'),\n        'booked', COUNT(*) FILTER (WHERE status = 'booked'),\n        'rejected', COUNT(*) FILTER (WHERE status = 'rejected'),\n        'success_rate', CASE \n            WHEN COUNT(*) \u003e 0 THEN \n                ROUND((COUNT(*) FILTER (WHERE status = 'booked')::DECIMAL / COUNT(*)) * 100, 2)\n            ELSE 0\n        END\n    )\n    INTO stats\n    FROM public.auditions\n    WHERE user_id = user_uuid;\n    \n    RETURN stats;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250706142719-b9914b9b-bae8-42ea-9b2e-4904aa1865cf.sql",
//   "contents": "\n-- Add the missing updated_at column to video_submissions table\nALTER TABLE public.video_submissions \nADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT now();\n\n-- Create or replace the trigger to automatically update the updated_at column\nDROP TRIGGER IF EXISTS update_video_submissions_updated_at ON public.video_submissions;\nCREATE TRIGGER update_video_submissions_updated_at \n    BEFORE UPDATE ON public.video_submissions \n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250708191536-d2a85590-7583-409f-ace8-42592d9d8c2c.sql",
//   "contents": "\n-- Create subscription plans table\nCREATE TABLE public.subscription_plans (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  name TEXT NOT NULL,\n  price DECIMAL(10,2) NOT NULL,\n  currency TEXT NOT NULL DEFAULT 'USD',\n  paypal_plan_id TEXT,\n  features JSONB NOT NULL DEFAULT '{}',\n  limits JSONB NOT NULL DEFAULT '{}',\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Create user subscriptions table\nCREATE TABLE public.user_subscriptions (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID REFERENCES auth.users NOT NULL,\n  plan_id UUID REFERENCES public.subscription_plans(id) NOT NULL,\n  status TEXT NOT NULL DEFAULT 'active',\n  paypal_subscription_id TEXT,\n  started_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  expires_at TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Create usage tracking table\nCREATE TABLE public.user_usage (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID REFERENCES auth.users NOT NULL,\n  subscription_id UUID REFERENCES public.user_subscriptions(id) NOT NULL,\n  script_analyses_used INTEGER NOT NULL DEFAULT 0,\n  ai_messages_used INTEGER NOT NULL DEFAULT 0,\n  video_verifications_used INTEGER NOT NULL DEFAULT 0,\n  last_reset TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Add RLS policies\nALTER TABLE public.subscription_plans ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.user_subscriptions ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.user_usage ENABLE ROW LEVEL SECURITY;\n\n-- Subscription plans are public (everyone can view)\nCREATE POLICY \"Anyone can view subscription plans\" \n  ON public.subscription_plans \n  FOR SELECT \n  TO public\n  USING (true);\n\n-- User subscriptions policies\nCREATE POLICY \"Users can view their own subscriptions\" \n  ON public.user_subscriptions \n  FOR SELECT \n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can create their own subscriptions\" \n  ON public.user_subscriptions \n  FOR INSERT \n  WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can update their own subscriptions\" \n  ON public.user_subscriptions \n  FOR UPDATE \n  USING (auth.uid() = user_id);\n\n-- User usage policies\nCREATE POLICY \"Users can view their own usage\" \n  ON public.user_usage \n  FOR SELECT \n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can create their own usage records\" \n  ON public.user_usage \n  FOR INSERT \n  WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can update their own usage\" \n  ON public.user_usage \n  FOR UPDATE \n  USING (auth.uid() = user_id);\n\n-- Add status constraints\nALTER TABLE public.user_subscriptions \nADD CONSTRAINT user_subscriptions_status_check \nCHECK (status IN ('active', 'cancelled', 'expired', 'pending'));\n\n-- Create indexes for performance\nCREATE INDEX idx_user_subscriptions_user_id ON public.user_subscriptions(user_id);\nCREATE INDEX idx_user_subscriptions_status ON public.user_subscriptions(status);\nCREATE INDEX idx_user_usage_user_id ON public.user_usage(user_id);\nCREATE INDEX idx_user_usage_subscription_id ON public.user_usage(subscription_id);\n\n-- Insert the two subscription plans\nINSERT INTO public.subscription_plans (name, price, features, limits) VALUES \n(\n  'Demo', \n  0.00, \n  '{\"script_analysis\": true, \"ai_coaching\": true, \"video_verification\": true}',\n  '{\"script_analyses\": 1, \"ai_messages\": 10, \"video_verifications\": 1}'\n),\n(\n  'Pro', \n  14.99, \n  '{\"script_analysis\": true, \"ai_coaching\": true, \"video_verification\": true, \"unlimited_messages\": true, \"unlimited_videos\": true}',\n  '{\"script_analyses\": 15, \"ai_messages\": -1, \"video_verifications\": -1}'\n);\n\n-- Create trigger to update updated_at\nCREATE TRIGGER update_subscription_plans_updated_at \n  BEFORE UPDATE ON public.subscription_plans \n  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_user_subscriptions_updated_at \n  BEFORE UPDATE ON public.user_subscriptions \n  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_user_usage_updated_at \n  BEFORE UPDATE ON public.user_usage \n  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250709045343-68d3ecf4-8225-48dc-82e0-1043bb8e927d.sql",
//   "contents": "-- Update the Pro plan to include the PayPal plan ID\nUPDATE public.subscription_plans \nSET paypal_plan_id = 'P-1SW37381TF060682WNBWVZ4Q'\nWHERE name = 'Pro' AND price = 14.99;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250709155629-ba4af44d-41e4-4911-8c55-446ed8e1e8f8.sql",
//   "contents": "-- Remove tier limits and make all features unlimited for both Demo and Pro plans\nUPDATE public.subscription_plans \nSET limits = '{\"script_analyses\": -1, \"ai_messages\": -1, \"video_verifications\": -1}'::jsonb\nWHERE name IN ('Demo', 'Pro');",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250710152007-21e27b62-7548-4866-9509-d840acd88ddd.sql",
//   "contents": "-- Add contact information fields to the auditions table\nALTER TABLE public.auditions \nADD COLUMN contact_email TEXT,\nADD COLUMN contact_phone TEXT,\nADD COLUMN contact_website TEXT;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250710153251-e945e706-0f66-4d6c-9b62-80f8e2a0135e.sql",
//   "contents": "-- Add cascade delete to script_analyses table\nALTER TABLE public.script_analyses \nDROP CONSTRAINT IF EXISTS script_analyses_script_id_fkey;\n\nALTER TABLE public.script_analyses \nADD CONSTRAINT script_analyses_script_id_fkey \nFOREIGN KEY (script_id) REFERENCES public.scripts(id) ON DELETE CASCADE;\n\n-- Add cascade delete to auditions table for script references\nALTER TABLE public.auditions \nDROP CONSTRAINT IF EXISTS auditions_script_id_fkey;\n\nALTER TABLE public.auditions \nADD CONSTRAINT auditions_script_id_fkey \nFOREIGN KEY (script_id) REFERENCES public.scripts(id) ON DELETE SET NULL;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250710153951-2fbbec37-e223-4cad-a5a6-17bceb15a85c.sql",
//   "contents": "\n-- Add cascade delete to coaching_sessions table for analysis references\nALTER TABLE public.coaching_sessions \nDROP CONSTRAINT IF EXISTS coaching_sessions_analysis_id_fkey;\n\nALTER TABLE public.coaching_sessions \nADD CONSTRAINT coaching_sessions_analysis_id_fkey \nFOREIGN KEY (analysis_id) REFERENCES public.script_analyses(id) ON DELETE CASCADE;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250710154333-e51d0172-7d0c-429a-9a35-556bc6b7050f.sql",
//   "contents": "\n-- Add cascade delete to video_submissions table for coaching session references\nALTER TABLE public.video_submissions \nDROP CONSTRAINT IF EXISTS video_submissions_coaching_session_id_fkey;\n\nALTER TABLE public.video_submissions \nADD CONSTRAINT video_submissions_coaching_session_id_fkey \nFOREIGN KEY (coaching_session_id) REFERENCES public.coaching_sessions(id) ON DELETE CASCADE;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250710161259-1efa10f5-c2ab-46d3-b5fe-250f3f3b2472.sql",
//   "contents": "-- Add casting director preferences and current projects fields to auditions table\nALTER TABLE public.auditions \nADD COLUMN casting_director_preferences TEXT,\nADD COLUMN casting_director_current_projects TEXT;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250710170624-0d7610d1-663d-44da-9667-c049743d05a0.sql",
//   "contents": "-- Extend profiles table with actor profile fields\nALTER TABLE public.profiles \nADD COLUMN bio TEXT,\nADD COLUMN headshot_url_1 TEXT,\nADD COLUMN headshot_url_2 TEXT, \nADD COLUMN headshot_url_3 TEXT,\nADD COLUMN demo_video_url_1 TEXT,\nADD COLUMN demo_video_url_2 TEXT,\nADD COLUMN demo_video_title_1 TEXT,\nADD COLUMN demo_video_title_2 TEXT,\nADD COLUMN resume_pdf_url TEXT;\n\n-- Create storage bucket for actor profiles\nINSERT INTO storage.buckets (id, name, public) VALUES ('actor-profiles', 'actor-profiles', true);\n\n-- Create storage policies for actor profile assets\nCREATE POLICY \"Users can view all actor profile assets\" \nON storage.objects \nFOR SELECT \nUSING (bucket_id = 'actor-profiles');\n\nCREATE POLICY \"Users can upload their own profile assets\" \nON storage.objects \nFOR INSERT \nWITH CHECK (bucket_id = 'actor-profiles' AND auth.uid()::text = (storage.foldername(name))[1]);\n\nCREATE POLICY \"Users can update their own profile assets\" \nON storage.objects \nFOR UPDATE \nUSING (bucket_id = 'actor-profiles' AND auth.uid()::text = (storage.foldername(name))[1]);\n\nCREATE POLICY \"Users can delete their own profile assets\" \nON storage.objects \nFOR DELETE \nUSING (bucket_id = 'actor-profiles' AND auth.uid()::text = (storage.foldername(name))[1]);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250710202950-93df530a-b220-4040-8321-db7e7dc082e4.sql",
//   "contents": "-- Allow public access to view profiles for public profile pages\nCREATE POLICY \"Anyone can view public profiles\" \nON public.profiles \nFOR SELECT \nUSING (true);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250710235636-fe86d748-c4f4-4773-b9a0-a5451ab57367.sql",
//   "contents": "-- Clean up duplicate user subscriptions and fix the multiple active subscriptions issue\n-- First, let's see what we're dealing with\nDO $$\nDECLARE\n    duplicate_count INTEGER;\nBEGIN\n    -- Count users with multiple active subscriptions\n    SELECT COUNT(*)\n    INTO duplicate_count\n    FROM (\n        SELECT user_id, COUNT(*) as sub_count\n        FROM user_subscriptions \n        WHERE status = 'active'\n        GROUP BY user_id\n        HAVING COUNT(*) \u003e 1\n    ) duplicates;\n    \n    RAISE NOTICE 'Found % users with multiple active subscriptions', duplicate_count;\nEND $$;\n\n-- Create a temporary table to identify which subscriptions to keep (most recent ones)\nCREATE TEMP TABLE subscriptions_to_keep AS\nSELECT DISTINCT ON (user_id) \n    id, user_id, created_at\nFROM user_subscriptions \nWHERE status = 'active'\nORDER BY user_id, created_at DESC;\n\n-- Update duplicate subscriptions to 'cancelled' status (keep only the most recent one per user)\nUPDATE user_subscriptions \nSET status = 'cancelled', updated_at = now()\nWHERE status = 'active' \n  AND id NOT IN (SELECT id FROM subscriptions_to_keep);\n\n-- Add a unique constraint to prevent multiple active subscriptions per user\nALTER TABLE user_subscriptions \nADD CONSTRAINT unique_active_subscription_per_user \nUNIQUE (user_id, status) \nDEFERRABLE INITIALLY DEFERRED;\n\n-- However, the above constraint would prevent having any inactive subscriptions\n-- So let's drop it and create a better solution with a partial unique index\nALTER TABLE user_subscriptions \nDROP CONSTRAINT IF EXISTS unique_active_subscription_per_user;\n\n-- Create a partial unique index that only applies to active subscriptions\nCREATE UNIQUE INDEX IF NOT EXISTS idx_user_active_subscription \nON user_subscriptions (user_id) \nWHERE status = 'active';\n\n-- Clean up any orphaned usage records that don't have corresponding subscriptions\nDELETE FROM user_usage \nWHERE subscription_id NOT IN (SELECT id FROM user_subscriptions);\n\n-- Log the cleanup results\nDO $$\nDECLARE\n    remaining_duplicates INTEGER;\n    total_active INTEGER;\nBEGIN\n    -- Check remaining duplicates\n    SELECT COUNT(*)\n    INTO remaining_duplicates\n    FROM (\n        SELECT user_id, COUNT(*) as sub_count\n        FROM user_subscriptions \n        WHERE status = 'active'\n        GROUP BY user_id\n        HAVING COUNT(*) \u003e 1\n    ) duplicates;\n    \n    -- Count total active subscriptions\n    SELECT COUNT(*)\n    INTO total_active\n    FROM user_subscriptions \n    WHERE status = 'active';\n    \n    RAISE NOTICE 'Cleanup complete. Remaining duplicates: %, Total active subscriptions: %', remaining_duplicates, total_active;\nEND $$;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250710235656-b10b752d-6d1a-404a-b4a8-88d104e93d5e.sql",
//   "contents": "-- Clean up duplicate user subscriptions step by step\n-- First, let's identify and clean up duplicates safely\n\n-- Step 1: Create a temporary table to identify which subscriptions to keep (most recent ones per user per status)\nCREATE TEMP TABLE subscriptions_to_keep AS\nSELECT DISTINCT ON (user_id, status) \n    id, user_id, status, created_at\nFROM user_subscriptions \nORDER BY user_id, status, created_at DESC;\n\n-- Step 2: Mark duplicate subscriptions for deletion (keep only the most recent one per user per status)\nCREATE TEMP TABLE subscriptions_to_delete AS\nSELECT id \nFROM user_subscriptions \nWHERE id NOT IN (SELECT id FROM subscriptions_to_keep);\n\n-- Step 3: Delete orphaned usage records first\nDELETE FROM user_usage \nWHERE subscription_id IN (SELECT id FROM subscriptions_to_delete);\n\n-- Step 4: Delete duplicate subscriptions\nDELETE FROM user_subscriptions \nWHERE id IN (SELECT id FROM subscriptions_to_delete);\n\n-- Step 5: Create a partial unique index that only applies to active subscriptions\nCREATE UNIQUE INDEX IF NOT EXISTS idx_user_active_subscription \nON user_subscriptions (user_id) \nWHERE status = 'active';\n\n-- Step 6: Log the cleanup results\nDO $$\nDECLARE\n    remaining_duplicates INTEGER;\n    total_active INTEGER;\n    total_subscriptions INTEGER;\nBEGIN\n    -- Check remaining duplicates for active subscriptions\n    SELECT COUNT(*)\n    INTO remaining_duplicates\n    FROM (\n        SELECT user_id, COUNT(*) as sub_count\n        FROM user_subscriptions \n        WHERE status = 'active'\n        GROUP BY user_id\n        HAVING COUNT(*) \u003e 1\n    ) duplicates;\n    \n    -- Count total active subscriptions\n    SELECT COUNT(*)\n    INTO total_active\n    FROM user_subscriptions \n    WHERE status = 'active';\n    \n    -- Count total subscriptions\n    SELECT COUNT(*)\n    INTO total_subscriptions\n    FROM user_subscriptions;\n    \n    RAISE NOTICE 'Cleanup complete. Active subscription duplicates: %, Total active: %, Total subscriptions: %', remaining_duplicates, total_active, total_subscriptions;\nEND $$;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250712164220-3b9f4a15-032f-45a0-bbb1-e7c81469a29e.sql",
//   "contents": "-- Add professional contact fields to profiles table\nALTER TABLE public.profiles \nADD COLUMN manager_name TEXT,\nADD COLUMN manager_phone TEXT,\nADD COLUMN manager_email TEXT,\nADD COLUMN agent_commercial_name TEXT,\nADD COLUMN agent_commercial_phone TEXT,\nADD COLUMN agent_commercial_email TEXT,\nADD COLUMN agent_theatrical_name TEXT,\nADD COLUMN agent_theatrical_phone TEXT,\nADD COLUMN agent_theatrical_email TEXT,\nADD COLUMN agency_url TEXT,\nADD COLUMN talent_phone TEXT,\nADD COLUMN talent_email TEXT,\nADD COLUMN instagram_url TEXT,\nADD COLUMN website_url TEXT,\nADD COLUMN imdb_url TEXT;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250712195329-d2d13e49-444c-4dd4-a9eb-a0c3ed0ce614.sql",
//   "contents": "-- Create headshot_analyses table for storing AI grading results\nCREATE TABLE public.headshot_analyses (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID NOT NULL,\n  image_url TEXT NOT NULL,\n  headshot_type TEXT NOT NULL CHECK (headshot_type IN ('commercial', 'theatrical')),\n  overall_score INTEGER NOT NULL CHECK (overall_score \u003e= 0 AND overall_score \u003c= 100),\n  technical_score INTEGER NOT NULL CHECK (technical_score \u003e= 0 AND technical_score \u003c= 100),\n  professional_score INTEGER NOT NULL CHECK (professional_score \u003e= 0 AND professional_score \u003c= 100),\n  industry_score INTEGER NOT NULL CHECK (industry_score \u003e= 0 AND industry_score \u003c= 100),\n  detailed_feedback JSONB NOT NULL DEFAULT '{}'::jsonb,\n  improvement_suggestions TEXT[] NOT NULL DEFAULT '{}'::text[],\n  strengths TEXT[] NOT NULL DEFAULT '{}'::text[],\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Enable Row Level Security\nALTER TABLE public.headshot_analyses ENABLE ROW LEVEL SECURITY;\n\n-- Create policies for user access\nCREATE POLICY \"Users can view their own headshot analyses\" \nON public.headshot_analyses \nFOR SELECT \nUSING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can create their own headshot analyses\" \nON public.headshot_analyses \nFOR INSERT \nWITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can update their own headshot analyses\" \nON public.headshot_analyses \nFOR UPDATE \nUSING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can delete their own headshot analyses\" \nON public.headshot_analyses \nFOR DELETE \nUSING (auth.uid() = user_id);\n\n-- Create function to update timestamps\nCREATE TRIGGER update_headshot_analyses_updated_at\nBEFORE UPDATE ON public.headshot_analyses\nFOR EACH ROW\nEXECUTE FUNCTION public.update_updated_at_column();",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250713062753-354b78a8-3db8-492a-a52a-a62e63713d70.sql",
//   "contents": "-- Create trial_signups table\nCREATE TABLE public.trial_signups (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  full_name TEXT NOT NULL,\n  email TEXT NOT NULL UNIQUE,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  status TEXT NOT NULL DEFAULT 'pending'\n);\n\n-- Enable Row Level Security\nALTER TABLE public.trial_signups ENABLE ROW LEVEL SECURITY;\n\n-- Create policies for trial signups\nCREATE POLICY \"Anyone can create trial signups\" \nON public.trial_signups \nFOR INSERT \nWITH CHECK (true);\n\nCREATE POLICY \"Admins can view all trial signups\" \nON public.trial_signups \nFOR SELECT \nUSING (true);\n\n-- Add trigger for automatic timestamp updates\nCREATE TRIGGER update_trial_signups_updated_at\nBEFORE UPDATE ON public.trial_signups\nFOR EACH ROW\nEXECUTE FUNCTION public.update_updated_at_column();",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250714160654-dab96af3-ff29-45a2-836d-abae89a9bc3f.sql",
//   "contents": "\n-- Add storage_file_path column to video_submissions table for file cleanup\nALTER TABLE public.video_submissions \nADD COLUMN IF NOT EXISTS storage_file_path TEXT;\n\n-- Add a comment to explain the purpose\nCOMMENT ON COLUMN public.video_submissions.storage_file_path IS 'Path to the video file in storage bucket for cleanup after analysis';\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250719080034-effe9611-cf92-472c-bf1d-557a1908584a.sql",
//   "contents": "\n-- Add reminder-related columns to the auditions table\nALTER TABLE public.auditions \nADD COLUMN submission_deadline TIMESTAMP WITH TIME ZONE,\nADD COLUMN reminder_time TIMESTAMP WITH TIME ZONE,\nADD COLUMN reminder_sent BOOLEAN DEFAULT FALSE,\nADD COLUMN reminder_enabled BOOLEAN DEFAULT FALSE;\n\n-- Create an index on reminder_time for efficient cron job queries\nCREATE INDEX idx_auditions_reminder_time ON public.auditions(reminder_time) WHERE reminder_enabled = TRUE AND reminder_sent = FALSE;\n\n-- Create a function to check and send reminders (will be called by cron job)\nCREATE OR REPLACE FUNCTION public.process_audition_reminders()\nRETURNS void AS $$\nBEGIN\n  -- This function will be implemented in the edge function\n  -- but we create it here for the cron job reference\n  PERFORM net.http_post(\n    url := 'https://cqlczzkyktktaajbfmli.supabase.co/functions/v1/send-audition-reminders',\n    headers := '{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNxbGN6emt5a3RrdGFhamJmbWxpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3MTY2MDUsImV4cCI6MjA2NjI5MjYwNX0.Zw2biXCKS10SiKLo81NCRAFqJCX-lQbO-zjo3HZe5T8\"}'::jsonb\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Enable pg_cron extension if not already enabled\nCREATE EXTENSION IF NOT EXISTS pg_cron;\n\n-- Schedule the reminder check to run every 15 minutes\nSELECT cron.schedule(\n  'audition-reminders',\n  '*/15 * * * *',\n  'SELECT public.process_audition_reminders();'\n);\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250724210036-d1aa9553-abea-4088-9c1b-dd5c34d5fea1.sql",
//   "contents": "\n-- Create headshot_analyses table for storing headshot analysis results\nCREATE TABLE IF NOT EXISTS public.headshot_analyses (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  image_url TEXT NOT NULL,\n  headshot_type TEXT NOT NULL,\n  overall_score INTEGER NOT NULL CHECK (overall_score \u003e= 0 AND overall_score \u003c= 100),\n  technical_score INTEGER NOT NULL CHECK (technical_score \u003e= 0 AND technical_score \u003c= 100),\n  professional_score INTEGER NOT NULL CHECK (professional_score \u003e= 0 AND professional_score \u003c= 100),\n  industry_score INTEGER NOT NULL CHECK (industry_score \u003e= 0 AND industry_score \u003c= 100),\n  detailed_feedback JSONB NOT NULL DEFAULT '{}',\n  improvement_suggestions TEXT[] DEFAULT '{}',\n  strengths TEXT[] DEFAULT '{}',\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Enable Row Level Security\nALTER TABLE public.headshot_analyses ENABLE ROW LEVEL SECURITY;\n\n-- Create RLS policies for headshot_analyses\nCREATE POLICY \"Users can view their own headshot analyses\"\n  ON public.headshot_analyses\n  FOR SELECT\n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can insert their own headshot analyses\"\n  ON public.headshot_analyses\n  FOR INSERT\n  WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can update their own headshot analyses\"\n  ON public.headshot_analyses\n  FOR UPDATE\n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can delete their own headshot analyses\"\n  ON public.headshot_analyses\n  FOR DELETE\n  USING (auth.uid() = user_id);\n\n-- Create updated_at trigger\nCREATE OR REPLACE TRIGGER update_headshot_analyses_updated_at\n  BEFORE UPDATE ON public.headshot_analyses\n  FOR EACH ROW\n  EXECUTE FUNCTION public.update_updated_at_column();\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250725013030-ee0a7f0d-d957-4ef5-8e23-9e62e64418d8.sql",
//   "contents": "-- Update Pro plan price to $19.99\nUPDATE subscription_plans \nSET price = 19.99, updated_at = NOW()\nWHERE name = 'Pro';",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250730004654-0c817f38-e8f3-4f4c-9aa3-a0e9a5959b6b.sql",
//   "contents": "-- Enable pg_cron extension for scheduled tasks\nCREATE EXTENSION IF NOT EXISTS pg_cron;\n\n-- Create a cron job to run audition reminders every hour\nSELECT cron.schedule(\n  'audition-reminders-hourly',\n  '0 * * * *', -- Every hour at minute 0\n  $$\n  SELECT net.http_post(\n    url := 'https://cqlczzkyktktaajbfmli.supabase.co/functions/v1/send-audition-reminders',\n    headers := '{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNxbGN6emt5a3RrdGFhamJmbWxpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3MTY2MDUsImV4cCI6MjA2NjI5MjYwNX0.Zw2biXCKS10SiKLo81NCRAFqJCX-lQbO-zjo3HZe5T8\"}'::jsonb,\n    body := '{\"source\": \"cron\"}'::jsonb\n  );\n  $$\n);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250730004801-1e78ed63-ceba-4403-993d-2a3d1955a734.sql",
//   "contents": "-- Enable required extensions first\nCREATE EXTENSION IF NOT EXISTS pg_net;\n\n-- Fix the search path for existing functions to be secure\nALTER FUNCTION public.update_updated_at_column() SET search_path = '';\nALTER FUNCTION public.get_user_audition_stats(uuid) SET search_path = '';\nALTER FUNCTION public.handle_new_user() SET search_path = '';\n\n-- Update the cron job with the correct URL after enabling pg_net\nSELECT cron.unschedule('audition-reminders-hourly');\n\nSELECT cron.schedule(\n  'audition-reminders-hourly',\n  '0 * * * *', -- Every hour at minute 0\n  $$\n  SELECT net.http_post(\n    url := 'https://cqlczzkyktktaajbfmli.supabase.co/functions/v1/send-audition-reminders',\n    headers := '{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNxbGN6emt5a3RrdGFhamJmbWxpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3MTY2MDUsImV4cCI6MjA2NjI5MjYwNX0.Zw2biXCKS10SiKLo81NCRAFqJCX-lQbO-zjo3HZe5T8\"}'::jsonb,\n    body := '{\"source\": \"cron\"}'::jsonb\n  ) as request_id;\n  $$\n);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250808010447_7434a34c-e802-4f9f-bd26-3bf5d51fa48b.sql",
//   "contents": "-- Add unique constraint for user_id and title combination to support upserts\nALTER TABLE public.scripts \nADD CONSTRAINT scripts_user_id_title_unique UNIQUE (user_id, title);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250810214913_6e47a564-7a43-438e-ae20-0542024e240a.sql",
//   "contents": "-- Add actor_email to auditions for manual sending\nALTER TABLE public.auditions\nADD COLUMN IF NOT EXISTS actor_email text;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250811202644_656c4238-dfca-4fbf-ad8d-d91dabaabadc.sql",
//   "contents": "\n-- 1) Roles: enum + table\ncreate type public.app_role as enum ('admin', 'moderator', 'user');\n\ncreate table public.user_roles (\n  id uuid primary key default gen_random_uuid(),\n  user_id uuid not null references auth.users(id) on delete cascade,\n  role public.app_role not null,\n  unique (user_id, role)\n);\n\nalter table public.user_roles enable row level security;\n\n-- Allow users to read their own roles (optional, helpful for client)\ncreate policy \"Users can view their own roles\"\non public.user_roles\nfor select\nto authenticated\nusing (auth.uid() = user_id);\n\n-- 2) Role check function\ncreate or replace function public.has_role(_user_id uuid, _role public.app_role)\nreturns boolean\nlanguage sql\nstable\nsecurity definer\nas $$\n  select exists (\n    select 1\n    from public.user_roles\n    where user_id = _user_id\n      and role = _role\n  );\n$$;\n\ngrant execute on function public.has_role(uuid, public.app_role) to authenticated;\n\n-- 3) Soft delete column for scripts\nalter table public.scripts\nadd column if not exists deleted_at timestamp with time zone;\n\ncreate index if not exists idx_scripts_deleted_at on public.scripts (deleted_at);\ncreate index if not exists idx_scripts_user_deleted_at on public.scripts (user_id, deleted_at);\n\n-- 4) Update RLS on scripts\n-- Drop existing SELECT policy to replace with one that hides trashed items for normal users\ndrop policy if exists \"Users can view their own scripts\" on public.scripts;\n\n-- Users: view only their own non-deleted scripts\ncreate policy \"Users can view their own active scripts\"\non public.scripts\nfor select\nto authenticated\nusing (\n  auth.uid() = user_id\n  and deleted_at is null\n);\n\n-- Admins: view all scripts (including trashed)\ncreate policy \"Admins can view all scripts\"\non public.scripts\nfor select\nto authenticated\nusing (public.has_role(auth.uid(), 'admin'));\n\n-- Admins: can update any script (e.g., set deleted_at for trash/restore)\ncreate policy \"Admins can update any script\"\non public.scripts\nfor update\nto authenticated\nusing (public.has_role(auth.uid(), 'admin'));\n\n-- Admins: can delete any script permanently\ncreate policy \"Admins can delete any script\"\non public.scripts\nfor delete\nto authenticated\nusing (public.has_role(auth.uid(), 'admin'));\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250811205032_ee19d096-50c4-4a94-9c96-5fd0e15b932c.sql",
//   "contents": "\n-- Grant admin role to the specified user (idempotent)\n-- This will assign 'admin' to any auth.user with the given email if it exists,\n-- and skip if the role is already present.\n\ninsert into public.user_roles (user_id, role)\nselect u.id, 'admin'::app_role\nfrom auth.users u\nwhere lower(u.email) = lower('Will@ActorWillRoberts.com')\n  and not exists (\n    select 1\n    from public.user_roles r\n    where r.user_id = u.id\n      and r.role = 'admin'::app_role\n  );\n\n-- Optional: you can verify afterwards with:\n-- select u.email, r.role from public.user_roles r\n-- join auth.users u on u.id = r.user_id\n-- where lower(u.email) = lower('Will@ActorWillRoberts.com');\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250813154455_f6c699c5-30a2-4236-b8bc-bdb14d99f059.sql",
//   "contents": "-- Fix security vulnerability: Restrict trial_signups SELECT access to admins only\n-- Currently anyone can read customer email addresses and names from trial_signups table\n\n-- Drop the current overly permissive SELECT policy\nDROP POLICY IF EXISTS \"Admins can view all trial signups\" ON public.trial_signups;\n\n-- Create a properly restricted SELECT policy that only allows admins\nCREATE POLICY \"Only admins can view trial signups\" \nON public.trial_signups \nFOR SELECT \nUSING (public.has_role(auth.uid(), 'admin'::app_role));\n\n-- Verify the INSERT policy is still secure (allows anyone to create trial signups)\n-- This is intentional as we want public trial signup functionality",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250814031928_78b1f368-56eb-4b0a-89c2-622e4c4a35e0.sql",
//   "contents": "-- Fix database security warnings\n\n-- 1. Fix function search_path issues by updating existing functions\nCREATE OR REPLACE FUNCTION public.process_audition_reminders()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path = public, pg_temp\nAS $function$\nBEGIN\n  -- This function will be implemented in the edge function\n  -- but we create it here for the cron job reference\n  PERFORM net.http_post(\n    url := 'https://cqlczzkyktktaajbfmli.supabase.co/functions/v1/send-audition-reminders',\n    headers := '{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNxbGN6emt5a3RrdGFhamJmbWxpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3MTY2MDUsImV4cCI6MjA2NjI5MjYwNX0.Zw2biXCKS10SiKLo81NCRAFqJCX-lQbO-zjo3HZe5T8\"}'::jsonb\n  );\nEND;\n$function$;\n\nCREATE OR REPLACE FUNCTION public.has_role(_user_id uuid, _role app_role)\n RETURNS boolean\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path = public, pg_temp\nAS $function$\n  select exists (\n    select 1\n    from public.user_roles\n    where user_id = _user_id\n      and role = _role\n  );\n$function$;\n\nCREATE OR REPLACE FUNCTION public.update_updated_at_column()\n RETURNS trigger\n LANGUAGE plpgsql\n SET search_path = public, pg_temp\nAS $function$\nBEGIN\n   NEW.updated_at = NOW();\n   RETURN NEW;\nEND;\n$function$;\n\nCREATE OR REPLACE FUNCTION public.get_user_audition_stats(user_uuid uuid)\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path = public, pg_temp\nAS $function$\nDECLARE\n    stats JSON;\nBEGIN\n    SELECT json_build_object(\n        'total_auditions', COUNT(*),\n        'preparation', COUNT(*) FILTER (WHERE status = 'preparation'),\n        'submitted', COUNT(*) FILTER (WHERE status = 'submitted'),\n        'callback', COUNT(*) FILTER (WHERE status = 'callback'),\n        'booked', COUNT(*) FILTER (WHERE status = 'booked'),\n        'rejected', COUNT(*) FILTER (WHERE status = 'rejected'),\n        'success_rate', CASE \n            WHEN COUNT(*) \u003e 0 THEN \n                ROUND((COUNT(*) FILTER (WHERE status = 'booked')::DECIMAL / COUNT(*)) * 100, 2)\n            ELSE 0\n        END\n    )\n    INTO stats\n    FROM public.auditions\n    WHERE user_id = user_uuid;\n    \n    RETURN stats;\nEND;\n$function$;\n\nCREATE OR REPLACE FUNCTION public.get_public_profile(p_username text)\n RETURNS TABLE(username text, full_name text, bio text, avatar_url text, acting_methods text[], experience_level text, headshot_url_1 text, headshot_url_2 text, headshot_url_3 text, demo_video_url_1 text, demo_video_url_2 text, demo_video_title_1 text, demo_video_title_2 text, instagram_url text, website_url text, imdb_url text)\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path = public, pg_temp\nAS $function$\n  SELECT\n    username,\n    full_name,\n    bio,\n    avatar_url,\n    acting_methods,\n    experience_level,\n    headshot_url_1,\n    headshot_url_2,\n    headshot_url_3,\n    demo_video_url_1,\n    demo_video_url_2,\n    demo_video_title_1,\n    demo_video_title_2,\n    instagram_url,\n    website_url,\n    imdb_url\n  FROM public.profiles\n  WHERE username = p_username\n$function$;\n\nCREATE OR REPLACE FUNCTION public.handle_new_user()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path = public, pg_temp\nAS $function$\nBEGIN\n  INSERT INTO public.profiles (id, full_name, username)\n  VALUES (\n    new.id,\n    new.raw_user_meta_data -\u003e\u003e 'full_name',\n    new.raw_user_meta_data -\u003e\u003e 'username'\n  );\n  RETURN new;\nEND;\n$function$;\n\n-- 2. Add more restrictive RLS policy for subscription_plans to prevent public access to sensitive pricing data\nDROP POLICY IF EXISTS \"Anyone can view subscription plans\" ON public.subscription_plans;\n\nCREATE POLICY \"Users can view subscription plans\" ON public.subscription_plans\nFOR SELECT USING (\n  -- Allow authenticated users to view plans\n  auth.uid() IS NOT NULL\n);\n\n-- 3. Add policy to allow public access to basic plan information for marketing/pricing page\nCREATE POLICY \"Public can view basic plan info\" ON public.subscription_plans\nFOR SELECT USING (\n  -- Allow public access to specific columns only\n  true\n);\n\n-- Note: The leaked password protection and OTP expiry need to be configured in Supabase Auth settings\n-- These cannot be set via SQL migrations and need to be configured in the dashboard\n\n-- 4. Create a function to safely get subscription plans for public use (with limited data)\nCREATE OR REPLACE FUNCTION public.get_public_subscription_plans()\n RETURNS TABLE(id uuid, name text, price numeric, currency text, features jsonb)\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path = public, pg_temp\nAS $function$\n  SELECT\n    id,\n    name,\n    price,\n    currency,\n    features\n  FROM public.subscription_plans\n  ORDER BY price ASC;\n$function$;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250819042151_7a675e18-6cf9-455e-b49e-9945206cd8e2.sql",
//   "contents": "\n-- 1) Enum for status\ndo $$\nbegin\n  if not exists (select 1 from pg_type where typname = 'blog_status') then\n    create type public.blog_status as enum ('draft', 'published');\n  end if;\nend $$;\n\n-- 2) Table for blog posts\ncreate table if not exists public.blog_posts (\n  id uuid primary key default gen_random_uuid(),\n  title text not null,\n  slug text not null unique,\n  excerpt text,\n  content text not null,\n  cover_image_url text,\n  youtube_url text,\n  status public.blog_status not null default 'published',\n  author_id uuid not null,\n  created_at timestamptz not null default now(),\n  updated_at timestamptz not null default now(),\n  -- Optional: reference profiles instead of auth.users to avoid reserved schema references\n  constraint blog_posts_author_fk\n    foreign key (author_id) references public.profiles(id)\n      on delete cascade,\n  -- YouTube-only enforcement for videos\n  constraint blog_posts_youtube_link_chk\n    check (\n      youtube_url is null\n      or youtube_url ~* '^(https?://)?(www\\.)?(youtube\\.com|youtu\\.be)/'\n    )\n);\n\n-- 3) Helpful indexes\ncreate index if not exists blog_posts_status_created_idx\n  on public.blog_posts (status, created_at desc);\n\n-- 4) Keep updated_at in sync\ndrop trigger if exists trg_blog_posts_updated_at on public.blog_posts;\ncreate trigger trg_blog_posts_updated_at\nbefore update on public.blog_posts\nfor each row\nexecute procedure public.update_updated_at_column();\n\n-- 5) Row Level Security\nalter table public.blog_posts enable row level security;\n\n-- Public can view published posts\ndrop policy if exists \"Public can view published blog posts\" on public.blog_posts;\ncreate policy \"Public can view published blog posts\"\non public.blog_posts\nfor select\nusing (status = 'published');\n\n-- Admins can view all posts\ndrop policy if exists \"Admins can view all blog posts\" on public.blog_posts;\ncreate policy \"Admins can view all blog posts\"\non public.blog_posts\nfor select\nusing (public.has_role(auth.uid(), 'admin'));\n\n-- Admins can insert posts\ndrop policy if exists \"Admins can insert blog posts\" on public.blog_posts;\ncreate policy \"Admins can insert blog posts\"\non public.blog_posts\nfor insert\nwith check (public.has_role(auth.uid(), 'admin'));\n\n-- Admins can update posts\ndrop policy if exists \"Admins can update blog posts\" on public.blog_posts;\ncreate policy \"Admins can update blog posts\"\non public.blog_posts\nfor update\nusing (public.has_role(auth.uid(), 'admin'));\n\n-- Admins can delete posts\ndrop policy if exists \"Admins can delete blog posts\" on public.blog_posts;\ncreate policy \"Admins can delete blog posts\"\non public.blog_posts\nfor delete\nusing (public.has_role(auth.uid(), 'admin'));\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250819044101_d4628098-5c1a-4c7d-bb60-4a85230b886e.sql",
//   "contents": "-- Create storage bucket for blog images\nINSERT INTO storage.buckets (id, name, public) VALUES ('blog-images', 'blog-images', true);\n\n-- Create policies for blog image uploads\nCREATE POLICY \"Anyone can view blog images\" \nON storage.objects \nFOR SELECT \nUSING (bucket_id = 'blog-images');\n\nCREATE POLICY \"Authenticated users can upload blog images\" \nON storage.objects \nFOR INSERT \nWITH CHECK (bucket_id = 'blog-images' AND auth.uid() IS NOT NULL);\n\nCREATE POLICY \"Users can update their own blog images\" \nON storage.objects \nFOR UPDATE \nUSING (bucket_id = 'blog-images' AND auth.uid() IS NOT NULL);\n\nCREATE POLICY \"Users can delete their own blog images\" \nON storage.objects \nFOR DELETE \nUSING (bucket_id = 'blog-images' AND auth.uid() IS NOT NULL);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250820042104_36409880-877c-4d61-9298-50168e197f07.sql",
//   "contents": "-- Enable pg_net extension for HTTP requests from database\nCREATE EXTENSION IF NOT EXISTS pg_net;\n\n-- Verify process_audition_reminders function exists and is properly configured\n-- The function should call the send-audition-reminders edge function via HTTP\nCREATE OR REPLACE FUNCTION public.process_audition_reminders()\nRETURNS void\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path TO 'public', 'pg_temp'\nAS $function$\nBEGIN\n  -- Call the edge function to process audition reminders\n  PERFORM net.http_post(\n    url := 'https://cqlczzkyktktaajbfmli.supabase.co/functions/v1/send-audition-reminders',\n    headers := '{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNxbGN6emt5a3RrdGFhamJmbWxpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3MTY2MDUsImV4cCI6MjA2NjI5MjYwNX0.Zw2biXCKS10SiKLo81NCRAFqJCX-lQbO-zjo3HZe5T8\"}'::jsonb,\n    body := '{\"trigger\": \"cron\"}'::jsonb\n  );\nEND;\n$function$;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250820153133_fd0bef6a-0e2d-4c94-8980-5988c1a73197.sql",
//   "contents": "-- Add scene_summary column to scripts table\nALTER TABLE public.scripts \nADD COLUMN scene_summary TEXT;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250821121117_b8de73ea-d958-4bb3-83b1-104a4f0e9f1e.sql",
//   "contents": "\n-- 1) Create a private storage bucket for cached TTS audio\ninsert into storage.buckets (id, name, public)\nvalues ('tts-audio', 'tts-audio', false)\non conflict (id) do nothing;\n\n-- 2) Storage RLS policies for the new bucket (users can manage their own files if accessed directly)\n-- Note: Edge functions will typically use the service role and bypass these RLS policies.\n\n-- Allow users to read their own objects in tts-audio\ncreate policy \"tts-audio read own objects\"\non storage.objects\nfor select\nto authenticated\nusing (bucket_id = 'tts-audio' and owner = auth.uid());\n\n-- Allow users to insert their own objects in tts-audio\ncreate policy \"tts-audio insert own objects\"\non storage.objects\nfor insert\nto authenticated\nwith check (bucket_id = 'tts-audio' and owner = auth.uid());\n\n-- Allow users to update their own objects in tts-audio\ncreate policy \"tts-audio update own objects\"\non storage.objects\nfor update\nto authenticated\nusing (bucket_id = 'tts-audio' and owner = auth.uid())\nwith check (bucket_id = 'tts-audio' and owner = auth.uid());\n\n-- Allow users to delete their own objects in tts-audio\ncreate policy \"tts-audio delete own objects\"\non storage.objects\nfor delete\nto authenticated\nusing (bucket_id = 'tts-audio' and owner = auth.uid());\n\n-- 3) Create an index table for cached TTS files\ncreate table if not exists public.tts_cache_items (\n  id uuid primary key default gen_random_uuid(),\n  user_id uuid not null,\n  script_id uuid not null,\n  dialogue_index integer not null,\n  character text not null,\n  voice_id text not null,\n  speed numeric(4,2) not null default 1.00,\n  provider text not null default 'google',\n  hash text not null,\n  storage_path text not null unique,\n  duration_ms integer,\n  created_at timestamptz not null default now()\n);\n\n-- Enable RLS\nalter table public.tts_cache_items enable row level security;\n\n-- Users can view their own cache index records\ncreate policy \"Users can view their own TTS cache\"\non public.tts_cache_items\nfor select\nto authenticated\nusing (auth.uid() = user_id);\n\n-- Helpful indexes\ncreate index if not exists tts_cache_items_user_script_idx\n  on public.tts_cache_items (user_id, script_id);\n\ncreate unique index if not exists tts_cache_items_uniqueness\n  on public.tts_cache_items (user_id, script_id, dialogue_index, voice_id, speed, hash);\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250822040647_45a642cd-943a-449a-8364-f006c8917682.sql",
//   "contents": "-- Add public read access to profiles table for public profile pages\nCREATE POLICY \"Public can view profiles for public pages\" \nON public.profiles \nFOR SELECT \nUSING (true);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250822045341_e72a0b18-c52d-43ca-8104-ace5c5515e8a.sql",
//   "contents": "-- Remove the overly permissive public read policy\nDROP POLICY IF EXISTS \"Public can view profiles for public pages\" ON public.profiles;\n\n-- Create a more restrictive policy that only allows public access to non-sensitive profile fields\nCREATE POLICY \"Public can view safe profile fields only\" \nON public.profiles \nFOR SELECT \nUSING (\n  -- Only allow access to columns that should be publicly visible\n  -- This policy will be used in conjunction with SELECT queries that only request safe columns\n  true\n);\n\n-- However, the above approach still has issues. Let's remove it and use a better approach.\nDROP POLICY IF EXISTS \"Public can view safe profile fields only\" ON public.profiles;\n\n-- The safest approach is to remove all public access to the profiles table directly\n-- and rely on the existing get_public_profile() function which already returns only safe columns\n-- This function is SECURITY DEFINER so it bypasses RLS and only returns approved columns\n\n-- Update the existing policy name for clarity\nDROP POLICY IF EXISTS \"Users can view their own profile\" ON public.profiles;\n\n-- Recreate user access policy with clearer name\nCREATE POLICY \"Authenticated users can view their own profile\" \nON public.profiles \nFOR SELECT \nUSING (auth.uid() = id);\n\n-- Keep the existing insert/update policies as they are already secure\n-- \"Users can insert their own profile\" - already properly restricted\n-- \"Users can update their own profile\" - already properly restricted",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250822045524_f755c05a-1dce-4437-8a79-d215cc609a38.sql",
//   "contents": "-- Remove the overly permissive public read policy\nDROP POLICY IF EXISTS \"Public can view profiles for public pages\" ON public.profiles;\n\n-- Create a more restrictive policy that only allows public access to non-sensitive profile fields\nCREATE POLICY \"Public can view safe profile fields only\" \nON public.profiles \nFOR SELECT \nUSING (\n  -- Only allow access to columns that should be publicly visible\n  -- This policy will be used in conjunction with SELECT queries that only request safe columns\n  true\n);\n\n-- However, the above approach still has issues. Let's remove it and use a better approach.\nDROP POLICY IF EXISTS \"Public can view safe profile fields only\" ON public.profiles;\n\n-- The safest approach is to remove all public access to the profiles table directly\n-- and rely on the existing get_public_profile() function which already returns only safe columns\n-- This function is SECURITY DEFINER so it bypasses RLS and only returns approved columns\n\n-- Update the existing policy name for clarity\nDROP POLICY IF EXISTS \"Users can view their own profile\" ON public.profiles;\n\n-- Recreate user access policy with clearer name\nCREATE POLICY \"Authenticated users can view their own profile\" \nON public.profiles \nFOR SELECT \nUSING (auth.uid() = id);\n\n-- Keep the existing insert/update policies as they are already secure\n-- \"Users can insert their own profile\" - already properly restricted\n-- \"Users can update their own profile\" - already properly restricted",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250822052355_c2101019-0efd-47f3-9fbe-d24c34847907.sql",
//   "contents": "-- Create photographers table for headshot recommendations\nCREATE TABLE public.photographers (\n  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  name text NOT NULL,\n  business_name text,\n  email text NOT NULL,\n  phone text,\n  website text,\n  instagram text,\n  city text NOT NULL,\n  state text NOT NULL,\n  country text NOT NULL DEFAULT 'United States',\n  specialties text[] DEFAULT '{}',\n  price_range text,\n  portfolio_url text,\n  bio text,\n  rating numeric(3,2) CHECK (rating \u003e= 0 AND rating \u003c= 5),\n  total_reviews integer DEFAULT 0,\n  verified boolean DEFAULT false,\n  active boolean DEFAULT true,\n  created_at timestamp with time zone NOT NULL DEFAULT now(),\n  updated_at timestamp with time zone NOT NULL DEFAULT now()\n);\n\n-- Enable RLS\nALTER TABLE public.photographers ENABLE ROW LEVEL SECURITY;\n\n-- RLS policies\nCREATE POLICY \"Anyone can view active photographers\" \nON public.photographers \nFOR SELECT \nUSING (active = true);\n\nCREATE POLICY \"Admins can manage photographers\" \nON public.photographers \nFOR ALL \nUSING (has_role(auth.uid(), 'admin'::app_role))\nWITH CHECK (has_role(auth.uid(), 'admin'::app_role));\n\n-- Create trigger for updated_at\nCREATE TRIGGER update_photographers_updated_at\nBEFORE UPDATE ON public.photographers\nFOR EACH ROW\nEXECUTE FUNCTION public.update_updated_at_column();\n\n-- Insert some sample photographers\nINSERT INTO public.photographers (name, business_name, email, phone, city, state, specialties, price_range, bio, rating, total_reviews, verified) VALUES \n('Sarah Chen', 'Chen Photography Studio', 'sarah@chenphotography.com', '(555) 123-4567', 'Los Angeles', 'CA', ARRAY['headshots', 'theatrical', 'commercial'], '$300-500', 'Specializing in actor headshots with 8+ years experience in LA entertainment industry.', 4.8, 127, true),\n('Michael Rodriguez', 'MR Headshot Studios', 'mike@mrheadshots.com', '(555) 234-5678', 'New York', 'NY', ARRAY['headshots', 'corporate', 'commercial'], '$400-600', 'Award-winning headshot photographer serving NYC actors and professionals.', 4.9, 89, true),\n('Jessica Park', 'Park Portrait Studio', 'jessica@parkportraits.com', '(555) 345-6789', 'Atlanta', 'GA', ARRAY['headshots', 'theatrical', 'fashion'], '$250-400', 'Creative headshot photographer with a focus on authentic, natural expressions.', 4.7, 156, true),\n('David Thompson', 'Thompson Headshots', 'david@thompsonheadshots.com', '(555) 456-7890', 'Chicago', 'IL', ARRAY['headshots', 'commercial', 'corporate'], '$350-550', 'Professional headshot photographer with clients in film, TV, and theatre.', 4.8, 203, true);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250823034754_e1cf7655-2c1d-4d5f-a4c5-34ed01bae4b3.sql",
//   "contents": "-- Create headshot knowledge base table\nCREATE TABLE public.headshot_knowledge (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  category TEXT NOT NULL CHECK (category IN ('theatrical', 'commercial', 'general')),\n  topic TEXT NOT NULL,\n  content TEXT NOT NULL,\n  keywords TEXT[] NOT NULL DEFAULT '{}',\n  is_active BOOLEAN NOT NULL DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Enable RLS\nALTER TABLE public.headshot_knowledge ENABLE ROW LEVEL SECURITY;\n\n-- Create policies\nCREATE POLICY \"Public can view active knowledge\" \nON public.headshot_knowledge \nFOR SELECT \nUSING (is_active = true);\n\nCREATE POLICY \"Admins can manage knowledge\" \nON public.headshot_knowledge \nFOR ALL \nUSING (has_role(auth.uid(), 'admin'::app_role))\nWITH CHECK (has_role(auth.uid(), 'admin'::app_role));\n\n-- Create trigger for automatic timestamp updates\nCREATE TRIGGER update_headshot_knowledge_updated_at\nBEFORE UPDATE ON public.headshot_knowledge\nFOR EACH ROW\nEXECUTE FUNCTION public.update_updated_at_column();\n\n-- Insert initial knowledge base content\nINSERT INTO public.headshot_knowledge (category, topic, content, keywords) VALUES\n('theatrical', 'Lighting Standards', 'Theatrical headshots require soft, natural lighting that reveals authentic emotions. Avoid harsh shadows or overly bright lighting. The goal is to show the actor''s ability to convey depth and vulnerability.', ARRAY['lighting', 'natural', 'soft', 'shadows', 'authentic']),\n('theatrical', 'Expression Guidelines', 'Theatrical expressions should be subtle and contemplative. Avoid big smiles or overly dramatic expressions. The focus is on showing intelligence, depth, and emotional range through the eyes.', ARRAY['expression', 'subtle', 'contemplative', 'eyes', 'emotional range']),\n('theatrical', 'Wardrobe Requirements', 'Theatrical wardrobe should be simple, timeless, and non-distracting. Solid colors work best, avoiding busy patterns, logos, or trendy pieces that date the photo.', ARRAY['wardrobe', 'simple', 'timeless', 'solid colors', 'no patterns']),\n('commercial', 'Lighting Standards', 'Commercial headshots benefit from bright, even lighting that creates an approachable, friendly appearance. The lighting should be flattering and energetic.', ARRAY['lighting', 'bright', 'even', 'approachable', 'energetic']),\n('commercial', 'Expression Guidelines', 'Commercial expressions should be warm, friendly, and inviting. A genuine smile is often preferred, showing the actor as someone people would want to buy from or be around.', ARRAY['expression', 'warm', 'friendly', 'smile', 'genuine', 'inviting']),\n('commercial', 'Wardrobe Requirements', 'Commercial wardrobe should reflect current trends and the types of roles the actor would book. Colors should be vibrant and flattering, representing the actor''s commercial type.', ARRAY['wardrobe', 'trendy', 'vibrant', 'commercial type', 'current']),\n('general', 'Technical Quality', 'All headshots must be high resolution (minimum 300 DPI), properly exposed, and professionally retouched without over-editing. The focus should be tack sharp on the eyes.', ARRAY['resolution', 'DPI', 'focus', 'eyes', 'retouching']),\n('general', 'Cropping Standards', 'Headshots should typically be cropped from mid-chest up, with the actor''s eyes positioned in the upper third of the frame following the rule of thirds.', ARRAY['cropping', 'mid-chest', 'rule of thirds', 'eyes', 'framing']),\n('general', 'Background Requirements', 'Backgrounds should be simple and non-distracting, typically neutral colors that complement the actor''s skin tone and wardrobe without competing for attention.', ARRAY['background', 'simple', 'neutral', 'non-distracting', 'complementary']);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250827004543_c4ead052-975c-4494-967f-ca321b74b13f.sql",
//   "contents": "\n-- 1) Create coaches table\ncreate table if not exists public.coaches (\n  id uuid primary key default gen_random_uuid(),\n  name text not null,\n  slug text not null,\n  bio text,\n  highlights text[] not null default '{}'::text[],\n  email text,\n  photo_url text,\n  active boolean not null default true,\n  created_at timestamptz not null default now(),\n  updated_at timestamptz not null default now(),\n  unique (slug)\n);\n\n-- Keep updated_at fresh\ndrop trigger if exists trg_coaches_updated_at on public.coaches;\ncreate trigger trg_coaches_updated_at\nbefore update on public.coaches\nfor each row\nexecute function public.update_updated_at_column();\n\n-- 2) Enable RLS and policies\nalter table public.coaches enable row level security;\n\n-- Public (anonymous or authenticated) can view only active coaches\ndrop policy if exists \"Public can view active coaches\" on public.coaches;\ncreate policy \"Public can view active coaches\"\n  on public.coaches\n  for select\n  using (active = true);\n\n-- Admins can manage (insert/update/delete/select all)\ndrop policy if exists \"Admins can manage coaches\" on public.coaches;\ncreate policy \"Admins can manage coaches\"\n  on public.coaches\n  for all\n  to authenticated\n  using (public.has_role(auth.uid(), 'admin'))\n  with check (public.has_role(auth.uid(), 'admin'));\n\n-- 3) Storage bucket for coach photos\ninsert into storage.buckets (id, name, public)\nvalues ('coach-photos', 'coach-photos', true)\non conflict (id) do nothing;\n\n-- Storage policies for the coach-photos bucket\n-- Public read access to images in this bucket\ndrop policy if exists \"Public can view coach photos\" on storage.objects;\ncreate policy \"Public can view coach photos\"\n  on storage.objects\n  for select\n  using (bucket_id = 'coach-photos');\n\n-- Admins can manage objects in this bucket\ndrop policy if exists \"Admins can manage coach photos\" on storage.objects;\ncreate policy \"Admins can manage coach photos\"\n  on storage.objects\n  for all\n  to authenticated\n  using (bucket_id = 'coach-photos' and public.has_role(auth.uid(), 'admin'))\n  with check (bucket_id = 'coach-photos' and public.has_role(auth.uid(), 'admin'));\n\n-- 4) Seed first coach (email left null for now; can be added via admin)\ninsert into public.coaches (name, slug, bio, highlights, photo_url, active)\nvalues (\n  'Rick Zieff',\n  'rick-zieff',\n  'Voice-over veteran since the mid-1980s spanning animation, games, and live-action. Emmy-nominated performer, coach, and voice/casting director with extensive credits and teaching experience.',\n  array[\n    'Daytime Emmy nomination for Spike the Dog (The Tom and Jerry Show)',\n    'Grandpa Loud (The Loud House); Chief Clark (Mech Cadets); Croaks (The Cuphead Show)',\n    'Shusuke Amagai (Bleach); Mr. Nosy \u0026 Mr. Nervous (The Mr. Men Show)',\n    'Video game credits incl. Half-Life: Alyx, Final Fantasy VII Rebirth, Halo 2',\n    'Voice direction on Steamboy, Cyberpunk: Edgerunners, Helluva Boss',\n    'Teaches voice-over courses and workshops in Los Angeles and nationwide'\n  ],\n  '/lovable-uploads/cbfeae9f-0292-42a6-8705-8c6d0862be40.png',\n  true\n)\non conflict (slug) do nothing;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250827005206_f4cd989d-a22c-4b0e-8d6b-2763232cdedb.sql",
//   "contents": "\n-- Point Rick's photo to the uploaded image in the project\nupdate public.coaches\nset photo_url = '/lovable-uploads/f90f44c2-4f9c-49fc-bb4d-d70cd8faa203.png',\n    updated_at = now()\nwhere slug = 'rick-zieff';\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250827015714_5409b6ce-aa5b-4f28-a8b6-0276a85ad49e.sql",
//   "contents": "UPDATE coaches \nSET photo_url = '/lovable-uploads/b8bc9b25-99e2-4976-adf9-95aa72999af1.png',\n    updated_at = now()\nWHERE id = '94b86fcc-69cf-448b-b9dd-84c217aa444c';",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250829151512_b5293089-5888-4824-8691-1b9251d3b8e5.sql",
//   "contents": "-- Fix RLS policy for script updates to allow soft deletes\n-- Drop existing user update policy and recreate with proper WITH CHECK\nDROP POLICY IF EXISTS \"Users can update their own scripts\" ON public.scripts;\n\n-- Create new policy that properly handles soft deletes\nCREATE POLICY \"Users can update their own scripts\" \nON public.scripts \nFOR UPDATE \nUSING (auth.uid() = user_id)\nWITH CHECK (auth.uid() = user_id);\n\n-- Ensure the policy allows setting deleted_at field\n-- The WITH CHECK clause ensures the updated row still belongs to the user",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250829152330_dbb38419-7324-4a3d-9103-e1d4635ba39b.sql",
//   "contents": "-- Create a SECURITY DEFINER function to soft-delete scripts owned by the current user\nCREATE OR REPLACE FUNCTION public.soft_delete_script(p_script_id uuid)\nRETURNS boolean\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path TO public, pg_temp\nAS $$\nDECLARE\n  rows_affected integer;\nBEGIN\n  UPDATE public.scripts\n  SET deleted_at = now(),\n      updated_at = now()\n  WHERE id = p_script_id\n    AND user_id = auth.uid();\n\n  GET DIAGNOSTICS rows_affected = ROW_COUNT;\n  RETURN rows_affected \u003e 0;\nEND;\n$$;\n\n-- Restrict execute and grant to authenticated users only\nREVOKE ALL ON FUNCTION public.soft_delete_script(uuid) FROM PUBLIC;\nGRANT EXECUTE ON FUNCTION public.soft_delete_script(uuid) TO authenticated;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250901224923_824e4cbb-0fc8-4403-b44d-dd62619b12e9.sql",
//   "contents": "\n-- 1) Enum for sender role\nDO $$ BEGIN\n  CREATE TYPE public.support_sender_role AS ENUM ('user', 'admin');\nEXCEPTION\n  WHEN duplicate_object THEN NULL;\nEND $$;\n\n-- 2) Conversations table\nCREATE TABLE IF NOT EXISTS public.support_conversations (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id uuid NOT NULL,\n  status text NOT NULL DEFAULT 'open', -- 'open' | 'closed'\n  last_message_at timestamptz NOT NULL DEFAULT now(),\n  created_at timestamptz NOT NULL DEFAULT now(),\n  updated_at timestamptz NOT NULL DEFAULT now()\n);\n\n-- Optional: unique open conversation per user (MVP allows multiple, but you can uncomment to enforce one open thread)\n-- CREATE UNIQUE INDEX IF NOT EXISTS uniq_open_conversation_per_user\n--   ON public.support_conversations (user_id)\n--   WHERE (status = 'open');\n\n-- 3) Messages table\nCREATE TABLE IF NOT EXISTS public.support_messages (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  conversation_id uuid NOT NULL REFERENCES public.support_conversations(id) ON DELETE CASCADE,\n  sender_role public.support_sender_role NOT NULL,\n  sender_id uuid, -- null for system messages if ever needed\n  content text NOT NULL,\n  created_at timestamptz NOT NULL DEFAULT now(),\n  read_at timestamptz\n);\n\n-- 4) Update last_message_at on insert trigger\nCREATE OR REPLACE FUNCTION public.update_conversation_last_message_at()\nRETURNS trigger\nLANGUAGE plpgsql\nAS $$\nBEGIN\n  UPDATE public.support_conversations\n    SET last_message_at = now(), updated_at = now()\n    WHERE id = NEW.conversation_id;\n  RETURN NEW;\nEND;\n$$;\n\nDROP TRIGGER IF EXISTS trg_update_conversation_last_message_at ON public.support_messages;\nCREATE TRIGGER trg_update_conversation_last_message_at\nAFTER INSERT ON public.support_messages\nFOR EACH ROW\nEXECUTE FUNCTION public.update_conversation_last_message_at();\n\n-- 5) Enable RLS\nALTER TABLE public.support_conversations ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.support_messages ENABLE ROW LEVEL SECURITY;\n\n-- 6) Policies for conversations\n-- Users can view their own conversations; admins can view all\nCREATE POLICY \"Users can view their own conversations\"\n  ON public.support_conversations\n  FOR SELECT\n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Admins can view all conversations\"\n  ON public.support_conversations\n  FOR SELECT\n  USING (has_role(auth.uid(), 'admin'::app_role));\n\n-- Users can create their own conversations\nCREATE POLICY \"Users can create their own conversations\"\n  ON public.support_conversations\n  FOR INSERT\n  WITH CHECK (auth.uid() = user_id);\n\n-- Users can update their own conversations (e.g., close); admins can update all\nCREATE POLICY \"Users can update their own conversations\"\n  ON public.support_conversations\n  FOR UPDATE\n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Admins can update all conversations\"\n  ON public.support_conversations\n  FOR UPDATE\n  USING (has_role(auth.uid(), 'admin'::app_role));\n\n-- Admins can delete conversations (optional)\nCREATE POLICY \"Admins can delete conversations\"\n  ON public.support_conversations\n  FOR DELETE\n  USING (has_role(auth.uid(), 'admin'::app_role));\n\n-- 7) Policies for messages\n-- Users can see messages in their conversations; admins can see all\nCREATE POLICY \"Users can view messages in their conversations\"\n  ON public.support_messages\n  FOR SELECT\n  USING (\n    EXISTS (\n      SELECT 1\n      FROM public.support_conversations c\n      WHERE c.id = support_messages.conversation_id\n        AND c.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Admins can view all messages\"\n  ON public.support_messages\n  FOR SELECT\n  USING (has_role(auth.uid(), 'admin'::app_role));\n\n-- Users can post messages in their conversations\nCREATE POLICY \"Users can insert messages in their conversations\"\n  ON public.support_messages\n  FOR INSERT\n  WITH CHECK (\n    sender_role = 'user'\n    AND sender_id = auth.uid()\n    AND EXISTS (\n      SELECT 1\n      FROM public.support_conversations c\n      WHERE c.id = support_messages.conversation_id\n        AND c.user_id = auth.uid()\n    )\n  );\n\n-- Admins can post messages in any conversation\nCREATE POLICY \"Admins can insert messages in any conversation\"\n  ON public.support_messages\n  FOR INSERT\n  WITH CHECK (\n    sender_role = 'admin'\n    AND has_role(auth.uid(), 'admin'::app_role)\n  );\n\n-- Admins can update/delete any message (optional)\nCREATE POLICY \"Admins can update any message\"\n  ON public.support_messages\n  FOR UPDATE\n  USING (has_role(auth.uid(), 'admin'::app_role));\n\nCREATE POLICY \"Admins can delete any message\"\n  ON public.support_messages\n  FOR DELETE\n  USING (has_role(auth.uid(), 'admin'::app_role));\n\n-- 8) Realtime configuration (so inserts stream to clients)\n-- Ensure full row data for realtime\nALTER TABLE public.support_messages REPLICA IDENTITY FULL;\nALTER TABLE public.support_conversations REPLICA IDENTITY FULL;\n\n-- Add tables to realtime publication (safe if repeated)\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_publication_tables\n    WHERE pubname = 'supabase_realtime' AND schemaname = 'public' AND tablename = 'support_messages'\n  ) THEN\n    ALTER PUBLICATION supabase_realtime ADD TABLE public.support_messages;\n  END IF;\n\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_publication_tables\n    WHERE pubname = 'supabase_realtime' AND schemaname = 'public' AND tablename = 'support_conversations'\n  ) THEN\n    ALTER PUBLICATION supabase_realtime ADD TABLE public.support_conversations;\n  END IF;\nEND\n$$;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250901230550_9cbe3b73-8a0f-4d06-a963-0c4230569f6e.sql",
//   "contents": "\n-- Grant 'admin' role to the specified email (case-insensitive)\ninsert into public.user_roles (user_id, role)\nselect u.id, 'admin'::app_role\nfrom auth.users u\nwhere lower(u.email) = lower('Will@Actorwillroberts.com')\non conflict (user_id, role) do nothing;\n\n-- Verify the role assignment\nselect u.email, r.role\nfrom auth.users u\nleft join public.user_roles r on r.user_id = u.id\nwhere lower(u.email) = lower('Will@Actorwillroberts.com');\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250902001846_b0089c39-3566-4fc4-a98c-1e37dabf7c48.sql",
//   "contents": "-- Clear existing coaches and add Rick and Sasha\nDELETE FROM coaches;\n\n-- Insert Rick as the first coach\nINSERT INTO coaches (name, slug, bio, highlights, email, photo_url, active) \nVALUES (\n  'Rick',\n  'rick',\n  'Professional voice coach and studio expert with years of experience helping actors develop their vocal skills and studio presence.',\n  ARRAY['Voice Over Coaching', 'Studio Recording', 'Performance Direction'],\n  'rick@myauditionai.com',\n  '/coaches/rick.png',\n  true\n);\n\n-- Insert Sasha Knopf as the second coach  \nINSERT INTO coaches (name, slug, bio, highlights, email, photo_url, active)\nVALUES (\n  'Sasha Knopf',\n  'sasha-knopf', \n  'Through KNOPFoto, Knopf offers both headshot photography and acting coaching. She works with actors at all levels to help them find their voice, sharpen their craft, and secure roles. Her experience as an actor allows her to guide others who are in front of the camera, chasing their dreams. Knopf''s diverse background informs her coaching style: She is a graduate of NYU''s Tisch School of the Arts and the Circle in the Square conservatory program. She has worked alongside renowned actors like Danny DeVito, Christian Slater, and Gwyneth Paltrow. She won multiple \"Best Actress\" awards for her performance in the indie comedy Expiration Date. Knopf was a member of the stand-up troupe The Convicts of Comedy, which sharpened her timing and improvisational skills. For over a decade, she has managed her photography and coaching business, KNOPFoto.',\n  ARRAY['Acting Coaching', 'Headshot Photography', 'NYU Tisch Graduate', 'Award-Winning Actress', 'Stand-up Comedy'],\n  'sasha@knopfoto.com',\n  '/coaches/sasha-knopf.png',\n  true\n);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250902230848_05bf4634-2f00-4399-9314-9439c102c416.sql",
//   "contents": "-- Restrict public access to photographers sensitive data and add a safe public RPC\n\n-- Drop existing public read policy if it exists\nDO $$\nBEGIN\n  IF EXISTS (\n    SELECT 1 FROM pg_policies \n    WHERE schemaname = 'public' \n      AND tablename = 'photographers' \n      AND policyname = 'Anyone can view active photographers'\n  ) THEN\n    DROP POLICY \"Anyone can view active photographers\" ON public.photographers;\n  END IF;\nEND$$;\n\n-- Allow only authenticated users to select from photographers directly\nCREATE POLICY \"Authenticated can view active photographers\"\nON public.photographers\nFOR SELECT\nTO authenticated\nUSING (active = true);\n\n-- Public-safe RPC that returns photographers WITHOUT email/phone\nCREATE OR REPLACE FUNCTION public.get_public_photographers(limit_count integer DEFAULT 4)\nRETURNS TABLE(\n  id uuid,\n  name text,\n  business_name text,\n  website text,\n  instagram text,\n  city text,\n  state text,\n  country text,\n  specialties text[],\n  price_range text,\n  portfolio_url text,\n  bio text,\n  rating numeric,\n  total_reviews integer,\n  verified boolean\n)\nLANGUAGE sql\nSTABLE\nSECURITY DEFINER\nSET search_path TO 'public', 'pg_temp'\nAS $$\n  SELECT\n    p.id,\n    p.name,\n    p.business_name,\n    p.website,\n    p.instagram,\n    p.city,\n    p.state,\n    p.country,\n    p.specialties,\n    p.price_range,\n    p.portfolio_url,\n    p.bio,\n    p.rating,\n    p.total_reviews,\n    p.verified\n  FROM public.photographers p\n  WHERE p.active = true\n  ORDER BY p.rating DESC NULLS LAST, p.created_at DESC\n  LIMIT limit_count;\n$$;\n\n-- Permit anonymous and authenticated roles to execute the RPC\nGRANT EXECUTE ON FUNCTION public.get_public_photographers(integer) TO anon, authenticated;",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250903010135_4e5609ef-9002-4f23-917b-60254221441b.sql",
//   "contents": "-- Create headshot_rulesets table to store evaluation rules\nCREATE TABLE public.headshot_rulesets (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  version TEXT NOT NULL UNIQUE,\n  metadata JSONB NOT NULL DEFAULT '{}'::jsonb,\n  enums JSONB NOT NULL DEFAULT '{}'::jsonb,\n  platform_specs JSONB NOT NULL DEFAULT '{}'::jsonb,\n  rules_global JSONB NOT NULL DEFAULT '{}'::jsonb,\n  style_tracks JSONB NOT NULL DEFAULT '{}'::jsonb,\n  persona_tracks JSONB NOT NULL DEFAULT '{}'::jsonb,\n  checklists JSONB NOT NULL DEFAULT '{}'::jsonb,\n  scoring JSONB NOT NULL DEFAULT '{}'::jsonb,\n  evaluation_io JSONB NOT NULL DEFAULT '{}'::jsonb,\n  ui_copy_snippets JSONB NOT NULL DEFAULT '{}'::jsonb,\n  is_active BOOLEAN NOT NULL DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Enable RLS\nALTER TABLE public.headshot_rulesets ENABLE ROW LEVEL SECURITY;\n\n-- Create policies\nCREATE POLICY \"Public can view active rulesets\" \nON public.headshot_rulesets \nFOR SELECT \nUSING (is_active = true);\n\nCREATE POLICY \"Admins can manage rulesets\" \nON public.headshot_rulesets \nFOR ALL \nUSING (has_role(auth.uid(), 'admin'::app_role))\nWITH CHECK (has_role(auth.uid(), 'admin'::app_role));\n\n-- Create trigger for automatic timestamp updates\nCREATE TRIGGER update_headshot_rulesets_updated_at\nBEFORE UPDATE ON public.headshot_rulesets\nFOR EACH ROW\nEXECUTE FUNCTION public.update_updated_at_column();\n\n-- Insert the provided ruleset (version 1.1)\nINSERT INTO public.headshot_rulesets (\n  version, \n  metadata, \n  enums, \n  platform_specs, \n  rules_global, \n  style_tracks, \n  persona_tracks, \n  checklists, \n  scoring, \n  evaluation_io, \n  ui_copy_snippets\n) VALUES (\n  '1.1',\n  '{\n    \"version\": \"1.1\",\n    \"last_updated\": \"2025-09-02\",\n    \"intended_use\": \"Headshot evaluator rules for actors (commercial + theatrical TV/film)\",\n    \"tracks\": [\"commercial\", \"theatrical\"]\n  }'::jsonb,\n  '{\n    \"lighting_styles\": [\"soft_even\", \"directional_modeled\", \"high_key\", \"low_key\"],\n    \"background_styles\": [\"studio_solid\", \"subtle_textured\", \"environmental_shallow\"],\n    \"palettes\": {\n      \"light_neutrals\": [\"off_white\", \"stone\", \"pale_gray\", \"sand\"],\n      \"mid_neutrals\": [\"heather_gray\", \"taupe\", \"olive_gray\"],\n      \"dark_neutrals\": [\"charcoal\", \"navy\", \"deep_gray\", \"espresso\"],\n      \"friendly_colors\": [\"soft_blue\", \"teal\", \"sage\", \"coral\", \"muted_yellow\"],\n      \"rich_tones\": [\"burgundy\", \"forest_green\", \"ink_blue\", \"aubergine\"]\n    }\n  }'::jsonb,\n  '{\n    \"print_standard\": {\n      \"size_inches\": [8, 10],\n      \"color_mode\": \"color_only\",\n      \"dpi_min\": 300,\n      \"name_on_front\": true\n    },\n    \"actors_access\": {\n      \"optimal_size_px\": [500, 700],\n      \"slateshot_supported\": true,\n      \"notes\": \"Upload multiple looks; SlateShots are ~7s personality clips tied to a photo.\"\n    },\n    \"casting_networks\": {\n      \"file_types\": [\"jpg\", \"jpeg\", \"png\", \"gif\"],\n      \"max_file_size_mb\": 30,\n      \"min_dimensions_px\": [360, 360],\n      \"notes\": \"Larger uploads are auto-downscaled.\"\n    }\n  }'::jsonb,\n  '{\n    \"technical\": {\n      \"focus\": \"eyes_tack_sharp\",\n      \"exposure\": \"skin_tones_correct_no_clipping\",\n      \"white_balance\": \"neutral_true_to_life\",\n      \"color_space\": \"sRGB\",\n      \"noise\": \"low\",\n      \"crop\": \"eyes_on_upper_third; allow hair crop; avoid chin chop\",\n      \"orientation\": \"vertical_preferred\",\n      \"duplicates\": \"avoid_near_duplicates_in_final_selects\"\n    },\n    \"background\": {\n      \"style\": \"simple_slightly_defocused\",\n      \"contrast_goal\": \"subject_separates_from_background\",\n      \"allowed\": [\"studio_solid\", \"subtle_textured\", \"environmental_shallow\"],\n      \"avoid\": [\"busy_patterns\", \"distinct_landmarks\", \"clutter\", \"high-contrast_distractors\"]\n    },\n    \"retouching\": {\n      \"philosophy\": \"minimally_corrective_not_transformative\",\n      \"do\": [\n        \"temporary_blemish_cleanup\",\n        \"stray_hair_taming\",\n        \"minor_under_eye_evening\",\n        \"lint_dust_removal\",\n        \"exposure_color_consistency\"\n      ],\n      \"dont\": [\n        \"skin_blur_plastic_look\",\n        \"reshape_face_or_body\",\n        \"over_whiten_eyes_or_teeth\",\n        \"heavy_filters_or_color_trends\",\n        \"ai_face_swap_or_age_reduction\"\n      ]\n    },\n    \"wardrobe_general\": {\n      \"do\": [\n        \"solids_or_subtle_textures\",\n        \"flattering_necklines\",\n        \"tailored_fit\",\n        \"light_layering (jacket/cardigan)\",\n        \"avoid_logos_and_large_graphics\"\n      ],\n      \"dont\": [\n        \"high_contrast_stripes_moire_risks\",\n        \"busy_checks\",\n        \"wrinkled_or_high_shine_fabrics\",\n        \"on_the_nose_costumes\"\n      ]\n    },\n    \"grooming_makeup\": {\n      \"makeup\": \"camera_ready_natural_finish_reduce_shine_keep_texture\",\n      \"facial_hair\": \"choose_clean_or_groomed; maintain consistency across submissions\",\n      \"hair\": \"present_primary_real_world_default; capture alt_if_often_change\",\n      \"glasses\": \"shoot_with_if_worn_regularly; use_anti_glare\"\n    },\n    \"delivery_package\": {\n      \"must_have\": [\n        \"color_corrected_master_full_res\",\n        \"web_ready_export_per_platform\",\n        \"optional_bw_for_marketing_only\",\n        \"clearly_labeled_filenames_or_contact_sheet\"\n      ],\n      \"filename_convention\": \"Lastname_Firstname_LookType_Track_Color_YYYY.ext\",\n      \"embedded_metadata\": [\"name\", \"contact_or_rep\", \"date\"]\n    }\n  }'::jsonb,\n  '{\n    \"commercial\": {\n      \"purpose\": \"approachability_market_friendly_bookable_everyday\",\n      \"expression_primary\": [\"warm_smile\", \"open_eyes\", \"friendly_energy\"],\n      \"expression_alternates\": [\"soft_smile\", \"confident_neutral_with_warmth\"],\n      \"lighting\": \"soft_even\",\n      \"background_palette\": [\"light_neutrals\", \"friendly_colors\"],\n      \"wardrobe_palette\": [\"friendly_colors\", \"light_neutrals\", \"mid_neutrals\"],\n      \"composition\": [\n        \"tight_to_medium_crop\",\n        \"bright_catchlights\",\n        \"limit_heavy_shadows\"\n      ],\n      \"dos\": [\n        \"project_trustworthiness_energy\",\n        \"show_personality_without_props\",\n        \"bring_2_3_simple_top_changes\"\n      ],\n      \"donts\": [\n        \"overdramatic_pose_or_squint\",\n        \"moody_color_grades\",\n        \"busy_backgrounds_or_logos\"\n      ]\n    },\n    \"theatrical\": {\n      \"purpose\": \"story_depth_range_for_tv_film_stage\",\n      \"expression_primary\": [\"grounded_neutral\", \"subtle_intensity_in_eyes\"],\n      \"expression_alternates\": [\"hint_of_edge\", \"thoughtful_vulnerability\"],\n      \"lighting\": \"directional_modeled\",\n      \"background_palette\": [\"mid_neutrals\", \"dark_neutrals\"],\n      \"wardrobe_palette\": [\"rich_tones\", \"dark_neutrals\", \"mid_neutrals\"],\n      \"composition\": [\n        \"slightly_wider_ok\",\n        \"accept_intentional_shadow_depth\",\n        \"maintain_true_skin_tones\"\n      ],\n      \"dos\": [\n        \"micro_expression_variants\",\n        \"castable_types_without_costume\",\n        \"deliver_grounded_and_edgier_option\"\n      ],\n      \"donts\": [\n        \"smile_primary_across_all_frames\",\n        \"only_flat_even_light\",\n        \"over_stylized_color_grades\"\n      ]\n    }\n  }'::jsonb,\n  '{\n    \"notes\": \"Use with commercial/theatrical tracks to tune expression, palette, and micro-direction. Do NOT costume; suggest the lane.\",\n    \"personas\": [\n      {\n        \"id\": \"authority_command\",\n        \"label\": \"Authority / Command (Detective, Judge, Military, Executive)\",\n        \"track_bias\": \"theatrical\",\n        \"expression\": [\"calm_neutral\", \"decisive_micro_tension_in_eyes\"],\n        \"lighting\": \"directional_modeled\",\n        \"wardrobe_suggestions\": [\"dark_neutrals\", \"rich_tones\", \"structured_layers (blazer, collared top)\"],\n        \"background\": [\"dark_neutrals\", \"mid_neutrals\"],\n        \"grooming\": \"clean_edges; facial_hair_neatly_trimmed\",\n        \"microbeats\": [\"resolve\", \"assess\", \"subtle_concern\", \"decision\"],\n        \"deliver\": [\"one_grounded\", \"one_edge_intensity\"]\n      },\n      {\n        \"id\": \"everyday_neighbor\",\n        \"label\": \"Everyday Neighbor / Best Friend / Parent\",\n        \"track_bias\": \"commercial\",\n        \"expression\": [\"warm_smile\", \"soft_smile\", \"approachable_neutral\"],\n        \"lighting\": \"soft_even\",\n        \"wardrobe_suggestions\": [\"friendly_colors\", \"light_neutrals\", \"soft_layers (henley, knit)\"],\n        \"background\": [\"light_neutrals\", \"friendly_colors\"],\n        \"grooming\": \"natural; minimal retouch\",\n        \"microbeats\": [\"welcome\", \"listen\", \"encourage\"],\n        \"deliver\": [\"two_subtle_smile_variants\", \"one_neutral_with_warmth\"]\n      },\n      {\n        \"id\": \"credible_pro\",\n        \"label\": \"Doctor / Lawyer / Tech Lead / Educator\",\n        \"track_bias\": \"theatrical\",\n        \"expression\": [\"smart_neutral\", \"reassuring_confidence\"],\n        \"lighting\": \"directional_modeled (soft key, gentle fill)\",\n        \"wardrobe_suggestions\": [\"mid_neutrals\", \"rich_tones\", \"clean_lines\"],\n        \"background\": [\"mid_neutrals\"],\n        \"grooming\": \"polished_not_flashy\",\n        \"microbeats\": [\"explain\", \"consider\", \"resolve\"],\n        \"deliver\": [\"neutral_confident\", \"hint_smile_reassurance\"]\n      },\n      {\n        \"id\": \"antagonist_edge\",\n        \"label\": \"Antagonist / Complicated Villain / Noir Edge\",\n        \"track_bias\": \"theatrical\",\n        \"expression\": [\"contained_intensity\", \"micro_smirk\", \"stoic\"],\n        \"lighting\": \"directional_modeled or low_key\",\n        \"wardrobe_suggestions\": [\"dark_neutrals\", \"ink_blue\", \"textured_layers\"],\n        \"background\": [\"dark_neutrals\"],\n        \"grooming\": \"intentional_edges; keep texture\",\n        \"microbeats\": [\"withhold\", \"challenge\", \"threaten (subtle)\"],\n        \"deliver\": [\"one_low_key\", \"one_directional_modeled\"]\n      },\n      {\n        \"id\": \"comedic_dad_buddy\",\n        \"label\": \"Comedic Dad / Buddy / Boss-With-A-Heart\",\n        \"track_bias\": \"commercial\",\n        \"expression\": [\"bright_smile\", \"amused_neutral\", \"eyebrow_pop\"],\n        \"lighting\": \"soft_even or high_key\",\n        \"wardrobe_suggestions\": [\"friendly_colors\", \"mid_neutrals\", \"casual_layers\"],\n        \"background\": [\"light_neutrals\", \"friendly_colors\"],\n        \"grooming\": \"tidy; allow laugh_lines\",\n        \"microbeats\": [\"pitch_a_joke (subtle)\", \"oops\", \"reassure\"],\n        \"deliver\": [\"two_smile_levels\", \"one_neutral_amused\"]\n      },\n      {\n        \"id\": \"blue_collar_grit\",\n        \"label\": \"Blue-Collar Grit / First Responder / Ranch Hand\",\n        \"track_bias\": \"theatrical\",\n        \"expression\": [\"stoic_resolve\", \"soft_earnest\"],\n        \"lighting\": \"directional_modeled (more texture)\",\n        \"wardrobe_suggestions\": [\"mid_neutrals\", \"rich_tones (forest, ink)\", \"sturdy_textures (no logos)\"],\n        \"background\": [\"mid_neutrals\", \"dark_neutrals\"],\n        \"grooming\": \"natural_texture; avoid glossy finish\",\n        \"microbeats\": [\"shoulder_the_load\", \"quiet_compassion\"],\n        \"deliver\": [\"grounded_neutral\", \"vulnerable_subtle\"]\n      },\n      {\n        \"id\": \"western_classic\",\n        \"label\": \"Western Classic / Frontier Authority (modern-adjacent)\",\n        \"track_bias\": \"theatrical\",\n        \"expression\": [\"steady_gaze\", \"measured_neutral\"],\n        \"lighting\": \"directional_modeled (sun-kissed feel acceptable without heavy grade)\",\n        \"wardrobe_suggestions\": [\"dark_neutrals\", \"rich_tones\", \"subtle_rugged_texture (no overt costume)\"],\n        \"background\": [\"mid_neutrals\", \"environmental_shallow (wood/earth tones)\"],\n        \"grooming\": \"trimmed_facial_hair_ok; keep authenticity\",\n        \"microbeats\": [\"watchful\", \"resolve\", \"protect\"],\n        \"deliver\": [\"one_grounded\", \"one_edge_intensity\"]\n      }\n    ]\n  }'::jsonb,\n  '{\n    \"session_prep\": [\n      \"confirm_target_roles_and_types_with_rep\",\n      \"wardrobe_pull_by_palette (commercial vs theatrical)\",\n      \"haircut_trim_5_7_days_prior\",\n      \"sleep_hydrate_reduce_alcohol_day_before\",\n      \"bring_blotting_papers_lip_balm\"\n    ],\n    \"shoot_day\": [\n      \"test_shot_check_eyes_focus_catchlights\",\n      \"rotate_tops_every_15_20_minutes\",\n      \"review_on_set_for_focus_expression\",\n      \"capture_with_glasses_if_applicable\",\n      \"shoot_both_commercial_and_theatrical_sets\"\n    ],\n    \"post\": [\n      \"narrow_to_3_5_core_selects_covering_ranges\",\n      \"apply_minimal_retouch\",\n      \"export_per_platform_specs\",\n      \"embed_metadata\",\n      \"update_profiles_consistently\"\n    ]\n  }'::jsonb,\n  '{\n    \"weights\": {\n      \"eyes_in_focus_and_engaged\": 0.22,\n      \"expression_matches_track_persona\": 0.18,\n      \"lighting_matches_track_persona\": 0.14,\n      \"background_simple_with_contrast\": 0.10,\n      \"wardrobe_palette_match\": 0.10,\n      \"retouching_minimal_natural\": 0.10,\n      \"technical_clean_wb_exposure_noise\": 0.08,\n      \"crop_and_composition\": 0.05,\n      \"file_prep_correct_specs\": 0.03\n    },\n    \"pass_threshold\": 0.75,\n    \"flags\": {\n      \"over_editing_detected\": \"hard_fail\",\n      \"busy_background_or_logo\": \"warn\",\n      \"mismatch_track_or_persona\": \"warn\"\n    }\n  }'::jsonb,\n  '{\n    \"required_inputs\": [\n      \"image\",\n      \"declared_track (commercial|theatrical)\",\n      \"optional_persona_id\",\n      \"platform_target (actors_access|casting_networks|print|other)\"\n    ],\n    \"optional_manual_tags\": [\n      \"wardrobe_color_family\",\n      \"background_tone\",\n      \"smile_level_0_3\",\n      \"lighting_guess (soft_even|directional_modeled|high_key|low_key)\"\n    ],\n    \"expected_outputs\": {\n      \"score_overall_0_1\": \"float\",\n      \"scores_by_dimension\": \"object_matching_weights\",\n      \"track_alignment\": \"pass|warn|fail\",\n      \"persona_alignment\": \"pass|warn|n/a\",\n      \"flags_triggered\": [\"array_of_strings\"],\n      \"recommendations_top3\": [\"string\", \"string\", \"string\"]\n    }\n  }'::jsonb,\n  '{\n    \"why_flag_overediting\": \"Casting wants to meet the person in the photo. Keep skin texture and natural features.\",\n    \"why_two_tracks\": \"Commercial sells approachability; Theatrical sells story depth—different lighting, palette, and energy.\",\n    \"persona_tip\": \"Personas fine-tune the feel without costuming. Suggest the lane; don''t dress the character.\"\n  }'::jsonb\n);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250904045159_8c8eac14-6234-4161-9875-d58238f44854.sql",
//   "contents": "-- Create testimonials table for marquee display\nCREATE TABLE public.testimonials (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  name TEXT NOT NULL,\n  title TEXT,\n  company TEXT,\n  content TEXT NOT NULL,\n  avatar_url TEXT,\n  rating INTEGER CHECK (rating \u003e= 1 AND rating \u003c= 5),\n  is_active BOOLEAN NOT NULL DEFAULT true,\n  display_order INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Enable RLS\nALTER TABLE public.testimonials ENABLE ROW LEVEL SECURITY;\n\n-- Public can view active testimonials\nCREATE POLICY \"Public can view active testimonials\" \nON public.testimonials \nFOR SELECT \nUSING (is_active = true);\n\n-- Admins can manage all testimonials\nCREATE POLICY \"Admins can manage testimonials\" \nON public.testimonials \nFOR ALL \nUSING (has_role(auth.uid(), 'admin'::app_role))\nWITH CHECK (has_role(auth.uid(), 'admin'::app_role));\n\n-- Add trigger for updated_at\nCREATE TRIGGER update_testimonials_updated_at\nBEFORE UPDATE ON public.testimonials\nFOR EACH ROW\nEXECUTE FUNCTION public.update_updated_at_column();\n\n-- Insert some sample testimonials\nINSERT INTO public.testimonials (name, title, company, content, rating, display_order) VALUES\n('Sarah Johnson', 'Lead Actor', 'Broadway Productions', 'This platform revolutionized my audition prep. The AI coaching gave me insights I never had before.', 5, 1),\n('Michael Chen', 'Voice Actor', 'DreamWorks Animation', 'The teleprompter feature is incredible. It made my self-taping so much more professional.', 5, 2),\n('Emma Rodriguez', 'Theater Director', 'Lincoln Center', 'I recommend this to all my actors. The script analysis is spot-on and saves hours of prep time.', 5, 3),\n('David Thompson', 'Casting Director', 'Warner Bros', 'Actors who use this platform come more prepared. It shows in their performances.', 5, 4),\n('Lisa Park', 'Acting Coach', 'Stella Adler Studio', 'The methodology breakdown is exactly what actors need. It bridges theory and practice beautifully.', 5, 5),\n('James Wilson', 'Film Actor', 'Independent Films', 'Finally, a tool that understands what actors actually need. Game-changer for self-tapes.', 5, 6);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "supabase/migrations/20250904045353_b3df8332-188f-4725-87a4-c5804abb22f0.sql",
//   "contents": "-- Create testimonials table for marquee display\nCREATE TABLE public.testimonials (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  name TEXT NOT NULL,\n  title TEXT,\n  company TEXT,\n  content TEXT NOT NULL,\n  avatar_url TEXT,\n  rating INTEGER CHECK (rating \u003e= 1 AND rating \u003c= 5),\n  is_active BOOLEAN NOT NULL DEFAULT true,\n  display_order INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Enable RLS\nALTER TABLE public.testimonials ENABLE ROW LEVEL SECURITY;\n\n-- Public can view active testimonials\nCREATE POLICY \"Public can view active testimonials\" \nON public.testimonials \nFOR SELECT \nUSING (is_active = true);\n\n-- Admins can manage all testimonials\nCREATE POLICY \"Admins can manage testimonials\" \nON public.testimonials \nFOR ALL \nUSING (has_role(auth.uid(), 'admin'::app_role))\nWITH CHECK (has_role(auth.uid(), 'admin'::app_role));\n\n-- Add trigger for updated_at\nCREATE TRIGGER update_testimonials_updated_at\nBEFORE UPDATE ON public.testimonials\nFOR EACH ROW\nEXECUTE FUNCTION public.update_updated_at_column();\n\n-- Insert some sample testimonials\nINSERT INTO public.testimonials (name, title, company, content, rating, display_order) VALUES\n('Sarah Johnson', 'Lead Actor', 'Broadway Productions', 'This platform revolutionized my audition prep. The AI coaching gave me insights I never had before.', 5, 1),\n('Michael Chen', 'Voice Actor', 'DreamWorks Animation', 'The teleprompter feature is incredible. It made my self-taping so much more professional.', 5, 2),\n('Emma Rodriguez', 'Theater Director', 'Lincoln Center', 'I recommend this to all my actors. The script analysis is spot-on and saves hours of prep time.', 5, 3),\n('David Thompson', 'Casting Director', 'Warner Bros', 'Actors who use this platform come more prepared. It shows in their performances.', 5, 4),\n('Lisa Park', 'Acting Coach', 'Stella Adler Studio', 'The methodology breakdown is exactly what actors need. It bridges theory and practice beautifully.', 5, 5),\n('James Wilson', 'Film Actor', 'Independent Films', 'Finally, a tool that understands what actors actually need. Game-changer for self-tapes.', 5, 6);",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "tailwind.config.ts",
//   "contents": "import type { Config } from \"tailwindcss\";\n\nexport default {\n\tdarkMode: [\"class\"],\n\tcontent: [\n\t\t\"./pages/**/*.{ts,tsx}\",\n\t\t\"./components/**/*.{ts,tsx}\",\n\t\t\"./app/**/*.{ts,tsx}\",\n\t\t\"./src/**/*.{ts,tsx}\",\n\t],\n\tprefix: \"\",\n\ttheme: {\n\t\tcontainer: {\n\t\t\tcenter: true,\n\t\t\tpadding: '2rem',\n\t\t\tscreens: {\n\t\t\t\t'2xl': '1400px'\n\t\t\t}\n\t\t},\n\t\textend: {\n\t\t\tcolors: {\n\t\t\t\tborder: 'hsl(var(--border))',\n\t\t\t\tinput: 'hsl(var(--input))',\n\t\t\t\tring: 'hsl(var(--ring))',\n\t\t\t\tbackground: 'hsl(var(--background))',\n\t\t\t\tforeground: 'hsl(var(--foreground))',\n\t\t\t\tprimary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--primary))',\n\t\t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n\t\t\t\t},\n\t\t\t\tsecondary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n\t\t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n\t\t\t\t},\n\t\t\t\tdestructive: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n\t\t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n\t\t\t\t},\n\t\t\t\tmuted: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--muted))',\n\t\t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n\t\t\t\t},\n\t\t\t\taccent: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--accent))',\n\t\t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n\t\t\t\t},\n\t\t\t\tpopover: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--popover))',\n\t\t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n\t\t\t\t},\n\t\t\t\tcard: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--card))',\n\t\t\t\t\tforeground: 'hsl(var(--card-foreground))'\n\t\t\t\t},\n\t\t\t\tsidebar: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--sidebar-background))',\n\t\t\t\t\tforeground: 'hsl(var(--sidebar-foreground))',\n\t\t\t\t\tprimary: 'hsl(var(--sidebar-primary))',\n\t\t\t\t\t'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n\t\t\t\t\taccent: 'hsl(var(--sidebar-accent))',\n\t\t\t\t\t'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n\t\t\t\t\tborder: 'hsl(var(--sidebar-border))',\n\t\t\t\t\tring: 'hsl(var(--sidebar-ring))'\n\t\t\t\t},\n\t\t\t\t'profile-burgundy': 'hsl(var(--profile-burgundy))',\n\t\t\t\t'teleprompter': {\n\t\t\t\t\t'bg-black': 'hsl(var(--teleprompter-black))',\n\t\t\t\t\t'bg-white': 'hsl(var(--teleprompter-white))',\n\t\t\t\t\t'bg-green': 'hsl(var(--teleprompter-green))',\n\t\t\t\t\t'bg-blue': 'hsl(var(--teleprompter-blue))',\n\t\t\t\t\t'text-black': 'hsl(var(--teleprompter-text-black))',\n\t\t\t\t\t'text-white': 'hsl(var(--teleprompter-text-white))',\n\t\t\t\t\t'text-yellow': 'hsl(var(--teleprompter-text-yellow))',\n\t\t\t\t\t'text-red': 'hsl(var(--teleprompter-text-red))'\n\t\t\t\t},\n\t\t\t\t'marketing': {\n\t\t\t\t\t'text-dark': 'hsl(var(--marketing-text-dark))',\n\t\t\t\t\t'cta-bg': 'hsl(var(--marketing-cta-bg))'\n\t\t\t\t}\n\t\t\t},\n\t\t\tborderRadius: {\n\t\t\t\tlg: 'var(--radius)',\n\t\t\t\tmd: 'calc(var(--radius) - 2px)',\n\t\t\t\tsm: 'calc(var(--radius) - 4px)'\n\t\t\t},\n\t\t\tkeyframes: {\n\t\t\t\t'accordion-down': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'accordion-up': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tanimation: {\n\t\t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n\t\t\t\t'accordion-up': 'accordion-up 0.2s ease-out'\n\t\t\t}\n\t\t}\n\t},\n\tplugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "tsconfig.app.json",
//   "contents": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": false,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n    \"noImplicitAny\": false,\n    \"noFallthroughCasesInSwitch\": false,\n\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"]\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "tsconfig.json",
//   "contents": "{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ],\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    },\n    \"noImplicitAny\": false,\n    \"noUnusedParameters\": false,\n    \"skipLibCheck\": true,\n    \"allowJs\": true,\n    \"noUnusedLocals\": false,\n    \"strictNullChecks\": false\n  }\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "tsconfig.node.json",
//   "contents": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"vite.config.ts\"]\n}\n",
//   "binary": false,
//   "sizeExceeded": false
// },
// {
//   "name": "vite.config.ts",
//   "contents": "import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"path\";\nimport { componentTagger } from \"lovable-tagger\";\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }) =\u003e ({\n  base: '/',\n  server: {\n    host: \"::\",\n    port: 8080,\n  },\n  plugins: [\n    react(),\n    mode === 'development' \u0026\u0026\n    componentTagger(),\n  ].filter(Boolean),\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n}));\n",
//   "binary": false,
//   "sizeExceeded": false
// }

// ];

// // Ensure array format
// const files = Array.isArray(data) ? data : [data];

// files.forEach(file => {
//   if (!file.contents) {
//     console.log(`⚠️ Skipped: ${file.name} (no contents)`);
//     return;
//   }

//   const filePath = path.join(process.cwd(), file.name);
//   fs.mkdirSync(path.dirname(filePath), { recursive: true });

//   if (file.binary) {
//     // decode base64 → binary
//     const buffer = Buffer.from(file.contents, "base64");
//     fs.writeFileSync(filePath, buffer);
//     console.log(`✅ Created binary file: ${file.name}`);
//   } else {
//     // normal text file
//     fs.writeFileSync(filePath, file.contents, "utf-8");
//     console.log(`✅ Created text file: ${file.name}`);
//   }
// });
