
import jsPDF from 'jspdf';

interface VideoAnalysisData {
  analysis: any;
  videoSubmission: any;
}

interface HeadshotAnalysisData {
  analysis: {
    id: string;
    image_url: string;
    headshot_type: string;
    overall_score: number;
    technical_score: number;
    professional_score: number;
    industry_score: number;
    detailed_feedback: {
      full_analysis: string;
      casting_types: string[];
      red_flags: string[];
      final_verdict: string;
    };
    improvement_suggestions: string[];
    created_at: string;
  };
}

export const generateAnalysisPDF = ({ analysis, videoSubmission }: VideoAnalysisData) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const margin = 20;
  let yPosition = 30;

  // Helper function to add text with word wrapping
  const addText = (text: string, x: number, y: number, options?: any) => {
    const lines = doc.splitTextToSize(text, pageWidth - 2 * margin);
    doc.text(lines, x, y, options);
    return y + (lines.length * 6);
  };

  // Header
  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  yPosition = addText('🎭 Actor App – Video Analysis Report', margin, yPosition);
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  yPosition = addText('Professional Self-Tape Evaluation', margin, yPosition + 5);
  
  // Add line separator
  doc.line(margin, yPosition + 5, pageWidth - margin, yPosition + 5);
  yPosition += 15;

  // Scene Performance Summary
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  yPosition = addText('🎬 Scene Performance Summary', margin, yPosition);
  yPosition += 5;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  const aiAnalysis = videoSubmission.ai_analysis;
  const overallScore = videoSubmission.evaluation_score;
  const performanceScore = aiAnalysis?.performance_score;
  const technicalScore = aiAnalysis?.technical_score;

  yPosition = addText(`Character Name: ${analysis.selected_character}`, margin, yPosition);
  yPosition = addText(`Acting Method: ${analysis.acting_method}`, margin, yPosition);
  yPosition = addText(`Overall Score: ${overallScore}/100`, margin, yPosition);
  yPosition += 5;

  // Objective Status
  const objectiveAchieved = performanceScore >= 75;
  yPosition = addText(`Objective Status: ${objectiveAchieved ? '✅ Achieved' : '❌ Not Achieved'}`, margin, yPosition);
  yPosition += 10;

  // Scene Notes
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  yPosition = addText('📝 Scene Notes:', margin, yPosition);
  yPosition += 5;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  const sceneNotes = aiAnalysis?.performance_feedback || [];
  sceneNotes.slice(0, 5).forEach((note: string) => {
    yPosition = addText(`• ${note}`, margin + 5, yPosition);
  });
  
  yPosition += 10;

  // Technical Self-Tape Review
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  yPosition = addText('🎥 Technical Self-Tape Review', margin, yPosition);
  yPosition += 5;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');

  const technicalNotes = aiAnalysis?.technical_feedback || [];
  technicalNotes.forEach((note: string) => {
    let category = 'General';
    if (note.toLowerCase().includes('lighting')) category = 'Lighting';
    else if (note.toLowerCase().includes('audio')) category = 'Audio';
    else if (note.toLowerCase().includes('camera')) category = 'Framing';
    else if (note.toLowerCase().includes('background')) category = 'Background';

    yPosition = addText(`${category}: ${note}`, margin, yPosition);
  });

  yPosition += 10;

  // Performance Scores
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  yPosition = addText('📊 Performance Scores', margin, yPosition);
  yPosition += 5;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  yPosition = addText(`Overall Performance: ${overallScore || 'N/A'}/100`, margin, yPosition);
  yPosition = addText(`Technical Quality: ${technicalScore || 'N/A'}/100`, margin, yPosition);
  yPosition = addText(`Acting Performance: ${performanceScore || 'N/A'}/100`, margin, yPosition);

  // Footer
  yPosition = doc.internal.pageSize.height - 20;
  doc.setFontSize(8);
  doc.setFont('helvetica', 'italic');
  const footerText = `Generated by AI Actor • ${new Date().toLocaleDateString()} • Professional Self-Tape Analysis`;
  doc.text(footerText, pageWidth / 2, yPosition, { align: 'center' });

  // Save the PDF
  const filename = `${analysis.selected_character}_Analysis_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(filename);
};

export const generateHeadshotAnalysisPDF = ({ analysis }: HeadshotAnalysisData) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const margin = 20;
  let yPosition = 30;

  // Helper function to add text with word wrapping
  const addText = (text: string, x: number, y: number, options?: any) => {
    const lines = doc.splitTextToSize(text, pageWidth - 2 * margin);
    doc.text(lines, x, y, options);
    return y + (lines.length * 6);
  };

  // Header
  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  yPosition = addText('📸 AI Actor – Professional Headshot Analysis', margin, yPosition);
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  yPosition = addText('Powered by Google Gemini Pro Vision', margin, yPosition + 5);
  
  // Add line separator
  doc.line(margin, yPosition + 5, pageWidth - margin, yPosition + 5);
  yPosition += 15;

  // Professional Analysis Summary
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  yPosition = addText('🎭 Professional Analysis Summary', margin, yPosition);
  yPosition += 5;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  yPosition = addText(`Headshot Type: ${analysis.headshot_type.charAt(0).toUpperCase() + analysis.headshot_type.slice(1)}`, margin, yPosition);
  yPosition = addText(`Analysis Date: ${new Date(analysis.created_at).toLocaleDateString()}`, margin, yPosition);
  yPosition += 5;

  // Score Breakdown
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  yPosition = addText('📊 Score Breakdown', margin, yPosition);
  yPosition += 5;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  yPosition = addText(`Overall Score: ${analysis.overall_score}/100`, margin, yPosition);
  yPosition = addText(`Technical Quality: ${analysis.technical_score}/100`, margin, yPosition);
  yPosition = addText(`Professional Standard: ${analysis.professional_score}/100`, margin, yPosition);
  yPosition = addText(`Industry Readiness: ${analysis.industry_score}/100`, margin, yPosition);
  yPosition += 10;

  // Casting Types
  if (analysis.detailed_feedback.casting_types?.length > 0) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    yPosition = addText('🎭 Suitable Casting Types:', margin, yPosition);
    yPosition += 5;

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    
    analysis.detailed_feedback.casting_types.forEach((type: string) => {
      yPosition = addText(`• ${type}`, margin + 5, yPosition);
    });
    
    yPosition += 10;
  }

  // Professional Verdict
  if (analysis.detailed_feedback.final_verdict) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    yPosition = addText('🎬 Professional Verdict:', margin, yPosition);
    yPosition += 5;

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    yPosition = addText(analysis.detailed_feedback.final_verdict, margin, yPosition);
    yPosition += 10;
  }

  // Check if we need a new page
  if (yPosition > 250) {
    doc.addPage();
    yPosition = 30;
  }

  // Improvement Suggestions
  if (analysis.improvement_suggestions?.length > 0) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    yPosition = addText('✨ Photographer Instructions:', margin, yPosition);
    yPosition += 5;

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    
    analysis.improvement_suggestions.slice(0, 8).forEach((suggestion: string) => {
      yPosition = addText(`• ${suggestion}`, margin + 5, yPosition);
      
      // Check if we need a new page
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 30;
      }
    });
    
    yPosition += 10;
  }

  // Areas of Concern
  if (analysis.detailed_feedback.red_flags?.length > 0) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    yPosition = addText('⚠️ Areas of Concern:', margin, yPosition);
    yPosition += 5;

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    
    analysis.detailed_feedback.red_flags.forEach((flag: string) => {
      yPosition = addText(`• ${flag}`, margin + 5, yPosition);
      
      // Check if we need a new page
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 30;
      }
    });
  }

  // Footer
  yPosition = doc.internal.pageSize.height - 20;
  doc.setFontSize(8);
  doc.setFont('helvetica', 'italic');
  const footerText = `Generated by AI Actor • ${new Date().toLocaleDateString()} • Professional Headshot Analysis`;
  doc.text(footerText, pageWidth / 2, yPosition, { align: 'center' });

  // Save the PDF
  const filename = `Headshot_Analysis_${analysis.headshot_type}_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(filename);
};
